{
  "address": "0x098eE3F2eCf6dD41cF5057875724cc134226A4fD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ExtendableBondAdmin",
          "name": "entrypoint_",
          "type": "address"
        },
        {
          "internalType": "contract IPancakePair",
          "name": "pairTokenAddress__CAKE_BUSD_",
          "type": "address"
        },
        {
          "internalType": "contract IPancakePair",
          "name": "pairTokenAddress__BUSD_DUET_",
          "type": "address"
        },
        {
          "internalType": "contract CakePool",
          "name": "pancakePool_",
          "type": "address"
        },
        {
          "internalType": "contract MasterChefV2",
          "name": "pancakeMasterChef_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "contract ExtendableBondedCake",
          "name": "eb_",
          "type": "address"
        }
      ],
      "name": "addressBook",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "underlyingToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "bondToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lpToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "bondFarmingPool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "bondLpFarmingPool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "multiRewardsMasterChef",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "bondFarmingPoolId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bondLpFarmingPoolId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "pancakePool",
              "type": "address"
            }
          ],
          "internalType": "struct ExtendableBondedCakeReader.AddressBook",
          "name": "book",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entrypoint",
      "outputs": [
        {
          "internalType": "contract ExtendableBondAdmin",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "groupName_",
          "type": "string"
        }
      ],
      "name": "extendableBondGroupInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "allEbStacked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ebCommonPriceAsUsd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duetSideAPR",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "underlyingSideAPR",
              "type": "uint256"
            }
          ],
          "internalType": "struct ExtendableBondedCakeReader.ExtendableBondGroupInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ExtendableBond",
          "name": "eb_",
          "type": "address"
        }
      ],
      "name": "extendableBondLpStakePackageUserInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "lpStake_underlyingStaked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lpStake_bondStaked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lpStake_lpStaked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lpStake_ebPendingRewards",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lpStake_lpClaimedRewards",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lpStake_bDuetPendingRewards",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lpStake_bDuetClaimedRewards",
              "type": "uint256"
            }
          ],
          "internalType": "struct ExtendableBondReader.ExtendableBondLpStakePackageUserInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ExtendableBond",
          "name": "eb_",
          "type": "address"
        }
      ],
      "name": "extendableBondPackagePublicInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "underlyingUsdPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bondUnderlyingPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "convertable",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "convertableFrom",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "convertableEnd",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "redeemable",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "redeemableFrom",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "redeemableEnd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "underlyingAPY",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "singleStake_totalStaked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "singleStake_bDuetAPR",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lpStake_totalStaked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lpStake_bDuetAPR",
              "type": "uint256"
            }
          ],
          "internalType": "struct ExtendableBondReader.ExtendableBondPackagePublicInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ExtendableBond",
          "name": "eb_",
          "type": "address"
        }
      ],
      "name": "extendableBondSingleStakePackageUserInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int256",
              "name": "singleStake_staked",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "singleStake_ebEarnedToDate",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "singleStake_bDuetPendingRewards",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "singleStake_bDuetClaimedRewards",
              "type": "uint256"
            }
          ],
          "internalType": "struct ExtendableBondReader.ExtendableBondSingleStakePackageUserInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairTokenAddress__BUSD_DUET",
      "outputs": [
        {
          "internalType": "contract IPancakePair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairTokenAddress__CAKE_BUSD",
      "outputs": [
        {
          "internalType": "contract IPancakePair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pancakeMasterChef",
      "outputs": [
        {
          "internalType": "contract MasterChefV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pancakePool",
      "outputs": [
        {
          "internalType": "contract CakePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7767c0ca4e70b1d657693f485db9ea8f62c9e8e5967591f9fe312c72cdb543b2",
  "receipt": {
    "to": null,
    "from": "0x1b0466be45419bC3aF1A1d73Eac3C80D7b88b2dC",
    "contractAddress": "0x098eE3F2eCf6dD41cF5057875724cc134226A4fD",
    "transactionIndex": 122,
    "gasUsed": "2359874",
    "logsBloom": "0x
    "blockHash": "0xde2f696a4701d5e8db329d4de98f453da8c1ff7254b19e2a5ca347a373361d68",
    "transactionHash": "0x7767c0ca4e70b1d657693f485db9ea8f62c9e8e5967591f9fe312c72cdb543b2",
    "logs": [],
    "blockNumber": 18940019,
    "cumulativeGasUsed": "13233267",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x14Bfa96fa589E1d9A1C107D95b9fAe736A026acE",
    "0x804678fa97d91B974ec2af3c843270886528a9E6",
    "0xbDF0aA1D1985Caa357A6aC6661D838DA8691c569",
    "0x45c54210128a065de780C4B0Df3d16664f7f859e",
    "0xa5f8C5Dbd5F286960b9d90548680aE5ebFf07652"
  ],
  "numDeployments": 3,
  "solcInputHash": "3006eeed44f8c195fd4b16e68c115ad3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ExtendableBondAdmin\",\"name\":\"entrypoint_\",\"type\":\"address\"},{\"internalType\":\"contract IPancakePair\",\"name\":\"pairTokenAddress__CAKE_BUSD_\",\"type\":\"address\"},{\"internalType\":\"contract IPancakePair\",\"name\":\"pairTokenAddress__BUSD_DUET_\",\"type\":\"address\"},{\"internalType\":\"contract CakePool\",\"name\":\"pancakePool_\",\"type\":\"address\"},{\"internalType\":\"contract MasterChefV2\",\"name\":\"pancakeMasterChef_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"contract ExtendableBondedCake\",\"name\":\"eb_\",\"type\":\"address\"}],\"name\":\"addressBook\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlyingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bondToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bondFarmingPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bondLpFarmingPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"multiRewardsMasterChef\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bondFarmingPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondLpFarmingPoolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pancakePool\",\"type\":\"address\"}],\"internalType\":\"struct ExtendableBondedCakeReader.AddressBook\",\"name\":\"book\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entrypoint\",\"outputs\":[{\"internalType\":\"contract ExtendableBondAdmin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"groupName_\",\"type\":\"string\"}],\"name\":\"extendableBondGroupInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"allEbStacked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ebCommonPriceAsUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duetSideAPR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingSideAPR\",\"type\":\"uint256\"}],\"internalType\":\"struct ExtendableBondedCakeReader.ExtendableBondGroupInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ExtendableBond\",\"name\":\"eb_\",\"type\":\"address\"}],\"name\":\"extendableBondLpStakePackageUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lpStake_underlyingStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpStake_bondStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpStake_lpStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpStake_ebPendingRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpStake_lpClaimedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpStake_bDuetPendingRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpStake_bDuetClaimedRewards\",\"type\":\"uint256\"}],\"internalType\":\"struct ExtendableBondReader.ExtendableBondLpStakePackageUserInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ExtendableBond\",\"name\":\"eb_\",\"type\":\"address\"}],\"name\":\"extendableBondPackagePublicInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"underlyingUsdPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bondUnderlyingPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"convertable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"convertableFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"convertableEnd\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"redeemable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"redeemableFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemableEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"singleStake_totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"singleStake_bDuetAPR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpStake_totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpStake_bDuetAPR\",\"type\":\"uint256\"}],\"internalType\":\"struct ExtendableBondReader.ExtendableBondPackagePublicInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ExtendableBond\",\"name\":\"eb_\",\"type\":\"address\"}],\"name\":\"extendableBondSingleStakePackageUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"singleStake_staked\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"singleStake_ebEarnedToDate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"singleStake_bDuetPendingRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"singleStake_bDuetClaimedRewards\",\"type\":\"uint256\"}],\"internalType\":\"struct ExtendableBondReader.ExtendableBondSingleStakePackageUserInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairTokenAddress__BUSD_DUET\",\"outputs\":[{\"internalType\":\"contract IPancakePair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairTokenAddress__CAKE_BUSD\",\"outputs\":[{\"internalType\":\"contract IPancakePair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeMasterChef\",\"outputs\":[{\"internalType\":\"contract MasterChefV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakePool\",\"outputs\":[{\"internalType\":\"contract CakePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/underlyings/pancake/ExtendableBondedCakeReader.sol\":\"ExtendableBondedCakeReader\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xd0a917e32d1251a9b2f1dea15e932815d5382e64e6b0a18104664a6cc774cd70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/BondFarmingPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\n\\nimport \\\"./ExtendableBond.sol\\\";\\nimport \\\"./libs/DuetMath.sol\\\";\\nimport \\\"./MultiRewardsMasterChef.sol\\\";\\nimport \\\"./libs/Adminable.sol\\\";\\nimport \\\"./interfaces/IBondFarmingPool.sol\\\";\\nimport \\\"./interfaces/IExtendableBond.sol\\\";\\n\\ncontract BondFarmingPool is PausableUpgradeable, ReentrancyGuardUpgradeable, IBondFarmingPool, Adminable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    IERC20Upgradeable public bondToken;\\n    IExtendableBond public bond;\\n    uint256 public totalShares = 0;\\n    uint256 public lastUpdatedPoolAt = 0;\\n    IBondFarmingPool public siblingPool;\\n\\n    MultiRewardsMasterChef public masterChef;\\n    uint256 public masterChefPid;\\n\\n    struct UserInfo {\\n        /**\\n         * @dev described compounded underlying bond token amount, user's shares / total shares * underlying amount = user's amount.\\n         */\\n        uint256 shares;\\n        /**\\n         * @notice accumulated net staked amount. only for earned to date calculation.\\n         * @dev formula: accumulatedStakedAmount - accumulatedUnstakedAmount\\n         */\\n        int256 accNetStaked;\\n    }\\n\\n    mapping(address => UserInfo) public usersInfo;\\n\\n    event Staked(address indexed user, uint256 amount);\\n    event Unstaked(address indexed user, uint256 amount);\\n    event SiblingPoolUpdated(address indexed previousPool, address indexed newPool);\\n\\n    function initialize(\\n        IERC20Upgradeable bondToken_,\\n        IExtendableBond bond_,\\n        address admin_\\n    ) public initializer {\\n        __ReentrancyGuard_init();\\n        __Pausable_init();\\n        _setAdmin(admin_);\\n        bondToken = bondToken_;\\n        bond = bond_;\\n    }\\n\\n    function setMasterChef(MultiRewardsMasterChef masterChef_, uint256 masterChefPid_) public onlyAdmin {\\n        masterChef = masterChef_;\\n        masterChefPid = masterChefPid_;\\n    }\\n\\n    function setSiblingPool(IBondFarmingPool siblingPool_) public onlyAdmin {\\n        require(\\n            (address(siblingPool_.siblingPool()) == address(0) ||\\n                address(siblingPool_.siblingPool()) == address(this)) && address(siblingPool_) != address(this),\\n            \\\"Invalid sibling\\\"\\n        );\\n        emit SiblingPoolUpdated(address(siblingPool), address(siblingPool_));\\n        siblingPool = siblingPool_;\\n    }\\n\\n    function claimBonuses() public {\\n        address user = msg.sender;\\n        UserInfo storage userInfo = usersInfo[user];\\n        require(userInfo.shares > 0, \\\"Nothing to claim\\\");\\n\\n        masterChef.withdrawForUser(masterChefPid, 0, user);\\n    }\\n\\n    /**\\n     * @dev see: _updatePool\\n     */\\n    function updatePool() external {\\n        require(\\n            msg.sender == address(siblingPool) || msg.sender == address(bond),\\n            \\\"BondLPFarmingPool: Calling from sibling pool or bond only\\\"\\n        );\\n        _updatePool();\\n    }\\n\\n    /**\\n     * @dev allocate pending rewards.\\n     */\\n    function _updatePool() internal {\\n        require(address(siblingPool) != address(0), \\\"BondFarmingPool: Contract not ready yet.\\\");\\n        // Single bond token farming rewards base on  'bond token mount in pool' / 'total bond token supply' * 'total underlying rewards' and remaining rewards for LP pools.\\n        // So single bond farming pool should be updated before LP's.\\n        require(\\n            siblingPool.lastUpdatedPoolAt() < block.number ||\\n                (siblingPool.lastUpdatedPoolAt() == lastUpdatedPoolAt && lastUpdatedPoolAt == block.number),\\n            \\\"update bond pool firstly.\\\"\\n        );\\n        uint256 pendingRewards = totalPendingRewards();\\n\\n        lastUpdatedPoolAt = block.number;\\n        if (pendingRewards <= 0) {\\n            return;\\n        }\\n        bond.mintBondTokenForRewards(address(this), pendingRewards);\\n    }\\n\\n    /**\\n     * @dev calculate earned amount to date of specific user.\\n     */\\n    function earnedToDate(address user_) public view returns (int256) {\\n        UserInfo storage userInfo = usersInfo[user_];\\n        return int256(sharesToBondAmount(userInfo.shares)) - userInfo.accNetStaked;\\n    }\\n\\n    function totalPendingRewards() public view virtual returns (uint256) {\\n        if (lastUpdatedPoolAt == block.number) {\\n            return 0;\\n        }\\n        uint256 remoteTotalPendingRewards = bond.totalPendingRewards();\\n\\n\\n        if (remoteTotalPendingRewards <= 0) {\\n            return 0;\\n        }\\n        uint256 poolBalance = bondToken.balanceOf(address(this));\\n        if (poolBalance <= 0) {\\n            return 0;\\n        }\\n\\n\\n\\n        return DuetMath.mulDiv(uint256(remoteTotalPendingRewards), poolBalance, bondToken.totalSupply());\\n    }\\n\\n    function pendingRewardsByShares(uint256 shares_) public view returns (uint256) {\\n        if (shares_ <= 0) {\\n            return 0;\\n        }\\n        uint256 totalPendingRewards = totalPendingRewards();\\n\\n        return\\n            DuetMath.mulDiv(totalPendingRewards - bond.calculateFeeAmount(totalPendingRewards), shares_, totalShares);\\n    }\\n\\n    function sharesToBondAmount(uint256 shares_) public view returns (uint256) {\\n        if (shares_ <= 0) {\\n            return 0;\\n        }\\n        return DuetMath.mulDiv(underlyingAmount(true), shares_, totalShares);\\n    }\\n\\n    function amountToShares(uint256 amount_) public view returns (uint256) {\\n        return totalShares > 0 ? DuetMath.mulDiv(amount_, totalShares, underlyingAmount(false)) : amount_;\\n    }\\n\\n    function underlyingAmount(bool exclusiveFees) public view returns (uint256) {\\n        uint256 totalPendingRewards = totalPendingRewards();\\n        totalPendingRewards -= exclusiveFees ? bond.calculateFeeAmount(totalPendingRewards) : 0;\\n        return totalPendingRewards + bondToken.balanceOf(address(this));\\n    }\\n\\n    function stake(uint256 amount_) public whenNotPaused {\\n        address user = msg.sender;\\n        stakeForUser(user, amount_);\\n    }\\n\\n    function stakeForUser(address user_, uint256 amount_) public whenNotPaused nonReentrant {\\n        // distributing pending rewards of all sibling pools to correct reward ratio between them.\\n        _updatePools();\\n\\n        uint256 stakeShares = amountToShares(amount_);\\n\\n        bondToken.safeTransferFrom(msg.sender, address(this), amount_);\\n        totalShares += stakeShares;\\n        usersInfo[user_].shares += stakeShares;\\n        usersInfo[user_].accNetStaked += int256(amount_);\\n        masterChef.depositForUser(masterChefPid, stakeShares, user_);\\n        emit Staked(user_, amount_);\\n    }\\n\\n    function _updatePools() internal {\\n        _updatePool();\\n        siblingPool.updatePool();\\n    }\\n\\n    function unstakeAll() public {\\n        require(usersInfo[msg.sender].shares > 0, \\\"nothing to unstake\\\");\\n        unstake(usersInfo[msg.sender].shares);\\n    }\\n\\n    /**\\n     * @notice unstake by shares\\n     */\\n    function unstake(uint256 shares_) public whenNotPaused nonReentrant {\\n        address user = msg.sender;\\n        UserInfo storage userInfo = usersInfo[user];\\n        require(userInfo.shares >= shares_ && totalShares >= shares_, \\\"unstake shares exceeds owned shares\\\");\\n\\n        // distribute pending rewards of all sibling pools to correct reward ratio between them.\\n        _updatePools();\\n\\n        // including rewards.\\n        uint256 totalBondAmount = sharesToBondAmount(shares_);\\n        userInfo.shares -= shares_;\\n        totalShares -= shares_;\\n\\n\\n\\n\\n        bondToken.safeTransfer(user, totalBondAmount);\\n        usersInfo[user].accNetStaked -= int256(totalBondAmount);\\n        masterChef.withdrawForUser(masterChefPid, shares_, user);\\n        emit Unstaked(user, totalBondAmount);\\n    }\\n\\n    function unstakeByAmount(uint256 amount_) public {\\n        if (amount_ == 0) {}\\n        UserInfo storage userInfo = usersInfo[msg.sender];\\n        uint256 userTotalAmount = sharesToBondAmount(userInfo.shares);\\n\\n        if (amount_ >= userTotalAmount) {\\n            unstake(userInfo.shares);\\n        } else {\\n            unstake(DuetMath.mulDiv(userInfo.shares, amount_, userTotalAmount));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6361450bbdb4bfbe26e6165ecae0deb1af9bc69969ee99fbf67a5b56596295e9\",\"license\":\"GPL-3.0\"},\"contracts/BondLPFarmingPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\n\\nimport \\\"./ExtendableBond.sol\\\";\\nimport \\\"./libs/DuetMath.sol\\\";\\nimport \\\"./libs/Adminable.sol\\\";\\nimport \\\"./MultiRewardsMasterChef.sol\\\";\\nimport \\\"./interfaces/IBondFarmingPool.sol\\\";\\nimport \\\"./interfaces/IExtendableBond.sol\\\";\\n\\ncontract BondLPFarmingPool is ReentrancyGuardUpgradeable, PausableUpgradeable, Adminable, IBondFarmingPool {\\n    IERC20Upgradeable public bondToken;\\n    IERC20Upgradeable public lpToken;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    IExtendableBond public bond;\\n\\n    IBondFarmingPool public siblingPool;\\n    uint256 public lastUpdatedPoolAt = 0;\\n\\n    MultiRewardsMasterChef public masterChef;\\n\\n    uint256 public masterChefPid;\\n\\n    /**\\n     * @dev accumulated bond token rewards of each lp token.\\n     */\\n    uint256 public accRewardPerShare;\\n\\n    uint256 public constant ACC_REWARDS_PRECISION = 1e12;\\n\\n    uint256 public totalLpAmount;\\n    /**\\n     * @notice mark bond reward is suspended. If the LP Token needs to be migrated, such as from pancake to ESP, the bond rewards will be suspended.\\n     * @notice you can not stake anymore when bond rewards has been suspended.\\n     * @dev _updatePools() no longer works after bondRewardsSuspended is true.\\n     */\\n    bool public bondRewardsSuspended = false;\\n\\n    struct UserInfo {\\n        /**\\n         * @dev lp amount deposited by user.\\n         */\\n        uint256 lpAmount;\\n        /**\\n         * @dev like sushi rewardDebt\\n         */\\n        uint256 rewardDebt;\\n        /**\\n         * @dev Rewards credited to rewardDebt but not yet claimed\\n         */\\n        uint256 pendingRewards;\\n        /**\\n         * @dev claimed rewards. for 'earned to date' calculation.\\n         */\\n        uint256 claimedRewards;\\n    }\\n\\n    mapping(address => UserInfo) public usersInfo;\\n\\n    event Staked(address indexed user, uint256 amount);\\n    event Unstaked(address indexed user, uint256 amount);\\n    event SiblingPoolUpdated(address indexed previousPool, address indexed newPool);\\n\\n    function initialize(\\n        IERC20Upgradeable bondToken_,\\n        IExtendableBond bond_,\\n        address admin_\\n    ) public initializer {\\n        __ReentrancyGuard_init();\\n        __Pausable_init();\\n        _setAdmin(admin_);\\n        bondToken = bondToken_;\\n        bond = bond_;\\n    }\\n\\n    function setLpToken(IERC20Upgradeable lpToken_) public onlyAdmin {\\n        lpToken = lpToken_;\\n    }\\n\\n    function setMasterChef(MultiRewardsMasterChef masterChef_, uint256 masterChefPid_) public onlyAdmin {\\n        masterChef = masterChef_;\\n        masterChefPid = masterChefPid_;\\n    }\\n\\n    /**\\n     * @dev see: _updatePool\\n     */\\n    function updatePool() external {\\n        require(\\n            msg.sender == address(siblingPool) || msg.sender == address(bond),\\n            \\\"BondLPFarmingPool: Calling from sibling pool or bond only\\\"\\n        );\\n        _updatePool();\\n    }\\n\\n    /**\\n     * @dev allocate pending rewards.\\n     */\\n    function _updatePool() internal {\\n        // Single bond token farming rewards base on  'bond token mount in pool' / 'total bond token supply' * 'total underlying rewards' and remaining rewards for LP pools.\\n        // So single bond farming pool should be updated before LP's.\\n        require(\\n            siblingPool.lastUpdatedPoolAt() > lastUpdatedPoolAt ||\\n                (siblingPool.lastUpdatedPoolAt() == lastUpdatedPoolAt && lastUpdatedPoolAt == block.number),\\n            \\\"update bond pool firstly.\\\"\\n        );\\n        uint256 pendingRewards = totalPendingRewards();\\n        lastUpdatedPoolAt = block.number;\\n        _harvestRemote();\\n        // no rewards will be distributed to the LP Pool when it's empty.\\n        // In this case, the single bond farming pool still distributes its rewards proportionally,\\n        // but its rewards will be expanded every time the pools are updated.\\n        // Because the remaining rewards is not distributed to the LP pool\\n        // The first user (start with totalLpAmount = 0) to enter the LP pool will receive this part of the undistributed rewards.\\n        // But this case is very rare and usually doesn't last long.\\n        if (pendingRewards <= 0 || totalLpAmount <= 0) {\\n            return;\\n        }\\n        uint256 feeAmount = bond.mintBondTokenForRewards(address(this), pendingRewards);\\n        accRewardPerShare += ((pendingRewards - feeAmount) * ACC_REWARDS_PRECISION) / totalLpAmount;\\n    }\\n\\n    /**\\n     * @dev distribute single bond pool first, then LP pool will get the remaining rewards. see _updatePools\\n     */\\n    function totalPendingRewards() public view virtual returns (uint256) {\\n        if (bondRewardsSuspended) {\\n            return 0;\\n        }\\n        uint256 totalBondPendingRewards = bond.totalPendingRewards();\\n        if (totalBondPendingRewards <= 0) {\\n            return 0;\\n        }\\n        return totalBondPendingRewards - siblingPool.totalPendingRewards();\\n    }\\n\\n    /**\\n     * @dev get pending rewards by specific user\\n     */\\n    function getUserPendingRewards(address user_) public view virtual returns (uint256) {\\n        UserInfo storage userInfo = usersInfo[user_];\\n        if (totalLpAmount <= 0 || userInfo.lpAmount <= 0) {\\n            return 0;\\n        }\\n        uint256 totalPendingRewards = totalPendingRewards();\\n        uint256 latestAccRewardPerShare = ((totalPendingRewards - bond.calculateFeeAmount(totalPendingRewards)) *\\n            ACC_REWARDS_PRECISION) /\\n            totalLpAmount +\\n            accRewardPerShare;\\n        return\\n            (latestAccRewardPerShare * userInfo.lpAmount) /\\n            ACC_REWARDS_PRECISION +\\n            userInfo.pendingRewards -\\n            userInfo.rewardDebt;\\n    }\\n\\n    function setSiblingPool(IBondFarmingPool siblingPool_) public onlyAdmin {\\n        require(\\n            (address(siblingPool_.siblingPool()) == address(0) ||\\n                address(siblingPool_.siblingPool()) == address(this)) && (address(siblingPool_) != address(this)),\\n            \\\"Invalid sibling\\\"\\n        );\\n        emit SiblingPoolUpdated(address(siblingPool), address(siblingPool_));\\n        siblingPool = siblingPool_;\\n    }\\n\\n    function stake(uint256 amount_) public whenNotPaused {\\n        require(!bondRewardsSuspended, \\\"Reward suspended. Please follow the project announcement \\\");\\n        address user = msg.sender;\\n        stakeForUser(user, amount_);\\n    }\\n\\n    function _updatePools() internal {\\n        if (bondRewardsSuspended) {\\n            return;\\n        }\\n        siblingPool.updatePool();\\n        _updatePool();\\n    }\\n\\n    function _stakeRemote(address user_, uint256 amount_) internal virtual {}\\n\\n    function _unstakeRemote(address user_, uint256 amount_) internal virtual {}\\n\\n    function _harvestRemote() internal virtual {}\\n\\n    function stakeForUser(address user_, uint256 amount_) public whenNotPaused nonReentrant {\\n        require(amount_ > 0, \\\"nothing to stake\\\");\\n        // allocate pending rewards of all sibling pools to correct reward ratio between them.\\n        _updatePools();\\n        UserInfo storage userInfo = usersInfo[user_];\\n        if (userInfo.lpAmount > 0) {\\n            uint256 sharesReward = (accRewardPerShare * userInfo.lpAmount) / ACC_REWARDS_PRECISION;\\n\\n\\n\\n            userInfo.pendingRewards += sharesReward - userInfo.rewardDebt;\\n\\n            userInfo.rewardDebt = (accRewardPerShare * (userInfo.lpAmount + amount_)) / ACC_REWARDS_PRECISION;\\n        } else {\\n            userInfo.rewardDebt = (accRewardPerShare * amount_) / ACC_REWARDS_PRECISION;\\n        }\\n        lpToken.safeTransferFrom(msg.sender, address(this), amount_);\\n        _stakeRemote(user_, amount_);\\n        userInfo.lpAmount += amount_;\\n        totalLpAmount += amount_;\\n        masterChef.depositForUser(masterChefPid, amount_, user_);\\n        emit Staked(user_, amount_);\\n    }\\n\\n    /**\\n     * @notice unstake by shares\\n     */\\n    function unstake(uint256 amount_) public whenNotPaused nonReentrant {\\n        address user = msg.sender;\\n        UserInfo storage userInfo = usersInfo[user];\\n        require(userInfo.lpAmount >= amount_ && userInfo.lpAmount > 0, \\\"unstake amount exceeds owned amount\\\");\\n\\n        // allocate pending rewards of all sibling pools to correct reward ratio between them.\\n        _updatePools();\\n\\n        uint256 sharesReward = (accRewardPerShare * userInfo.lpAmount) / ACC_REWARDS_PRECISION;\\n\\n        uint256 pendingRewards = userInfo.pendingRewards + sharesReward - userInfo.rewardDebt;\\n        uint256 bondBalance = bondToken.balanceOf(address(this));\\n        if (pendingRewards > bondBalance) {\\n            pendingRewards = bondBalance;\\n        }\\n        userInfo.rewardDebt = sharesReward;\\n        userInfo.pendingRewards = 0;\\n\\n\\n        _unstakeRemote(user, amount_);\\n        if (amount_ > 0) {\\n            userInfo.rewardDebt = (accRewardPerShare * (userInfo.lpAmount - amount_)) / ACC_REWARDS_PRECISION;\\n            userInfo.lpAmount -= amount_;\\n            totalLpAmount -= amount_;\\n            // send staked assets\\n            lpToken.safeTransfer(user, amount_);\\n        }\\n\\n        if (pendingRewards > 0) {\\n            // send rewards\\n            bondToken.safeTransfer(user, pendingRewards);\\n        }\\n        userInfo.claimedRewards += pendingRewards;\\n        masterChef.withdrawForUser(masterChefPid, amount_, user);\\n\\n        emit Unstaked(user, amount_);\\n    }\\n\\n    function unstakeAll() public {\\n        require(usersInfo[msg.sender].lpAmount > 0, \\\"nothing to unstake\\\");\\n        unstake(usersInfo[msg.sender].lpAmount);\\n    }\\n\\n    function setBondRewardsSuspended(bool suspended_) public onlyAdmin {\\n        _updatePools();\\n        bondRewardsSuspended = suspended_;\\n    }\\n\\n    function claimBonuses() public {\\n        unstake(0);\\n    }\\n}\\n\",\"keccak256\":\"0x36f0c5b07b1e7b78b9d022142a891538fae2394837c8c165e41f41127227d464\",\"license\":\"GPL-3.0\"},\"contracts/BondToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract BondToken is ERC20, Ownable {\\n    address public minter;\\n\\n    modifier onlyMinter() {\\n        require(minter == msg.sender, \\\"Minter only\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address minter_\\n    ) ERC20(name_, symbol_) Ownable() {\\n        minter = minter_;\\n    }\\n\\n    function setMinter(address minter_) public onlyOwner {\\n        require(minter_ != address(0), \\\"Cant set minter to zero address\\\");\\n        minter = minter_;\\n    }\\n\\n    function mint(address to_, uint256 amount_) external onlyMinter {\\n        require(amount_ > 0, \\\"Nothing to mint\\\");\\n        _mint(to_, amount_);\\n    }\\n\\n    function burnFrom(address account_, uint256 amount_) external onlyMinter {\\n        require(amount_ > 0, \\\"Nothing to burn\\\");\\n        _burn(account_, amount_);\\n    }\\n}\\n\",\"keccak256\":\"0x31de7589d016932080f778249f0eeb90aeda14839a8a84c37cd23b5500c46960\",\"license\":\"GPL-3.0\"},\"contracts/ExtendableBond.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"./BondToken.sol\\\";\\nimport \\\"./interfaces/IBondFarmingPool.sol\\\";\\nimport \\\"./interfaces/IExtendableBond.sol\\\";\\nimport \\\"./interfaces/IBondTokenUpgradeable.sol\\\";\\nimport \\\"./libs/Adminable.sol\\\";\\nimport \\\"./libs/Keepable.sol\\\";\\n\\ncontract ExtendableBond is IExtendableBond, ReentrancyGuardUpgradeable, PausableUpgradeable, Adminable, Keepable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using SafeERC20Upgradeable for IBondTokenUpgradeable;\\n    /**\\n     * Bond token contract\\n     */\\n    IBondTokenUpgradeable public bondToken;\\n\\n    /**\\n     * Bond underlying asset\\n     */\\n    IERC20Upgradeable public underlyingToken;\\n\\n    /**\\n     * @dev factor for percentage that described in integer. It makes 10000 means 100%, and 20 means 0.2%;\\n     *      Calculation formula: x * percentage / PERCENTAGE_FACTOR\\n     */\\n    uint16 public constant PERCENTAGE_FACTOR = 10000;\\n    IBondFarmingPool public bondFarmingPool;\\n    IBondFarmingPool public bondLPFarmingPool;\\n    /**\\n     * Emitted when someone convert underlying token to the bond.\\n     */\\n    event Converted(uint256 amount, address indexed user);\\n\\n    event MintedBondTokenForRewards(address indexed to, uint256 amount);\\n\\n    struct FeeSpec {\\n        string desc;\\n        uint16 rate;\\n        address receiver;\\n    }\\n\\n    /**\\n     * Fee specifications\\n     */\\n    FeeSpec[] public feeSpecs;\\n\\n    struct CheckPoints {\\n        bool convertable;\\n        uint256 convertableFrom;\\n        uint256 convertableEnd;\\n        bool redeemable;\\n        uint256 redeemableFrom;\\n        uint256 redeemableEnd;\\n        uint256 maturity;\\n    }\\n\\n    CheckPoints public checkPoints;\\n    modifier onlyAdminOrKeeper() virtual {\\n        require(msg.sender == admin || msg.sender == keeper, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    function initialize(\\n        IBondTokenUpgradeable bondToken_,\\n        IERC20Upgradeable underlyingToken_,\\n        address admin_\\n    ) public initializer {\\n        require(admin_ != address(0), \\\"Cant set admin to zero address\\\");\\n        __Pausable_init();\\n        __ReentrancyGuard_init();\\n        _setAdmin(msg.sender);\\n\\n        bondToken = bondToken_;\\n        underlyingToken = underlyingToken_;\\n    }\\n\\n    function feeSpecsLength() public view returns (uint256) {\\n        return feeSpecs.length;\\n    }\\n\\n    /**\\n     * @notice Underlying token amount that hold in current contract.\\n     */\\n    function underlyingAmount() public view returns (uint256) {\\n        return underlyingToken.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice total underlying token amount, including hold in current contract and remote\\n     */\\n    function totalUnderlyingAmount() public view returns (uint256) {\\n        return underlyingAmount() + remoteUnderlyingAmount();\\n    }\\n\\n    /**\\n     * @dev Total pending rewards for bond. May be negative in some unexpected circumstances,\\n     *      such as remote underlying amount has unexpectedly decreased makes bond token over issued.\\n     */\\n    function totalPendingRewards() public view returns (uint256) {\\n        uint256 underlying = totalUnderlyingAmount();\\n        uint256 bondAmount = totalBondTokenAmount();\\n        if (bondAmount >= underlying) {\\n            return 0;\\n        }\\n        return underlying - bondAmount;\\n    }\\n\\n    function calculateFeeAmount(uint256 amount_) public view returns (uint256) {\\n        if (amount_ <= 0) {\\n            return 0;\\n        }\\n        uint256 totalFeeAmount = 0;\\n        for (uint256 i = 0; i < feeSpecs.length; i++) {\\n            FeeSpec storage feeSpec = feeSpecs[i];\\n            uint256 feeAmount = (amount_ * feeSpec.rate) / PERCENTAGE_FACTOR;\\n\\n            if (feeAmount <= 0) {\\n                continue;\\n            }\\n            totalFeeAmount += feeAmount;\\n        }\\n        return totalFeeAmount;\\n    }\\n\\n    /**\\n     * @dev mint bond token for rewards and allocate fees.\\n     */\\n    function mintBondTokenForRewards(address to_, uint256 amount_) public returns (uint256 totalFeeAmount) {\\n        require(\\n            msg.sender == address(bondFarmingPool) || msg.sender == address(bondLPFarmingPool),\\n            \\\"only from farming pool\\\"\\n        );\\n        require(totalBondTokenAmount() + amount_ <= totalUnderlyingAmount(), \\\"Can not over issue\\\");\\n\\n        // nothing to happen when reward amount is zero.\\n        if (amount_ <= 0) {\\n            return 0;\\n        }\\n\\n        uint256 amountToTarget = amount_;\\n        // allocate fees.\\n        for (uint256 i = 0; i < feeSpecs.length; i++) {\\n            FeeSpec storage feeSpec = feeSpecs[i];\\n            uint256 feeAmount = (amountToTarget * feeSpec.rate) / PERCENTAGE_FACTOR;\\n\\n            if (feeAmount <= 0) {\\n                continue;\\n            }\\n            amountToTarget -= feeAmount;\\n            bondToken.mint(feeSpec.receiver, feeAmount);\\n        }\\n\\n        if (amountToTarget > 0) {\\n            bondToken.mint(to_, amountToTarget);\\n        }\\n\\n        emit MintedBondTokenForRewards(to_, amount_);\\n        return amount_ - amountToTarget;\\n    }\\n\\n    /**\\n     * Bond token total amount.\\n     */\\n    function totalBondTokenAmount() public view returns (uint256) {\\n        return bondToken.totalSupply();\\n    }\\n\\n    /**\\n     * calculate remote underlying token amount.\\n     */\\n    function remoteUnderlyingAmount() public view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Redeem all my bond tokens to underlying tokens.\\n     */\\n    function redeemAll() external whenNotPaused {\\n        redeem(bondToken.balanceOf(msg.sender));\\n    }\\n\\n    /**\\n     * @dev Redeem specific amount of my bond tokens.\\n     * @param amount_ amount to redeem\\n     */\\n    function redeem(uint256 amount_) public whenNotPaused nonReentrant {\\n        require(amount_ > 0, \\\"Nothing to redeem\\\");\\n        require(\\n            checkPoints.redeemable &&\\n                block.timestamp >= checkPoints.redeemableFrom &&\\n                block.timestamp <= checkPoints.redeemableEnd &&\\n                block.timestamp > checkPoints.convertableEnd,\\n            \\\"Can not redeem.\\\"\\n        );\\n\\n        address user = msg.sender;\\n        uint256 userBondTokenBalance = bondToken.balanceOf(user);\\n        require(amount_ <= userBondTokenBalance, \\\"Insufficient balance\\\");\\n\\n        // burn user's bond token\\n        bondToken.burnFrom(user, amount_);\\n\\n        uint256 underlyingTokenAmount = underlyingToken.balanceOf(address(this));\\n\\n        if (underlyingTokenAmount < amount_) {\\n            _withdrawFromRemote(amount_ - underlyingTokenAmount);\\n        }\\n        // for precision issue\\n        // The underlying asset may be calculated on a share basis, and the amount withdrawn may vary slightly\\n        if (amount_ > underlyingToken.balanceOf(address(this))) {\\n            underlyingToken.safeTransfer(user, underlyingToken.balanceOf(address(this)));\\n        } else {\\n            underlyingToken.safeTransfer(user, amount_);\\n        }\\n\\n    }\\n\\n    function _withdrawFromRemote(uint256 amount_) internal virtual {}\\n\\n    /**\\n     * @dev convert underlying token to bond token to current user\\n     * @param amount_ amount of underlying token to convert\\n     */\\n    function convert(uint256 amount_) external whenNotPaused {\\n        require(amount_ > 0, \\\"Nothing to convert\\\");\\n\\n        _convertOperation(amount_, msg.sender);\\n    }\\n\\n    function requireConvertable() internal view {\\n        require(\\n            checkPoints.convertable &&\\n                block.timestamp >= checkPoints.convertableFrom &&\\n                block.timestamp <= checkPoints.convertableEnd &&\\n                block.timestamp < checkPoints.redeemableFrom,\\n            \\\"Can not convert.\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev distribute pending rewards.\\n     */\\n    function _updateFarmingPools() internal {\\n        bondFarmingPool.updatePool();\\n        bondLPFarmingPool.updatePool();\\n    }\\n\\n    function setFarmingPools(IBondFarmingPool bondPool_, IBondFarmingPool lpPool_) public onlyAdmin {\\n        require(address(bondPool_) != address(0) && address(bondPool_) != address(lpPool_), \\\"invalid farming pools\\\");\\n        bondFarmingPool = bondPool_;\\n        bondLPFarmingPool = lpPool_;\\n    }\\n\\n    /**\\n     * @dev convert underlying token to bond token and stake to bondFarmingPool for current user\\n     */\\n    function convertAndStake(uint256 amount_) external whenNotPaused nonReentrant {\\n        require(amount_ > 0, \\\"Nothing to convert\\\");\\n        requireConvertable();\\n        // Single bond token farming rewards base on  'bond token mount in pool' / 'total bond token supply' * 'total underlying rewards'  (remaining rewards for LP pools)\\n        // In order to distribute pending rewards to old shares, bondToken farming pools should be updated when new bondToken converted.\\n        _updateFarmingPools();\\n\\n        address user = msg.sender;\\n        underlyingToken.safeTransferFrom(user, address(this), amount_);\\n        _depositRemote(amount_);\\n        // 1:1 mint bond token to current contract\\n        bondToken.mint(address(this), amount_);\\n        bondToken.safeApprove(address(bondFarmingPool), amount_);\\n        // stake to bondFarmingPool\\n        bondFarmingPool.stakeForUser(user, amount_);\\n        emit Converted(amount_, user);\\n    }\\n\\n    function _depositRemote(uint256 amount_) internal virtual {}\\n\\n    /**\\n     * @dev convert underlying token to bond token to specific user\\n     */\\n    function _convertOperation(uint256 amount_, address user_) internal nonReentrant {\\n        requireConvertable();\\n        // Single bond token farming rewards base on  'bond token mount in pool' / 'total bond token supply' * 'total underlying rewards'   (remaining rewards for LP pools)\\n        // In order to distribute pending rewards to old shares, bondToken farming pools should be updated when new bondToken converted.\\n        _updateFarmingPools();\\n\\n        underlyingToken.safeTransferFrom(user_, address(this), amount_);\\n        _depositRemote(amount_);\\n        // 1:1 mint bond token to user\\n        bondToken.mint(user_, amount_);\\n        emit Converted(amount_, user_);\\n    }\\n\\n    /**\\n     * @dev update checkPoints\\n     * @param checkPoints_ new checkpoints\\n     */\\n    function updateCheckPoints(CheckPoints calldata checkPoints_) public onlyAdminOrKeeper {\\n        require(checkPoints_.convertableFrom > 0, \\\"convertableFrom must be greater than 0\\\");\\n        require(\\n            checkPoints_.convertableFrom < checkPoints_.convertableEnd,\\n            \\\"redeemableFrom must be earlier than convertableEnd\\\"\\n        );\\n        require(\\n            checkPoints_.redeemableFrom > checkPoints_.convertableEnd &&\\n                checkPoints_.redeemableFrom >= checkPoints_.maturity,\\n            \\\"redeemableFrom must be later than convertableEnd and maturity\\\"\\n        );\\n        require(\\n            checkPoints_.redeemableEnd > checkPoints_.redeemableFrom,\\n            \\\"redeemableEnd must be later than redeemableFrom\\\"\\n        );\\n        checkPoints = checkPoints_;\\n    }\\n\\n    function setRedeemable(bool redeemable_) external onlyAdminOrKeeper {\\n        checkPoints.redeemable = redeemable_;\\n    }\\n\\n    function setConvertable(bool convertable_) external onlyAdminOrKeeper {\\n        checkPoints.convertable = convertable_;\\n    }\\n\\n    /**\\n     * @dev emergency transfer underlying token for security issue or bug encounted.\\n     */\\n    function emergencyTransferUnderlyingTokens(address to_) external onlyAdmin {\\n        checkPoints.convertable = false;\\n        checkPoints.redeemable = false;\\n        underlyingToken.safeTransfer(to_, underlyingAmount());\\n    }\\n\\n    /**\\n     * @notice add fee specification\\n     */\\n    function addFeeSpec(FeeSpec calldata feeSpec_) external onlyAdmin {\\n        require(feeSpecs.length < 5, \\\"Too many fee specs\\\");\\n        require(feeSpec_.rate > 0, \\\"Fee rate is too low\\\");\\n        feeSpecs.push(feeSpec_);\\n        uint256 totalFeeRate = 0;\\n        for (uint256 i = 0; i < feeSpecs.length; i++) {\\n            totalFeeRate += feeSpecs[i].rate;\\n        }\\n        require(totalFeeRate <= PERCENTAGE_FACTOR, \\\"Total fee rate greater than 100%.\\\");\\n    }\\n\\n    /**\\n     * @notice update fee specification\\n     */\\n    function setFeeSpec(uint256 feeId_, FeeSpec calldata feeSpec_) external onlyAdmin {\\n        require(feeSpec_.rate > 0, \\\"Fee rate is too low\\\");\\n        feeSpecs[feeId_] = feeSpec_;\\n        uint256 totalFeeRate = 0;\\n        for (uint256 i = 0; i < feeSpecs.length; i++) {\\n            totalFeeRate += feeSpecs[i].rate;\\n        }\\n        require(totalFeeRate <= PERCENTAGE_FACTOR, \\\"Total fee rate greater than 100%.\\\");\\n    }\\n\\n    function removeFeeSpec(uint256 feeSpecIndex) external onlyAdmin {\\n        delete feeSpecs[feeSpecIndex];\\n    }\\n\\n    function depositToRemote(uint256 amount_) public onlyAdminOrKeeper {\\n        _depositRemote(amount_);\\n    }\\n\\n    function depositAllToRemote() public onlyAdminOrKeeper {\\n        depositToRemote(underlyingToken.balanceOf(address(this)));\\n    }\\n\\n    function setKeeper(address newKeeper) external onlyAdmin {\\n        _setKeeper(newKeeper);\\n    }\\n\\n    /**\\n     * @notice Trigger stopped state\\n     * @dev Only possible when contract not paused.\\n     */\\n    function pause() external onlyAdmin whenNotPaused {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Return to normal state\\n     * @dev Only possible when contract is paused.\\n     */\\n    function unpause() external onlyAdmin whenPaused {\\n        _unpause();\\n    }\\n\\n    function burnBondToken(uint256 amount_) public onlyAdmin {\\n        bondToken.burnFrom(msg.sender, amount_);\\n    }\\n}\\n\",\"keccak256\":\"0x17a32cb31fc6c252b88c31bd522644adde99facbc0c8fe98bbcbf0f40ec210c3\",\"license\":\"GPL-3.0\"},\"contracts/ExtendableBondAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\npragma abicoder v2;\\n\\n\\nimport \\\"./libs/Adminable.sol\\\";\\n\\n\\ncontract ExtendableBondAdmin is Adminable {\\n\\n    string[] private groups;\\n    mapping(string => address[]) private groupedExtendableBonds;\\n\\n    constructor(\\n        address admin_\\n    ) Adminable() {\\n        require(admin_ != address(0), \\\"Cant set admin to zero address\\\");\\n        _setAdmin(msg.sender);\\n    }\\n\\n    function groupNames() view external returns (string[] memory) {\\n        return groups;\\n    }\\n\\n    function groupedAddresses(string calldata groupName_) view external returns (address[] memory) {\\n        return groupedExtendableBonds[groupName_];\\n    }\\n\\n    // --------------\\n\\n\\n    function createGroup(\\n        string calldata groupName_\\n    ) external onlyAdmin {\\n        for (uint256 i; i< groups.length; i++) {\\n            if (keccak256(abi.encodePacked(groups[i])) == keccak256(abi.encodePacked(groupName_))) {\\n                revert('Duplicate group name');\\n            }\\n        }\\n        address[] memory newList;\\n        groupedExtendableBonds[groupName_] = newList;\\n        groups.push(groupName_);\\n    }\\n\\n    function destroyGroup(\\n        string calldata groupName_\\n    ) external onlyAdmin {\\n        int256 indexOf = -1;\\n        for (uint256 i; i< groups.length; i++) {\\n            if (keccak256(abi.encodePacked(groups[i])) == keccak256(abi.encodePacked(groupName_))) {\\n                indexOf = int256(i);\\n                break;\\n            }\\n        }\\n        if (indexOf < 0) revert('Unregistred group name');\\n        groups[uint256(indexOf)] = groups[groups.length - 1];\\n        groups.pop();\\n        delete groupedExtendableBonds[groupName_];\\n    }\\n\\n    function appendGroupItem(\\n        string calldata groupName_,\\n        address itemAddress_\\n    ) external onlyAdmin onlyGroupNameRegistered(groupName_) {\\n        address[] storage group = groupedExtendableBonds[groupName_];\\n        for (uint256 i; i < group.length; i++) {\\n            if (group[i] == itemAddress_) revert('Duplicate address in group');\\n        }\\n        group.push(itemAddress_);\\n    }\\n\\n\\n    function removeGroupItem(\\n        string calldata groupName_,\\n        address itemAddress_\\n    ) external onlyAdmin onlyGroupNameRegistered(groupName_) {\\n        address[] storage group = groupedExtendableBonds[groupName_];\\n        if (group.length == 0) return;\\n        for (uint256 i = group.length - 1; i >= 0; i--) {\\n            if (group[i] != itemAddress_) continue;\\n            group[i] = group[group.length - 1];\\n            group.pop();\\n            break;\\n        }\\n    }\\n\\n    // --------------\\n\\n\\n    modifier onlyGroupNameRegistered(string calldata groupName_) virtual {\\n        bool found;\\n        for (uint256 i; i< groups.length; i++) {\\n            if (keccak256(abi.encodePacked(groups[i])) == keccak256(abi.encodePacked(groupName_))) {\\n                found = true;\\n                break;\\n            }\\n        }\\n        require(found, 'Unregistred group name');\\n\\n        _;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x93cef54d6fab65bc2dab65861b21f7f478ee0b4dfeed28d2defd01419db51b4c\",\"license\":\"GPL-3.0\"},\"contracts/ExtendableBondReader.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\npragma abicoder v2;\\n\\nimport \\\"./ExtendableBond.sol\\\";\\nimport \\\"./MultiRewardsMasterChef.sol\\\";\\nimport \\\"./BondFarmingPool.sol\\\";\\nimport \\\"./BondLPFarmingPool.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n\\nuint constant BLOCKS_PER_YEAR = (60 / 3) * 60 * 24 * 365;\\n\\n\\nabstract contract ExtendableBondReader {\\n\\n    struct ExtendableBondPackagePublicInfo {\\n        string name;\\n        string symbol;\\n        uint8 decimals;\\n\\n        uint256 underlyingUsdPrice;\\n        uint256 bondUnderlyingPrice;\\n\\n        bool convertable;\\n        uint256 convertableFrom;\\n        uint256 convertableEnd;\\n        bool redeemable;\\n        uint256 redeemableFrom;\\n        uint256 redeemableEnd;\\n        uint256 maturity;\\n\\n        uint256 underlyingAPY;\\n        uint256 singleStake_totalStaked;\\n        uint256 singleStake_bDuetAPR;\\n        uint256 lpStake_totalStaked;\\n        uint256 lpStake_bDuetAPR;\\n        // uint256 lpStake_extraAPY;\\n    }\\n\\n    struct ExtendableBondSingleStakePackageUserInfo {\\n        int256 singleStake_staked;\\n        int256 singleStake_ebEarnedToDate;\\n        uint256 singleStake_bDuetPendingRewards;\\n        uint256 singleStake_bDuetClaimedRewards;\\n    }\\n\\n    struct ExtendableBondLpStakePackageUserInfo {\\n        uint256 lpStake_underlyingStaked;\\n        uint256 lpStake_bondStaked;\\n        uint256 lpStake_lpStaked;\\n        uint256 lpStake_ebPendingRewards;\\n        uint256 lpStake_lpClaimedRewards;\\n        uint256 lpStake_bDuetPendingRewards;\\n        uint256 lpStake_bDuetClaimedRewards;\\n        // uint256 lpStake_extraPendingRewards;\\n    }\\n\\n    // -------------\\n\\n\\n    function extendableBondPackagePublicInfo(ExtendableBond eb_) view external returns (ExtendableBondPackagePublicInfo memory) {\\n        BondFarmingPool bondFarmingPool = BondFarmingPool(address(eb_.bondFarmingPool()));\\n        BondLPFarmingPool bondLPFarmingPool = BondLPFarmingPool(address(eb_.bondLPFarmingPool()));\\n        (\\n            bool convertable,\\n            uint256 convertableFrom,\\n            uint256 convertableEnd,\\n            bool redeemable,\\n            uint256 redeemableFrom,\\n            uint256 redeemableEnd,\\n            uint256 maturity\\n        ) = eb_.checkPoints();\\n        ERC20 token = ERC20(address(eb_.bondToken()));\\n\\n        ExtendableBondPackagePublicInfo memory packageInfo = ExtendableBondPackagePublicInfo({\\n            name: token.name(),\\n            symbol: token.symbol(),\\n            decimals: token.decimals(),\\n\\n            underlyingUsdPrice: _unsafely_getUnderlyingPriceAsUsd(eb_),\\n            bondUnderlyingPrice: _getBondPriceAsUnderlying(eb_),\\n\\n            convertable: convertable,\\n            convertableFrom: convertableFrom,\\n            convertableEnd: convertableEnd,\\n            redeemable: redeemable,\\n            redeemableFrom: redeemableFrom,\\n            redeemableEnd: redeemableEnd,\\n            maturity: maturity,\\n\\n            // underlyingAPY: _getUnderlyingAPY(eb_),\\n            underlyingAPY: 0,\\n            singleStake_totalStaked: bondFarmingPool.underlyingAmount(false),\\n            // singleStake_bDuetAPR: _getSingleStake_bDuetAPR(eb_),\\n            singleStake_bDuetAPR: 0,\\n            lpStake_totalStaked: bondLPFarmingPool.totalLpAmount(),\\n            // lpStake_bDuetAPR: _getLpStake_bDuetAPR(eb_)\\n            lpStake_bDuetAPR: 0\\n            // // lpStake_extraAPY: _getLpStake_extraAPR(eb_) ??\\n        });\\n        return packageInfo;\\n    }\\n\\n    function extendableBondSingleStakePackageUserInfo(ExtendableBond eb_) view external returns (ExtendableBondSingleStakePackageUserInfo memory) {\\n        address user = msg.sender;\\n        require(user != address(0), \\\"Invalid sender address\\\");\\n\\n        BondFarmingPool bondFarmingPool = BondFarmingPool(address(eb_.bondFarmingPool()));\\n\\n        ( uint256 bondFarmingUsershares, ) = bondFarmingPool.usersInfo(user);\\n\\n        uint256 singleStake_bDuetPendingRewards = _getPendingRewardsAmount(eb_, bondFarmingPool.masterChefPid(), user);\\n        uint256 claimedRewardsAmount = _getUserClaimedRewardsAmount(eb_, bondFarmingPool.masterChefPid(), user);\\n\\n        ExtendableBondSingleStakePackageUserInfo memory packageInfo = ExtendableBondSingleStakePackageUserInfo({\\n            singleStake_staked: int256(bondFarmingPool.sharesToBondAmount(bondFarmingUsershares)),\\n            singleStake_ebEarnedToDate: bondFarmingPool.earnedToDate(user),\\n            singleStake_bDuetPendingRewards: singleStake_bDuetPendingRewards,\\n            singleStake_bDuetClaimedRewards: claimedRewardsAmount\\n        });\\n        return packageInfo;\\n    }\\n\\n    function extendableBondLpStakePackageUserInfo(ExtendableBond eb_) view external returns (ExtendableBondLpStakePackageUserInfo memory) {\\n        address user = msg.sender;\\n        require(user != address(0), \\\"Invalid sender address\\\");\\n\\n        BondLPFarmingPool bondLPFarmingPool = BondLPFarmingPool(address(eb_.bondLPFarmingPool()));\\n        ( uint256 lpStake_lpStaked, , , uint256 lpClaimedRewards )\\n            = bondLPFarmingPool.usersInfo(user);\\n        ( uint256 lpStake_underlyingStaked, uint256 lpStake_bondStaked )\\n            = _getLpStakeDetail(eb_, lpStake_lpStaked);\\n\\n        uint256 lpStake_bDuetPendingRewards = _getPendingRewardsAmount(eb_, _getEbFarmingPoolId(eb_), user);\\n        uint256 lpStake_ebPendingRewards = bondLPFarmingPool.getUserPendingRewards(user);\\n\\n        uint256 bDuetClaimedRewardsAmount = _getUserClaimedRewardsAmount(eb_, _getEbFarmingPoolId(eb_), user);\\n        // uint256 extraPendingRewards = _getUserLpStakedExtraPendingRewardsAmount(eb_, user);\\n\\n        ExtendableBondLpStakePackageUserInfo memory packageInfo = ExtendableBondLpStakePackageUserInfo({\\n            lpStake_underlyingStaked: lpStake_underlyingStaked,\\n            lpStake_bondStaked: lpStake_bondStaked,\\n            lpStake_lpStaked: lpStake_lpStaked,\\n            lpStake_ebPendingRewards: lpStake_ebPendingRewards,\\n            lpStake_lpClaimedRewards: lpClaimedRewards,\\n            lpStake_bDuetPendingRewards: lpStake_bDuetPendingRewards,\\n            lpStake_bDuetClaimedRewards: bDuetClaimedRewardsAmount\\n            // lpStake_extraPendingRewards: extraPendingRewards\\n        });\\n        return packageInfo;\\n    }\\n\\n    // -------------\\n\\n    function _unsafely_getDuetPriceAsUsd(ExtendableBond eb_) view internal virtual returns (uint256) {}\\n\\n    function _unsafely_getUnderlyingPriceAsUsd(ExtendableBond eb_) view internal virtual returns (uint256) {}\\n\\n    function _getBondPriceAsUnderlying(ExtendableBond eb_) view internal virtual returns (uint256) {}\\n\\n    function _getLpStackedReserves(ExtendableBond eb_) view internal virtual returns (uint256, uint256) {}\\n\\n    function _getLpStackedTotalSupply(ExtendableBond eb_) view internal virtual returns (uint256) {}\\n\\n    function _getEbFarmingPoolId(ExtendableBond eb_) view internal virtual returns (uint256) {}\\n\\n    function _getUnderlyingAPY(ExtendableBond eb_) view internal virtual returns (uint256) {}\\n\\n    // function _getLpStake_extraAPR(ExtendableBond eb_) view internal virtual returns (uint256) {}\\n\\n    // function _getUserLpStakedExtraPendingRewardsAmount(ExtendableBond eb_, address user_) view internal virtual returns (uint256 amount) {}\\n\\n\\n    // -------------\\n\\n    function _getSingleStake_bDuetAPR(ExtendableBond eb_) view internal returns (uint256) {\\n        BondFarmingPool bondFarmingPool = BondFarmingPool(address(eb_.bondFarmingPool()));\\n        return _getBDuetAPR(eb_, bondFarmingPool.masterChefPid());\\n    }\\n\\n    function _getLpStake_bDuetAPR(ExtendableBond eb_) view internal returns (uint256) {\\n        return _getBDuetAPR(eb_, _getEbFarmingPoolId(eb_));\\n    }\\n\\n    function _getBDuetAPR(ExtendableBond eb_, uint256 pid_) view internal returns (uint256 apr) {\\n        uint256 bondTokenBalance = eb_.bondToken().totalSupply();\\n        if (bondTokenBalance == 0) return apr;\\n\\n        BondFarmingPool bondFarmingPool = BondFarmingPool(address(eb_.bondFarmingPool()));\\n        MultiRewardsMasterChef mMasterChef = bondFarmingPool.masterChef();\\n\\n        uint256 totalAllocPoint = mMasterChef.totalAllocPoint();\\n        if (totalAllocPoint == 0) return apr;\\n\\n        uint256 unsafe_duetPriceAsUsd = _unsafely_getDuetPriceAsUsd(eb_);\\n        uint256 underlyingPriceAsUsd = _unsafely_getUnderlyingPriceAsUsd(eb_);\\n        if (underlyingPriceAsUsd == 0) return apr;\\n\\n        ( , uint256 allocPoint, , , ) = mMasterChef.poolInfo(pid_);\\n        for (uint256 rewardId; rewardId < mMasterChef.getRewardSpecsLength(); rewardId++) {\\n            ( , uint256 rewardPerBlock, , , ) = mMasterChef.rewardSpecs(rewardId);\\n            apr += rewardPerBlock * 1e4 * allocPoint\\n                    / totalAllocPoint\\n                    * BLOCKS_PER_YEAR\\n                    * unsafe_duetPriceAsUsd\\n                    / (bondTokenBalance * underlyingPriceAsUsd);\\n        }\\n    }\\n\\n    function _getUserClaimedRewardsAmount(ExtendableBond eb_, uint pid_, address user_) view internal returns (uint256 amount) {\\n        BondFarmingPool bondFarmingPool = BondFarmingPool(address(eb_.bondFarmingPool()));\\n        MultiRewardsMasterChef mMasterChef = bondFarmingPool.masterChef();\\n\\n        for (uint256 rewardId; rewardId < mMasterChef.getRewardSpecsLength(); rewardId++) {\\n            amount += mMasterChef.getUserClaimedRewards(pid_, user_, rewardId);\\n        }\\n    }\\n\\n    function _getPendingRewardsAmount(ExtendableBond eb_, uint pid_, address user_) view internal returns (uint256 amount) {\\n        BondFarmingPool bondFarmingPool = BondFarmingPool(address(eb_.bondFarmingPool()));\\n        MultiRewardsMasterChef mMasterChef = bondFarmingPool.masterChef();\\n\\n        MultiRewardsMasterChef.RewardInfo[] memory rewardInfos = mMasterChef.pendingRewards(pid_, user_);\\n        for (uint256 rewardId; rewardId < mMasterChef.getRewardSpecsLength(); rewardId++) {\\n            amount += rewardInfos[rewardId].amount;\\n        }\\n    }\\n\\n     function _getLpStakeDetail(ExtendableBond eb_, uint256 lpStaked) view internal returns (\\n        uint256 lpStake_underlyingStaked, uint256 lpStake_bondStaked\\n    ) {\\n        uint256 lpStackTotalSupply = _getLpStackedTotalSupply(eb_);\\n\\n        ( uint256 lpStake_underlyingReserve, uint256 lpStake_bondReserve ) = _getLpStackedReserves(eb_);\\n        lpStake_underlyingStaked = lpStake_underlyingReserve * lpStaked / lpStackTotalSupply;\\n        lpStake_bondStaked = lpStake_bondReserve * lpStaked / lpStackTotalSupply;\\n\\n    }\\n\\n}\\n\\n\",\"keccak256\":\"0xa50b30efe2543ab88e19948b2b962ac765c9c0ffa0733664d5f73b93128b3ea2\",\"license\":\"GPL-3.0\"},\"contracts/MultiRewardsMasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ninterface IMigratorChef {\\n    function migrate(IERC20 token) external returns (IERC20);\\n}\\n\\n// MasterChef is the master of RewardToken. He can make RewardToken and he is a fair guy.\\n//\\n// Note that it's ownable and the owner wields tremendous power. The ownership\\n// will be transferred to a governance smart contract once RewardToken is sufficiently\\n// distributed and the community can show to govern itself.\\n//\\n// Have fun reading it. Hopefully it's bug-free. God bless.\\ncontract MultiRewardsMasterChef is ReentrancyGuard, Initializable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    address public admin;\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        /**\\n         * @dev claimed rewards mapping.  reward id => claimed rewards since to last claimed\\n         */\\n        mapping(uint256 => uint256) claimedRewards;\\n        /**\\n         * @dev rewardDebt mapping. reward id => reward debt of the reward.\\n         */\\n        mapping(uint256 => uint256) rewardDebt; // Reward debt in each reward. See explanation below.\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of rewards\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.amount * poolsRewardsAccRewardsPerShare[pid][rewardId]) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n        //   1. The pool's `accCakePerShare` (and `lastRewardBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. rewards to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that rewards distribution occurs.\\n        /**\\n         * Pool with a proxyFarmer means no lpToken transfer (including withdraw and deposit).\\n         */\\n        address proxyFarmer;\\n        /**\\n         * total deposited amount.\\n         */\\n        uint256 totalAmount;\\n    }\\n\\n    struct RewardInfo {\\n        IERC20 token;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * Info of each reward.\\n     */\\n    struct RewardSpec {\\n        IERC20 token;\\n        uint256 rewardPerBlock;\\n        uint256 startedAtBlock;\\n        uint256 endedAtBlock;\\n        uint256 claimedAmount;\\n    }\\n\\n    RewardSpec[] public rewardSpecs;\\n\\n    // The migrator contract. It has a lot of power. Can only be set through governance (owner).\\n    IMigratorChef public migrator;\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n    // pool => rewardId => accRewardsPerShare\\n    mapping(uint256 => mapping(uint256 => uint256)) public poolsRewardsAccRewardsPerShare; // Accumulated rewards per share in each reward spec, times 1e12. See below.\\n    // pool => userAddress => UserInfo; Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event ClaimRewards(address indexed user, uint256 indexed pid);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event AdminChanged(address indexed previousAdmin, address indexed newAdmin);\\n\\n    event PoolAdded(uint256 indexed pid, address indexed lpToken, address indexed proxyFarmer, uint256 allocPoint);\\n    event PoolUpdated(uint256 indexed pid, uint256 allocPoint);\\n    event RewardSpecAdded(\\n        uint256 indexed rewardId,\\n        address indexed rewardToken,\\n        uint256 rewardPerBlock,\\n        uint256 startedAtBlock,\\n        uint256 endedAtBlock\\n    );\\n    event RewardSpecUpdated(\\n        uint256 indexed rewardId,\\n        uint256 rewardPerBlock,\\n        uint256 startedAtBlock,\\n        uint256 endedAtBlock\\n    );\\n\\n    /**\\n     * @notice Checks if the msg.sender is the admin address.\\n     */\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"Only admin\\\");\\n        _;\\n    }\\n\\n    function initialize(address admin_) public initializer {\\n        admin = admin_;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do. except as proxied farmer\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _lpToken,\\n        address _proxyFarmer,\\n        bool _withUpdate\\n    ) public onlyAdmin returns (uint256 pid) {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        if (_proxyFarmer != address(0)) {\\n            require(address(_lpToken) == address(0), \\\"LPToken should be address 0 when proxied farmer.\\\");\\n        }\\n        uint256 lastRewardBlock = block.number;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                allocPoint: _allocPoint,\\n                lastRewardBlock: lastRewardBlock,\\n                proxyFarmer: _proxyFarmer,\\n                totalAmount: 0\\n            })\\n        );\\n        uint256 pid = poolInfo.length - 1;\\n        emit PoolAdded(pid, address(_lpToken), _proxyFarmer, _allocPoint);\\n        return pid;\\n    }\\n\\n    // Update the given pool's RewardToken allocation point. Can only be called by the owner.\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate\\n    ) public onlyAdmin {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 prevAllocPoint = poolInfo[_pid].allocPoint;\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        if (prevAllocPoint != _allocPoint) {\\n            totalAllocPoint = totalAllocPoint.sub(prevAllocPoint).add(_allocPoint);\\n        }\\n\\n        emit PoolUpdated(_pid, _allocPoint);\\n    }\\n\\n    function addRewardSpec(\\n        IERC20 token,\\n        uint256 rewardPerBlock,\\n        uint256 startedAtBlock,\\n        uint256 endedAtBlock\\n    ) public onlyAdmin returns (uint256 rewardId) {\\n        require(endedAtBlock > startedAtBlock, \\\"endedAtBlock should be greater than startedAtBlock\\\");\\n        require(rewardPerBlock > 0, \\\"rewardPerBlock should be greater than zero\\\");\\n\\n        token.safeTransferFrom(msg.sender, address(this), (endedAtBlock - startedAtBlock) * rewardPerBlock);\\n\\n        rewardSpecs.push(\\n            RewardSpec({\\n                token: token,\\n                rewardPerBlock: rewardPerBlock,\\n                startedAtBlock: startedAtBlock,\\n                endedAtBlock: endedAtBlock,\\n                claimedAmount: 0\\n            })\\n        );\\n        uint256 rewardId = rewardSpecs.length - 1;\\n        emit RewardSpecAdded(rewardId, address(token), rewardPerBlock, startedAtBlock, endedAtBlock);\\n        return rewardId;\\n    }\\n\\n    function setRewardSpec(\\n        uint256 rewardId,\\n        uint256 rewardPerBlock,\\n        uint256 startedAtBlock,\\n        uint256 endedAtBlock\\n    ) public onlyAdmin {\\n        RewardSpec storage rewardSpec = rewardSpecs[rewardId];\\n        if (rewardSpec.startedAtBlock <= block.number) {\\n            require(\\n                startedAtBlock == rewardSpec.startedAtBlock,\\n                \\\"can not modify startedAtBlock after rewards has began allocating\\\"\\n            );\\n        }\\n\\n        require(endedAtBlock > block.number, \\\"can not modify endedAtBlock to a past block number\\\");\\n        require(endedAtBlock > startedAtBlock, \\\"endedAtBlock should be greater than startedAtBlock\\\");\\n        massUpdatePools();\\n        uint256 requiredAmount = (endedAtBlock - startedAtBlock) * rewardPerBlock;\\n        uint256 tokenBalance = rewardSpec.token.balanceOf(address(this));\\n        if (requiredAmount > tokenBalance + rewardSpec.claimedAmount) {\\n            rewardSpec.token.safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                requiredAmount - tokenBalance - rewardSpec.claimedAmount\\n            );\\n        } else if (requiredAmount < tokenBalance + rewardSpec.claimedAmount) {\\n            // return overflow tokens\\n            rewardSpec.token.safeTransferFrom(\\n                address(this),\\n                msg.sender,\\n                (tokenBalance + rewardSpec.claimedAmount) - requiredAmount\\n            );\\n        }\\n\\n        rewardSpec.startedAtBlock = startedAtBlock;\\n        rewardSpec.endedAtBlock = endedAtBlock;\\n        rewardSpec.rewardPerBlock = rewardPerBlock;\\n\\n        emit RewardSpecUpdated(rewardId, rewardPerBlock, startedAtBlock, endedAtBlock);\\n    }\\n\\n    function getRewardSpecsLength() public view returns (uint256) {\\n        return rewardSpecs.length;\\n    }\\n\\n    function getUserClaimedRewards(\\n        uint256 pid_,\\n        address user_,\\n        uint256 rewardId_\\n    ) public view returns (uint256) {\\n        return userInfo[pid_][user_].claimedRewards[rewardId_];\\n    }\\n\\n    function getUserAmount(uint256 pid_, address user_) public view returns (uint256) {\\n        return userInfo[pid_][user_].amount;\\n    }\\n\\n    function getUserRewardDebt(\\n        uint256 pid_,\\n        address user_,\\n        uint256 rewardId_\\n    ) public view returns (uint256) {\\n        return userInfo[pid_][user_].rewardDebt[rewardId_];\\n    }\\n\\n    // Set the migrator contract. Can only be called by the owner.\\n    function setMigrator(IMigratorChef _migrator) public onlyAdmin {\\n        migrator = _migrator;\\n    }\\n\\n    // Migrate lp token to another lp contract.\\n    function migrate(uint256 _pid) public onlyAdmin {\\n        require(address(migrator) != address(0), \\\"migrate: no migrator\\\");\\n        PoolInfo storage pool = poolInfo[_pid];\\n        IERC20 lpToken = pool.lpToken;\\n        uint256 bal = lpToken.balanceOf(address(this));\\n        lpToken.safeApprove(address(migrator), bal);\\n        IERC20 newLpToken = migrator.migrate(lpToken);\\n        require(bal == newLpToken.balanceOf(address(this)), \\\"migrate: bad\\\");\\n        pool.lpToken = newLpToken;\\n    }\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(\\n        uint256 _from,\\n        uint256 _to,\\n        uint256 rewardId\\n    ) public view returns (uint256) {\\n        RewardSpec storage rewardSpec = rewardSpecs[rewardId];\\n        if (_to < rewardSpec.startedAtBlock) {\\n            return 0;\\n        }\\n        if (_from < rewardSpec.startedAtBlock) {\\n            _from = rewardSpec.startedAtBlock;\\n        }\\n        if (_to > rewardSpec.endedAtBlock) {\\n            _to = rewardSpec.endedAtBlock;\\n        }\\n        if (_from > _to) {\\n            return 0;\\n        }\\n        return _to.sub(_from);\\n    }\\n\\n    // View function to see pending CAKEs on frontend.\\n    function pendingRewards(uint256 _pid, address _user) external view returns (RewardInfo[] memory) {\\n        RewardInfo[] memory rewardsInfo = new RewardInfo[](rewardSpecs.length);\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        for (uint256 rewardId = 0; rewardId < rewardSpecs.length; rewardId++) {\\n            RewardSpec storage rewardSpec = rewardSpecs[rewardId];\\n\\n            if (block.number < rewardSpec.startedAtBlock) {\\n                rewardsInfo[rewardId] = RewardInfo({ token: rewardSpec.token, amount: 0 });\\n                continue;\\n            }\\n\\n            uint256 accRewardPerShare = poolsRewardsAccRewardsPerShare[_pid][rewardId];\\n\\n            uint256 lpSupply = pool.totalAmount;\\n\\n            if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n                uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number, rewardId);\\n                uint256 rewardAmount = multiplier.mul(rewardSpec.rewardPerBlock).mul(pool.allocPoint).div(\\n                    totalAllocPoint\\n                );\\n                accRewardPerShare = accRewardPerShare.add(rewardAmount.mul(1e12).div(lpSupply));\\n            }\\n            rewardsInfo[rewardId] = RewardInfo({\\n                token: rewardSpec.token,\\n                amount: user.amount.mul(accRewardPerShare).div(1e12).sub(user.rewardDebt[rewardId])\\n            });\\n        }\\n\\n        return rewardsInfo;\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n        uint256 lpSupply = pool.totalAmount;\\n        if (lpSupply == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n        for (uint256 rewardId; rewardId < rewardSpecs.length; rewardId++) {\\n            RewardSpec storage rewardSpec = rewardSpecs[rewardId];\\n\\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number, rewardId);\\n            uint256 reward = multiplier.mul(rewardSpec.rewardPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\n            poolsRewardsAccRewardsPerShare[_pid][rewardId] = poolsRewardsAccRewardsPerShare[_pid][rewardId].add(\\n                reward.mul(1e12).div(lpSupply)\\n            );\\n        }\\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    function deposit(uint256 _pid, uint256 _amount) public {\\n        _depositOperation(_pid, _amount, msg.sender);\\n    }\\n\\n    function depositForUser(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address user_\\n    ) public {\\n        _depositOperation(_pid, _amount, user_);\\n    }\\n\\n    // Deposit LP tokens to MasterChef for RewardToken allocation.\\n    function _depositOperation(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _user\\n    ) internal nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (pool.proxyFarmer != address(0)) {\\n            require(msg.sender == pool.proxyFarmer, \\\"Only proxy farmer\\\");\\n        } else {\\n            require(msg.sender == _user, \\\"Can not deposit for others\\\");\\n        }\\n\\n        UserInfo storage user = userInfo[_pid][_user];\\n        updatePool(_pid);\\n        for (uint256 rewardId = 0; rewardId < rewardSpecs.length; rewardId++) {\\n            RewardSpec storage rewardSpec = rewardSpecs[rewardId];\\n            uint256 accRewardPerShare = poolsRewardsAccRewardsPerShare[_pid][rewardId];\\n            if (user.amount > 0) {\\n                uint256 pending = user.amount.mul(accRewardPerShare).div(1e12).sub(user.rewardDebt[rewardId]);\\n                if (pending > 0) {\\n                    rewardSpec.claimedAmount += pending;\\n                    user.claimedRewards[rewardId] += pending;\\n                    rewardSpec.token.safeTransfer(_user, pending);\\n                }\\n            }\\n\\n            user.rewardDebt[rewardId] = user.amount.add(_amount).mul(accRewardPerShare).div(1e12);\\n        }\\n        if (_amount > 0) {\\n            if (pool.proxyFarmer == address(0)) {\\n                pool.lpToken.safeTransferFrom(address(_user), address(this), _amount);\\n            }\\n            pool.totalAmount = pool.totalAmount.add(_amount);\\n            user.amount = user.amount.add(_amount);\\n        }\\n        emit Deposit(_user, _pid, _amount);\\n    }\\n\\n    function withdraw(uint256 _pid, uint256 _amount) public {\\n        _withdrawOperation(_pid, _amount, msg.sender);\\n    }\\n\\n    function withdrawForUser(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address user_\\n    ) public {\\n        _withdrawOperation(_pid, _amount, user_);\\n    }\\n\\n    // Withdraw LP tokens from MasterChef.\\n    function _withdrawOperation(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _user\\n    ) internal nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        require(user.amount >= _amount, \\\"withdraw: Insufficient balance\\\");\\n        if (pool.proxyFarmer != address(0)) {\\n            require(msg.sender == pool.proxyFarmer, \\\"Only proxy farmer\\\");\\n        } else {\\n            require(msg.sender == _user, \\\"Can not withdraw for others\\\");\\n        }\\n        updatePool(_pid);\\n        for (uint256 rewardId = 0; rewardId < rewardSpecs.length; rewardId++) {\\n            RewardSpec storage rewardSpec = rewardSpecs[rewardId];\\n            uint256 accRewardPerShare = poolsRewardsAccRewardsPerShare[_pid][rewardId];\\n            if (user.amount > 0) {\\n                uint256 pending = user.amount.mul(accRewardPerShare).div(1e12).sub(user.rewardDebt[rewardId]);\\n                if (pending > 0) {\\n                    rewardSpec.claimedAmount += pending;\\n                    user.claimedRewards[rewardId] += pending;\\n                    rewardSpec.token.safeTransfer(_user, pending);\\n                }\\n                user.rewardDebt[rewardId] = user.amount.mul(accRewardPerShare).div(1e12);\\n            }\\n\\n            if (_amount > 0) {\\n                user.rewardDebt[rewardId] = user.amount.sub(_amount).mul(accRewardPerShare).div(1e12);\\n            }\\n        }\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            pool.totalAmount = pool.totalAmount.sub(_amount);\\n            if (pool.proxyFarmer == address(0)) {\\n                pool.lpToken.safeTransfer(address(_user), _amount);\\n            }\\n        }\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) public nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        require(pool.proxyFarmer != address(0), \\\"nothing to withdraw\\\");\\n\\n        pool.totalAmount = pool.totalAmount.sub(user.amount);\\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\\n        user.amount = 0;\\n        for (uint256 rewardId = 0; rewardId < rewardSpecs.length; rewardId++) {\\n            user.rewardDebt[rewardId] = 0;\\n        }\\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\\n    }\\n\\n    function setAdmin(address admin_) public onlyAdmin {\\n        require(admin_ != address(0), \\\"can not be zero address\\\");\\n        address previousAdmin = admin;\\n        admin = admin_;\\n\\n        emit AdminChanged(previousAdmin, admin_);\\n    }\\n}\\n\",\"keccak256\":\"0x48cfd801906b0fe611769c43db9ba5bfd0b1fa4d462a3d398d9b7835436b4bb3\",\"license\":\"MIT\"},\"contracts/interfaces/IBondFarmingPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\ninterface IBondFarmingPool {\\n    function stake(uint256 amount_) external;\\n\\n    function stakeForUser(address user_, uint256 amount_) external;\\n\\n    function updatePool() external;\\n\\n    function totalPendingRewards() external view returns (uint256);\\n\\n    function lastUpdatedPoolAt() external view returns (uint256);\\n\\n    function setSiblingPool(IBondFarmingPool siblingPool_) external;\\n\\n    function siblingPool() external view returns (IBondFarmingPool);\\n}\\n\",\"keccak256\":\"0xe750b6743942407f8ed056fea9a0d247dd9960fba5d162d473df756507422d25\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IBondTokenUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IBondTokenUpgradeable is IERC20Upgradeable {\\n    function mint(address to_, uint256 amount_) external;\\n\\n    function burnFrom(address account_, uint256 amount_) external;\\n}\\n\",\"keccak256\":\"0xbd3800608a213fc36e168a16fe69b40a82e4c3feb21e1993cefc5d219511b77e\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ICakePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface ICakePool {\\n    struct UserInfo {\\n        uint256 shares; // number of shares for a user.\\n        uint256 lastDepositedTime; // keep track of deposited time for potential penalty.\\n        uint256 cakeAtLastUserAction; // keep track of cake deposited at the last user action.\\n        uint256 lastUserActionTime; // keep track of the last user action time.\\n        uint256 lockStartTime; // lock start time.\\n        uint256 lockEndTime; // lock end time.\\n        uint256 userBoostedShare; // boost share, in order to give the user higher reward. The user only enjoys the reward, so the principal needs to be recorded as a debt.\\n        bool locked; //lock status.\\n        uint256 lockedAmount; // amount deposited during lock period.\\n    }\\n\\n    function withdrawFeePeriod() external view returns (uint256);\\n\\n    function freeWithdrawFeeUsers(address user_) external view returns (bool);\\n\\n    function MAX_LOCK_DURATION() external view returns (uint256);\\n\\n    function userInfo(address user_) external view returns (UserInfo memory);\\n\\n    function deposit(uint256 _amount, uint256 _lockDuration) external;\\n\\n    function withdrawByAmount(uint256 _amount) external;\\n\\n    /**\\n     * @notice Calculate Performance fee.\\n     * @param _user: User address\\n     * @return Returns Performance fee.\\n     */\\n    function calculatePerformanceFee(address _user) external view returns (uint256);\\n\\n    function calculateWithdrawFee(address _user, uint256 _shares) external view returns (uint256);\\n\\n    function calculateOverdueFee(address _user) external view returns (uint256);\\n\\n    /**\\n     * @notice Withdraw funds from the Cake Pool.\\n     * @param _shares: Number of shares to withdraw\\n     */\\n    function withdraw(uint256 _shares) external;\\n\\n    function withdrawAll() external;\\n\\n    function getPricePerFullShare() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xca8ab5bc476bd64c55604b8a8ee75edbc18759c2a0d7c4392299ae77592bbb25\",\"license\":\"MIT\"},\"contracts/interfaces/IExtendableBond.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\ninterface IExtendableBond {\\n    function totalPendingRewards() external view returns (uint256);\\n\\n    function mintBondTokenForRewards(address to_, uint256 amount_) external returns (uint256);\\n\\n    function calculateFeeAmount(uint256 amount_) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfb9d5375247b1737be691c4872939bd4e7a969ff59a926abb0fcf76a3f9db2ad\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPancakeMasterChefV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\ninterface IPancakeMasterChefV2 {\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n\\n    function pendingCake(uint256 _pid, address _user) external;\\n}\\n\",\"keccak256\":\"0x887ae821b42331cff8a1fb0927a1f87481720ebe2ec89a12b5e736ae2518e7de\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPancakePair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\ninterface IPancakePair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\",\"keccak256\":\"0xa63f2b629cedbeb52d809245e88bdd96a41dd4acca270567476b83b3d1ea444f\",\"license\":\"GPL-3.0\"},\"contracts/libs/Adminable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nabstract contract Adminable {\\n    event AdminUpdated(address indexed user, address indexed newAdmin);\\n\\n    address public admin;\\n\\n    modifier onlyAdmin() virtual {\\n        require(msg.sender == admin, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    function setAdmin(address newAdmin) public virtual onlyAdmin {\\n        _setAdmin(newAdmin);\\n    }\\n\\n    function _setAdmin(address newAdmin) internal {\\n        require(newAdmin != address(0), \\\"Can not set admin to zero address\\\");\\n        admin = newAdmin;\\n\\n        emit AdminUpdated(msg.sender, newAdmin);\\n    }\\n}\\n\",\"keccak256\":\"0xe47c97c0e3edad2d1df3e664376a7bb46e1aaf51b4c4acc73c4a2cfdc747185f\",\"license\":\"GPL-3.0\"},\"contracts/libs/DuetMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nlibrary DuetMath {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0;\\n            // Least significant 256 bits of the product\\n            uint256 prod1;\\n            // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = denominator**3;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse;\\n            // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse;\\n            // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse;\\n            // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse;\\n            // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse;\\n            // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse;\\n            // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding direction\\n    ) public pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (direction == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x260a4e00bb4a5105a81d9bf077a9730c660bf29969b7ab3f646fa7bc22fb73f0\",\"license\":\"GPL-3.0\"},\"contracts/libs/Keepable.sol\":{\"content\":\"\\nabstract contract Keepable {\\n    event KeeperUpdated(address indexed user, address indexed newKeeper);\\n\\n    address public keeper;\\n\\n    modifier onlyKeeper() virtual {\\n        require(msg.sender == keeper, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    function _setKeeper(address newKeeper_) internal {\\n        keeper = newKeeper_;\\n\\n        emit KeeperUpdated(msg.sender, newKeeper_);\\n    }\\n}\\n\",\"keccak256\":\"0x90e232341a5a37c1202509c39ff7af6074cbd1ba441cca11c064c559bdb786eb\"},\"contracts/mocks/CakePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// copy from https://bscscan.com/address/0x45c54210128a065de780C4B0Df3d16664f7f859e#code#F1#L1\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\ninterface IBoostContract {\\n    function onCakePoolUpdate(\\n        address _user,\\n        uint256 _lockedAmount,\\n        uint256 _lockedDuration,\\n        uint256 _totalLockedAmount,\\n        uint256 _maxLockDuration\\n    ) external;\\n}\\n\\ninterface IMasterChefV2 {\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n\\n    function pendingCake(uint256 _pid, address _user) external view returns (uint256);\\n\\n    function userInfo(uint256 _pid, address _user) external view returns (uint256, uint256);\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n}\\n\\ninterface IVCake {\\n    function deposit(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _lockDuration\\n    ) external;\\n\\n    function withdraw(address _user) external;\\n}\\n\\ncontract CakePool is Ownable, Pausable {\\n    using SafeERC20 for IERC20;\\n\\n    struct UserInfo {\\n        uint256 shares; // number of shares for a user.\\n        uint256 lastDepositedTime; // keep track of deposited time for potential penalty.\\n        uint256 cakeAtLastUserAction; // keep track of cake deposited at the last user action.\\n        uint256 lastUserActionTime; // keep track of the last user action time.\\n        uint256 lockStartTime; // lock start time.\\n        uint256 lockEndTime; // lock end time.\\n        uint256 userBoostedShare; // boost share, in order to give the user higher reward. The user only enjoys the reward, so the principal needs to be recorded as a debt.\\n        bool locked; //lock status.\\n        uint256 lockedAmount; // amount deposited during lock period.\\n    }\\n\\n    IERC20 public immutable token; // cake token.\\n\\n    IMasterChefV2 public immutable masterchefV2;\\n\\n    address public boostContract; // boost contract used in Masterchef.\\n    address public VCake;\\n\\n    mapping(address => UserInfo) public userInfo;\\n    mapping(address => bool) public freePerformanceFeeUsers; // free performance fee users.\\n    mapping(address => bool) public freeWithdrawFeeUsers; // free withdraw fee users.\\n    mapping(address => bool) public freeOverdueFeeUsers; // free overdue fee users.\\n\\n    uint256 public totalShares;\\n    address public admin;\\n    address public treasury;\\n    address public operator;\\n    uint256 public cakePoolPID;\\n    uint256 public totalBoostDebt; // total boost debt.\\n    uint256 public totalLockedAmount; // total lock amount.\\n\\n    uint256 public constant MAX_PERFORMANCE_FEE = 2000; // 20%\\n    uint256 public constant MAX_WITHDRAW_FEE = 500; // 5%\\n    uint256 public constant MAX_OVERDUE_FEE = 100 * 1e10; // 100%\\n    uint256 public constant MAX_WITHDRAW_FEE_PERIOD = 1 weeks; // 1 week\\n    uint256 public constant MIN_LOCK_DURATION = 1 weeks; // 1 week\\n    uint256 public constant MAX_LOCK_DURATION_LIMIT = 1000 days; // 1000 days\\n    uint256 public constant BOOST_WEIGHT_LIMIT = 5000 * 1e10; // 5000%\\n    uint256 public constant PRECISION_FACTOR = 1e12; // precision factor.\\n    uint256 public constant PRECISION_FACTOR_SHARE = 1e28; // precision factor for share.\\n    uint256 public constant MIN_DEPOSIT_AMOUNT = 0.00001 ether;\\n    uint256 public constant MIN_WITHDRAW_AMOUNT = 0.00001 ether;\\n    uint256 public UNLOCK_FREE_DURATION = 1 weeks; // 1 week\\n    uint256 public MAX_LOCK_DURATION = 365 days; // 365 days\\n    uint256 public DURATION_FACTOR = 365 days; // 365 days, in order to calculate user additional boost.\\n    uint256 public DURATION_FACTOR_OVERDUE = 180 days; // 180 days, in order to calculate overdue fee.\\n    uint256 public BOOST_WEIGHT = 100 * 1e10; // 100%\\n\\n    uint256 public performanceFee = 200; // 2%\\n    uint256 public performanceFeeContract = 200; // 2%\\n    uint256 public withdrawFee = 10; // 0.1%\\n    uint256 public withdrawFeeContract = 10; // 0.1%\\n    uint256 public overdueFee = 100 * 1e10; // 100%\\n    uint256 public withdrawFeePeriod = 72 hours; // 3 days\\n\\n    event Deposit(address indexed sender, uint256 amount, uint256 shares, uint256 duration, uint256 lastDepositedTime);\\n    event Withdraw(address indexed sender, uint256 amount, uint256 shares);\\n    event Harvest(address indexed sender, uint256 amount);\\n    event Pause();\\n    event Unpause();\\n    event Init();\\n    event Lock(\\n        address indexed sender,\\n        uint256 lockedAmount,\\n        uint256 shares,\\n        uint256 lockedDuration,\\n        uint256 blockTimestamp\\n    );\\n    event Unlock(address indexed sender, uint256 amount, uint256 blockTimestamp);\\n    event NewAdmin(address admin);\\n    event NewTreasury(address treasury);\\n    event NewOperator(address operator);\\n    event NewBoostContract(address boostContract);\\n    event NewVCakeContract(address VCake);\\n    event FreeFeeUser(address indexed user, bool indexed free);\\n    event NewPerformanceFee(uint256 performanceFee);\\n    event NewPerformanceFeeContract(uint256 performanceFeeContract);\\n    event NewWithdrawFee(uint256 withdrawFee);\\n    event NewOverdueFee(uint256 overdueFee);\\n    event NewWithdrawFeeContract(uint256 withdrawFeeContract);\\n    event NewWithdrawFeePeriod(uint256 withdrawFeePeriod);\\n    event NewMaxLockDuration(uint256 maxLockDuration);\\n    event NewDurationFactor(uint256 durationFactor);\\n    event NewDurationFactorOverdue(uint256 durationFactorOverdue);\\n    event NewUnlockFreeDuration(uint256 unlockFreeDuration);\\n    event NewBoostWeight(uint256 boostWeight);\\n\\n    /**\\n     * @notice Constructor\\n     * @param _token: Cake token contract\\n     * @param _masterchefV2: MasterChefV2 contract\\n     * @param _admin: address of the admin\\n     * @param _treasury: address of the treasury (collects fees)\\n     * @param _operator: address of operator\\n     * @param _pid: cake pool ID in MasterChefV2\\n     */\\n    constructor(\\n        IERC20 _token,\\n        IMasterChefV2 _masterchefV2,\\n        address _admin,\\n        address _treasury,\\n        address _operator,\\n        uint256 _pid\\n    ) {\\n        token = _token;\\n        masterchefV2 = _masterchefV2;\\n        admin = _admin;\\n        treasury = _treasury;\\n        operator = _operator;\\n        cakePoolPID = _pid;\\n    }\\n\\n    /**\\n     * @notice Deposits a dummy token to `MASTER_CHEF` MCV2.\\n     * It will transfer all the `dummyToken` in the tx sender address.\\n     * @param dummyToken The address of the token to be deposited into MCV2.\\n     */\\n    function init(IERC20 dummyToken) external onlyOwner {\\n        uint256 balance = dummyToken.balanceOf(msg.sender);\\n        require(balance != 0, \\\"Balance must exceed 0\\\");\\n        dummyToken.safeTransferFrom(msg.sender, address(this), balance);\\n        dummyToken.approve(address(masterchefV2), balance);\\n        masterchefV2.deposit(cakePoolPID, balance);\\n        emit Init();\\n    }\\n\\n    /**\\n     * @notice Checks if the msg.sender is the admin address.\\n     */\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"admin: wut?\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Checks if the msg.sender is either the cake owner address or the operator address.\\n     */\\n    modifier onlyOperatorOrCakeOwner(address _user) {\\n        require(msg.sender == _user || msg.sender == operator, \\\"Not operator or cake owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Update user info in Boost Contract.\\n     * @param _user: User address\\n     */\\n    function updateBoostContractInfo(address _user) internal {\\n        if (boostContract != address(0)) {\\n            UserInfo storage user = userInfo[_user];\\n            uint256 lockDuration = user.lockEndTime - user.lockStartTime;\\n            IBoostContract(boostContract).onCakePoolUpdate(\\n                _user,\\n                user.lockedAmount,\\n                lockDuration,\\n                totalLockedAmount,\\n                DURATION_FACTOR\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Update user share When need to unlock or charges a fee.\\n     * @param _user: User address\\n     */\\n    function updateUserShare(address _user) internal {\\n        UserInfo storage user = userInfo[_user];\\n        if (user.shares > 0) {\\n            if (user.locked) {\\n                // Calculate the user's current token amount and update related parameters.\\n                uint256 currentAmount = (balanceOf() * (user.shares)) / totalShares - user.userBoostedShare;\\n                totalBoostDebt -= user.userBoostedShare;\\n                user.userBoostedShare = 0;\\n                totalShares -= user.shares;\\n                //Charge a overdue fee after the free duration has expired.\\n                if (!freeOverdueFeeUsers[_user] && ((user.lockEndTime + UNLOCK_FREE_DURATION) < block.timestamp)) {\\n                    uint256 earnAmount = currentAmount - user.lockedAmount;\\n                    uint256 overdueDuration = block.timestamp - user.lockEndTime - UNLOCK_FREE_DURATION;\\n                    if (overdueDuration > DURATION_FACTOR_OVERDUE) {\\n                        overdueDuration = DURATION_FACTOR_OVERDUE;\\n                    }\\n                    // Rates are calculated based on the user's overdue duration.\\n                    uint256 overdueWeight = (overdueDuration * overdueFee) / DURATION_FACTOR_OVERDUE;\\n                    uint256 currentOverdueFee = (earnAmount * overdueWeight) / PRECISION_FACTOR;\\n                    token.safeTransfer(treasury, currentOverdueFee);\\n                    currentAmount -= currentOverdueFee;\\n                }\\n                // Recalculate the user's share.\\n                uint256 pool = balanceOf();\\n                uint256 currentShares;\\n                if (totalShares != 0) {\\n                    currentShares = (currentAmount * totalShares) / (pool - currentAmount);\\n                } else {\\n                    currentShares = currentAmount;\\n                }\\n                user.shares = currentShares;\\n                totalShares += currentShares;\\n                // After the lock duration, update related parameters.\\n                if (user.lockEndTime < block.timestamp) {\\n                    user.locked = false;\\n                    user.lockStartTime = 0;\\n                    user.lockEndTime = 0;\\n                    totalLockedAmount -= user.lockedAmount;\\n                    user.lockedAmount = 0;\\n                    emit Unlock(_user, currentAmount, block.timestamp);\\n                }\\n            } else if (!freePerformanceFeeUsers[_user]) {\\n                // Calculate Performance fee.\\n                uint256 totalAmount = (user.shares * balanceOf()) / totalShares;\\n                totalShares -= user.shares;\\n                user.shares = 0;\\n                uint256 earnAmount = totalAmount - user.cakeAtLastUserAction;\\n                uint256 feeRate = performanceFee;\\n                if (_isContract(_user)) {\\n                    feeRate = performanceFeeContract;\\n                }\\n                uint256 currentPerformanceFee = (earnAmount * feeRate) / 10000;\\n                if (currentPerformanceFee > 0) {\\n                    token.safeTransfer(treasury, currentPerformanceFee);\\n                    totalAmount -= currentPerformanceFee;\\n                }\\n                // Recalculate the user's share.\\n                uint256 pool = balanceOf();\\n                uint256 newShares;\\n                if (totalShares != 0) {\\n                    newShares = (totalAmount * totalShares) / (pool - totalAmount);\\n                } else {\\n                    newShares = totalAmount;\\n                }\\n                user.shares = newShares;\\n                totalShares += newShares;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Unlock user cake funds.\\n     * @dev Only possible when contract not paused.\\n     * @param _user: User address\\n     */\\n    function unlock(address _user) external onlyOperatorOrCakeOwner(_user) whenNotPaused {\\n        UserInfo storage user = userInfo[_user];\\n        require(user.locked && user.lockEndTime < block.timestamp, \\\"Cannot unlock yet\\\");\\n        depositOperation(0, 0, _user);\\n    }\\n\\n    /**\\n     * @notice Deposit funds into the Cake Pool.\\n     * @dev Only possible when contract not paused.\\n     * @param _amount: number of tokens to deposit (in CAKE)\\n     * @param _lockDuration: Token lock duration\\n     */\\n    function deposit(uint256 _amount, uint256 _lockDuration) external whenNotPaused {\\n        require(_amount > 0 || _lockDuration > 0, \\\"Nothing to deposit\\\");\\n        depositOperation(_amount, _lockDuration, msg.sender);\\n    }\\n\\n    /**\\n     * @notice The operation of deposite.\\n     * @param _amount: number of tokens to deposit (in CAKE)\\n     * @param _lockDuration: Token lock duration\\n     * @param _user: User address\\n     */\\n    function depositOperation(\\n        uint256 _amount,\\n        uint256 _lockDuration,\\n        address _user\\n    ) internal {\\n        UserInfo storage user = userInfo[_user];\\n        if (user.shares == 0 || _amount > 0) {\\n            require(_amount > MIN_DEPOSIT_AMOUNT, \\\"Deposit amount must be greater than MIN_DEPOSIT_AMOUNT\\\");\\n        }\\n        // Calculate the total lock duration and check whether the lock duration meets the conditions.\\n        uint256 totalLockDuration = _lockDuration;\\n        if (user.lockEndTime >= block.timestamp) {\\n            // Adding funds during the lock duration is equivalent to re-locking the position, needs to update some variables.\\n            if (_amount > 0) {\\n                user.lockStartTime = block.timestamp;\\n                totalLockedAmount -= user.lockedAmount;\\n                user.lockedAmount = 0;\\n            }\\n            totalLockDuration += user.lockEndTime - user.lockStartTime;\\n        }\\n        require(_lockDuration == 0 || totalLockDuration >= MIN_LOCK_DURATION, \\\"Minimum lock period is one week\\\");\\n        require(totalLockDuration <= MAX_LOCK_DURATION, \\\"Maximum lock period exceeded\\\");\\n\\n        if (VCake != address(0)) {\\n            IVCake(VCake).deposit(_user, _amount, _lockDuration);\\n        }\\n\\n        // Harvest tokens from Masterchef.\\n        harvest();\\n\\n        // Handle stock funds.\\n        if (totalShares == 0) {\\n            uint256 stockAmount = available();\\n            token.safeTransfer(treasury, stockAmount);\\n        }\\n        // Update user share.\\n        updateUserShare(_user);\\n\\n        // Update lock duration.\\n        if (_lockDuration > 0) {\\n            if (user.lockEndTime < block.timestamp) {\\n                user.lockStartTime = block.timestamp;\\n                user.lockEndTime = block.timestamp + _lockDuration;\\n            } else {\\n                user.lockEndTime += _lockDuration;\\n            }\\n            user.locked = true;\\n        }\\n\\n        uint256 currentShares;\\n        uint256 currentAmount;\\n        uint256 userCurrentLockedBalance;\\n        uint256 pool = balanceOf();\\n        if (_amount > 0) {\\n            token.safeTransferFrom(_user, address(this), _amount);\\n            currentAmount = _amount;\\n        }\\n\\n        // Calculate lock funds\\n        if (user.shares > 0 && user.locked) {\\n            userCurrentLockedBalance = (pool * user.shares) / totalShares;\\n            currentAmount += userCurrentLockedBalance;\\n            totalShares -= user.shares;\\n            user.shares = 0;\\n\\n            // Update lock amount\\n            if (user.lockStartTime == block.timestamp) {\\n                user.lockedAmount = userCurrentLockedBalance;\\n                totalLockedAmount += user.lockedAmount;\\n            }\\n        }\\n        if (totalShares != 0) {\\n            currentShares = (currentAmount * totalShares) / (pool - userCurrentLockedBalance);\\n        } else {\\n            currentShares = currentAmount;\\n        }\\n\\n        // Calculate the boost weight share.\\n        if (user.lockEndTime > user.lockStartTime) {\\n            // Calculate boost share.\\n            uint256 boostWeight = ((user.lockEndTime - user.lockStartTime) * BOOST_WEIGHT) / DURATION_FACTOR;\\n            uint256 boostShares = (boostWeight * currentShares) / PRECISION_FACTOR;\\n            currentShares += boostShares;\\n            user.shares += currentShares;\\n\\n            // Calculate boost share , the user only enjoys the reward, so the principal needs to be recorded as a debt.\\n            uint256 userBoostedShare = (boostWeight * currentAmount) / PRECISION_FACTOR;\\n            user.userBoostedShare += userBoostedShare;\\n            totalBoostDebt += userBoostedShare;\\n\\n            // Update lock amount.\\n            user.lockedAmount += _amount;\\n            totalLockedAmount += _amount;\\n\\n            emit Lock(_user, user.lockedAmount, user.shares, (user.lockEndTime - user.lockStartTime), block.timestamp);\\n        } else {\\n            user.shares += currentShares;\\n        }\\n\\n        if (_amount > 0 || _lockDuration > 0) {\\n            user.lastDepositedTime = block.timestamp;\\n        }\\n        totalShares += currentShares;\\n\\n        user.cakeAtLastUserAction = (user.shares * balanceOf()) / totalShares - user.userBoostedShare;\\n        user.lastUserActionTime = block.timestamp;\\n\\n        // Update user info in Boost Contract.\\n        updateBoostContractInfo(_user);\\n\\n        emit Deposit(_user, _amount, currentShares, _lockDuration, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Withdraw funds from the Cake Pool.\\n     * @param _amount: Number of amount to withdraw\\n     */\\n    function withdrawByAmount(uint256 _amount) public whenNotPaused {\\n        require(_amount > MIN_WITHDRAW_AMOUNT, \\\"Withdraw amount must be greater than MIN_WITHDRAW_AMOUNT\\\");\\n        withdrawOperation(0, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw funds from the Cake Pool.\\n     * @param _shares: Number of shares to withdraw\\n     */\\n    function withdraw(uint256 _shares) public whenNotPaused {\\n        require(_shares > 0, \\\"Nothing to withdraw\\\");\\n        withdrawOperation(_shares, 0);\\n    }\\n\\n    /**\\n     * @notice The operation of withdraw.\\n     * @param _shares: Number of shares to withdraw\\n     * @param _amount: Number of amount to withdraw\\n     */\\n    function withdrawOperation(uint256 _shares, uint256 _amount) internal {\\n        UserInfo storage user = userInfo[msg.sender];\\n        require(_shares <= user.shares, \\\"Withdraw amount exceeds balance\\\");\\n        require(user.lockEndTime < block.timestamp, \\\"Still in lock\\\");\\n\\n        if (VCake != address(0)) {\\n            IVCake(VCake).withdraw(msg.sender);\\n        }\\n\\n        // Calculate the percent of withdraw shares, when unlocking or calculating the Performance fee, the shares will be updated.\\n        uint256 currentShare = _shares;\\n        uint256 sharesPercent = (_shares * PRECISION_FACTOR_SHARE) / user.shares;\\n\\n        // Harvest token from MasterchefV2.\\n        harvest();\\n\\n        // Update user share.\\n        updateUserShare(msg.sender);\\n\\n        if (_shares == 0 && _amount > 0) {\\n            uint256 pool = balanceOf();\\n            currentShare = (_amount * totalShares) / pool;\\n            // Calculate equivalent shares\\n            if (currentShare > user.shares) {\\n                currentShare = user.shares;\\n            }\\n        } else {\\n            currentShare = (sharesPercent * user.shares) / PRECISION_FACTOR_SHARE;\\n        }\\n        uint256 currentAmount = (balanceOf() * currentShare) / totalShares;\\n        user.shares -= currentShare;\\n        totalShares -= currentShare;\\n\\n        // Calculate withdraw fee\\n        if (!freeWithdrawFeeUsers[msg.sender] && (block.timestamp < user.lastDepositedTime + withdrawFeePeriod)) {\\n            uint256 feeRate = withdrawFee;\\n            if (_isContract(msg.sender)) {\\n                feeRate = withdrawFeeContract;\\n            }\\n            uint256 currentWithdrawFee = (currentAmount * feeRate) / 10000;\\n            token.safeTransfer(treasury, currentWithdrawFee);\\n            currentAmount -= currentWithdrawFee;\\n        }\\n\\n        token.safeTransfer(msg.sender, currentAmount);\\n\\n        if (user.shares > 0) {\\n            user.cakeAtLastUserAction = (user.shares * balanceOf()) / totalShares;\\n        } else {\\n            user.cakeAtLastUserAction = 0;\\n        }\\n\\n        user.lastUserActionTime = block.timestamp;\\n\\n        // Update user info in Boost Contract.\\n        updateBoostContractInfo(msg.sender);\\n\\n        emit Withdraw(msg.sender, currentAmount, currentShare);\\n    }\\n\\n    /**\\n     * @notice Withdraw all funds for a user\\n     */\\n    function withdrawAll() external {\\n        withdraw(userInfo[msg.sender].shares);\\n    }\\n\\n    /**\\n     * @notice Harvest pending CAKE tokens from MasterChef\\n     */\\n    function harvest() internal {\\n        uint256 pendingCake = masterchefV2.pendingCake(cakePoolPID, address(this));\\n        if (pendingCake > 0) {\\n            uint256 balBefore = available();\\n            masterchefV2.withdraw(cakePoolPID, 0);\\n            uint256 balAfter = available();\\n            emit Harvest(msg.sender, (balAfter - balBefore));\\n        }\\n    }\\n\\n    /**\\n     * @notice Set admin address\\n     * @dev Only callable by the contract owner.\\n     */\\n    function setAdmin(address _admin) external onlyOwner {\\n        require(_admin != address(0), \\\"Cannot be zero address\\\");\\n        admin = _admin;\\n        emit NewAdmin(admin);\\n    }\\n\\n    /**\\n     * @notice Set treasury address\\n     * @dev Only callable by the contract owner.\\n     */\\n    function setTreasury(address _treasury) external onlyOwner {\\n        require(_treasury != address(0), \\\"Cannot be zero address\\\");\\n        treasury = _treasury;\\n        emit NewTreasury(treasury);\\n    }\\n\\n    /**\\n     * @notice Set operator address\\n     * @dev Callable by the contract owner.\\n     */\\n    function setOperator(address _operator) external onlyOwner {\\n        require(_operator != address(0), \\\"Cannot be zero address\\\");\\n        operator = _operator;\\n        emit NewOperator(operator);\\n    }\\n\\n    /**\\n     * @notice Set Boost Contract address\\n     * @dev Callable by the contract admin.\\n     */\\n    function setBoostContract(address _boostContract) external onlyAdmin {\\n        require(_boostContract != address(0), \\\"Cannot be zero address\\\");\\n        boostContract = _boostContract;\\n        emit NewBoostContract(boostContract);\\n    }\\n\\n    /**\\n     * @notice Set VCake Contract address\\n     * @dev Callable by the contract admin.\\n     */\\n    function setVCakeContract(address _VCake) external onlyAdmin {\\n        require(_VCake != address(0), \\\"Cannot be zero address\\\");\\n        VCake = _VCake;\\n        emit NewVCakeContract(VCake);\\n    }\\n\\n    /**\\n     * @notice Set free performance fee address\\n     * @dev Only callable by the contract admin.\\n     * @param _user: User address\\n     * @param _free: true:free false:not free\\n     */\\n    function setFreePerformanceFeeUser(address _user, bool _free) external onlyAdmin {\\n        require(_user != address(0), \\\"Cannot be zero address\\\");\\n        freePerformanceFeeUsers[_user] = _free;\\n        emit FreeFeeUser(_user, _free);\\n    }\\n\\n    /**\\n     * @notice Set free overdue fee address\\n     * @dev Only callable by the contract admin.\\n     * @param _user: User address\\n     * @param _free: true:free false:not free\\n     */\\n    function setOverdueFeeUser(address _user, bool _free) external onlyAdmin {\\n        require(_user != address(0), \\\"Cannot be zero address\\\");\\n        freeOverdueFeeUsers[_user] = _free;\\n        emit FreeFeeUser(_user, _free);\\n    }\\n\\n    /**\\n     * @notice Set free withdraw fee address\\n     * @dev Only callable by the contract admin.\\n     * @param _user: User address\\n     * @param _free: true:free false:not free\\n     */\\n    function setWithdrawFeeUser(address _user, bool _free) external onlyAdmin {\\n        require(_user != address(0), \\\"Cannot be zero address\\\");\\n        freeWithdrawFeeUsers[_user] = _free;\\n        emit FreeFeeUser(_user, _free);\\n    }\\n\\n    /**\\n     * @notice Set performance fee\\n     * @dev Only callable by the contract admin.\\n     */\\n    function setPerformanceFee(uint256 _performanceFee) external onlyAdmin {\\n        require(_performanceFee <= MAX_PERFORMANCE_FEE, \\\"performanceFee cannot be more than MAX_PERFORMANCE_FEE\\\");\\n        performanceFee = _performanceFee;\\n        emit NewPerformanceFee(performanceFee);\\n    }\\n\\n    /**\\n     * @notice Set performance fee for contract\\n     * @dev Only callable by the contract admin.\\n     */\\n    function setPerformanceFeeContract(uint256 _performanceFeeContract) external onlyAdmin {\\n        require(\\n            _performanceFeeContract <= MAX_PERFORMANCE_FEE,\\n            \\\"performanceFee cannot be more than MAX_PERFORMANCE_FEE\\\"\\n        );\\n        performanceFeeContract = _performanceFeeContract;\\n        emit NewPerformanceFeeContract(performanceFeeContract);\\n    }\\n\\n    /**\\n     * @notice Set withdraw fee\\n     * @dev Only callable by the contract admin.\\n     */\\n    function setWithdrawFee(uint256 _withdrawFee) external onlyAdmin {\\n        require(_withdrawFee <= MAX_WITHDRAW_FEE, \\\"withdrawFee cannot be more than MAX_WITHDRAW_FEE\\\");\\n        withdrawFee = _withdrawFee;\\n        emit NewWithdrawFee(withdrawFee);\\n    }\\n\\n    /**\\n     * @notice Set overdue fee\\n     * @dev Only callable by the contract admin.\\n     */\\n    function setOverdueFee(uint256 _overdueFee) external onlyAdmin {\\n        require(_overdueFee <= MAX_OVERDUE_FEE, \\\"overdueFee cannot be more than MAX_OVERDUE_FEE\\\");\\n        overdueFee = _overdueFee;\\n        emit NewOverdueFee(_overdueFee);\\n    }\\n\\n    /**\\n     * @notice Set withdraw fee for contract\\n     * @dev Only callable by the contract admin.\\n     */\\n    function setWithdrawFeeContract(uint256 _withdrawFeeContract) external onlyAdmin {\\n        require(_withdrawFeeContract <= MAX_WITHDRAW_FEE, \\\"withdrawFee cannot be more than MAX_WITHDRAW_FEE\\\");\\n        withdrawFeeContract = _withdrawFeeContract;\\n        emit NewWithdrawFeeContract(withdrawFeeContract);\\n    }\\n\\n    /**\\n     * @notice Set withdraw fee period\\n     * @dev Only callable by the contract admin.\\n     */\\n    function setWithdrawFeePeriod(uint256 _withdrawFeePeriod) external onlyAdmin {\\n        require(\\n            _withdrawFeePeriod <= MAX_WITHDRAW_FEE_PERIOD,\\n            \\\"withdrawFeePeriod cannot be more than MAX_WITHDRAW_FEE_PERIOD\\\"\\n        );\\n        withdrawFeePeriod = _withdrawFeePeriod;\\n        emit NewWithdrawFeePeriod(withdrawFeePeriod);\\n    }\\n\\n    /**\\n     * @notice Set MAX_LOCK_DURATION\\n     * @dev Only callable by the contract admin.\\n     */\\n    function setMaxLockDuration(uint256 _maxLockDuration) external onlyAdmin {\\n        require(\\n            _maxLockDuration <= MAX_LOCK_DURATION_LIMIT,\\n            \\\"MAX_LOCK_DURATION cannot be more than MAX_LOCK_DURATION_LIMIT\\\"\\n        );\\n        MAX_LOCK_DURATION = _maxLockDuration;\\n        emit NewMaxLockDuration(_maxLockDuration);\\n    }\\n\\n    /**\\n     * @notice Set DURATION_FACTOR\\n     * @dev Only callable by the contract admin.\\n     */\\n    function setDurationFactor(uint256 _durationFactor) external onlyAdmin {\\n        require(_durationFactor > 0, \\\"DURATION_FACTOR cannot be zero\\\");\\n        DURATION_FACTOR = _durationFactor;\\n        emit NewDurationFactor(_durationFactor);\\n    }\\n\\n    /**\\n     * @notice Set DURATION_FACTOR_OVERDUE\\n     * @dev Only callable by the contract admin.\\n     */\\n    function setDurationFactorOverdue(uint256 _durationFactorOverdue) external onlyAdmin {\\n        require(_durationFactorOverdue > 0, \\\"DURATION_FACTOR_OVERDUE cannot be zero\\\");\\n        DURATION_FACTOR_OVERDUE = _durationFactorOverdue;\\n        emit NewDurationFactorOverdue(_durationFactorOverdue);\\n    }\\n\\n    /**\\n     * @notice Set UNLOCK_FREE_DURATION\\n     * @dev Only callable by the contract admin.\\n     */\\n    function setUnlockFreeDuration(uint256 _unlockFreeDuration) external onlyAdmin {\\n        require(_unlockFreeDuration > 0, \\\"UNLOCK_FREE_DURATION cannot be zero\\\");\\n        UNLOCK_FREE_DURATION = _unlockFreeDuration;\\n        emit NewUnlockFreeDuration(_unlockFreeDuration);\\n    }\\n\\n    /**\\n     * @notice Set BOOST_WEIGHT\\n     * @dev Only callable by the contract admin.\\n     */\\n    function setBoostWeight(uint256 _boostWeight) external onlyAdmin {\\n        require(_boostWeight <= BOOST_WEIGHT_LIMIT, \\\"BOOST_WEIGHT cannot be more than BOOST_WEIGHT_LIMIT\\\");\\n        BOOST_WEIGHT = _boostWeight;\\n        emit NewBoostWeight(_boostWeight);\\n    }\\n\\n    /**\\n     * @notice Withdraw unexpected tokens sent to the Cake Pool\\n     */\\n    function inCaseTokensGetStuck(address _token) external onlyAdmin {\\n        require(_token != address(token), \\\"Token cannot be same as deposit token\\\");\\n\\n        uint256 amount = IERC20(_token).balanceOf(address(this));\\n        IERC20(_token).safeTransfer(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Trigger stopped state\\n     * @dev Only possible when contract not paused.\\n     */\\n    function pause() external onlyAdmin whenNotPaused {\\n        _pause();\\n        emit Pause();\\n    }\\n\\n    /**\\n     * @notice Return to normal state\\n     * @dev Only possible when contract is paused.\\n     */\\n    function unpause() external onlyAdmin whenPaused {\\n        _unpause();\\n        emit Unpause();\\n    }\\n\\n    /**\\n     * @notice Calculate Performance fee.\\n     * @param _user: User address\\n     * @return Returns Performance fee.\\n     */\\n    function calculatePerformanceFee(address _user) public view returns (uint256) {\\n        UserInfo storage user = userInfo[_user];\\n        if (user.shares > 0 && !user.locked && !freePerformanceFeeUsers[_user]) {\\n            uint256 pool = balanceOf() + calculateTotalPendingCakeRewards();\\n            uint256 totalAmount = (user.shares * pool) / totalShares;\\n            uint256 earnAmount = totalAmount - user.cakeAtLastUserAction;\\n            uint256 feeRate = performanceFee;\\n            if (_isContract(_user)) {\\n                feeRate = performanceFeeContract;\\n            }\\n            uint256 currentPerformanceFee = (earnAmount * feeRate) / 10000;\\n            return currentPerformanceFee;\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Calculate overdue fee.\\n     * @param _user: User address\\n     * @return Returns Overdue fee.\\n     */\\n    function calculateOverdueFee(address _user) public view returns (uint256) {\\n        UserInfo storage user = userInfo[_user];\\n        if (\\n            user.shares > 0 &&\\n            user.locked &&\\n            !freeOverdueFeeUsers[_user] &&\\n            ((user.lockEndTime + UNLOCK_FREE_DURATION) < block.timestamp)\\n        ) {\\n            uint256 pool = balanceOf() + calculateTotalPendingCakeRewards();\\n            uint256 currentAmount = (pool * (user.shares)) / totalShares - user.userBoostedShare;\\n            uint256 earnAmount = currentAmount - user.lockedAmount;\\n            uint256 overdueDuration = block.timestamp - user.lockEndTime - UNLOCK_FREE_DURATION;\\n            if (overdueDuration > DURATION_FACTOR_OVERDUE) {\\n                overdueDuration = DURATION_FACTOR_OVERDUE;\\n            }\\n            // Rates are calculated based on the user's overdue duration.\\n            uint256 overdueWeight = (overdueDuration * overdueFee) / DURATION_FACTOR_OVERDUE;\\n            uint256 currentOverdueFee = (earnAmount * overdueWeight) / PRECISION_FACTOR;\\n            return currentOverdueFee;\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Calculate Performance Fee Or Overdue Fee\\n     * @param _user: User address\\n     * @return Returns  Performance Fee Or Overdue Fee.\\n     */\\n    function calculatePerformanceFeeOrOverdueFee(address _user) internal view returns (uint256) {\\n        return calculatePerformanceFee(_user) + calculateOverdueFee(_user);\\n    }\\n\\n    /**\\n     * @notice Calculate withdraw fee.\\n     * @param _user: User address\\n     * @param _shares: Number of shares to withdraw\\n     * @return Returns Withdraw fee.\\n     */\\n    function calculateWithdrawFee(address _user, uint256 _shares) public view returns (uint256) {\\n        UserInfo storage user = userInfo[_user];\\n        if (user.shares < _shares) {\\n            _shares = user.shares;\\n        }\\n        if (!freeWithdrawFeeUsers[msg.sender] && (block.timestamp < user.lastDepositedTime + withdrawFeePeriod)) {\\n            uint256 pool = balanceOf() + calculateTotalPendingCakeRewards();\\n            uint256 sharesPercent = (_shares * PRECISION_FACTOR) / user.shares;\\n            uint256 currentTotalAmount = (pool * (user.shares)) /\\n                totalShares -\\n                user.userBoostedShare -\\n                calculatePerformanceFeeOrOverdueFee(_user);\\n            uint256 currentAmount = (currentTotalAmount * sharesPercent) / PRECISION_FACTOR;\\n            uint256 feeRate = withdrawFee;\\n            if (_isContract(msg.sender)) {\\n                feeRate = withdrawFeeContract;\\n            }\\n            uint256 currentWithdrawFee = (currentAmount * feeRate) / 10000;\\n            return currentWithdrawFee;\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Calculates the total pending rewards that can be harvested\\n     * @return Returns total pending cake rewards\\n     */\\n    function calculateTotalPendingCakeRewards() public view returns (uint256) {\\n        uint256 amount = masterchefV2.pendingCake(cakePoolPID, address(this));\\n        return amount;\\n    }\\n\\n    function getPricePerFullShare() external view returns (uint256) {\\n        return totalShares == 0 ? 1e18 : (((balanceOf() + calculateTotalPendingCakeRewards()) * (1e18)) / totalShares);\\n    }\\n\\n    /**\\n     * @notice Current pool available balance\\n     * @dev The contract puts 100% of the tokens to work.\\n     */\\n    function available() public view returns (uint256) {\\n        return token.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice Calculates the total underlying tokens\\n     * @dev It includes tokens held by the contract and the boost debt amount.\\n     */\\n    function balanceOf() public view returns (uint256) {\\n        return token.balanceOf(address(this)) + totalBoostDebt;\\n    }\\n\\n    /**\\n     * @notice Checks if address is a contract\\n     */\\n    function _isContract(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x28814f2587ed6743239983db39281eabbe6670e1109d63de29c39d4f3663cedb\",\"license\":\"MIT\"},\"contracts/mocks/IBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IBEP20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the token decimals.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the token symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the bep token owner.\\n     */\\n    function getOwner() external view returns (address);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address _owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6fcf0529bafdc9b785715a43eb373b4f8dcc4f4f12fdb1939778b37c996076d4\",\"license\":\"MIT\"},\"contracts/mocks/MasterChefV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// copy from https://bscscan.com/address/0xa5f8C5Dbd5F286960b9d90548680aE5ebFf07652#code#F1#L1\\n\\npragma solidity 0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./SafeBEP20.sol\\\";\\nimport \\\"./IBEP20.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ninterface IMasterChef {\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n\\n    function enterStaking(uint256 _amount) external;\\n\\n    function leaveStaking(uint256 _amount) external;\\n\\n    function pendingCake(uint256 _pid, address _user) external view returns (uint256);\\n\\n    function userInfo(uint256 _pid, address _user) external view returns (uint256, uint256);\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n}\\n\\n/// @notice The (older) MasterChef contract gives out a constant number of CAKE tokens per block.\\n/// It is the only address with minting rights for CAKE.\\n/// The idea for this MasterChef V2 (MCV2) contract is therefore to be the owner of a dummy token\\n/// that is deposited into the MasterChef V1 (MCV1) contract.\\n/// The allocation point for this pool on MCV1 is the total allocation point for all pools that receive incentives.\\ncontract MasterChefV2 is Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeBEP20 for IBEP20;\\n\\n    /// @notice Info of each MCV2 user.\\n    /// `amount` LP token amount the user has provided.\\n    /// `rewardDebt` Used to calculate the correct amount of rewards. See explanation below.\\n    ///\\n    /// We do some fancy math here. Basically, any point in time, the amount of CAKEs\\n    /// entitled to a user but is pending to be distributed is:\\n    ///\\n    ///   pending reward = (user share * pool.accCakePerShare) - user.rewardDebt\\n    ///\\n    ///   Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n    ///   1. The pool's `accCakePerShare` (and `lastRewardBlock`) gets updated.\\n    ///   2. User receives the pending reward sent to his/her address.\\n    ///   3. User's `amount` gets updated. Pool's `totalBoostedShare` gets updated.\\n    ///   4. User's `rewardDebt` gets updated.\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n        uint256 boostMultiplier;\\n    }\\n\\n    /// @notice Info of each MCV2 pool.\\n    /// `allocPoint` The amount of allocation points assigned to the pool.\\n    ///     Also known as the amount of \\\"multipliers\\\". Combined with `totalXAllocPoint`, it defines the % of\\n    ///     CAKE rewards each pool gets.\\n    /// `accCakePerShare` Accumulated CAKEs per share, times 1e12.\\n    /// `lastRewardBlock` Last block number that pool update action is executed.\\n    /// `isRegular` The flag to set pool is regular or special. See below:\\n    ///     In MasterChef V2 farms are \\\"regular pools\\\". \\\"special pools\\\", which use a different sets of\\n    ///     `allocPoint` and their own `totalSpecialAllocPoint` are designed to handle the distribution of\\n    ///     the CAKE rewards to all the PancakeSwap products.\\n    /// `totalBoostedShare` The total amount of user shares in each pool. After considering the share boosts.\\n    struct PoolInfo {\\n        uint256 accCakePerShare;\\n        uint256 lastRewardBlock;\\n        uint256 allocPoint;\\n        uint256 totalBoostedShare;\\n        bool isRegular;\\n    }\\n\\n    /// @notice Address of MCV1 contract.\\n    IMasterChef public immutable MASTER_CHEF;\\n    /// @notice Address of CAKE contract.\\n    IBEP20 public immutable CAKE;\\n\\n    /// @notice The only address can withdraw all the burn CAKE.\\n    address public burnAdmin;\\n    /// @notice The contract handles the share boosts.\\n    address public boostContract;\\n\\n    /// @notice Info of each MCV2 pool.\\n    PoolInfo[] public poolInfo;\\n    /// @notice Address of the LP token for each MCV2 pool.\\n    IBEP20[] public lpToken;\\n\\n    /// @notice Info of each pool user.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n    /// @notice The whitelist of addresses allowed to deposit in special pools.\\n    mapping(address => bool) public whiteList;\\n\\n    /// @notice The pool id of the MCV2 mock token pool in MCV1.\\n    uint256 public immutable MASTER_PID;\\n    /// @notice Total regular allocation points. Must be the sum of all regular pools' allocation points.\\n    uint256 public totalRegularAllocPoint;\\n    /// @notice Total special allocation points. Must be the sum of all special pools' allocation points.\\n    uint256 public totalSpecialAllocPoint;\\n    ///  @notice 40 cakes per block in MCV1\\n    uint256 public constant MASTERCHEF_CAKE_PER_BLOCK = 40 * 1e18;\\n    uint256 public constant ACC_CAKE_PRECISION = 1e18;\\n\\n    /// @notice Basic boost factor, none boosted user's boost factor\\n    uint256 public constant BOOST_PRECISION = 100 * 1e10;\\n    /// @notice Hard limit for maxmium boost factor, it must greater than BOOST_PRECISION\\n    uint256 public constant MAX_BOOST_PRECISION = 200 * 1e10;\\n    /// @notice total cake rate = toBurn + toRegular + toSpecial\\n    uint256 public constant CAKE_RATE_TOTAL_PRECISION = 1e12;\\n    /// @notice The last block number of CAKE burn action being executed.\\n    /// @notice CAKE distribute % for burn\\n    uint256 public cakeRateToBurn = 643750000000;\\n    /// @notice CAKE distribute % for regular farm pool\\n    uint256 public cakeRateToRegularFarm = 62847222222;\\n    /// @notice CAKE distribute % for special pools\\n    uint256 public cakeRateToSpecialFarm = 293402777778;\\n\\n    uint256 public lastBurnedBlock;\\n\\n    event Init();\\n    event AddPool(uint256 indexed pid, uint256 allocPoint, IBEP20 indexed lpToken, bool isRegular);\\n    event SetPool(uint256 indexed pid, uint256 allocPoint);\\n    event UpdatePool(uint256 indexed pid, uint256 lastRewardBlock, uint256 lpSupply, uint256 accCakePerShare);\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    event UpdateCakeRate(uint256 burnRate, uint256 regularFarmRate, uint256 specialFarmRate);\\n    event UpdateBurnAdmin(address indexed oldAdmin, address indexed newAdmin);\\n    event UpdateWhiteList(address indexed user, bool isValid);\\n    event UpdateBoostContract(address indexed boostContract);\\n    event UpdateBoostMultiplier(address indexed user, uint256 pid, uint256 oldMultiplier, uint256 newMultiplier);\\n\\n    /// @param _MASTER_CHEF The PancakeSwap MCV1 contract address.\\n    /// @param _CAKE The CAKE token contract address.\\n    /// @param _MASTER_PID The pool id of the dummy pool on the MCV1.\\n    /// @param _burnAdmin The address of burn admin.\\n    constructor(\\n        IMasterChef _MASTER_CHEF,\\n        IBEP20 _CAKE,\\n        uint256 _MASTER_PID,\\n        address _burnAdmin\\n    ) {\\n        MASTER_CHEF = _MASTER_CHEF;\\n        CAKE = _CAKE;\\n        MASTER_PID = _MASTER_PID;\\n        burnAdmin = _burnAdmin;\\n    }\\n\\n    /**\\n     * @dev Throws if caller is not the boost contract.\\n     */\\n    modifier onlyBoostContract() {\\n        require(boostContract == msg.sender, \\\"Ownable: caller is not the boost contract\\\");\\n        _;\\n    }\\n\\n    /// @notice Deposits a dummy token to `MASTER_CHEF` MCV1. This is required because MCV1 holds the minting permission of CAKE.\\n    /// It will transfer all the `dummyToken` in the tx sender address.\\n    /// The allocation point for the dummy pool on MCV1 should be equal to the total amount of allocPoint.\\n    /// @param dummyToken The address of the BEP-20 token to be deposited into MCV1.\\n    function init(IBEP20 dummyToken) external onlyOwner {\\n        uint256 balance = dummyToken.balanceOf(msg.sender);\\n        require(balance != 0, \\\"MasterChefV2: Balance must exceed 0\\\");\\n        dummyToken.safeTransferFrom(msg.sender, address(this), balance);\\n        dummyToken.approve(address(MASTER_CHEF), balance);\\n        MASTER_CHEF.deposit(MASTER_PID, balance);\\n        // MCV2 start to earn CAKE reward from current block in MCV1 pool\\n        lastBurnedBlock = block.number;\\n        emit Init();\\n    }\\n\\n    /// @notice Returns the number of MCV2 pools.\\n    function poolLength() public view returns (uint256 pools) {\\n        pools = poolInfo.length;\\n    }\\n\\n    /// @notice Add a new pool. Can only be called by the owner.\\n    /// DO NOT add the same LP token more than once. Rewards will be messed up if you do.\\n    /// @param _allocPoint Number of allocation points for the new pool.\\n    /// @param _lpToken Address of the LP BEP-20 token.\\n    /// @param _isRegular Whether the pool is regular or special. LP farms are always \\\"regular\\\". \\\"Special\\\" pools are\\n    /// @param _withUpdate Whether call \\\"massUpdatePools\\\" operation.\\n    /// only for CAKE distributions within PancakeSwap products.\\n    function add(\\n        uint256 _allocPoint,\\n        IBEP20 _lpToken,\\n        bool _isRegular,\\n        bool _withUpdate\\n    ) external onlyOwner {\\n        require(_lpToken.balanceOf(address(this)) >= 0, \\\"None BEP20 tokens\\\");\\n        // stake CAKE token will cause staked token and reward token mixed up,\\n        // may cause staked tokens withdraw as reward token,never do it.\\n        require(_lpToken != CAKE, \\\"CAKE token can't be added to farm pools\\\");\\n\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        if (_isRegular) {\\n            totalRegularAllocPoint = totalRegularAllocPoint.add(_allocPoint);\\n        } else {\\n            totalSpecialAllocPoint = totalSpecialAllocPoint.add(_allocPoint);\\n        }\\n        lpToken.push(_lpToken);\\n\\n        poolInfo.push(\\n            PoolInfo({\\n                allocPoint: _allocPoint,\\n                lastRewardBlock: block.number,\\n                accCakePerShare: 0,\\n                isRegular: _isRegular,\\n                totalBoostedShare: 0\\n            })\\n        );\\n        emit AddPool(lpToken.length.sub(1), _allocPoint, _lpToken, _isRegular);\\n    }\\n\\n    /// @notice Update the given pool's CAKE allocation point. Can only be called by the owner.\\n    /// @param _pid The id of the pool. See `poolInfo`.\\n    /// @param _allocPoint New number of allocation points for the pool.\\n    /// @param _withUpdate Whether call \\\"massUpdatePools\\\" operation.\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate\\n    ) external onlyOwner {\\n        // No matter _withUpdate is true or false, we need to execute updatePool once before set the pool parameters.\\n        updatePool(_pid);\\n\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        if (poolInfo[_pid].isRegular) {\\n            totalRegularAllocPoint = totalRegularAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\\n        } else {\\n            totalSpecialAllocPoint = totalSpecialAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\\n        }\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        emit SetPool(_pid, _allocPoint);\\n    }\\n\\n    /// @notice View function for checking pending CAKE rewards.\\n    /// @param _pid The id of the pool. See `poolInfo`.\\n    /// @param _user Address of the user.\\n    function pendingCake(uint256 _pid, address _user) external view returns (uint256) {\\n        PoolInfo memory pool = poolInfo[_pid];\\n        UserInfo memory user = userInfo[_pid][_user];\\n        uint256 accCakePerShare = pool.accCakePerShare;\\n        uint256 lpSupply = pool.totalBoostedShare;\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n            uint256 multiplier = block.number.sub(pool.lastRewardBlock);\\n\\n            uint256 cakeReward = multiplier.mul(cakePerBlock(pool.isRegular)).mul(pool.allocPoint).div(\\n                (pool.isRegular ? totalRegularAllocPoint : totalSpecialAllocPoint)\\n            );\\n            accCakePerShare = accCakePerShare.add(cakeReward.mul(ACC_CAKE_PRECISION).div(lpSupply));\\n        }\\n\\n        uint256 boostedAmount = user.amount.mul(getBoostMultiplier(_user, _pid)).div(BOOST_PRECISION);\\n        return boostedAmount.mul(accCakePerShare).div(ACC_CAKE_PRECISION).sub(user.rewardDebt);\\n    }\\n\\n    /// @notice Update cake reward for all the active pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            PoolInfo memory pool = poolInfo[pid];\\n            if (pool.allocPoint != 0) {\\n                updatePool(pid);\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates and returns the `amount` of CAKE per block.\\n    /// @param _isRegular If the pool belongs to regular or special.\\n    function cakePerBlock(bool _isRegular) public view returns (uint256 amount) {\\n        if (_isRegular) {\\n            amount = MASTERCHEF_CAKE_PER_BLOCK.mul(cakeRateToRegularFarm).div(CAKE_RATE_TOTAL_PRECISION);\\n        } else {\\n            amount = MASTERCHEF_CAKE_PER_BLOCK.mul(cakeRateToSpecialFarm).div(CAKE_RATE_TOTAL_PRECISION);\\n        }\\n    }\\n\\n    /// @notice Calculates and returns the `amount` of CAKE per block to burn.\\n    function cakePerBlockToBurn() public view returns (uint256 amount) {\\n        amount = MASTERCHEF_CAKE_PER_BLOCK.mul(cakeRateToBurn).div(CAKE_RATE_TOTAL_PRECISION);\\n    }\\n\\n    /// @notice Update reward variables for the given pool.\\n    /// @param _pid The id of the pool. See `poolInfo`.\\n    /// @return pool Returns the pool that was updated.\\n    function updatePool(uint256 _pid) public returns (PoolInfo memory pool) {\\n        pool = poolInfo[_pid];\\n        if (block.number > pool.lastRewardBlock) {\\n            uint256 lpSupply = pool.totalBoostedShare;\\n            uint256 totalAllocPoint = (pool.isRegular ? totalRegularAllocPoint : totalSpecialAllocPoint);\\n\\n            if (lpSupply > 0 && totalAllocPoint > 0) {\\n                uint256 multiplier = block.number.sub(pool.lastRewardBlock);\\n                uint256 cakeReward = multiplier.mul(cakePerBlock(pool.isRegular)).mul(pool.allocPoint).div(\\n                    totalAllocPoint\\n                );\\n                pool.accCakePerShare = pool.accCakePerShare.add((cakeReward.mul(ACC_CAKE_PRECISION).div(lpSupply)));\\n            }\\n            pool.lastRewardBlock = block.number;\\n            poolInfo[_pid] = pool;\\n            emit UpdatePool(_pid, pool.lastRewardBlock, lpSupply, pool.accCakePerShare);\\n        }\\n    }\\n\\n    /// @notice Deposit LP tokens to pool.\\n    /// @param _pid The id of the pool. See `poolInfo`.\\n    /// @param _amount Amount of LP tokens to deposit.\\n    function deposit(uint256 _pid, uint256 _amount) external nonReentrant {\\n        PoolInfo memory pool = updatePool(_pid);\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        require(\\n            pool.isRegular || whiteList[msg.sender],\\n            \\\"MasterChefV2: The address is not available to deposit in this pool\\\"\\n        );\\n\\n        uint256 multiplier = getBoostMultiplier(msg.sender, _pid);\\n\\n        if (user.amount > 0) {\\n            settlePendingCake(msg.sender, _pid, multiplier);\\n        }\\n\\n        if (_amount > 0) {\\n            uint256 before = lpToken[_pid].balanceOf(address(this));\\n            lpToken[_pid].safeTransferFrom(msg.sender, address(this), _amount);\\n            _amount = lpToken[_pid].balanceOf(address(this)).sub(before);\\n            user.amount = user.amount.add(_amount);\\n\\n            // Update total boosted share.\\n            pool.totalBoostedShare = pool.totalBoostedShare.add(_amount.mul(multiplier).div(BOOST_PRECISION));\\n        }\\n\\n        user.rewardDebt = user.amount.mul(multiplier).div(BOOST_PRECISION).mul(pool.accCakePerShare).div(\\n            ACC_CAKE_PRECISION\\n        );\\n        poolInfo[_pid] = pool;\\n\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    /// @notice Withdraw LP tokens from pool.\\n    /// @param _pid The id of the pool. See `poolInfo`.\\n    /// @param _amount Amount of LP tokens to withdraw.\\n    function withdraw(uint256 _pid, uint256 _amount) external nonReentrant {\\n        PoolInfo memory pool = updatePool(_pid);\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        require(user.amount >= _amount, \\\"withdraw: Insufficient\\\");\\n\\n        uint256 multiplier = getBoostMultiplier(msg.sender, _pid);\\n\\n        settlePendingCake(msg.sender, _pid, multiplier);\\n\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            lpToken[_pid].safeTransfer(msg.sender, _amount);\\n        }\\n\\n        user.rewardDebt = user.amount.mul(multiplier).div(BOOST_PRECISION).mul(pool.accCakePerShare).div(\\n            ACC_CAKE_PRECISION\\n        );\\n        poolInfo[_pid].totalBoostedShare = poolInfo[_pid].totalBoostedShare.sub(\\n            _amount.mul(multiplier).div(BOOST_PRECISION)\\n        );\\n\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    /// @notice Harvests CAKE from `MASTER_CHEF` MCV1 and pool `MASTER_PID` to MCV2.\\n    function harvestFromMasterChef() public {\\n        MASTER_CHEF.deposit(MASTER_PID, 0);\\n    }\\n\\n    /// @notice Withdraw without caring about the rewards. EMERGENCY ONLY.\\n    /// @param _pid The id of the pool. See `poolInfo`.\\n    function emergencyWithdraw(uint256 _pid) external nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        uint256 amount = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        uint256 boostedAmount = amount.mul(getBoostMultiplier(msg.sender, _pid)).div(BOOST_PRECISION);\\n        pool.totalBoostedShare = pool.totalBoostedShare > boostedAmount ? pool.totalBoostedShare.sub(boostedAmount) : 0;\\n\\n        // Note: transfer can fail or succeed if `amount` is zero.\\n        lpToken[_pid].safeTransfer(msg.sender, amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\n    }\\n\\n    /// @notice Send CAKE pending for burn to `burnAdmin`.\\n    /// @param _withUpdate Whether call \\\"massUpdatePools\\\" operation.\\n    function burnCake(bool _withUpdate) public onlyOwner {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n\\n        uint256 multiplier = block.number.sub(lastBurnedBlock);\\n        uint256 pendingCakeToBurn = multiplier.mul(cakePerBlockToBurn());\\n\\n        // SafeTransfer CAKE\\n        _safeTransfer(burnAdmin, pendingCakeToBurn);\\n        lastBurnedBlock = block.number;\\n    }\\n\\n    /// @notice Update the % of CAKE distributions for burn, regular pools and special pools.\\n    /// @param _burnRate The % of CAKE to burn each block.\\n    /// @param _regularFarmRate The % of CAKE to regular pools each block.\\n    /// @param _specialFarmRate The % of CAKE to special pools each block.\\n    /// @param _withUpdate Whether call \\\"massUpdatePools\\\" operation.\\n    function updateCakeRate(\\n        uint256 _burnRate,\\n        uint256 _regularFarmRate,\\n        uint256 _specialFarmRate,\\n        bool _withUpdate\\n    ) external onlyOwner {\\n        require(\\n            _burnRate > 0 && _regularFarmRate > 0 && _specialFarmRate > 0,\\n            \\\"MasterChefV2: Cake rate must be greater than 0\\\"\\n        );\\n        require(\\n            _burnRate.add(_regularFarmRate).add(_specialFarmRate) == CAKE_RATE_TOTAL_PRECISION,\\n            \\\"MasterChefV2: Total rate must be 1e12\\\"\\n        );\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        // burn cake base on old burn cake rate\\n        burnCake(false);\\n\\n        cakeRateToBurn = _burnRate;\\n        cakeRateToRegularFarm = _regularFarmRate;\\n        cakeRateToSpecialFarm = _specialFarmRate;\\n\\n        emit UpdateCakeRate(_burnRate, _regularFarmRate, _specialFarmRate);\\n    }\\n\\n    /// @notice Update burn admin address.\\n    /// @param _newAdmin The new burn admin address.\\n    function updateBurnAdmin(address _newAdmin) external onlyOwner {\\n        require(_newAdmin != address(0), \\\"MasterChefV2: Burn admin address must be valid\\\");\\n        require(_newAdmin != burnAdmin, \\\"MasterChefV2: Burn admin address is the same with current address\\\");\\n        address _oldAdmin = burnAdmin;\\n        burnAdmin = _newAdmin;\\n        emit UpdateBurnAdmin(_oldAdmin, _newAdmin);\\n    }\\n\\n    /// @notice Update whitelisted addresses for special pools.\\n    /// @param _user The address to be updated.\\n    /// @param _isValid The flag for valid or invalid.\\n    function updateWhiteList(address _user, bool _isValid) external onlyOwner {\\n        require(_user != address(0), \\\"MasterChefV2: The white list address must be valid\\\");\\n\\n        whiteList[_user] = _isValid;\\n        emit UpdateWhiteList(_user, _isValid);\\n    }\\n\\n    /// @notice Update boost contract address and max boost factor.\\n    /// @param _newBoostContract The new address for handling all the share boosts.\\n    function updateBoostContract(address _newBoostContract) external onlyOwner {\\n        require(\\n            _newBoostContract != address(0) && _newBoostContract != boostContract,\\n            \\\"MasterChefV2: New boost contract address must be valid\\\"\\n        );\\n\\n        boostContract = _newBoostContract;\\n        emit UpdateBoostContract(_newBoostContract);\\n    }\\n\\n    /// @notice Update user boost factor.\\n    /// @param _user The user address for boost factor updates.\\n    /// @param _pid The pool id for the boost factor updates.\\n    /// @param _newMultiplier New boost multiplier.\\n    function updateBoostMultiplier(\\n        address _user,\\n        uint256 _pid,\\n        uint256 _newMultiplier\\n    ) external onlyBoostContract nonReentrant {\\n        require(_user != address(0), \\\"MasterChefV2: The user address must be valid\\\");\\n        require(poolInfo[_pid].isRegular, \\\"MasterChefV2: Only regular farm could be boosted\\\");\\n        require(\\n            _newMultiplier >= BOOST_PRECISION && _newMultiplier <= MAX_BOOST_PRECISION,\\n            \\\"MasterChefV2: Invalid new boost multiplier\\\"\\n        );\\n\\n        PoolInfo memory pool = updatePool(_pid);\\n        UserInfo storage user = userInfo[_pid][_user];\\n\\n        uint256 prevMultiplier = getBoostMultiplier(_user, _pid);\\n        settlePendingCake(_user, _pid, prevMultiplier);\\n\\n\\n\\n\\n\\n\\n        user.rewardDebt = user.amount.mul(_newMultiplier).div(BOOST_PRECISION).mul(pool.accCakePerShare).div(\\n            ACC_CAKE_PRECISION\\n        );\\n        pool.totalBoostedShare = pool.totalBoostedShare.sub(user.amount.mul(prevMultiplier).div(BOOST_PRECISION)).add(\\n            user.amount.mul(_newMultiplier).div(BOOST_PRECISION)\\n        );\\n        poolInfo[_pid] = pool;\\n        userInfo[_pid][_user].boostMultiplier = _newMultiplier;\\n\\n        emit UpdateBoostMultiplier(_user, _pid, prevMultiplier, _newMultiplier);\\n    }\\n\\n    /// @notice Get user boost multiplier for specific pool id.\\n    /// @param _user The user address.\\n    /// @param _pid The pool id.\\n    function getBoostMultiplier(address _user, uint256 _pid) public view returns (uint256) {\\n        uint256 multiplier = userInfo[_pid][_user].boostMultiplier;\\n        return multiplier > BOOST_PRECISION ? multiplier : BOOST_PRECISION;\\n    }\\n\\n    /// @notice Settles, distribute the pending CAKE rewards for given user.\\n    /// @param _user The user address for settling rewards.\\n    /// @param _pid The pool id.\\n    /// @param _boostMultiplier The user boost multiplier in specific pool id.\\n    function settlePendingCake(\\n        address _user,\\n        uint256 _pid,\\n        uint256 _boostMultiplier\\n    ) internal {\\n        UserInfo memory user = userInfo[_pid][_user];\\n\\n        uint256 boostedAmount = user.amount.mul(_boostMultiplier).div(BOOST_PRECISION);\\n        uint256 accCake = boostedAmount.mul(poolInfo[_pid].accCakePerShare).div(ACC_CAKE_PRECISION);\\n        uint256 pending = accCake.sub(user.rewardDebt);\\n        // SafeTransfer CAKE\\n        _safeTransfer(_user, pending);\\n    }\\n\\n    /// @notice Safe Transfer CAKE.\\n    /// @param _to The CAKE receiver address.\\n    /// @param _amount transfer CAKE amounts.\\n    function _safeTransfer(address _to, uint256 _amount) internal {\\n        if (_amount > 0) {\\n            // Check whether MCV2 has enough CAKE. If not, harvest from MCV1.\\n            if (CAKE.balanceOf(address(this)) < _amount) {\\n                harvestFromMasterChef();\\n            }\\n            uint256 balance = CAKE.balanceOf(address(this));\\n            if (balance < _amount) {\\n                _amount = balance;\\n            }\\n            CAKE.safeTransfer(_to, _amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0a69e219ce6c78ccc0d1c211d8d6651188eb5db0db0410b7d7a7c344dd1882c1\",\"license\":\"MIT\"},\"contracts/mocks/SafeBEP20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"./IBEP20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/**\\n * @title SafeBEP20\\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeBEP20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IBEP20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IBEP20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IBEP20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeBEP20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IBEP20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\n            value,\\n            \\\"SafeBEP20: decreased allowance below zero\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeBEP20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeBEP20: BEP20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1506842db370e04549731737a7038c38b748f57ad5b0101cbea76d967808aa80\",\"license\":\"MIT\"},\"contracts/underlyings/pancake/BondLPPancakeFarmingPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\n\\n\\nimport \\\"../../interfaces/IPancakeMasterChefV2.sol\\\";\\nimport \\\"../../BondLPFarmingPool.sol\\\";\\n\\ncontract BondLPPancakeFarmingPool is BondLPFarmingPool {\\n    IERC20Upgradeable public cakeToken;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    IPancakeMasterChefV2 public pancakeMasterChef;\\n\\n    uint256 public pancakeMasterChefPid;\\n\\n    /**\\n     * @dev accumulated cake rewards of each lp token.\\n     */\\n    uint256 public accPancakeRewardsPerShares;\\n\\n    struct PancakeUserInfo {\\n        /**\\n         * like sushi rewardDebt\\n         */\\n        uint256 rewardDebt;\\n        /**\\n         * @dev Rewards credited to rewardDebt but not yet claimed\\n         */\\n        uint256 pendingRewards;\\n        /**\\n         * @dev claimed rewards. for 'earned to date' calculation.\\n         */\\n        uint256 claimedRewards;\\n    }\\n\\n    mapping(address => PancakeUserInfo) public pancakeUsersInfo;\\n\\n    function initPancake(\\n        IERC20Upgradeable cakeToken_,\\n        IPancakeMasterChefV2 pancakeMasterChef_,\\n        uint256 pancakeMasterChefPid_\\n    ) external onlyAdmin {\\n        require(\\n            address(pancakeMasterChef_) != address(0) &&\\n                pancakeMasterChefPid_ != 0 &&\\n                address(cakeToken_) != address(0),\\n            \\\"Invalid inputs\\\"\\n        );\\n        require(\\n            address(pancakeMasterChef) == address(0) && pancakeMasterChefPid == 0,\\n            \\\"can not modify pancakeMasterChef\\\"\\n        );\\n        cakeToken = cakeToken_;\\n        pancakeMasterChef = pancakeMasterChef_;\\n        pancakeMasterChefPid = pancakeMasterChefPid_;\\n    }\\n\\n    function _requirePancakeSettled() internal view {\\n        require(\\n            address(pancakeMasterChef) != address(0) && pancakeMasterChefPid != 0 && address(cakeToken) != address(0),\\n            \\\"Pancake not settled\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev stake to pancakeswap\\n     * @param user_ user to stake\\n     * @param amount_ amount to stake\\n     */\\n    function _stakeRemote(address user_, uint256 amount_) internal override {\\n        _requirePancakeSettled();\\n        UserInfo storage userInfo = usersInfo[user_];\\n        PancakeUserInfo storage pancakeUserInfo = pancakeUsersInfo[user_];\\n\\n        if (userInfo.lpAmount > 0) {\\n            uint256 sharesReward = (accPancakeRewardsPerShares * userInfo.lpAmount) / ACC_REWARDS_PRECISION;\\n            pancakeUserInfo.pendingRewards += sharesReward - userInfo.rewardDebt;\\n            pancakeUserInfo.rewardDebt =\\n                (accPancakeRewardsPerShares * (userInfo.lpAmount + amount_)) /\\n                ACC_REWARDS_PRECISION;\\n        } else {\\n            pancakeUserInfo.rewardDebt = (accPancakeRewardsPerShares * amount_) / ACC_REWARDS_PRECISION;\\n        }\\n\\n        if (amount_ > 0) {\\n            lpToken.safeApprove(address(pancakeMasterChef), amount_);\\n            // deposit to pancake\\n            pancakeMasterChef.deposit(pancakeMasterChefPid, amount_);\\n        }\\n    }\\n\\n    /**\\n     * @dev unstake from pancakeswap\\n     * @param user_ user to unstake\\n     * @param amount_ amount to unstake\\n     */\\n    function _unstakeRemote(address user_, uint256 amount_) internal override {\\n        _requirePancakeSettled();\\n        UserInfo storage userInfo = usersInfo[user_];\\n        PancakeUserInfo storage pancakeUserInfo = pancakeUsersInfo[user_];\\n\\n        uint256 sharesReward = (accRewardPerShare * userInfo.lpAmount) / ACC_REWARDS_PRECISION;\\n        uint256 pendingRewards = sharesReward + pancakeUserInfo.pendingRewards - userInfo.rewardDebt;\\n        pancakeUserInfo.pendingRewards = 0;\\n        pancakeUserInfo.rewardDebt = sharesReward;\\n\\n        // withdraw from pancake\\n        pancakeMasterChef.withdraw(pancakeMasterChefPid, amount_);\\n\\n        // send cake rewards\\n        cakeToken.safeTransfer(user_, pendingRewards);\\n        pancakeUserInfo.claimedRewards += pendingRewards;\\n    }\\n\\n    /**\\n     * @dev harvest from pancakeswap\\n     */\\n    function _harvestRemote() internal override {\\n        _requirePancakeSettled();\\n\\n        uint256 previousCakeAmount = cakeToken.balanceOf(address(this));\\n        pancakeMasterChef.deposit(pancakeMasterChefPid, 0);\\n        uint256 afterCakeAmount = cakeToken.balanceOf(address(this));\\n        uint256 newRewards = afterCakeAmount - previousCakeAmount;\\n        if (newRewards > 0) {\\n            accPancakeRewardsPerShares += (newRewards * ACC_REWARDS_PRECISION) / totalLpAmount;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3a8a365774cdfd618ff3893fd6d8659d866aabc60ff2f4ca919d5b810115363d\",\"license\":\"GPL-3.0\"},\"contracts/underlyings/pancake/ExtendableBondedCake.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"../../ExtendableBond.sol\\\";\\nimport \\\"../../interfaces/ICakePool.sol\\\";\\n\\ncontract ExtendableBondedCake is ExtendableBond {\\n    /**\\n     * CakePool contract\\n     */\\n    ICakePool public cakePool;\\n\\n    function setCakePool(ICakePool cakePool_) external onlyAdmin {\\n        cakePool = cakePool_;\\n    }\\n\\n    /**\\n     * @dev calculate cake amount from pancake.\\n     */\\n    function remoteUnderlyingAmount() public view override returns (uint256) {\\n        ICakePool.UserInfo memory userInfo = cakePool.userInfo(address(this));\\n        uint256 pricePerFullShare = cakePool.getPricePerFullShare();\\n        uint256 withdrawFee = !cakePool.freeWithdrawFeeUsers(address(this)) &&\\n            userInfo.lockEndTime < userInfo.lastDepositedTime + cakePool.withdrawFeePeriod()\\n            ? cakePool.calculateWithdrawFee(address(this), userInfo.shares)\\n            : 0;\\n        return (userInfo.shares * pricePerFullShare) / 1e18 - userInfo.userBoostedShare - withdrawFee;\\n    }\\n\\n    /**\\n     * @dev calculate cake amount from pancake.\\n     */\\n    function pancakeUserInfo() public view returns (ICakePool.UserInfo memory) {\\n        return cakePool.userInfo(address(this));\\n    }\\n\\n    /**\\n     * @dev withdraw from pancakeswap\\n     */\\n    function _withdrawFromRemote(uint256 amount_) internal override {\\n        cakePool.withdrawByAmount(amount_);\\n    }\\n\\n    /**\\n     * @dev deposit to pancakeswap\\n     */\\n    function _depositRemote(uint256 amount_) internal override {\\n        uint256 balance = underlyingToken.balanceOf(address(this));\\n        require(balance > 0 && balance >= amount_, \\\"nothing to deposit\\\");\\n        underlyingToken.approve(address(cakePool), amount_);\\n        cakePool.deposit(amount_, secondsToPancakeLockExtend());\\n    }\\n\\n    function secondsToPancakeLockExtend() public view returns (uint256) {\\n        uint256 secondsToExtend = 0;\\n        uint256 currentTime = block.timestamp;\\n        ICakePool.UserInfo memory bondUnderlyingCakeInfo = cakePool.userInfo(address(this));\\n        // lock expired or cake lockEndTime earlier than maturity, extend lock time required.\\n        if (\\n            bondUnderlyingCakeInfo.lockEndTime <= currentTime ||\\n            !bondUnderlyingCakeInfo.locked ||\\n            bondUnderlyingCakeInfo.lockEndTime < checkPoints.maturity\\n        ) {\\n            secondsToExtend = MathUpgradeable.min(checkPoints.maturity - currentTime, cakePool.MAX_LOCK_DURATION());\\n        }\\n        return secondsToExtend >= 0 ? secondsToExtend : 0;\\n    }\\n\\n    /**\\n     * @dev Withdraw cake from cake pool.\\n     */\\n    function withdrawAllCakesFromPancake(bool makeRedeemable_) public onlyAdminOrKeeper {\\n        checkPoints.convertable = false;\\n        cakePool.withdrawAll();\\n        if (makeRedeemable_) {\\n            checkPoints.redeemable = true;\\n        }\\n    }\\n\\n    /**\\n     * @dev extend pancake lock duration if needs\\n     */\\n    function extendPancakeLockDuration() public onlyAdminOrKeeper {\\n        uint256 secondsToExtend = secondsToPancakeLockExtend();\\n        if (secondsToExtend > 0) {\\n            cakePool.deposit(0, secondsToPancakeLockExtend());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0b3098b65a3c502cee92ae4f377134996ca6d36ee35e54e92fd1489aec8322f3\",\"license\":\"GPL-3.0\"},\"contracts/underlyings/pancake/ExtendableBondedCakeReader.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./ExtendableBondedCake.sol\\\";\\nimport \\\"./BondLPPancakeFarmingPool.sol\\\";\\nimport \\\"../../ExtendableBond.sol\\\";\\nimport \\\"../../ExtendableBondReader.sol\\\";\\nimport \\\"../../ExtendableBondAdmin.sol\\\";\\nimport \\\"../../interfaces/ICakePool.sol\\\";\\nimport \\\"../../interfaces/IPancakePair.sol\\\";\\nimport \\\"../../mocks/CakePool.sol\\\";\\nimport \\\"../../mocks/MasterChefV2.sol\\\";\\nimport \\\"../../BondToken.sol\\\";\\n\\n\\nuint constant BOOST_WEIGHT = 2e13;\\nuint constant DURATION_FACTOR = 365 * 24 * 60 * 60;\\nuint constant PRECISION_FACTOR = 1e12;\\nuint constant WEI_PER_EHTER = 1e18;\\nuint constant PANCAKE_CAKE_POOL_ID = 0;\\n\\n\\n\\n  // --------\\n\\n\\ncontract ExtendableBondedCakeReader is ExtendableBondReader {\\n    using Math for uint256;\\n\\n    struct ExtendableBondGroupInfo {\\n        uint256 allEbStacked;\\n        uint256 ebCommonPriceAsUsd;\\n        uint256 duetSideAPR;\\n        uint256 underlyingSideAPR;\\n    }\\n\\n    struct AddressBook {\\n      address underlyingToken;\\n      address bondToken;\\n      address lpToken;\\n      address bondFarmingPool;\\n      address bondLpFarmingPool;\\n      address multiRewardsMasterChef;\\n      uint256 bondFarmingPoolId;\\n      uint256 bondLpFarmingPoolId;\\n      address pancakePool;\\n    }\\n\\n    ExtendableBondAdmin public immutable entrypoint;\\n    IPancakePair public immutable pairTokenAddress__CAKE_BUSD;\\n    IPancakePair public immutable pairTokenAddress__BUSD_DUET;\\n    // IPancakePair public immutable pairTokenAddress__DUET_CAKE;\\n\\n    CakePool public immutable pancakePool;\\n    MasterChefV2 public immutable pancakeMasterChef;\\n\\n    constructor (\\n        ExtendableBondAdmin entrypoint_,\\n        IPancakePair pairTokenAddress__CAKE_BUSD_,\\n        IPancakePair pairTokenAddress__BUSD_DUET_,\\n        // IPancakePair pairTokenAddress__DUET_CAKE_,\\n        CakePool pancakePool_,\\n        MasterChefV2 pancakeMasterChef_\\n    ) {\\n        entrypoint = entrypoint_;\\n        pairTokenAddress__CAKE_BUSD = pairTokenAddress__CAKE_BUSD_;\\n        // pairTokenAddress__DUET_CAKE = pairTokenAddress__DUET_CAKE_;\\n        pairTokenAddress__BUSD_DUET = pairTokenAddress__BUSD_DUET_;\\n        pancakePool = pancakePool_;\\n        pancakeMasterChef = pancakeMasterChef_;\\n    }\\n\\n    function addressBook(ExtendableBondedCake eb_) view external returns (AddressBook memory book) {\\n      BondFarmingPool bondFarmingPool = BondFarmingPool(address(eb_.bondFarmingPool()));\\n      BondLPPancakeFarmingPool bondLpFarmingPool = BondLPPancakeFarmingPool(address(eb_.bondLPFarmingPool()));\\n      MultiRewardsMasterChef multiRewardsMasterChef = bondFarmingPool.masterChef();\\n\\n      book.underlyingToken = address(eb_.underlyingToken());\\n      book.bondToken = address(eb_.bondToken());\\n      book.lpToken = address(bondLpFarmingPool.lpToken());\\n      book.bondFarmingPool = address(eb_.bondFarmingPool());\\n      book.bondLpFarmingPool = address(eb_.bondLPFarmingPool());\\n      book.multiRewardsMasterChef = address(multiRewardsMasterChef);\\n      book.bondFarmingPoolId = bondFarmingPool.masterChefPid();\\n      book.bondLpFarmingPoolId = bondLpFarmingPool.masterChefPid();\\n      book.pancakePool = address(eb_.cakePool());\\n    }\\n\\n    // -------------\\n\\n    function extendableBondGroupInfo(string calldata groupName_) view external returns (ExtendableBondGroupInfo memory) {\\n        uint256 allEbStacked;\\n        uint256 sumCakePrices;\\n        address[] memory addresses = entrypoint.groupedAddresses(groupName_);\\n        // uint256 maxDuetSideAPR;\\n        for (uint256 i; i < addresses.length; i++) {\\n            address ebAddress = addresses[i];\\n            ExtendableBondedCake eb = ExtendableBondedCake(ebAddress);\\n            allEbStacked += ExtendableBond(ebAddress).totalUnderlyingAmount();\\n            sumCakePrices += _unsafely_getUnderlyingPriceAsUsd(eb);\\n            // uint256 underlyingAPY = _getUnderlyingAPY(eb);\\n            // uint256 extraMaxSideAPR = _getSingleStake_bDuetAPR(eb).max(_getLpStake_bDuetAPR(eb));\\n            // maxDuetSideAPR = maxDuetSideAPR.max(underlyingAPY + extraMaxSideAPR);\\n        }\\n        uint256 cakeCommonPrice = addresses.length > 0 ? sumCakePrices / addresses.length : 0;\\n        // uint256 underlyingSideAPR = _getPancakeSyrupAPR();\\n\\n        uint256 maxDuetSideAPR; // @TODO\\n        uint256 underlyingSideAPR; // @TODO\\n        ExtendableBondGroupInfo memory ebGroupInfo = ExtendableBondGroupInfo({\\n            allEbStacked: allEbStacked,\\n            ebCommonPriceAsUsd: cakeCommonPrice,\\n            duetSideAPR: maxDuetSideAPR,\\n            underlyingSideAPR: underlyingSideAPR\\n        });\\n        return ebGroupInfo;\\n    }\\n\\n    // -------------\\n\\n    /**\\n     * Estimates token price by multi-fetching data from DEX.\\n     * There are some issues like time-lag and precision problems.\\n     * It's OK to do estimation but not for trading basis.\\n     */\\n    function _unsafely_getDuetPriceAsUsd(ExtendableBond eb_) view internal override returns (uint256) {\\n        BondLPPancakeFarmingPool pool = BondLPPancakeFarmingPool(address(eb_.bondLPFarmingPool()));\\n        IPancakePair cakeWithEbCakeLpPairToken = IPancakePair(address(pool.lpToken()));\\n\\n        uint256 ebCakeLpTotalSupply = cakeWithEbCakeLpPairToken.totalSupply();\\n        if (ebCakeLpTotalSupply == 0) return 0;\\n        // ( uint256 cakeReserve0, uint256 busdReserve0, ) = pairTokenAddress__CAKE_BUSD.getReserves();\\n        // ( uint256 duetReserve1, uint256 cakeReserve1, ) = pairTokenAddress__DUET_CAKE.getReserves();\\n        // uint256 alignedDuetPoint = duetReserve1 * cakeReserve0;\\n        // uint256 alignedBusdPoint = busdReserve0 * cakeReserve1;\\n        // if (alignedBusdPoint == 0) return 0;\\n        // return alignedDuetPoint / alignedBusdPoint * ebCakeLpTotalSupply;\\n\\n        ( uint256 busdReserve, uint256 duetReserve, ) = pairTokenAddress__BUSD_DUET.getReserves();\\n        if (busdReserve == 0 ) return 0;\\n        return duetReserve / busdReserve * ebCakeLpTotalSupply;\\n    }\\n\\n    /**\\n     * Estimates token price by multi-fetching data from DEX.\\n     * There are some issues like time-lag and precision problems.\\n     * It's OK to do estimation but not for trading basis.\\n     */\\n    function _unsafely_getUnderlyingPriceAsUsd(ExtendableBond eb_) view internal override returns (uint256) {\\n        BondLPPancakeFarmingPool pool = BondLPPancakeFarmingPool(address(eb_.bondLPFarmingPool()));\\n        IPancakePair cakeWithEbCakeLpPairToken = IPancakePair(address(pool.lpToken()));\\n\\n        uint256 ebCakeLpTotalSupply = cakeWithEbCakeLpPairToken.totalSupply();\\n        if (ebCakeLpTotalSupply == 0) return 0;\\n        ( uint256 cakeReserve, uint256 busdReserve, ) = pairTokenAddress__CAKE_BUSD.getReserves();\\n        if (busdReserve == 0 ) return 0;\\n        return cakeReserve / busdReserve * ebCakeLpTotalSupply;\\n    }\\n\\n    function _getBondPriceAsUnderlying(ExtendableBond eb_) view internal override returns (uint256) {\\n        BondLPPancakeFarmingPool pool = BondLPPancakeFarmingPool(address(eb_.bondLPFarmingPool()));\\n        IPancakePair cakeWithEbCakeLpPairToken = IPancakePair(address(pool.lpToken()));\\n\\n        ( uint256 cakeReserve, uint256 ebCakeReserve, ) = cakeWithEbCakeLpPairToken.getReserves();\\n        if (ebCakeReserve == 0) return 0;\\n        return cakeReserve / ebCakeReserve;\\n    }\\n\\n    function _getLpStackedReserves(ExtendableBond eb_) view internal override returns (uint256 cakeReserve, uint256 ebCakeReserve) {\\n        BondLPPancakeFarmingPool pool = BondLPPancakeFarmingPool(address(eb_.bondLPFarmingPool()));\\n        IPancakePair cakeWithEbCakeLpPairToken = IPancakePair(address(pool.lpToken()));\\n\\n        ( cakeReserve, ebCakeReserve, ) = cakeWithEbCakeLpPairToken.getReserves();\\n    }\\n\\n    function _getLpStackedTotalSupply(ExtendableBond eb_) view internal override returns (uint256) {\\n        BondLPPancakeFarmingPool pool = BondLPPancakeFarmingPool(address(eb_.bondLPFarmingPool()));\\n        IPancakePair cakeWithEbCakeLpPairToken = IPancakePair(address(pool.lpToken()));\\n\\n        return cakeWithEbCakeLpPairToken.totalSupply();\\n    }\\n\\n    function _getEbFarmingPoolId(ExtendableBond eb_) view internal override returns (uint256) {\\n        BondLPPancakeFarmingPool pool = BondLPPancakeFarmingPool(address(eb_.bondLPFarmingPool()));\\n        return pool.pancakeMasterChefPid();\\n    }\\n\\n    function _getUnderlyingAPY(ExtendableBond eb_) view internal override returns (uint256) {\\n        ExtendableBondedCake eb = ExtendableBondedCake(address(eb_));\\n        ICakePool pool = eb.cakePool();\\n        ICakePool.UserInfo memory pui = pool.userInfo(address(eb.bondToken()));\\n\\n        uint specialFarmsPerBlock = pancakeMasterChef.cakePerBlock(false);\\n        ( , , uint allocPoint, , ) = pancakeMasterChef.poolInfo(PANCAKE_CAKE_POOL_ID);\\n\\n        uint totalSpecialAllocPoint = pancakeMasterChef.totalSpecialAllocPoint();\\n\\n        uint cakePoolSharesInSpecialFarms = allocPoint / totalSpecialAllocPoint;\\n        uint totalCakePoolEmissionPerYear = specialFarmsPerBlock * BLOCKS_PER_YEAR * cakePoolSharesInSpecialFarms;\\n\\n        uint pricePerFullShareAsEther = pancakePool.getPricePerFullShare();\\n        uint totalSharesAsEther = pancakePool.totalShares();\\n\\n        uint flexibleApy = totalCakePoolEmissionPerYear * WEI_PER_EHTER / pricePerFullShareAsEther / totalSharesAsEther * 100;\\n\\n        uint256 duration = pui.lockEndTime - pui.lockStartTime;\\n        uint boostFactor = BOOST_WEIGHT * duration.max(0) / DURATION_FACTOR / PRECISION_FACTOR;\\n\\n        uint lockedAPY = flexibleApy * (boostFactor + 1);\\n        return lockedAPY;\\n    }\\n\\n    // function _getLpStake_extraAPR(ExtendableBond eb_) view internal override returns (uint256) {\\n    //     ( , , uint allocPoint, , bool isRegular ) = pancakeMasterChef.poolInfo(PANCAKE_CAKE_POOL_ID);\\n\\n    //     uint poolWeight = allocPoint / (isRegular ? pancakeMasterChef.totalRegularAllocPoint() : pancakeMasterChef.totalSpecialAllocPoint());\\n    //     uint cakePerYear = pancakeMasterChef.cakePerBlock(isRegular) * BLOCKS_PER_YEAR;\\n\\n    //     uint yearlyCakeRewardAllocation = poolWeight * cakePerYear;\\n    //     uint cakePrice = _unsafely_getUnderlyingPriceAsUsd(eb_);\\n\\n    //     IPancakePair cakeWithBusdLpPairToken = IPancakePair(pairTokenAddress__CAKE_BUSD);\\n    //     uint shareRatio = cakeWithBusdLpPairToken.balanceOf(address(eb_.cakePool())) / cakeWithBusdLpPairToken.totalSupply();\\n    //     uint liquidityUSD = shareRatio *\\n\\n\\n    //     return yearlyCakeRewardAllocation * cakePrice / WEI_PER_EHTER / { poolLiquidityUsd } * 100\\n    // }\\n\\n\\n    // function _getUserLpStakedExtraPendingRewardsAmount(ExtendableBond eb_, address user_) view internal override returns (uint256 amount) {\\n\\n    // }\\n\\n    // -------------\\n\\n    function _getPancakeSyrupAPR() view internal returns (uint256) {\\n        ( , , uint allocPoint, , bool isRegular ) = pancakeMasterChef.poolInfo(PANCAKE_CAKE_POOL_ID);\\n\\n        uint totalAllocPoint = (isRegular ? pancakeMasterChef.totalRegularAllocPoint() : pancakeMasterChef.totalSpecialAllocPoint());\\n        if (totalAllocPoint == 0) return 0;\\n\\n        uint poolWeight = allocPoint / totalAllocPoint;\\n        uint totalCakePoolEmissionPerYear = poolWeight * pancakeMasterChef.cakePerBlock(isRegular);\\n\\n        uint pricePerFullShare = pancakePool.getPricePerFullShare();\\n        uint totalShares = pancakePool.totalShares();\\n        uint sharesRatio = pricePerFullShare * totalShares / 100;\\n        if (sharesRatio == 0) return 0;\\n\\n        uint flexibleAPY = totalCakePoolEmissionPerYear * WEI_PER_EHTER / sharesRatio;\\n\\n        uint performanceFeeAsDecimal = 2;\\n        uint rewardPercentageNoFee = 1 - performanceFeeAsDecimal / 100;\\n        return flexibleAPY * rewardPercentageNoFee;\\n    }\\n\\n}\\n\\n\",\"keccak256\":\"0x665737e946c4398e9e385ce4437531c69dbdaec03996c6ae13bc797adfae2641\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063a65d69d411610066578063a65d69d41461024a578063aba19e6014610271578063c8bac06014610298578063ca5ee5ab146102bf578063cdab5bed146102e657600080fd5b806319ca7b74146100a35780631ac7d423146100cc578063602cc58f1461010b57806373283dac146101515780639590cf28146101ba575b600080fd5b6100b66100b13660046122a5565b6102f9565b6040516100c3919061231e565b60405180910390f35b6100f37f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100c3565b61011e610119366004612433565b610855565b6040516100c391908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b61016461015f3660046122a5565b610a4a565b6040516100c39190600060e082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015292915050565b6101cd6101c83660046122a5565b610ccf565b6040516100c3919081516001600160a01b03908116825260208084015182169083015260408084015182169083015260608084015182169083015260808084015182169083015260a08084015182169083015260c0808401519083015260e080840151908301526101009283015116918101919091526101200190565b6100f37f000000000000000000000000000000000000000000000000000000000000000081565b6100f37f000000000000000000000000000000000000000000000000000000000000000081565b6100f37f000000000000000000000000000000000000000000000000000000000000000081565b6100f37f000000000000000000000000000000000000000000000000000000000000000081565b61011e6102f43660046122a5565b6112a7565b6103876040518061022001604052806060815260200160608152602001600060ff1681526020016000815260200160008152602001600015158152602001600081526020016000815260200160001515815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000826001600160a01b031663b3cb305b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156103c257600080fd5b505afa1580156103d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fa91906124a5565b90506000836001600160a01b0316635cb7758e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561043757600080fd5b505afa15801561044b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046f91906124a5565b905060008060008060008060008a6001600160a01b0316633dae08cc6040518163ffffffff1660e01b815260040160e06040518083038186803b1580156104b557600080fd5b505afa1580156104c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ed91906124d7565b965096509650965096509650965060008b6001600160a01b031663c28f43926040518163ffffffff1660e01b815260040160206040518083038186803b15801561053657600080fd5b505afa15801561054a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056e91906124a5565b90506000604051806102200160405280836001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b1580156105b757600080fd5b505afa1580156105cb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105f391908101906125aa565b8152602001836001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561063157600080fd5b505afa158015610645573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261066d91908101906125aa565b8152602001836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156106ab57600080fd5b505afa1580156106bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e3919061263e565b60ff1681526020016106f48f61162f565b81526020016107028f611880565b81526020018a151581526020018981526020018881526020018715158152602001868152602001858152602001848152602001600081526020018c6001600160a01b031663d759c3cc60006040518263ffffffff1660e01b815260040161076d911515815260200190565b60206040518083038186803b15801561078557600080fd5b505afa158015610799573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bd9190612661565b8152602001600081526020018b6001600160a01b031663532d73976040518163ffffffff1660e01b815260040160206040518083038186803b15801561080257600080fd5b505afa158015610816573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083a9190612661565b815260006020909101529d9c50505050505050505050505050565b6108806040518060800160405280600081526020016000815260200160008152602001600081525090565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e0ea7b3187876040518363ffffffff1660e01b81526004016108d392919061267a565b60006040518083038186803b1580156108eb57600080fd5b505afa1580156108ff573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261092791908101906126cd565b905060005b81518110156109ff57600082828151811061094957610949612761565b602002602001015190506000819050816001600160a01b0316634a1dfebf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561099157600080fd5b505afa1580156109a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c99190612661565b6109d3908761278d565b95506109de8161162f565b6109e8908661278d565b9450505080806109f7906127a5565b91505061092c565b50600080825111610a11576000610a1d565b8151610a1d90846127c0565b60408051608081018252958652602086019190915260009085018190526060850152509195945050505050565b610a8a6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b3380610ad65760405162461bcd60e51b8152602060048201526016602482015275496e76616c69642073656e646572206164647265737360501b60448201526064015b60405180910390fd5b6000836001600160a01b0316635cb7758e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b1157600080fd5b505afa158015610b25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4991906124a5565b604051635d0eaaaf60e01b81526001600160a01b038481166004830152919250600091829190841690635d0eaaaf9060240160806040518083038186803b158015610b9357600080fd5b505afa158015610ba7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcb91906127e2565b935050509150600080610bde8885611a1f565b915091506000610bf789610bf18b611a78565b89611b66565b6040516367be08fd60e11b81526001600160a01b03898116600483015291925060009188169063cf7c11fa9060240160206040518083038186803b158015610c3e57600080fd5b505afa158015610c52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c769190612661565b90506000610c8d8b610c878d611a78565b8b611d9e565b6040805160e0810182529687526020870195909552938501969096526060840152608083019390935260a082019290925260c081019190915295945050505050565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101919091526000826001600160a01b031663b3cb305b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d5357600080fd5b505afa158015610d67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8b91906124a5565b90506000836001600160a01b0316635cb7758e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dc857600080fd5b505afa158015610ddc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0091906124a5565b90506000826001600160a01b031663575a86b26040518163ffffffff1660e01b815260040160206040518083038186803b158015610e3d57600080fd5b505afa158015610e51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7591906124a5565b9050846001600160a01b0316632495a5996040518163ffffffff1660e01b815260040160206040518083038186803b158015610eb057600080fd5b505afa158015610ec4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee891906124a5565b6001600160a01b03908116855260408051636147a1c960e11b815290519187169163c28f439291600480820192602092909190829003018186803b158015610f2f57600080fd5b505afa158015610f43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6791906124a5565b84602001906001600160a01b031690816001600160a01b031681525050816001600160a01b0316635fcbd2856040518163ffffffff1660e01b815260040160206040518083038186803b158015610fbd57600080fd5b505afa158015610fd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff591906124a5565b84604001906001600160a01b031690816001600160a01b031681525050846001600160a01b031663b3cb305b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561104b57600080fd5b505afa15801561105f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108391906124a5565b84606001906001600160a01b031690816001600160a01b031681525050846001600160a01b0316635cb7758e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110d957600080fd5b505afa1580156110ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111191906124a5565b6001600160a01b03908116608086015281811660a08601526040805163c62c610b60e01b815290519185169163c62c610b91600480820192602092909190829003018186803b15801561116357600080fd5b505afa158015611177573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119b9190612661565b8460c0018181525050816001600160a01b031663c62c610b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156111dd57600080fd5b505afa1580156111f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112159190612661565b8460e0018181525050846001600160a01b031663ed64a9676040518163ffffffff1660e01b815260040160206040518083038186803b15801561125757600080fd5b505afa15801561126b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128f91906124a5565b6001600160a01b031661010085015250919392505050565b6112d26040518060800160405280600081526020016000815260200160008152602001600081525090565b33806113195760405162461bcd60e51b8152602060048201526016602482015275496e76616c69642073656e646572206164647265737360501b6044820152606401610acd565b6000836001600160a01b031663b3cb305b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561135457600080fd5b505afa158015611368573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138c91906124a5565b604051635d0eaaaf60e01b81526001600160a01b038481166004830152919250600091831690635d0eaaaf90602401604080518083038186803b1580156113d257600080fd5b505afa1580156113e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140a9190612818565b509050600061148a86846001600160a01b031663c62c610b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561144c57600080fd5b505afa158015611460573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114849190612661565b86611b66565b9050600061150987856001600160a01b031663c62c610b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156114cb57600080fd5b505afa1580156114df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115039190612661565b87611d9e565b604080516080810191829052630ed1ca5960e31b90915260848101859052909150600090806001600160a01b03871663768e52c860a4830160206040518083038186803b15801561155957600080fd5b505afa15801561156d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115919190612661565b815260405163015b078f60e31b81526001600160a01b038981166004830152602090920191881690630ad83c789060240160206040518083038186803b1580156115da57600080fd5b505afa1580156115ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116129190612661565b815260208101949094526040909301919091525095945050505050565b600080826001600160a01b0316635cb7758e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561166b57600080fd5b505afa15801561167f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a391906124a5565b90506000816001600160a01b0316635fcbd2856040518163ffffffff1660e01b815260040160206040518083038186803b1580156116e057600080fd5b505afa1580156116f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171891906124a5565b90506000816001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561175557600080fd5b505afa158015611769573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178d9190612661565b90508061179f57506000949350505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156117fb57600080fd5b505afa15801561180f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118339190612853565b506001600160701b031691506001600160701b031691508060001415611860575060009695505050505050565b8261186b82846127c0565b61187591906128a3565b979650505050505050565b600080826001600160a01b0316635cb7758e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118bc57600080fd5b505afa1580156118d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f491906124a5565b90506000816001600160a01b0316635fcbd2856040518163ffffffff1660e01b815260040160206040518083038186803b15801561193157600080fd5b505afa158015611945573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196991906124a5565b9050600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156119a757600080fd5b505afa1580156119bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119df9190612853565b506001600160701b031691506001600160701b031691508060001415611a0b5750600095945050505050565b611a1581836127c0565b9695505050505050565b6000806000611a2d85611fb3565b9050600080611a3b87612117565b909250905082611a4b87846128a3565b611a5591906127c0565b945082611a6287836128a3565b611a6c91906127c0565b93505050509250929050565b600080826001600160a01b0316635cb7758e6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ab457600080fd5b505afa158015611ac8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aec91906124a5565b9050806001600160a01b0316630a90cc0c6040518163ffffffff1660e01b815260040160206040518083038186803b158015611b2757600080fd5b505afa158015611b3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b5f9190612661565b9392505050565b600080846001600160a01b031663b3cb305b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611ba257600080fd5b505afa158015611bb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bda91906124a5565b90506000816001600160a01b031663575a86b26040518163ffffffff1660e01b815260040160206040518083038186803b158015611c1757600080fd5b505afa158015611c2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4f91906124a5565b6040516334637d4f60e21b8152600481018790526001600160a01b03868116602483015291925060009183169063d18df53c9060440160006040518083038186803b158015611c9d57600080fd5b505afa158015611cb1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611cd991908101906128c2565b905060005b826001600160a01b031663b3c799d66040518163ffffffff1660e01b815260040160206040518083038186803b158015611d1757600080fd5b505afa158015611d2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4f9190612661565b811015611d9357818181518110611d6857611d68612761565b60200260200101516020015185611d7f919061278d565b945080611d8b816127a5565b915050611cde565b505050509392505050565b600080846001600160a01b031663b3cb305b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611dda57600080fd5b505afa158015611dee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1291906124a5565b90506000816001600160a01b031663575a86b26040518163ffffffff1660e01b815260040160206040518083038186803b158015611e4f57600080fd5b505afa158015611e63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8791906124a5565b905060005b816001600160a01b031663b3c799d66040518163ffffffff1660e01b815260040160206040518083038186803b158015611ec557600080fd5b505afa158015611ed9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611efd9190612661565b811015611fa957604051630781d12560e11b8152600481018790526001600160a01b03868116602483015260448201839052831690630f03a24a9060640160206040518083038186803b158015611f5357600080fd5b505afa158015611f67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8b9190612661565b611f95908561278d565b935080611fa1816127a5565b915050611e8c565b5050509392505050565b600080826001600160a01b0316635cb7758e6040518163ffffffff1660e01b815260040160206040518083038186803b158015611fef57600080fd5b505afa158015612003573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061202791906124a5565b90506000816001600160a01b0316635fcbd2856040518163ffffffff1660e01b815260040160206040518083038186803b15801561206457600080fd5b505afa158015612078573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061209c91906124a5565b9050806001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156120d757600080fd5b505afa1580156120eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061210f9190612661565b949350505050565b6000806000836001600160a01b0316635cb7758e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561215557600080fd5b505afa158015612169573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061218d91906124a5565b90506000816001600160a01b0316635fcbd2856040518163ffffffff1660e01b815260040160206040518083038186803b1580156121ca57600080fd5b505afa1580156121de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061220291906124a5565b9050806001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561223d57600080fd5b505afa158015612251573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122759190612853565b506001600160701b0391821697911695509350505050565b6001600160a01b03811681146122a257600080fd5b50565b6000602082840312156122b757600080fd5b8135611b5f8161228d565b60005b838110156122dd5781810151838201526020016122c5565b838111156122ec576000848401525b50505050565b6000815180845261230a8160208601602086016122c2565b601f01601f19169290920160200192915050565b602081526000825161022080602085015261233d6102408501836122f2565b91506020850151601f1985840301604086015261235a83826122f2565b9250506040850151612371606086018260ff169052565b5060608501516080850152608085015160a085015260a085015161239960c086018215159052565b5060c085015160e085015260e08501516101008181870152808701519150506101206123c88187018315159052565b8601516101408681019190915286015161016080870191909152860151610180808701919091528601516101a0808701919091528601516101c0808701919091528601516101e080870191909152860151610200808701919091529095015193019290925250919050565b6000806020838503121561244657600080fd5b823567ffffffffffffffff8082111561245e57600080fd5b818501915085601f83011261247257600080fd5b81358181111561248157600080fd5b86602082850101111561249357600080fd5b60209290920196919550909350505050565b6000602082840312156124b757600080fd5b8151611b5f8161228d565b805180151581146124d257600080fd5b919050565b600080600080600080600060e0888a0312156124f257600080fd5b6124fb886124c2565b96506020880151955060408801519450612517606089016124c2565b93506080880151925060a0880151915060c0880151905092959891949750929550565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156125735761257361253a565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156125a2576125a261253a565b604052919050565b6000602082840312156125bc57600080fd5b815167ffffffffffffffff808211156125d457600080fd5b818401915084601f8301126125e857600080fd5b8151818111156125fa576125fa61253a565b61260d601f8201601f1916602001612579565b915080825285602082850101111561262457600080fd5b6126358160208401602086016122c2565b50949350505050565b60006020828403121561265057600080fd5b815160ff81168114611b5f57600080fd5b60006020828403121561267357600080fd5b5051919050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b600067ffffffffffffffff8211156126c3576126c361253a565b5060051b60200190565b600060208083850312156126e057600080fd5b825167ffffffffffffffff8111156126f757600080fd5b8301601f8101851361270857600080fd5b805161271b612716826126a9565b612579565b81815260059190911b8201830190838101908783111561273a57600080fd5b928401925b828410156118755783516127528161228d565b8252928401929084019061273f565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156127a0576127a0612777565b500190565b60006000198214156127b9576127b9612777565b5060010190565b6000826127dd57634e487b7160e01b600052601260045260246000fd5b500490565b600080600080608085870312156127f857600080fd5b505082516020840151604085015160609095015191969095509092509050565b6000806040838503121561282b57600080fd5b505080516020909101519092909150565b80516001600160701b03811681146124d257600080fd5b60008060006060848603121561286857600080fd5b6128718461283c565b925061287f6020850161283c565b9150604084015163ffffffff8116811461289857600080fd5b809150509250925092565b60008160001904831182151516156128bd576128bd612777565b500290565b600060208083850312156128d557600080fd5b825167ffffffffffffffff8111156128ec57600080fd5b8301601f810185136128fd57600080fd5b805161290b612716826126a9565b81815260069190911b8201830190838101908783111561292a57600080fd5b928401925b8284101561187557604084890312156129485760008081fd5b612950612550565b845161295b8161228d565b8152848601518682015282526040909301929084019061292f56fea2646970667358221220096ec3f853689e7a441bcbd09afe187ff8393d95297360a5aaba56285193a57d64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}