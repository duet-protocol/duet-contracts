{
  "language": "Solidity",
  "sources": {
    "contracts/BondFarmingPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\n\nimport \"@private/shared/libs/DuetMath.sol\";\nimport \"@private/shared/libs/Adminable.sol\";\n\nimport \"./ExtendableBond.sol\";\nimport \"./interfaces/IMultiRewardsMasterChef.sol\";\nimport \"./interfaces/IBondFarmingPool.sol\";\nimport \"./interfaces/IExtendableBond.sol\";\n\ncontract BondFarmingPool is PausableUpgradeable, ReentrancyGuardUpgradeable, IBondFarmingPool, Adminable {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n    IERC20Upgradeable public bondToken;\n    IExtendableBond public bond;\n    uint256 public totalShares = 0;\n    uint256 public lastUpdatedPoolAt = 0;\n    IBondFarmingPool public siblingPool;\n\n    IMultiRewardsMasterChef public masterChef;\n    uint256 public masterChefPid;\n\n    struct UserInfo {\n        /**\n         * @dev described compounded underlying bond token amount, user's shares / total shares * underlying amount = user's amount.\n         */\n        uint256 shares;\n        /**\n         * @notice accumulated net staked amount. only for earned to date calculation.\n         * @dev formula: accumulatedStakedAmount - accumulatedUnstakedAmount\n         */\n        int256 accNetStaked;\n    }\n\n    mapping(address => UserInfo) public usersInfo;\n\n    event Staked(address indexed user, uint256 amount);\n    event Unstaked(address indexed user, uint256 amount);\n    event SiblingPoolUpdated(address indexed previousPool, address indexed newPool);\n\n    function initialize(\n        IERC20Upgradeable bondToken_,\n        IExtendableBond bond_,\n        address admin_\n    ) public initializer {\n        __ReentrancyGuard_init();\n        __Pausable_init();\n        _setAdmin(admin_);\n        bondToken = bondToken_;\n        bond = bond_;\n    }\n\n    function setMasterChef(IMultiRewardsMasterChef masterChef_, uint256 masterChefPid_) public onlyAdmin {\n        masterChef = masterChef_;\n        masterChefPid = masterChefPid_;\n    }\n\n    function setSiblingPool(IBondFarmingPool siblingPool_) public onlyAdmin {\n        require(\n            (address(siblingPool_.siblingPool()) == address(0) ||\n                address(siblingPool_.siblingPool()) == address(this)) && address(siblingPool_) != address(this),\n            \"Invalid sibling\"\n        );\n        emit SiblingPoolUpdated(address(siblingPool), address(siblingPool_));\n        siblingPool = siblingPool_;\n    }\n\n    function claimBonuses() public {\n        address user = msg.sender;\n        UserInfo storage userInfo = usersInfo[user];\n        require(userInfo.shares > 0, \"Nothing to claim\");\n\n        masterChef.withdrawForUser(masterChefPid, 0, user);\n    }\n\n    /**\n     * @dev see: _updatePool\n     */\n    function updatePool() external {\n        require(\n            msg.sender == address(siblingPool) || msg.sender == address(bond),\n            \"BondLPFarmingPool: Calling from sibling pool or bond only\"\n        );\n        _updatePool();\n    }\n\n    /**\n     * @dev allocate pending rewards.\n     */\n    function _updatePool() internal {\n        require(address(siblingPool) != address(0), \"BondFarmingPool: Contract not ready yet.\");\n        // Single bond token farming rewards base on  'bond token mount in pool' / 'total bond token supply' * 'total underlying rewards' and remaining rewards for LP pools.\n        // So single bond farming pool should be updated before LP's.\n        require(\n            siblingPool.lastUpdatedPoolAt() < block.number ||\n                (siblingPool.lastUpdatedPoolAt() == lastUpdatedPoolAt && lastUpdatedPoolAt == block.number),\n            \"update bond pool firstly.\"\n        );\n        uint256 pendingRewards = totalPendingRewards();\n\n        lastUpdatedPoolAt = block.number;\n        if (pendingRewards <= 0) {\n            return;\n        }\n        bond.mintBondTokenForRewards(address(this), pendingRewards);\n    }\n\n    /**\n     * @dev calculate earned amount to date of specific user.\n     */\n    function earnedToDate(address user_) public view returns (int256) {\n        UserInfo storage userInfo = usersInfo[user_];\n        return int256(sharesToBondAmount(userInfo.shares)) - userInfo.accNetStaked;\n    }\n\n    function totalPendingRewards() public view virtual returns (uint256) {\n        if (lastUpdatedPoolAt == block.number) {\n            return 0;\n        }\n        uint256 remoteTotalPendingRewards = bond.totalPendingRewards();\n\n\n        if (remoteTotalPendingRewards <= 0) {\n            return 0;\n        }\n        uint256 poolBalance = bondToken.balanceOf(address(this));\n        if (poolBalance <= 0) {\n            return 0;\n        }\n\n\n\n        return DuetMath.mulDiv(uint256(remoteTotalPendingRewards), poolBalance, bondToken.totalSupply());\n    }\n\n    function pendingRewardsByShares(uint256 shares_) public view returns (uint256) {\n        if (shares_ <= 0) {\n            return 0;\n        }\n        uint256 totalPendingRewards = totalPendingRewards();\n\n        return\n            DuetMath.mulDiv(totalPendingRewards - bond.calculateFeeAmount(totalPendingRewards), shares_, totalShares);\n    }\n\n    function sharesToBondAmount(uint256 shares_) public view returns (uint256) {\n        if (shares_ <= 0) {\n            return 0;\n        }\n        return DuetMath.mulDiv(underlyingAmount(true), shares_, totalShares);\n    }\n\n    function amountToShares(uint256 amount_) public view returns (uint256) {\n        return totalShares > 0 ? DuetMath.mulDiv(amount_, totalShares, underlyingAmount(false)) : amount_;\n    }\n\n    function underlyingAmount(bool exclusiveFees) public view returns (uint256) {\n        uint256 totalPendingRewards = totalPendingRewards();\n        totalPendingRewards -= exclusiveFees ? bond.calculateFeeAmount(totalPendingRewards) : 0;\n        return totalPendingRewards + bondToken.balanceOf(address(this));\n    }\n\n    function stake(uint256 amount_) public whenNotPaused {\n        address user = msg.sender;\n        stakeForUser(user, amount_);\n    }\n\n    function stakeForUser(address user_, uint256 amount_) public whenNotPaused nonReentrant {\n        // distributing pending rewards of all sibling pools to correct reward ratio between them.\n        _updatePools();\n\n        uint256 stakeShares = amountToShares(amount_);\n\n        bondToken.safeTransferFrom(msg.sender, address(this), amount_);\n        totalShares += stakeShares;\n        usersInfo[user_].shares += stakeShares;\n        usersInfo[user_].accNetStaked += int256(amount_);\n        masterChef.depositForUser(masterChefPid, stakeShares, user_);\n        emit Staked(user_, amount_);\n    }\n\n    function _updatePools() internal {\n        _updatePool();\n        siblingPool.updatePool();\n    }\n\n    function unstakeAll() public {\n        require(usersInfo[msg.sender].shares > 0, \"nothing to unstake\");\n        unstake(usersInfo[msg.sender].shares);\n    }\n\n    /**\n     * @notice unstake by shares\n     */\n    function unstake(uint256 shares_) public whenNotPaused nonReentrant {\n        address user = msg.sender;\n        UserInfo storage userInfo = usersInfo[user];\n        require(userInfo.shares >= shares_ && totalShares >= shares_, \"unstake shares exceeds owned shares\");\n\n        // distribute pending rewards of all sibling pools to correct reward ratio between them.\n        _updatePools();\n\n        // including rewards.\n        uint256 totalBondAmount = sharesToBondAmount(shares_);\n        userInfo.shares -= shares_;\n        totalShares -= shares_;\n\n\n\n\n        bondToken.safeTransfer(user, totalBondAmount);\n        usersInfo[user].accNetStaked -= int256(totalBondAmount);\n        masterChef.withdrawForUser(masterChefPid, shares_, user);\n        emit Unstaked(user, totalBondAmount);\n    }\n\n    function unstakeByAmount(uint256 amount_) public {\n        if (amount_ == 0) {}\n        UserInfo storage userInfo = usersInfo[msg.sender];\n        uint256 userTotalAmount = sharesToBondAmount(userInfo.shares);\n\n        if (amount_ >= userTotalAmount) {\n            unstake(userInfo.shares);\n        } else {\n            unstake(DuetMath.mulDiv(userInfo.shares, amount_, userTotalAmount));\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@private/shared/libs/DuetMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\nlibrary DuetMath {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0;\n            // Least significant 256 bits of the product\n            uint256 prod1;\n            // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                require(denominator > 0);\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 lpotdod = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by lpotdod.\n                denominator := div(denominator, lpotdod)\n\n                // Divide [prod1 prod0] by lpotdod.\n                prod0 := div(prod0, lpotdod)\n\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * lpotdod;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = denominator**3;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse;\n            // inverse mod 2^8\n            inverse *= 2 - denominator * inverse;\n            // inverse mod 2^16\n            inverse *= 2 - denominator * inverse;\n            // inverse mod 2^32\n            inverse *= 2 - denominator * inverse;\n            // inverse mod 2^64\n            inverse *= 2 - denominator * inverse;\n            // inverse mod 2^128\n            inverse *= 2 - denominator * inverse;\n            // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding direction\n    ) public pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (direction == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n}\n"
    },
    "@private/shared/libs/Adminable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\nabstract contract Adminable {\n    event AdminUpdated(address indexed user, address indexed newAdmin);\n\n    address public admin;\n\n    modifier onlyAdmin() virtual {\n        require(msg.sender == admin, \"UNAUTHORIZED\");\n\n        _;\n    }\n\n    function setAdmin(address newAdmin) public virtual onlyAdmin {\n        _setAdmin(newAdmin);\n    }\n\n    function _setAdmin(address newAdmin) internal {\n        require(newAdmin != address(0), \"Can not set admin to zero address\");\n        admin = newAdmin;\n\n        emit AdminUpdated(msg.sender, newAdmin);\n    }\n}\n"
    },
    "contracts/ExtendableBond.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\nimport \"@private/shared/libs/Adminable.sol\";\nimport \"@private/shared/libs/Keepable.sol\";\n\nimport \"./BondToken.sol\";\nimport \"./interfaces/IBondFarmingPool.sol\";\nimport \"./interfaces/IExtendableBond.sol\";\nimport \"./interfaces/IBondTokenUpgradeable.sol\";\n\ncontract ExtendableBond is IExtendableBond, ReentrancyGuardUpgradeable, PausableUpgradeable, Adminable, Keepable {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n    using SafeERC20Upgradeable for IBondTokenUpgradeable;\n    /**\n     * Bond token contract\n     */\n    IBondTokenUpgradeable public bondToken;\n\n    /**\n     * Bond underlying asset\n     */\n    IERC20Upgradeable public underlyingToken;\n\n    /**\n     * @dev factor for percentage that described in integer. It makes 10000 means 100%, and 20 means 0.2%;\n     *      Calculation formula: x * percentage / PERCENTAGE_FACTOR\n     */\n    uint16 public constant PERCENTAGE_FACTOR = 10000;\n    IBondFarmingPool public bondFarmingPool;\n    IBondFarmingPool public bondLPFarmingPool;\n    /**\n     * Emitted when someone convert underlying token to the bond.\n     */\n    event Converted(uint256 amount, address indexed user);\n\n    event MintedBondTokenForRewards(address indexed to, uint256 amount);\n\n    struct FeeSpec {\n        string desc;\n        uint16 rate;\n        address receiver;\n    }\n\n    /**\n     * Fee specifications\n     */\n    FeeSpec[] public feeSpecs;\n\n    struct CheckPoints {\n        bool convertable;\n        uint256 convertableFrom;\n        uint256 convertableEnd;\n        bool redeemable;\n        uint256 redeemableFrom;\n        uint256 redeemableEnd;\n        uint256 maturity;\n    }\n\n    CheckPoints public checkPoints;\n    modifier onlyAdminOrKeeper() virtual {\n        require(msg.sender == admin || msg.sender == keeper, \"UNAUTHORIZED\");\n\n        _;\n    }\n\n    function initialize(\n        IBondTokenUpgradeable bondToken_,\n        IERC20Upgradeable underlyingToken_,\n        address admin_\n    ) public initializer {\n        require(admin_ != address(0), \"Cant set admin to zero address\");\n        __Pausable_init();\n        __ReentrancyGuard_init();\n        _setAdmin(msg.sender);\n\n        bondToken = bondToken_;\n        underlyingToken = underlyingToken_;\n    }\n\n    function feeSpecsLength() public view returns (uint256) {\n        return feeSpecs.length;\n    }\n\n    /**\n     * @notice Underlying token amount that hold in current contract.\n     */\n    function underlyingAmount() public view returns (uint256) {\n        return underlyingToken.balanceOf(address(this));\n    }\n\n    /**\n     * @notice total underlying token amount, including hold in current contract and remote\n     */\n    function totalUnderlyingAmount() public view returns (uint256) {\n        return underlyingAmount() + remoteUnderlyingAmount();\n    }\n\n    /**\n     * @dev Total pending rewards for bond. May be negative in some unexpected circumstances,\n     *      such as remote underlying amount has unexpectedly decreased makes bond token over issued.\n     */\n    function totalPendingRewards() public view returns (uint256) {\n        uint256 underlying = totalUnderlyingAmount();\n        uint256 bondAmount = totalBondTokenAmount();\n        if (bondAmount >= underlying) {\n            return 0;\n        }\n        return underlying - bondAmount;\n    }\n\n    function calculateFeeAmount(uint256 amount_) public view returns (uint256) {\n        if (amount_ <= 0) {\n            return 0;\n        }\n        uint256 totalFeeAmount = 0;\n        for (uint256 i = 0; i < feeSpecs.length; i++) {\n            FeeSpec storage feeSpec = feeSpecs[i];\n            uint256 feeAmount = (amount_ * feeSpec.rate) / PERCENTAGE_FACTOR;\n\n            if (feeAmount <= 0) {\n                continue;\n            }\n            totalFeeAmount += feeAmount;\n        }\n        return totalFeeAmount;\n    }\n\n    /**\n     * @dev mint bond token for rewards and allocate fees.\n     */\n    function mintBondTokenForRewards(address to_, uint256 amount_) public returns (uint256 totalFeeAmount) {\n        require(\n            msg.sender == address(bondFarmingPool) || msg.sender == address(bondLPFarmingPool),\n            \"only from farming pool\"\n        );\n        require(totalBondTokenAmount() + amount_ <= totalUnderlyingAmount(), \"Can not over issue\");\n\n        // nothing to happen when reward amount is zero.\n        if (amount_ <= 0) {\n            return 0;\n        }\n\n        uint256 amountToTarget = amount_;\n        // allocate fees.\n        for (uint256 i = 0; i < feeSpecs.length; i++) {\n            FeeSpec storage feeSpec = feeSpecs[i];\n            uint256 feeAmount = (amountToTarget * feeSpec.rate) / PERCENTAGE_FACTOR;\n\n            if (feeAmount <= 0) {\n                continue;\n            }\n            amountToTarget -= feeAmount;\n            bondToken.mint(feeSpec.receiver, feeAmount);\n        }\n\n        if (amountToTarget > 0) {\n            bondToken.mint(to_, amountToTarget);\n        }\n\n        emit MintedBondTokenForRewards(to_, amount_);\n        return amount_ - amountToTarget;\n    }\n\n    /**\n     * Bond token total amount.\n     */\n    function totalBondTokenAmount() public view returns (uint256) {\n        return bondToken.totalSupply();\n    }\n\n    /**\n     * calculate remote underlying token amount.\n     */\n    function remoteUnderlyingAmount() public view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev Redeem all my bond tokens to underlying tokens.\n     */\n    function redeemAll() external whenNotPaused {\n        redeem(bondToken.balanceOf(msg.sender));\n    }\n\n    /**\n     * @dev Redeem specific amount of my bond tokens.\n     * @param amount_ amount to redeem\n     */\n    function redeem(uint256 amount_) public whenNotPaused nonReentrant {\n        require(amount_ > 0, \"Nothing to redeem\");\n        require(\n            checkPoints.redeemable &&\n                block.timestamp >= checkPoints.redeemableFrom &&\n                block.timestamp <= checkPoints.redeemableEnd &&\n                block.timestamp > checkPoints.convertableEnd,\n            \"Can not redeem at this time.\"\n        );\n\n        address user = msg.sender;\n        uint256 userBondTokenBalance = bondToken.balanceOf(user);\n        require(amount_ <= userBondTokenBalance, \"Insufficient balance\");\n\n        // burn user's bond token\n        bondToken.burnFrom(user, amount_);\n\n        uint256 underlyingTokenAmount = underlyingToken.balanceOf(address(this));\n\n        if (underlyingTokenAmount < amount_) {\n            _withdrawFromRemote(amount_ - underlyingTokenAmount);\n        }\n        // for precision issue\n        // The underlying asset may be calculated on a share basis, and the amount withdrawn may vary slightly\n        if (amount_ > underlyingToken.balanceOf(address(this))) {\n            underlyingToken.safeTransfer(user, underlyingToken.balanceOf(address(this)));\n        } else {\n            underlyingToken.safeTransfer(user, amount_);\n        }\n    }\n\n    function _withdrawFromRemote(uint256 amount_) internal virtual {}\n\n    /**\n     * @dev convert underlying token to bond token to current user\n     * @param amount_ amount of underlying token to convert\n     */\n    function convert(uint256 amount_) external whenNotPaused {\n        require(amount_ > 0, \"Nothing to convert\");\n\n        _convertOperation(amount_, msg.sender);\n    }\n\n    function requireConvertable() internal view {\n        require(\n            checkPoints.convertable &&\n                block.timestamp >= checkPoints.convertableFrom &&\n                block.timestamp <= checkPoints.convertableEnd &&\n                block.timestamp < checkPoints.redeemableFrom,\n            \"Can not convert at this time.\"\n        );\n    }\n\n    /**\n     * @dev distribute pending rewards.\n     */\n    function _updateFarmingPools() internal {\n        bondFarmingPool.updatePool();\n        bondLPFarmingPool.updatePool();\n    }\n\n    function setFarmingPools(IBondFarmingPool bondPool_, IBondFarmingPool lpPool_) public onlyAdmin {\n        require(address(bondPool_) != address(0) && address(bondPool_) != address(lpPool_), \"invalid farming pools\");\n        bondFarmingPool = bondPool_;\n        bondLPFarmingPool = lpPool_;\n    }\n\n    /**\n     * @dev convert underlying token to bond token and stake to bondFarmingPool for current user\n     */\n    function convertAndStake(uint256 amount_) external whenNotPaused nonReentrant {\n        require(amount_ > 0, \"Nothing to convert\");\n        requireConvertable();\n        // Single bond token farming rewards base on  'bond token mount in pool' / 'total bond token supply' * 'total underlying rewards'  (remaining rewards for LP pools)\n        // In order to distribute pending rewards to old shares, bondToken farming pools should be updated when new bondToken converted.\n        _updateFarmingPools();\n\n        address user = msg.sender;\n        underlyingToken.safeTransferFrom(user, address(this), amount_);\n        _depositRemote(amount_);\n        // 1:1 mint bond token to current contract\n        bondToken.mint(address(this), amount_);\n        bondToken.safeApprove(address(bondFarmingPool), amount_);\n        // stake to bondFarmingPool\n        bondFarmingPool.stakeForUser(user, amount_);\n        emit Converted(amount_, user);\n    }\n\n    function _depositRemote(uint256 amount_) internal virtual {}\n\n    /**\n     * @dev convert underlying token to bond token to specific user\n     */\n    function _convertOperation(uint256 amount_, address user_) internal nonReentrant {\n        requireConvertable();\n        // Single bond token farming rewards base on  'bond token mount in pool' / 'total bond token supply' * 'total underlying rewards'   (remaining rewards for LP pools)\n        // In order to distribute pending rewards to old shares, bondToken farming pools should be updated when new bondToken converted.\n        _updateFarmingPools();\n\n        underlyingToken.safeTransferFrom(user_, address(this), amount_);\n        _depositRemote(amount_);\n        // 1:1 mint bond token to user\n        bondToken.mint(user_, amount_);\n        emit Converted(amount_, user_);\n    }\n\n    /**\n     * @dev update checkPoints\n     * @param checkPoints_ new checkpoints\n     */\n    function updateCheckPoints(CheckPoints calldata checkPoints_) public onlyAdminOrKeeper {\n        require(checkPoints_.convertableFrom > 0, \"convertableFrom must be greater than 0\");\n        require(\n            checkPoints_.convertableFrom < checkPoints_.convertableEnd,\n            \"redeemableFrom must be earlier than convertableEnd\"\n        );\n        require(\n            checkPoints_.redeemableFrom > checkPoints_.convertableEnd &&\n                checkPoints_.redeemableFrom >= checkPoints_.maturity,\n            \"redeemableFrom must be later than convertableEnd and maturity\"\n        );\n        require(\n            checkPoints_.redeemableEnd > checkPoints_.redeemableFrom,\n            \"redeemableEnd must be later than redeemableFrom\"\n        );\n        checkPoints = checkPoints_;\n    }\n\n    function setRedeemable(bool redeemable_) external onlyAdminOrKeeper {\n        checkPoints.redeemable = redeemable_;\n    }\n\n    function setConvertable(bool convertable_) external onlyAdminOrKeeper {\n        checkPoints.convertable = convertable_;\n    }\n\n    /**\n     * @dev emergency transfer underlying token for security issue or bug encounted.\n     */\n    function emergencyTransferUnderlyingTokens(address to_) external onlyAdmin {\n        checkPoints.convertable = false;\n        checkPoints.redeemable = false;\n        underlyingToken.safeTransfer(to_, underlyingAmount());\n    }\n\n    /**\n     * @notice add fee specification\n     */\n    function addFeeSpec(FeeSpec calldata feeSpec_) external onlyAdmin {\n        require(feeSpecs.length < 5, \"Too many fee specs\");\n        require(feeSpec_.rate > 0, \"Fee rate is too low\");\n        feeSpecs.push(feeSpec_);\n        uint256 totalFeeRate = 0;\n        for (uint256 i = 0; i < feeSpecs.length; i++) {\n            totalFeeRate += feeSpecs[i].rate;\n        }\n        require(totalFeeRate <= PERCENTAGE_FACTOR, \"Total fee rate greater than 100%.\");\n    }\n\n    /**\n     * @notice update fee specification\n     */\n    function setFeeSpec(uint256 feeId_, FeeSpec calldata feeSpec_) external onlyAdmin {\n        require(feeSpec_.rate > 0, \"Fee rate is too low\");\n        feeSpecs[feeId_] = feeSpec_;\n        uint256 totalFeeRate = 0;\n        for (uint256 i = 0; i < feeSpecs.length; i++) {\n            totalFeeRate += feeSpecs[i].rate;\n        }\n        require(totalFeeRate <= PERCENTAGE_FACTOR, \"Total fee rate greater than 100%.\");\n    }\n\n    function removeFeeSpec(uint256 feeSpecIndex_) external onlyAdmin {\n        uint256 length = feeSpecs.length;\n        require(feeSpecIndex_ >= 0 && feeSpecIndex_ < length, \"Invalid Index\");\n        feeSpecs[feeSpecIndex_] = feeSpecs[length - 1];\n        feeSpecs.pop();\n    }\n\n    function depositToRemote(uint256 amount_) public onlyAdminOrKeeper {\n        _depositRemote(amount_);\n    }\n\n    function depositAllToRemote() public onlyAdminOrKeeper {\n        depositToRemote(underlyingToken.balanceOf(address(this)));\n    }\n\n    function setKeeper(address newKeeper) external onlyAdmin {\n        _setKeeper(newKeeper);\n    }\n\n    /**\n     * @notice Trigger stopped state\n     * @dev Only possible when contract not paused.\n     */\n    function pause() external onlyAdmin whenNotPaused {\n        _pause();\n    }\n\n    /**\n     * @notice Return to normal state\n     * @dev Only possible when contract is paused.\n     */\n    function unpause() external onlyAdmin whenPaused {\n        _unpause();\n    }\n\n    function burnBondToken(uint256 amount_) public onlyAdmin {\n        bondToken.burnFrom(msg.sender, amount_);\n    }\n}\n"
    },
    "contracts/interfaces/IMultiRewardsMasterChef.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\ninterface IMultiRewardsMasterChef {\n    function depositForUser(\n        uint256 _pid,\n        uint256 _amount,\n        address user_\n    ) external;\n\n    function withdrawForUser(\n        uint256 _pid,\n        uint256 _amount,\n        address user_\n    ) external;\n\n    function deposit(uint256 _pid, uint256 _amount) external;\n\n    function withdraw(uint256 _pid, uint256 _amount) external;\n}\n"
    },
    "contracts/interfaces/IBondFarmingPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\ninterface IBondFarmingPool {\n    function stake(uint256 amount_) external;\n\n    function stakeForUser(address user_, uint256 amount_) external;\n\n    function updatePool() external;\n\n    function totalPendingRewards() external view returns (uint256);\n\n    function lastUpdatedPoolAt() external view returns (uint256);\n\n    function setSiblingPool(IBondFarmingPool siblingPool_) external;\n\n    function siblingPool() external view returns (IBondFarmingPool);\n}\n"
    },
    "contracts/interfaces/IExtendableBond.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\ninterface IExtendableBond {\n    function totalPendingRewards() external view returns (uint256);\n\n    function mintBondTokenForRewards(address to_, uint256 amount_) external returns (uint256);\n\n    function calculateFeeAmount(uint256 amount_) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized < version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "@private/shared/libs/Keepable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\nabstract contract Keepable {\n    event KeeperUpdated(address indexed user, address indexed newKeeper);\n\n    address public keeper;\n\n    modifier onlyKeeper() virtual {\n        require(msg.sender == keeper, \"UNAUTHORIZED\");\n\n        _;\n    }\n\n    function _setKeeper(address newKeeper_) internal {\n        keeper = newKeeper_;\n\n        emit KeeperUpdated(msg.sender, newKeeper_);\n    }\n}\n"
    },
    "contracts/BondToken.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract BondToken is ERC20, Ownable {\n    address public minter;\n    uint256 public constant MINIMUM_SUPPLY = 10**3;\n\n    modifier onlyMinter() {\n        require(minter == msg.sender, \"Minter only\");\n        _;\n    }\n\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        address minter_\n    ) ERC20(name_, symbol_) Ownable() {\n        minter = minter_;\n    }\n\n    function setMinter(address minter_) public onlyOwner {\n        require(minter_ != address(0), \"Cant set minter to zero address\");\n        minter = minter_;\n    }\n\n    function mint(address to_, uint256 amount_) external onlyMinter {\n        require(amount_ > 0, \"Nothing to mint\");\n        if (totalSupply() == 0) {\n            // permanently lock the first MINIMUM_SUPPLY tokens\n            _mint(minter, MINIMUM_SUPPLY);\n        }\n        _mint(to_, amount_);\n    }\n\n    function burnFrom(address account_, uint256 amount_) external onlyMinter {\n        require(amount_ > 0, \"Nothing to burn\");\n        _burn(account_, amount_);\n    }\n}\n"
    },
    "contracts/interfaces/IBondTokenUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\n\ninterface IBondTokenUpgradeable is IERC20Upgradeable {\n    function mint(address to_, uint256 amount_) external;\n\n    function burnFrom(address account_, uint256 amount_) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/mocks/MockExtendableBond.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\n\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nimport \"@private/shared/mocks/MockBEP20.sol\";\n\nimport \"../interfaces/IExtendableBond.sol\";\nimport \"../interfaces/IBondFarmingPool.sol\";\nimport \"../BondToken.sol\";\n\ncontract MockExtendableBond is IExtendableBond {\n    MockBEP20 public bondToken;\n\n    uint256 public mintedRewards = 0;\n    uint256 public startBlock = 0;\n    uint256 public rewardPerBlock = 0;\n\n    IBondFarmingPool public bondPool;\n    IBondFarmingPool public lpPool;\n\n    constructor(MockBEP20 bondToken_, uint256 rewardPerBlock_) {\n        bondToken = bondToken_;\n        rewardPerBlock = rewardPerBlock_;\n    }\n\n    function setFarmingPool(IBondFarmingPool bondPool_, IBondFarmingPool lpPool_) external {\n        bondPool = bondPool_;\n        lpPool = lpPool_;\n    }\n\n    function setStartBlock(uint256 startBlock_) public {\n        require(mintedRewards == 0, \"can not modify after minted.\");\n        startBlock = startBlock_;\n    }\n\n    function totalPendingRewards() public view returns (uint256) {\n\n\n        if (startBlock >= block.number) {\n            return 0;\n        }\n        return ((block.number - startBlock) * rewardPerBlock) - mintedRewards;\n    }\n\n    function mintBondTokenForRewards(address to_, uint256 amount_) external returns (uint256) {\n        require(amount_ <= totalPendingRewards(), \"can not over issue\");\n        mintedRewards += amount_;\n\n        bondToken.mint(to_, amount_);\n        return 0;\n    }\n\n    function calculateFeeAmount(uint256 amount_) external view returns (uint256) {\n        return 0;\n    }\n\n    function updateBondPools() external {\n        bondPool.updatePool();\n        lpPool.updatePool();\n    }\n\n    function testInvalidUpdateBondPools() external {\n        lpPool.updatePool();\n        bondPool.updatePool();\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@private/shared/mocks/MockBEP20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../libs/BEP20.sol\";\n\ncontract MockBEP20 is BEP20 {\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint256 supply\n    ) BEP20(name, symbol) {\n        _mint(msg.sender, supply);\n    }\n\n    function mintTokens(uint256 _amount) external {\n        _mint(msg.sender, _amount);\n    }\n\n    function mint(address to_, uint256 _amount) external {\n        _mint(to_, _amount);\n    }\n}\n"
    },
    "@private/shared/libs/BEP20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"./IBEP20.sol\";\n\n/**\n * @dev Implementation of the {IBEP20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {BEP20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-BEP20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of BEP20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IBEP20-approve}.\n */\ncontract BEP20 is Context, IBEP20, Ownable {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name, string memory symbol) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the bep token owner.\n     */\n    function getOwner() external view override returns (address) {\n        return owner();\n    }\n\n    /**\n     * @dev Returns the token name.\n     */\n    function name() public view override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the token decimals.\n     */\n    function decimals() public view override returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev Returns the token symbol.\n     */\n    function symbol() public view override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {BEP20-totalSupply}.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {BEP20-balanceOf}.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {BEP20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {BEP20-allowance}.\n     */\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {BEP20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {BEP20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {BEP20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for `sender`'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            _msgSender(),\n            _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\")\n        );\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {BEP20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {BEP20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\")\n        );\n        return true;\n    }\n\n    /**\n     * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\n     * the total supply.\n     *\n     * Requirements\n     *\n     * - `msg.sender` must be the token owner\n     */\n    function mint(uint256 amount) public onlyOwner returns (bool) {\n        _mint(_msgSender(), amount);\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal {\n        require(sender != address(0), \"BEP20: transfer from the zero address\");\n        require(recipient != address(0), \"BEP20: transfer to the zero address\");\n\n        _balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"BEP20: mint to the zero address\");\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal {\n        require(account != address(0), \"BEP20: burn from the zero address\");\n\n        _balances[account] = _balances[account].sub(amount, \"BEP20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal {\n        require(owner != address(0), \"BEP20: approve from the zero address\");\n        require(spender != address(0), \"BEP20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n     * from the caller's allowance.\n     *\n     * See {_burn} and {_approve}.\n     */\n    function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(\n            account,\n            _msgSender(),\n            _allowances[account][_msgSender()].sub(amount, \"BEP20: burn amount exceeds allowance\")\n        );\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@private/shared/libs/IBEP20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface IBEP20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the token decimals.\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the token symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the token name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the bep token owner.\n     */\n    function getOwner() external view returns (address);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address _owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/mocks/MockIBondFarmingPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../interfaces/IBondFarmingPool.sol\";\n\ncontract MockIBondFarmingPool is IBondFarmingPool {\n    uint256 public lastUpdatedPoolAt;\n    IBondFarmingPool public siblingPool;\n    IERC20 public bondToken;\n    mapping(address => uint256) public usersAmount;\n\n    constructor(IERC20 bondToken_) {\n        bondToken = bondToken_;\n    }\n\n    function stake(uint256 amount_) public {\n        stakeForUser(msg.sender, amount_);\n    }\n\n    function stakeForUser(address user_, uint256 amount_) public {\n        bondToken.transferFrom(msg.sender, address(this), amount_);\n        usersAmount[user_] += amount_;\n    }\n\n    function updatePool() external {\n        lastUpdatedPoolAt = block.number;\n    }\n\n    function setSiblingPool(IBondFarmingPool siblingPool_) public {\n        siblingPool = siblingPool_;\n    }\n\n    function totalPendingRewards() external view returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/BondLPFarmingPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\n\nimport \"@private/shared/libs/DuetMath.sol\";\nimport \"@private/shared/libs/Adminable.sol\";\n\nimport \"./ExtendableBond.sol\";\nimport \"./interfaces/IMultiRewardsMasterChef.sol\";\nimport \"./interfaces/IBondFarmingPool.sol\";\nimport \"./interfaces/IExtendableBond.sol\";\n\ncontract BondLPFarmingPool is ReentrancyGuardUpgradeable, PausableUpgradeable, Adminable, IBondFarmingPool {\n    IERC20Upgradeable public bondToken;\n    IERC20Upgradeable public lpToken;\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n    IExtendableBond public bond;\n\n    IBondFarmingPool public siblingPool;\n    uint256 public lastUpdatedPoolAt = 0;\n\n    IMultiRewardsMasterChef public masterChef;\n\n    uint256 public masterChefPid;\n\n    /**\n     * @dev accumulated bond token rewards of each lp token.\n     */\n    uint256 public accRewardPerShare;\n\n    uint256 public constant ACC_REWARDS_PRECISION = 1e12;\n\n    uint256 public totalLpAmount;\n    /**\n     * @notice mark bond reward is suspended. If the LP Token needs to be migrated, such as from pancake to ESP, the bond rewards will be suspended.\n     * @notice you can not stake anymore when bond rewards has been suspended.\n     * @dev _updatePools() no longer works after bondRewardsSuspended is true.\n     */\n    bool public bondRewardsSuspended = false;\n\n    struct UserInfo {\n        /**\n         * @dev lp amount deposited by user.\n         */\n        uint256 lpAmount;\n        /**\n         * @dev like sushi rewardDebt\n         */\n        uint256 rewardDebt;\n        /**\n         * @dev Rewards credited to rewardDebt but not yet claimed\n         */\n        uint256 pendingRewards;\n        /**\n         * @dev claimed rewards. for 'earned to date' calculation.\n         */\n        uint256 claimedRewards;\n    }\n\n    mapping(address => UserInfo) public usersInfo;\n\n    event Staked(address indexed user, uint256 amount);\n    event Unstaked(address indexed user, uint256 amount);\n    event SiblingPoolUpdated(address indexed previousPool, address indexed newPool);\n\n    function initialize(\n        IERC20Upgradeable bondToken_,\n        IExtendableBond bond_,\n        address admin_\n    ) public initializer {\n        __ReentrancyGuard_init();\n        __Pausable_init();\n        _setAdmin(admin_);\n        bondToken = bondToken_;\n        bond = bond_;\n    }\n\n    function setLpToken(IERC20Upgradeable lpToken_) public onlyAdmin {\n        lpToken = lpToken_;\n    }\n\n    function setMasterChef(IMultiRewardsMasterChef masterChef_, uint256 masterChefPid_) public onlyAdmin {\n        masterChef = masterChef_;\n        masterChefPid = masterChefPid_;\n    }\n\n    /**\n     * @dev see: _updatePool\n     */\n    function updatePool() external {\n        require(\n            msg.sender == address(siblingPool) || msg.sender == address(bond),\n            \"BondLPFarmingPool: Calling from sibling pool or bond only\"\n        );\n        _updatePool();\n    }\n\n    /**\n     * @dev allocate pending rewards.\n     */\n    function _updatePool() internal {\n        // Single bond token farming rewards base on  'bond token mount in pool' / 'total bond token supply' * 'total underlying rewards' and remaining rewards for LP pools.\n        // So single bond farming pool should be updated before LP's.\n        require(\n            siblingPool.lastUpdatedPoolAt() > lastUpdatedPoolAt ||\n                (siblingPool.lastUpdatedPoolAt() == lastUpdatedPoolAt && lastUpdatedPoolAt == block.number),\n            \"update bond pool firstly.\"\n        );\n        uint256 pendingRewards = totalPendingRewards();\n        lastUpdatedPoolAt = block.number;\n        _harvestRemote();\n        // no rewards will be distributed to the LP Pool when it's empty.\n        // In this case, the single bond farming pool still distributes its rewards proportionally,\n        // but its rewards will be expanded every time the pools are updated.\n        // Because the remaining rewards is not distributed to the LP pool\n        // The first user (start with totalLpAmount = 0) to enter the LP pool will receive this part of the undistributed rewards.\n        // But this case is very rare and usually doesn't last long.\n        if (pendingRewards <= 0 || totalLpAmount <= 0) {\n            return;\n        }\n        uint256 feeAmount = bond.mintBondTokenForRewards(address(this), pendingRewards);\n        accRewardPerShare += ((pendingRewards - feeAmount) * ACC_REWARDS_PRECISION) / totalLpAmount;\n    }\n\n    /**\n     * @dev distribute single bond pool first, then LP pool will get the remaining rewards. see _updatePools\n     */\n    function totalPendingRewards() public view virtual returns (uint256) {\n        if (bondRewardsSuspended) {\n            return 0;\n        }\n        uint256 totalBondPendingRewards = bond.totalPendingRewards();\n        if (totalBondPendingRewards <= 0) {\n            return 0;\n        }\n        return totalBondPendingRewards - siblingPool.totalPendingRewards();\n    }\n\n    /**\n     * @dev get pending rewards by specific user\n     */\n    function getUserPendingRewards(address user_) public view virtual returns (uint256) {\n        UserInfo storage userInfo = usersInfo[user_];\n        if (totalLpAmount <= 0 || userInfo.lpAmount <= 0) {\n            return 0;\n        }\n        uint256 totalPendingRewards = totalPendingRewards();\n        uint256 latestAccRewardPerShare = ((totalPendingRewards - bond.calculateFeeAmount(totalPendingRewards)) *\n            ACC_REWARDS_PRECISION) /\n            totalLpAmount +\n            accRewardPerShare;\n        return\n            (latestAccRewardPerShare * userInfo.lpAmount) /\n            ACC_REWARDS_PRECISION +\n            userInfo.pendingRewards -\n            userInfo.rewardDebt;\n    }\n\n    function setSiblingPool(IBondFarmingPool siblingPool_) public onlyAdmin {\n        require(\n            (address(siblingPool_.siblingPool()) == address(0) ||\n                address(siblingPool_.siblingPool()) == address(this)) && (address(siblingPool_) != address(this)),\n            \"Invalid sibling\"\n        );\n        emit SiblingPoolUpdated(address(siblingPool), address(siblingPool_));\n        siblingPool = siblingPool_;\n    }\n\n    function stake(uint256 amount_) public whenNotPaused {\n        require(!bondRewardsSuspended, \"Reward suspended. Please follow the project announcement \");\n        address user = msg.sender;\n        stakeForUser(user, amount_);\n    }\n\n    function _updatePools() internal {\n        if (bondRewardsSuspended) {\n            return;\n        }\n        siblingPool.updatePool();\n        _updatePool();\n    }\n\n    function _stakeRemote(address user_, uint256 amount_) internal virtual {}\n\n    function _unstakeRemote(address user_, uint256 amount_) internal virtual {}\n\n    function _harvestRemote() internal virtual {}\n\n    function stakeForUser(address user_, uint256 amount_) public whenNotPaused nonReentrant {\n        require(amount_ > 0, \"nothing to stake\");\n        // allocate pending rewards of all sibling pools to correct reward ratio between them.\n        _updatePools();\n        UserInfo storage userInfo = usersInfo[user_];\n        if (userInfo.lpAmount > 0) {\n            uint256 sharesReward = (accRewardPerShare * userInfo.lpAmount) / ACC_REWARDS_PRECISION;\n\n\n\n            userInfo.pendingRewards += sharesReward - userInfo.rewardDebt;\n\n            userInfo.rewardDebt = (accRewardPerShare * (userInfo.lpAmount + amount_)) / ACC_REWARDS_PRECISION;\n        } else {\n            userInfo.rewardDebt = (accRewardPerShare * amount_) / ACC_REWARDS_PRECISION;\n        }\n        lpToken.safeTransferFrom(msg.sender, address(this), amount_);\n        _stakeRemote(user_, amount_);\n        userInfo.lpAmount += amount_;\n        totalLpAmount += amount_;\n        masterChef.depositForUser(masterChefPid, amount_, user_);\n        emit Staked(user_, amount_);\n    }\n\n    /**\n     * @notice unstake by shares\n     */\n    function unstake(uint256 amount_) public whenNotPaused nonReentrant {\n        address user = msg.sender;\n        UserInfo storage userInfo = usersInfo[user];\n        require(userInfo.lpAmount >= amount_ && userInfo.lpAmount > 0, \"unstake amount exceeds owned amount\");\n\n        // allocate pending rewards of all sibling pools to correct reward ratio between them.\n        _updatePools();\n\n        uint256 sharesReward = (accRewardPerShare * userInfo.lpAmount) / ACC_REWARDS_PRECISION;\n\n        uint256 pendingRewards = userInfo.pendingRewards + sharesReward - userInfo.rewardDebt;\n        uint256 bondBalance = bondToken.balanceOf(address(this));\n        if (pendingRewards > bondBalance) {\n            pendingRewards = bondBalance;\n        }\n        userInfo.rewardDebt = sharesReward;\n        userInfo.pendingRewards = 0;\n\n\n        _unstakeRemote(user, amount_);\n        if (amount_ > 0) {\n            userInfo.rewardDebt = (accRewardPerShare * (userInfo.lpAmount - amount_)) / ACC_REWARDS_PRECISION;\n            userInfo.lpAmount -= amount_;\n            totalLpAmount -= amount_;\n            // send staked assets\n            lpToken.safeTransfer(user, amount_);\n        }\n\n        if (pendingRewards > 0) {\n            // send rewards\n            bondToken.safeTransfer(user, pendingRewards);\n        }\n        userInfo.claimedRewards += pendingRewards;\n        masterChef.withdrawForUser(masterChefPid, amount_, user);\n\n        emit Unstaked(user, amount_);\n    }\n\n    function unstakeAll() public {\n        require(usersInfo[msg.sender].lpAmount > 0, \"nothing to unstake\");\n        unstake(usersInfo[msg.sender].lpAmount);\n    }\n\n    function setBondRewardsSuspended(bool suspended_) public onlyAdmin {\n        _updatePools();\n        bondRewardsSuspended = suspended_;\n    }\n\n    function claimBonuses() public {\n        unstake(0);\n    }\n}\n"
    },
    "contracts/underlyings/pancake/BondLPPancakeFarmingPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\n\n\nimport \"@private/shared/3rd/pancake/IPancakeMasterChefV2.sol\";\n\nimport \"../../BondLPFarmingPool.sol\";\n\ncontract BondLPPancakeFarmingPool is BondLPFarmingPool {\n    IERC20Upgradeable public cakeToken;\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IPancakeMasterChefV2 public pancakeMasterChef;\n\n    uint256 public pancakeMasterChefPid;\n\n    /**\n     * @dev accumulated cake rewards of each lp token.\n     */\n    uint256 public accPancakeRewardsPerShares;\n\n    /**\n     * @dev whether remote staking enabled (stake to PancakeSwap LP farming pool).\n     * @notice It cannot be modified from true to false as this may cause accounting problems.\n     */\n    bool public remoteEnabled;\n\n    struct PancakeUserInfo {\n        /**\n         * like sushi rewardDebt\n         */\n        uint256 rewardDebt;\n        /**\n         * @dev Rewards credited to rewardDebt but not yet claimed\n         */\n        uint256 pendingRewards;\n        /**\n         * @dev claimed rewards. for 'earned to date' calculation.\n         */\n        uint256 claimedRewards;\n    }\n\n    mapping(address => PancakeUserInfo) public pancakeUsersInfo;\n\n    function initPancake(\n        IERC20Upgradeable cakeToken_,\n        IPancakeMasterChefV2 pancakeMasterChef_,\n        uint256 pancakeMasterChefPid_\n    ) external onlyAdmin {\n        require(\n            address(pancakeMasterChef_) != address(0) &&\n                pancakeMasterChefPid_ != 0 &&\n                address(cakeToken_) != address(0),\n            \"Invalid inputs\"\n        );\n        require(\n            address(pancakeMasterChef) == address(0) && pancakeMasterChefPid == 0,\n            \"can not modify pancakeMasterChef\"\n        );\n        cakeToken = cakeToken_;\n        pancakeMasterChef = pancakeMasterChef_;\n        pancakeMasterChefPid = pancakeMasterChefPid_;\n    }\n\n    /**\n     * @dev enable remote staking (stake to PancakeSwap LP farming pool).\n     */\n    function remoteEnable() external onlyAdmin {\n        require(!remoteEnabled, \"Already enabled\");\n        remoteEnabled = true;\n        _stakeBalanceToRemote();\n    }\n\n    function _stakeBalanceToRemote() internal {\n        _requirePancakeSettled();\n        uint256 balance = lpToken.balanceOf(address(this));\n        if (balance <= 0) {\n            return;\n        }\n        lpToken.safeApprove(address(pancakeMasterChef), balance);\n        pancakeMasterChef.deposit(pancakeMasterChefPid, balance);\n    }\n\n    function _requirePancakeSettled() internal view {\n        require(\n            address(pancakeMasterChef) != address(0) && pancakeMasterChefPid != 0 && address(cakeToken) != address(0),\n            \"Pancake not settled\"\n        );\n    }\n\n    /**\n     * @dev stake to pancakeswap\n     * @param user_ user to stake\n     * @param amount_ amount to stake\n     */\n    function _stakeRemote(address user_, uint256 amount_) internal override {\n        UserInfo storage userInfo = usersInfo[user_];\n        PancakeUserInfo storage pancakeUserInfo = pancakeUsersInfo[user_];\n\n        if (userInfo.lpAmount > 0) {\n            uint256 sharesReward = (accPancakeRewardsPerShares * userInfo.lpAmount) / ACC_REWARDS_PRECISION;\n            pancakeUserInfo.pendingRewards += sharesReward - pancakeUserInfo.rewardDebt;\n            pancakeUserInfo.rewardDebt =\n                (accPancakeRewardsPerShares * (userInfo.lpAmount + amount_)) /\n                ACC_REWARDS_PRECISION;\n        } else {\n            pancakeUserInfo.rewardDebt = (accPancakeRewardsPerShares * amount_) / ACC_REWARDS_PRECISION;\n        }\n\n        if (amount_ > 0 && remoteEnabled) {\n            _requirePancakeSettled();\n            lpToken.safeApprove(address(pancakeMasterChef), amount_);\n            // deposit to pancake\n            pancakeMasterChef.deposit(pancakeMasterChefPid, amount_);\n        }\n    }\n\n    /**\n     * @dev unstake from pancakeswap\n     * @param user_ user to unstake\n     * @param amount_ amount to unstake\n     */\n    function _unstakeRemote(address user_, uint256 amount_) internal override {\n        UserInfo storage userInfo = usersInfo[user_];\n        PancakeUserInfo storage pancakeUserInfo = pancakeUsersInfo[user_];\n\n        uint256 sharesReward = (accPancakeRewardsPerShares * userInfo.lpAmount) / ACC_REWARDS_PRECISION;\n        uint256 pendingRewards = sharesReward + pancakeUserInfo.pendingRewards - pancakeUserInfo.rewardDebt;\n        pancakeUserInfo.pendingRewards = 0;\n        pancakeUserInfo.rewardDebt = sharesReward;\n\n        if (remoteEnabled) {\n            _requirePancakeSettled();\n            // withdraw from pancake\n            pancakeMasterChef.withdraw(pancakeMasterChefPid, amount_);\n        }\n        if (pendingRewards > 0) {\n            uint256 cakeBalance = cakeToken.balanceOf(address(this));\n            // send cake rewards\n            if (pendingRewards > cakeBalance) {\n                cakeToken.safeTransfer(user_, cakeBalance);\n                pancakeUserInfo.claimedRewards += cakeBalance;\n            } else {\n                cakeToken.safeTransfer(user_, pendingRewards);\n                pancakeUserInfo.claimedRewards += pendingRewards;\n            }\n        }\n    }\n\n    /**\n     * @dev harvest from pancakeswap\n     */\n    function _harvestRemote() internal override {\n        if (!remoteEnabled) {\n            return;\n        }\n        _requirePancakeSettled();\n\n        uint256 previousCakeAmount = cakeToken.balanceOf(address(this));\n        pancakeMasterChef.deposit(pancakeMasterChefPid, 0);\n        uint256 afterCakeAmount = cakeToken.balanceOf(address(this));\n        uint256 newRewards = afterCakeAmount - previousCakeAmount;\n        if (newRewards > 0) {\n            accPancakeRewardsPerShares += (newRewards * ACC_REWARDS_PRECISION) / totalLpAmount;\n        }\n    }\n}\n"
    },
    "@private/shared/3rd/pancake/IPancakeMasterChefV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\ninterface IPancakeMasterChefV2 {\n    function deposit(uint256 _pid, uint256 _amount) external;\n\n    function withdraw(uint256 _pid, uint256 _amount) external;\n\n    function pendingCake(uint256 _pid, address _user) external;\n}\n"
    },
    "contracts/MultiRewardsMasterChef.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"./interfaces/IMultiRewardsMasterChef.sol\";\n\ninterface IMigratorChef {\n    function migrate(IERC20 token) external returns (IERC20);\n}\n\n// MasterChef is the master of RewardToken. He can make RewardToken and he is a fair guy.\n//\n// Note that it's ownable and the owner wields tremendous power. The ownership\n// will be transferred to a governance smart contract once RewardToken is sufficiently\n// distributed and the community can show to govern itself.\n//\n// Have fun reading it. Hopefully it's bug-free. God bless.\ncontract MultiRewardsMasterChef is ReentrancyGuard, Initializable, IMultiRewardsMasterChef {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    address public admin;\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount; // How many LP tokens the user has provided.\n        /**\n         * @dev claimed rewards mapping.  reward id => claimed rewards since to last claimed\n         */\n        mapping(uint256 => uint256) claimedRewards;\n        /**\n         * @dev rewardDebt mapping. reward id => reward debt of the reward.\n         */\n        mapping(uint256 => uint256) rewardDebt; // Reward debt in each reward. See explanation below.\n        //\n        // We do some fancy math here. Basically, any point in time, the amount of rewards\n        // entitled to a user but is pending to be distributed is:\n        //\n        //   pending reward = (user.amount * poolsRewardsAccRewardsPerShare[pid][rewardId]) - user.rewardDebt\n        //\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\n        //   1. The pool's `accCakePerShare` (and `lastRewardBlock`) gets updated.\n        //   2. User receives the pending reward sent to his/her address.\n        //   3. User's `amount` gets updated.\n        //   4. User's `rewardDebt` gets updated.\n    }\n\n    // Info of each pool.\n    struct PoolInfo {\n        IERC20 lpToken; // Address of LP token contract.\n        uint256 allocPoint; // How many allocation points assigned to this pool. rewards to distribute per block.\n        uint256 lastRewardBlock; // Last block number that rewards distribution occurs.\n        /**\n         * Pool with a proxyFarmer means no lpToken transfer (including withdraw and deposit).\n         */\n        address proxyFarmer;\n        /**\n         * total deposited amount.\n         */\n        uint256 totalAmount;\n    }\n\n    struct RewardInfo {\n        IERC20 token;\n        uint256 amount;\n    }\n\n    /**\n     * Info of each reward.\n     */\n    struct RewardSpec {\n        IERC20 token;\n        uint256 rewardPerBlock;\n        uint256 startedAtBlock;\n        uint256 endedAtBlock;\n        uint256 claimedAmount;\n    }\n\n    RewardSpec[] public rewardSpecs;\n\n    // The migrator contract. It has a lot of power. Can only be set through governance (owner).\n    IMigratorChef public migrator;\n\n    // Info of each pool.\n    PoolInfo[] public poolInfo;\n    // pool => rewardId => accRewardsPerShare\n    mapping(uint256 => mapping(uint256 => uint256)) public poolsRewardsAccRewardsPerShare; // Accumulated rewards per share in each reward spec, times 1e12. See below.\n    // pool => userAddress => UserInfo; Info of each user that stakes LP tokens.\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n    // Total allocation points. Must be the sum of all allocation points in all pools.\n    uint256 public totalAllocPoint = 0;\n\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event ClaimRewards(address indexed user, uint256 indexed pid);\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event AdminChanged(address indexed previousAdmin, address indexed newAdmin);\n\n    event PoolAdded(uint256 indexed pid, address indexed lpToken, address indexed proxyFarmer, uint256 allocPoint);\n    event PoolUpdated(uint256 indexed pid, uint256 allocPoint);\n    event RewardSpecAdded(\n        uint256 indexed rewardId,\n        address indexed rewardToken,\n        uint256 rewardPerBlock,\n        uint256 startedAtBlock,\n        uint256 endedAtBlock\n    );\n    event RewardSpecUpdated(\n        uint256 indexed rewardId,\n        uint256 rewardPerBlock,\n        uint256 startedAtBlock,\n        uint256 endedAtBlock\n    );\n\n    /**\n     * @notice Checks if the msg.sender is the admin address.\n     */\n    modifier onlyAdmin() {\n        require(msg.sender == admin, \"Only admin\");\n        _;\n    }\n\n    function initialize(address admin_) public initializer {\n        admin = admin_;\n    }\n\n    function poolLength() external view returns (uint256) {\n        return poolInfo.length;\n    }\n\n    // Add a new lp to the pool. Can only be called by the owner.\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do. except as proxied farmer\n    function add(\n        uint256 _allocPoint,\n        IERC20 _lpToken,\n        address _proxyFarmer,\n        bool _withUpdate\n    ) public onlyAdmin returns (uint256 pid) {\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        if (_proxyFarmer != address(0)) {\n            require(address(_lpToken) == address(0), \"LPToken should be address 0 when proxied farmer.\");\n        }\n        uint256 lastRewardBlock = block.number;\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n        poolInfo.push(\n            PoolInfo({\n                lpToken: _lpToken,\n                allocPoint: _allocPoint,\n                lastRewardBlock: lastRewardBlock,\n                proxyFarmer: _proxyFarmer,\n                totalAmount: 0\n            })\n        );\n        uint256 pid = poolInfo.length - 1;\n        emit PoolAdded(pid, address(_lpToken), _proxyFarmer, _allocPoint);\n        return pid;\n    }\n\n    // Update the given pool's RewardToken allocation point. Can only be called by the owner.\n    function set(\n        uint256 _pid,\n        uint256 _allocPoint,\n        bool _withUpdate\n    ) public onlyAdmin {\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        uint256 prevAllocPoint = poolInfo[_pid].allocPoint;\n        poolInfo[_pid].allocPoint = _allocPoint;\n        if (prevAllocPoint != _allocPoint) {\n            totalAllocPoint = totalAllocPoint.sub(prevAllocPoint).add(_allocPoint);\n        }\n\n        emit PoolUpdated(_pid, _allocPoint);\n    }\n\n    function addRewardSpec(\n        IERC20 token,\n        uint256 rewardPerBlock,\n        uint256 startedAtBlock,\n        uint256 endedAtBlock\n    ) public onlyAdmin returns (uint256 rewardId) {\n        require(endedAtBlock > startedAtBlock, \"endedAtBlock should be greater than startedAtBlock\");\n        require(rewardPerBlock > 0, \"rewardPerBlock should be greater than zero\");\n\n        token.safeTransferFrom(msg.sender, address(this), (endedAtBlock - startedAtBlock) * rewardPerBlock);\n\n        rewardSpecs.push(\n            RewardSpec({\n                token: token,\n                rewardPerBlock: rewardPerBlock,\n                startedAtBlock: startedAtBlock,\n                endedAtBlock: endedAtBlock,\n                claimedAmount: 0\n            })\n        );\n        uint256 rewardId = rewardSpecs.length - 1;\n        emit RewardSpecAdded(rewardId, address(token), rewardPerBlock, startedAtBlock, endedAtBlock);\n        return rewardId;\n    }\n\n    function setRewardSpec(\n        uint256 rewardId,\n        uint256 rewardPerBlock,\n        uint256 startedAtBlock,\n        uint256 endedAtBlock\n    ) public onlyAdmin {\n        (uint256 depositAmount, uint256 refundAmount) = previewSetRewardSpec(\n            rewardId,\n            rewardPerBlock,\n            startedAtBlock,\n            endedAtBlock\n        );\n        require(depositAmount == 0 || refundAmount == 0, \"One of depositAmount and refundAmount must be 0\");\n        massUpdatePools();\n        RewardSpec storage rewardSpec = rewardSpecs[rewardId];\n        if (depositAmount > 0) {\n            rewardSpec.token.safeTransferFrom(msg.sender, address(this), depositAmount);\n        } else if (refundAmount > 0) {\n            rewardSpec.token.safeTransfer(msg.sender, refundAmount);\n        }\n\n        rewardSpec.startedAtBlock = startedAtBlock;\n        rewardSpec.endedAtBlock = endedAtBlock;\n        rewardSpec.rewardPerBlock = rewardPerBlock;\n\n        emit RewardSpecUpdated(rewardId, rewardPerBlock, startedAtBlock, endedAtBlock);\n    }\n\n    function previewSetRewardSpec(\n        uint256 rewardId,\n        uint256 rewardPerBlock,\n        uint256 startedAtBlock,\n        uint256 endedAtBlock\n    ) public view returns (uint256 depositAmount, uint256 refundAmount) {\n        RewardSpec storage rewardSpec = rewardSpecs[rewardId];\n\n        require(endedAtBlock > block.number, \"can not modify endedAtBlock to a past block number\");\n        require(endedAtBlock > startedAtBlock, \"endedAtBlock should be greater than startedAtBlock\");\n\n        // last period ended.\n        if (rewardSpec.endedAtBlock < block.number) {\n            require(startedAtBlock > block.number, \"can not modify startedAtBlock to a past period\");\n            return ((endedAtBlock - startedAtBlock) * rewardPerBlock, 0);\n        }\n        uint256 unminedAmount = 0;\n        uint256 requiredAmount = 0;\n        // last period has not been started yet.\n        if (rewardSpec.startedAtBlock > block.number) {\n            require(startedAtBlock > block.number, \"can not modify startedAtBlock to a past block\");\n            unminedAmount = (rewardSpec.endedAtBlock - rewardSpec.startedAtBlock) * rewardSpec.rewardPerBlock;\n            requiredAmount = (endedAtBlock - startedAtBlock) * rewardPerBlock;\n        } else {\n            unminedAmount = (rewardSpec.endedAtBlock - block.number) * rewardSpec.rewardPerBlock;\n            requiredAmount = (endedAtBlock - block.number) * rewardPerBlock;\n        }\n\n        if (requiredAmount > unminedAmount) {\n            return (requiredAmount - unminedAmount, 0);\n        }\n        return (0, unminedAmount - requiredAmount);\n    }\n\n    function getRewardSpecsLength() public view returns (uint256) {\n        return rewardSpecs.length;\n    }\n\n    function getUserClaimedRewards(\n        uint256 pid_,\n        address user_,\n        uint256 rewardId_\n    ) public view returns (uint256) {\n        return userInfo[pid_][user_].claimedRewards[rewardId_];\n    }\n\n    function getUserAmount(uint256 pid_, address user_) public view returns (uint256) {\n        return userInfo[pid_][user_].amount;\n    }\n\n    function getUserRewardDebt(\n        uint256 pid_,\n        address user_,\n        uint256 rewardId_\n    ) public view returns (uint256) {\n        return userInfo[pid_][user_].rewardDebt[rewardId_];\n    }\n\n    // Set the migrator contract. Can only be called by the owner.\n    function setMigrator(IMigratorChef _migrator) public onlyAdmin {\n        migrator = _migrator;\n    }\n\n    // Migrate lp token to another lp contract.\n    function migrate(uint256 _pid) public onlyAdmin {\n        require(address(migrator) != address(0), \"migrate: no migrator\");\n        PoolInfo storage pool = poolInfo[_pid];\n        IERC20 lpToken = pool.lpToken;\n        uint256 bal = lpToken.balanceOf(address(this));\n        lpToken.safeApprove(address(migrator), bal);\n        IERC20 newLpToken = migrator.migrate(lpToken);\n        require(bal == newLpToken.balanceOf(address(this)), \"migrate: bad\");\n        pool.lpToken = newLpToken;\n    }\n\n    // Return reward multiplier over the given _from to _to block.\n    function getMultiplier(\n        uint256 _from,\n        uint256 _to,\n        uint256 rewardId\n    ) public view returns (uint256) {\n        RewardSpec storage rewardSpec = rewardSpecs[rewardId];\n        if (_to < rewardSpec.startedAtBlock) {\n            return 0;\n        }\n        if (_from < rewardSpec.startedAtBlock) {\n            _from = rewardSpec.startedAtBlock;\n        }\n        if (_to > rewardSpec.endedAtBlock) {\n            _to = rewardSpec.endedAtBlock;\n        }\n        if (_from > _to) {\n            return 0;\n        }\n        return _to.sub(_from);\n    }\n\n    // View function to see pending CAKEs on frontend.\n    function pendingRewards(uint256 _pid, address _user) external view returns (RewardInfo[] memory) {\n        RewardInfo[] memory rewardsInfo = new RewardInfo[](rewardSpecs.length);\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        for (uint256 rewardId = 0; rewardId < rewardSpecs.length; rewardId++) {\n            RewardSpec storage rewardSpec = rewardSpecs[rewardId];\n\n            if (block.number < rewardSpec.startedAtBlock) {\n                rewardsInfo[rewardId] = RewardInfo({ token: rewardSpec.token, amount: 0 });\n                continue;\n            }\n\n            uint256 accRewardPerShare = poolsRewardsAccRewardsPerShare[_pid][rewardId];\n\n            uint256 lpSupply = pool.totalAmount;\n\n            if (block.number > pool.lastRewardBlock && lpSupply != 0) {\n                uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number, rewardId);\n                uint256 rewardAmount = multiplier.mul(rewardSpec.rewardPerBlock).mul(pool.allocPoint).div(\n                    totalAllocPoint\n                );\n                accRewardPerShare = accRewardPerShare.add(rewardAmount.mul(1e12).div(lpSupply));\n            }\n            rewardsInfo[rewardId] = RewardInfo({\n                token: rewardSpec.token,\n                amount: user.amount.mul(accRewardPerShare).div(1e12).sub(user.rewardDebt[rewardId])\n            });\n        }\n\n        return rewardsInfo;\n    }\n\n    // Update reward variables for all pools. Be careful of gas spending!\n    function massUpdatePools() public {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            updatePool(pid);\n        }\n    }\n\n    // Update reward variables of the given pool to be up-to-date.\n    function updatePool(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        if (block.number <= pool.lastRewardBlock) {\n            return;\n        }\n        uint256 lpSupply = pool.totalAmount;\n        if (lpSupply == 0) {\n            pool.lastRewardBlock = block.number;\n            return;\n        }\n        for (uint256 rewardId; rewardId < rewardSpecs.length; rewardId++) {\n            RewardSpec storage rewardSpec = rewardSpecs[rewardId];\n\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number, rewardId);\n            uint256 reward = multiplier.mul(rewardSpec.rewardPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n            poolsRewardsAccRewardsPerShare[_pid][rewardId] = poolsRewardsAccRewardsPerShare[_pid][rewardId].add(\n                reward.mul(1e12).div(lpSupply)\n            );\n        }\n        pool.lastRewardBlock = block.number;\n    }\n\n    function deposit(uint256 _pid, uint256 _amount) public {\n        _depositOperation(_pid, _amount, msg.sender);\n    }\n\n    function depositForUser(\n        uint256 _pid,\n        uint256 _amount,\n        address user_\n    ) public {\n        _depositOperation(_pid, _amount, user_);\n    }\n\n    // Deposit LP tokens to MasterChef for RewardToken allocation.\n    function _depositOperation(\n        uint256 _pid,\n        uint256 _amount,\n        address _user\n    ) internal nonReentrant {\n        PoolInfo storage pool = poolInfo[_pid];\n        if (pool.proxyFarmer != address(0)) {\n            require(msg.sender == pool.proxyFarmer, \"Only proxy farmer\");\n        } else {\n            require(msg.sender == _user, \"Can not deposit for others\");\n        }\n\n        UserInfo storage user = userInfo[_pid][_user];\n        updatePool(_pid);\n        for (uint256 rewardId = 0; rewardId < rewardSpecs.length; rewardId++) {\n            RewardSpec storage rewardSpec = rewardSpecs[rewardId];\n            uint256 accRewardPerShare = poolsRewardsAccRewardsPerShare[_pid][rewardId];\n            if (user.amount > 0) {\n                uint256 pending = user.amount.mul(accRewardPerShare).div(1e12).sub(user.rewardDebt[rewardId]);\n                if (pending > 0) {\n                    rewardSpec.claimedAmount += pending;\n                    user.claimedRewards[rewardId] += pending;\n                    rewardSpec.token.safeTransfer(_user, pending);\n                }\n            }\n\n            user.rewardDebt[rewardId] = user.amount.add(_amount).mul(accRewardPerShare).div(1e12);\n        }\n        if (_amount > 0) {\n            if (pool.proxyFarmer == address(0)) {\n                pool.lpToken.safeTransferFrom(address(_user), address(this), _amount);\n            }\n            pool.totalAmount = pool.totalAmount.add(_amount);\n            user.amount = user.amount.add(_amount);\n        }\n        emit Deposit(_user, _pid, _amount);\n    }\n\n    function withdraw(uint256 _pid, uint256 _amount) public {\n        _withdrawOperation(_pid, _amount, msg.sender);\n    }\n\n    function withdrawForUser(\n        uint256 _pid,\n        uint256 _amount,\n        address user_\n    ) public {\n        _withdrawOperation(_pid, _amount, user_);\n    }\n\n    // Withdraw LP tokens from MasterChef.\n    function _withdrawOperation(\n        uint256 _pid,\n        uint256 _amount,\n        address _user\n    ) internal nonReentrant {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        require(user.amount >= _amount, \"withdraw: Insufficient balance\");\n        if (pool.proxyFarmer != address(0)) {\n            require(msg.sender == pool.proxyFarmer, \"Only proxy farmer\");\n        } else {\n            require(msg.sender == _user, \"Can not withdraw for others\");\n        }\n        updatePool(_pid);\n        for (uint256 rewardId = 0; rewardId < rewardSpecs.length; rewardId++) {\n            RewardSpec storage rewardSpec = rewardSpecs[rewardId];\n            uint256 accRewardPerShare = poolsRewardsAccRewardsPerShare[_pid][rewardId];\n            if (user.amount > 0) {\n                uint256 pending = user.amount.mul(accRewardPerShare).div(1e12).sub(user.rewardDebt[rewardId]);\n                if (pending > 0) {\n                    rewardSpec.claimedAmount += pending;\n                    user.claimedRewards[rewardId] += pending;\n                    rewardSpec.token.safeTransfer(_user, pending);\n                }\n                user.rewardDebt[rewardId] = user.amount.mul(accRewardPerShare).div(1e12);\n            }\n\n            if (_amount > 0) {\n                user.rewardDebt[rewardId] = user.amount.sub(_amount).mul(accRewardPerShare).div(1e12);\n            }\n        }\n        if (_amount > 0) {\n            user.amount = user.amount.sub(_amount);\n            pool.totalAmount = pool.totalAmount.sub(_amount);\n            if (pool.proxyFarmer == address(0)) {\n                pool.lpToken.safeTransfer(address(_user), _amount);\n            }\n        }\n        emit Withdraw(msg.sender, _pid, _amount);\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw(uint256 _pid) public nonReentrant {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n\n        require(pool.proxyFarmer != address(0), \"nothing to withdraw\");\n\n        pool.totalAmount = pool.totalAmount.sub(user.amount);\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\n        user.amount = 0;\n        for (uint256 rewardId = 0; rewardId < rewardSpecs.length; rewardId++) {\n            user.rewardDebt[rewardId] = 0;\n        }\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\n    }\n\n    function setAdmin(address admin_) public onlyAdmin {\n        require(admin_ != address(0), \"can not be zero address\");\n        address previousAdmin = admin;\n        admin = admin_;\n\n        emit AdminChanged(previousAdmin, admin_);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/underlyings/pancake/ExtendableBondedCake.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\nimport \"@private/shared/3rd/pancake/ICakePool.sol\";\n\nimport \"../../ExtendableBond.sol\";\n\ncontract ExtendableBondedCake is ExtendableBond {\n    /**\n     * CakePool contract\n     */\n    ICakePool public cakePool;\n\n    function setCakePool(ICakePool cakePool_) external onlyAdmin {\n        cakePool = cakePool_;\n    }\n\n    /**\n     * @dev calculate cake amount from pancake.\n     */\n    function remoteUnderlyingAmount() public view override returns (uint256) {\n        ICakePool.UserInfo memory userInfo = cakePool.userInfo(address(this));\n        uint256 pricePerFullShare = cakePool.getPricePerFullShare();\n        if (userInfo.shares <= 0) {\n            return 0;\n        }\n        uint256 withdrawFee = 0;\n        if (\n            ((userInfo.locked ? userInfo.lockEndTime : block.timestamp) <\n                userInfo.lastDepositedTime + cakePool.withdrawFeePeriod())\n        ) {\n            withdrawFee = cakePool.calculateWithdrawFee(address(this), userInfo.shares);\n        }\n        return (userInfo.shares * pricePerFullShare) / 1e18 - userInfo.userBoostedShare - withdrawFee;\n    }\n\n    /**\n     * @dev calculate cake amount from pancake.\n     */\n    function pancakeUserInfo() public view returns (ICakePool.UserInfo memory) {\n        return cakePool.userInfo(address(this));\n    }\n\n    /**\n     * @dev withdraw from pancakeswap\n     */\n    function _withdrawFromRemote(uint256 amount_) internal override {\n        cakePool.withdrawByAmount(amount_);\n    }\n\n    /**\n     * @dev deposit to pancakeswap\n     */\n    function _depositRemote(uint256 amount_) internal override {\n        uint256 balance = underlyingToken.balanceOf(address(this));\n        require(balance > 0 && balance >= amount_, \"nothing to deposit\");\n        underlyingToken.approve(address(cakePool), amount_);\n        cakePool.deposit(amount_, secondsToPancakeLockExtend(true));\n\n        _checkLockEndTime();\n    }\n\n    function _checkLockEndTime() internal view {\n        require(pancakeUserInfo().lockEndTime <= checkPoints.maturity, \"The lock-up time exceeds the ebCAKE maturity\");\n    }\n\n    /**\n     * @dev calculate lock extend seconds\n     * @param deposit_ whether use as deposit param.\n     */\n    function secondsToPancakeLockExtend(bool deposit_) public view returns (uint256 secondsToExtend) {\n        uint256 currentTime = block.timestamp;\n        ICakePool.UserInfo memory cakeInfo = cakePool.userInfo(address(this));\n\n        uint256 cakeMaxLockDuration = cakePool.MAX_LOCK_DURATION();\n        // lock expired or cake lockEndTime earlier than maturity, extend lock time required.\n        if (\n            cakeInfo.lockEndTime < checkPoints.maturity &&\n            checkPoints.maturity > block.timestamp &&\n            (deposit_ || cakeInfo.lockEndTime - cakeInfo.lockStartTime < cakeMaxLockDuration)\n        ) {\n            if (cakeInfo.lockEndTime >= block.timestamp) {\n                // lockStartTime will be updated to block.timestamp in CakePool every time.\n                uint256 totalLockDuration = checkPoints.maturity - block.timestamp;\n                return\n                    MathUpgradeable.min(totalLockDuration, cakeMaxLockDuration) +\n                    block.timestamp -\n                    cakeInfo.lockEndTime;\n            }\n\n            return MathUpgradeable.min(checkPoints.maturity - block.timestamp, cakeMaxLockDuration);\n        }\n\n        return secondsToExtend;\n    }\n\n    /**\n     * @dev Withdraw cake from cake pool.\n     */\n    function withdrawAllCakesFromPancake(bool makeRedeemable_) public onlyAdminOrKeeper {\n        checkPoints.convertable = false;\n        cakePool.withdrawAll();\n        if (makeRedeemable_) {\n            checkPoints.redeemable = true;\n        }\n    }\n\n    /**\n     * @dev extend pancake lock duration if needs\n     * @param force_ force extend even it's unnecessary\n     */\n    function extendPancakeLockDuration(bool force_) public onlyAdminOrKeeper {\n        uint256 secondsToExtend = secondsToPancakeLockExtend(force_);\n        if (secondsToExtend > 0) {\n            cakePool.deposit(0, secondsToExtend);\n            _checkLockEndTime();\n        }\n    }\n}\n"
    },
    "@private/shared/3rd/pancake/ICakePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface ICakePool {\n    function totalShares() external view returns (uint256);\n\n    struct UserInfo {\n        uint256 shares; // number of shares for a user.\n        uint256 lastDepositedTime; // keep track of deposited time for potential penalty.\n        uint256 cakeAtLastUserAction; // keep track of cake deposited at the last user action.\n        uint256 lastUserActionTime; // keep track of the last user action time.\n        uint256 lockStartTime; // lock start time.\n        uint256 lockEndTime; // lock end time.\n        uint256 userBoostedShare; // boost share, in order to give the user higher reward. The user only enjoys the reward, so the principal needs to be recorded as a debt.\n        bool locked; //lock status.\n        uint256 lockedAmount; // amount deposited during lock period.\n    }\n\n    function withdrawFeePeriod() external view returns (uint256);\n\n    function freeWithdrawFeeUsers(address user_) external view returns (bool);\n\n    function MAX_LOCK_DURATION() external view returns (uint256);\n\n    function userInfo(address user_) external view returns (UserInfo memory);\n\n    function deposit(uint256 _amount, uint256 _lockDuration) external;\n\n    function withdrawByAmount(uint256 _amount) external;\n\n    /**\n     * @notice Calculate Performance fee.\n     * @param _user: User address\n     * @return Returns Performance fee.\n     */\n    function calculatePerformanceFee(address _user) external view returns (uint256);\n\n    function calculateWithdrawFee(address _user, uint256 _shares) external view returns (uint256);\n\n    function calculateOverdueFee(address _user) external view returns (uint256);\n\n    /**\n     * @notice Withdraw funds from the Cake Pool.\n     * @param _shares: Number of shares to withdraw\n     */\n    function withdraw(uint256 _shares) external;\n\n    function withdrawAll() external;\n\n    function getPricePerFullShare() external view returns (uint256);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x00000000d41867734bbee4c6863d9255b2b06ac1"
      }
    }
  }
}