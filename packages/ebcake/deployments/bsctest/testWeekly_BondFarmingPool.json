{
  "address": "0x11e4Fa4966060F14354765Cd92F233EA65455eB2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "bondToken_",
          "type": "address"
        },
        {
          "internalType": "contract IExtendableBond",
          "name": "bond_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "amountToShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bond",
      "outputs": [
        {
          "internalType": "contract IExtendableBond",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bondToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimBonuses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user_",
          "type": "address"
        }
      ],
      "name": "earnedToDate",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdatedPoolAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterChef",
      "outputs": [
        {
          "internalType": "contract MultiRewardsMasterChef",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterChefPid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares_",
          "type": "uint256"
        }
      ],
      "name": "pendingRewardsByShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract MultiRewardsMasterChef",
          "name": "masterChef_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "masterChefPid_",
          "type": "uint256"
        }
      ],
      "name": "setMasterChef",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBondFarmingPool",
          "name": "siblingPool_",
          "type": "address"
        }
      ],
      "name": "setSiblingPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares_",
          "type": "uint256"
        }
      ],
      "name": "sharesToBondAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "siblingPool",
      "outputs": [
        {
          "internalType": "contract IBondFarmingPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "stakeForUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPendingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares_",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unstakeAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "usersInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "accNetStaked",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5e3af1c7ddd8072aaf7ac366b355d446e1c577d59b9428bd185b73aa12a4eb27",
  "receipt": {
    "to": null,
    "from": "0xe7a2b8C8feD53713F69227e6c3d2384E80CF88a6",
    "contractAddress": "0x11e4Fa4966060F14354765Cd92F233EA65455eB2",
    "transactionIndex": 8,
    "gasUsed": "1372052",
    "logsBloom": "0x
    "blockHash": "0x4809c8a99cfdf6d771a42b859cd54cec284b6f47e3eb8850ad892dcc946bddf7",
    "transactionHash": "0x5e3af1c7ddd8072aaf7ac366b355d446e1c577d59b9428bd185b73aa12a4eb27",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 19648633,
        "transactionHash": "0x5e3af1c7ddd8072aaf7ac366b355d446e1c577d59b9428bd185b73aa12a4eb27",
        "address": "0x11e4Fa4966060F14354765Cd92F233EA65455eB2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e7a2b8c8fed53713f69227e6c3d2384e80cf88a6"
        ],
        "data": "0x",
        "logIndex": 26,
        "blockHash": "0x4809c8a99cfdf6d771a42b859cd54cec284b6f47e3eb8850ad892dcc946bddf7"
      }
    ],
    "blockNumber": 19648633,
    "cumulativeGasUsed": "2966604",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x914a9fc7E131Ba505e4E255026CE147d42eC0Af8",
    "0x1CdB6a97FE1137e924aF29FB7b308261CB81CEda"
  ],
  "numDeployments": 2,
  "solcInputHash": "96cf958370427767f964ffffef09c306",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"bondToken_\",\"type\":\"address\"},{\"internalType\":\"contract IExtendableBond\",\"name\":\"bond_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"amountToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bond\",\"outputs\":[{\"internalType\":\"contract IExtendableBond\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBonuses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"earnedToDate\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdatedPoolAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterChef\",\"outputs\":[{\"internalType\":\"contract MultiRewardsMasterChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterChefPid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"name\":\"pendingRewardsByShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract MultiRewardsMasterChef\",\"name\":\"masterChef_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"masterChefPid_\",\"type\":\"uint256\"}],\"name\":\"setMasterChef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBondFarmingPool\",\"name\":\"siblingPool_\",\"type\":\"address\"}],\"name\":\"setSiblingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"name\":\"sharesToBondAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"siblingPool\",\"outputs\":[{\"internalType\":\"contract IBondFarmingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"stakeForUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usersInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"accNetStaked\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"earnedToDate(address)\":{\"details\":\"calculate earned amount to date of specific user.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updatePool()\":{\"details\":\"see: _updatePool\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"unstake(uint256)\":{\"notice\":\"unstake by shares\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BondFarmingPool.sol\":\"BondFarmingPool\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xd0a917e32d1251a9b2f1dea15e932815d5382e64e6b0a18104664a6cc774cd70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/BondFarmingPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\n\\nimport \\\"./ExtendableBond.sol\\\";\\nimport \\\"./libs/DuetMath.sol\\\";\\nimport \\\"./MultiRewardsMasterChef.sol\\\";\\nimport \\\"./interfaces/IBondFarmingPool.sol\\\";\\nimport \\\"./interfaces/IExtendableBond.sol\\\";\\n\\ncontract BondFarmingPool is Pausable, ReentrancyGuard, Ownable, IBondFarmingPool {\\n    using SafeERC20 for IERC20;\\n    IERC20 public bondToken;\\n    IExtendableBond public bond;\\n    uint256 public totalShares = 0;\\n    uint256 public lastUpdatedPoolAt = 0;\\n    IBondFarmingPool public siblingPool;\\n\\n    MultiRewardsMasterChef public masterChef;\\n    uint256 public masterChefPid;\\n\\n    struct UserInfo {\\n        /**\\n         * @dev described compounded underlying bond token amount, user's shares / total shares * underlying amount = user's amount.\\n         */\\n        uint256 shares;\\n        /**\\n         * @notice accumulated net staked amount. only for earned to date calculation.\\n         * @dev formula: accumulatedStakedAmount - accumulatedUnstakedAmount\\n         */\\n        int256 accNetStaked;\\n    }\\n\\n    mapping(address => UserInfo) public usersInfo;\\n\\n    event Staked(address indexed user, uint256 amount);\\n    event Unstaked(address indexed user, uint256 amount);\\n\\n    constructor(IERC20 bondToken_, IExtendableBond bond_) {\\n        bondToken = bondToken_;\\n        bond = bond_;\\n    }\\n\\n    function setMasterChef(MultiRewardsMasterChef masterChef_, uint256 masterChefPid_) public onlyOwner {\\n        masterChef = masterChef_;\\n        masterChefPid = masterChefPid_;\\n    }\\n\\n    function setSiblingPool(IBondFarmingPool siblingPool_) public onlyOwner {\\n        require(\\n            address(siblingPool_.siblingPool()) == address(0) || address(siblingPool_.siblingPool()) == address(this),\\n            \\\"Invalid sibling\\\"\\n        );\\n        siblingPool = siblingPool_;\\n    }\\n\\n    function claimBonuses() public {\\n        address user = msg.sender;\\n        UserInfo storage userInfo = usersInfo[user];\\n        require(userInfo.shares > 0, \\\"Nothing to claim\\\");\\n\\n        masterChef.withdrawForUser(masterChefPid, 0, user);\\n    }\\n\\n    /**\\n     * @dev see: _updatePool\\n     */\\n    function updatePool() external {\\n        require(\\n            msg.sender == address(siblingPool) || msg.sender == address(bond),\\n            \\\"BondLPFarmingPool: Calling from sibling pool or bond only\\\"\\n        );\\n        _updatePool();\\n    }\\n\\n    /**\\n     * @dev allocate pending rewards.\\n     */\\n    function _updatePool() internal {\\n        require(address(siblingPool) != address(0), \\\"BondFarmingPool: Contract not ready yet.\\\");\\n        // Single bond token farming rewards base on  'bond token mount in pool' / 'total bond token supply' * 'total underlying rewards' and remaining rewards for LP pools.\\n        // So single bond farming pool should be updated before LP's.\\n        require(\\n            siblingPool.lastUpdatedPoolAt() < block.number ||\\n                (siblingPool.lastUpdatedPoolAt() == lastUpdatedPoolAt && lastUpdatedPoolAt == block.number),\\n            \\\"update bond pool firstly.\\\"\\n        );\\n        uint256 pendingRewards = totalPendingRewards();\\n\\n        lastUpdatedPoolAt = block.number;\\n        if (pendingRewards <= 0) {\\n            return;\\n        }\\n        bond.mintBondTokenForRewards(address(this), pendingRewards);\\n    }\\n\\n    /**\\n     * @dev calculate earned amount to date of specific user.\\n     */\\n    function earnedToDate(address user_) public view returns (int256) {\\n        UserInfo storage userInfo = usersInfo[user_];\\n        return int256(sharesToBondAmount(userInfo.shares)) - userInfo.accNetStaked;\\n    }\\n\\n    function totalPendingRewards() public view virtual returns (uint256) {\\n        uint256 remoteTotalPendingRewards = bond.totalPendingRewards();\\n\\n\\n        if (remoteTotalPendingRewards <= 0) {\\n            return 0;\\n        }\\n        uint256 poolBalance = bondToken.balanceOf(address(this));\\n        if (poolBalance <= 0) {\\n            return 0;\\n        }\\n\\n\\n\\n        return DuetMath.mulDiv(uint256(remoteTotalPendingRewards), poolBalance, bondToken.totalSupply());\\n    }\\n\\n    function pendingRewardsByShares(uint256 shares_) public view returns (uint256) {\\n        if (shares_ <= 0) {\\n            return 0;\\n        }\\n        return DuetMath.mulDiv(totalPendingRewards(), shares_, totalShares);\\n    }\\n\\n    function sharesToBondAmount(uint256 shares_) public view returns (uint256) {\\n        if (shares_ <= 0) {\\n            return 0;\\n        }\\n        return DuetMath.mulDiv(underlyingAmount(), shares_, totalShares);\\n    }\\n\\n    function amountToShares(uint256 amount_) public view returns (uint256) {\\n        return totalShares > 0 ? DuetMath.mulDiv(amount_, totalShares, underlyingAmount()) : amount_;\\n    }\\n\\n    function underlyingAmount() public view returns (uint256) {\\n        return totalPendingRewards() + bondToken.balanceOf(address(this));\\n    }\\n\\n    function stake(uint256 amount_) public whenNotPaused {\\n        address user = msg.sender;\\n        stakeForUser(user, amount_);\\n    }\\n\\n    function stakeForUser(address user_, uint256 amount_) public whenNotPaused nonReentrant {\\n        // distributing pending rewards of all sibling pools to correct reward ratio between them.\\n        _updatePools();\\n\\n        uint256 stakeShares = amountToShares(amount_);\\n\\n        bondToken.transferFrom(msg.sender, address(this), amount_);\\n        totalShares += stakeShares;\\n        usersInfo[user_].shares += stakeShares;\\n        usersInfo[user_].accNetStaked += int256(amount_);\\n        masterChef.depositForUser(masterChefPid, stakeShares, user_);\\n        emit Staked(user_, amount_);\\n    }\\n\\n    function _updatePools() internal {\\n        _updatePool();\\n        siblingPool.updatePool();\\n    }\\n\\n    function unstakeAll() public {\\n        require(usersInfo[msg.sender].shares > 0, \\\"nothing to unstake\\\");\\n        unstake(usersInfo[msg.sender].shares);\\n    }\\n\\n    /**\\n     * @notice unstake by shares\\n     */\\n    function unstake(uint256 shares_) public whenNotPaused nonReentrant {\\n        address user = msg.sender;\\n        UserInfo storage userInfo = usersInfo[user];\\n        require(userInfo.shares >= shares_ && totalShares >= shares_, \\\"unstake shares exceeds owned shares\\\");\\n\\n        // distribute pending rewards of all sibling pools to correct reward ratio between them.\\n        _updatePools();\\n\\n        // including rewards.\\n        uint256 totalBondAmount = sharesToBondAmount(shares_);\\n        userInfo.shares -= shares_;\\n        totalShares -= shares_;\\n\\n\\n\\n\\n        bondToken.transfer(user, totalBondAmount);\\n        usersInfo[user].accNetStaked -= int256(totalBondAmount);\\n        masterChef.withdrawForUser(masterChefPid, shares_, user);\\n        emit Unstaked(user, totalBondAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x87044ed22761ef9ad42003fc12077651955343f5a293e34345915ab2e9255c52\",\"license\":\"GPL-3.0\"},\"contracts/BondToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract BondToken is ERC20, Ownable {\\n    address public minter;\\n\\n    modifier onlyMinter() {\\n        require(minter == msg.sender, \\\"Minter only\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address minter_\\n    ) ERC20(name_, symbol_) Ownable() {\\n        minter = minter_;\\n    }\\n\\n    function setMinter(address minter_) public onlyOwner {\\n        minter = minter_;\\n    }\\n\\n    function mint(address to_, uint256 amount_) external onlyMinter {\\n        require(amount_ > 0, \\\"Nothing to mint\\\");\\n        _mint(to_, amount_);\\n    }\\n\\n    function burnFrom(address account_, uint256 amount_) external onlyMinter {\\n        require(amount_ > 0, \\\"Nothing to burn\\\");\\n        _burn(account_, amount_);\\n    }\\n}\\n\",\"keccak256\":\"0x48c34c25cf9b0643c63aa6259215a0d4f7d194d7263981aa9772c83e8961db3c\",\"license\":\"GPL-3.0\"},\"contracts/ExtendableBond.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"./BondToken.sol\\\";\\nimport \\\"./interfaces/ICakePool.sol\\\";\\nimport \\\"./interfaces/IBondFarmingPool.sol\\\";\\nimport \\\"./libs/Adminable.sol\\\";\\nimport \\\"./libs/Keepable.sol\\\";\\n\\ncontract ExtendableBond is ReentrancyGuardUpgradeable, PausableUpgradeable, Adminable, Keepable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using SafeERC20Upgradeable for BondToken;\\n    /**\\n     * Bond token contract\\n     */\\n    BondToken public bondToken;\\n\\n    /**\\n     * Bond underlying asset\\n     */\\n    IERC20Upgradeable public underlyingToken;\\n\\n    /**\\n     * @dev factor for percentage that described in integer. It makes 10000 means 100%, and 20 means 0.2%;\\n     *      Calculation formula: x * percentage / PERCENTAGE_FACTOR\\n     */\\n    uint16 public constant PERCENTAGE_FACTOR = 10000;\\n    IBondFarmingPool public bondFarmingPool;\\n    IBondFarmingPool public bondLPFarmingPool;\\n    /**\\n     * Emitted when someone convert underlying token to the bond.\\n     */\\n    event Converted(uint256 amount, address indexed user);\\n\\n    event MintedBondTokenForRewards(address indexed to, uint256 amount);\\n\\n    struct FeeSpec {\\n        string desc;\\n        uint16 rate;\\n        address receiver;\\n    }\\n\\n    /**\\n     * Fee specifications\\n     */\\n    FeeSpec[] public feeSpecs;\\n\\n    struct CheckPoints {\\n        bool convertable;\\n        uint256 convertableFrom;\\n        uint256 convertableEnd;\\n        bool redeemable;\\n        uint256 redeemableFrom;\\n        uint256 redeemableEnd;\\n        uint256 maturity;\\n    }\\n\\n    CheckPoints public checkPoints;\\n    modifier onlyAdminOrKeeper() virtual {\\n        require(msg.sender == admin || msg.sender == keeper, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    function initialize(\\n        BondToken bondToken_,\\n        IERC20Upgradeable underlyingToken_,\\n        address admin_\\n    ) public initializer {\\n        __Pausable_init();\\n        __ReentrancyGuard_init();\\n        _setAdmin(admin_);\\n\\n        bondToken = bondToken_;\\n        underlyingToken = underlyingToken_;\\n    }\\n\\n    /**\\n     * @notice Underlying token amount that hold in current contract.\\n     */\\n    function underlyingAmount() public view returns (uint256) {\\n        return underlyingToken.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice total underlying token amount, including hold in current contract and remote\\n     */\\n    function totalUnderlyingAmount() public view returns (uint256) {\\n        return underlyingAmount() + remoteUnderlyingAmount();\\n    }\\n\\n    /**\\n     * @dev Total pending rewards for bond. May be negative in some unexpected circumstances,\\n     *      such as remote underlying amount has unexpectedly decreased makes bond token over issued.\\n     */\\n    function totalPendingRewards() public view returns (uint256) {\\n        uint256 underlying = totalUnderlyingAmount();\\n        uint256 bondAmount = totalBondTokenAmount();\\n        if (bondAmount >= underlying) {\\n            return 0;\\n        }\\n        return underlying - bondAmount;\\n    }\\n\\n    /**\\n     * @dev mint bond token for rewards and allocate fees.\\n     */\\n    function mintBondTokenForRewards(address to_, uint256 amount_) public {\\n        require(\\n            msg.sender == address(bondFarmingPool) || msg.sender == address(bondLPFarmingPool),\\n            \\\"only from farming pool\\\"\\n        );\\n        require(totalBondTokenAmount() + amount_ <= totalUnderlyingAmount(), \\\"Can not over issue\\\");\\n\\n        // nothing to happen when reward amount is zero.\\n        if (amount_ <= 0) {\\n            return;\\n        }\\n\\n        uint256 amountToTarget = amount_;\\n\\n        // allocate fees.\\n        for (uint256 i = 0; i < feeSpecs.length; i++) {\\n            FeeSpec storage feeSpec = feeSpecs[i];\\n            uint256 feeAmount = (amountToTarget * feeSpec.rate) / PERCENTAGE_FACTOR;\\n\\n            if (feeAmount <= 0) {\\n                continue;\\n            }\\n            amountToTarget -= feeAmount;\\n            bondToken.mint(feeSpec.receiver, feeAmount);\\n        }\\n\\n        if (amountToTarget > 0) {\\n            bondToken.mint(to_, amountToTarget);\\n        }\\n\\n        emit MintedBondTokenForRewards(to_, amount_);\\n    }\\n\\n    /**\\n     * Bond token total amount.\\n     */\\n    function totalBondTokenAmount() public view returns (uint256) {\\n        return bondToken.totalSupply();\\n    }\\n\\n    /**\\n     * calculate remote underlying token amount.\\n     */\\n    function remoteUnderlyingAmount() public view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Redeem all my bond tokens to underlying tokens.\\n     */\\n    function redeemAll() external whenNotPaused {\\n        redeem(bondToken.balanceOf(msg.sender));\\n    }\\n\\n    /**\\n     * @dev Redeem specific amount of my bond tokens.\\n     * @param amount_ amount to redeem\\n     */\\n    function redeem(uint256 amount_) public whenNotPaused nonReentrant {\\n        require(amount_ > 0, \\\"Nothing to redeem\\\");\\n        require(\\n            checkPoints.redeemable &&\\n                block.timestamp >= checkPoints.redeemableFrom &&\\n                block.timestamp <= checkPoints.redeemableEnd &&\\n                block.timestamp > checkPoints.convertableEnd,\\n            \\\"Can not redeem.\\\"\\n        );\\n\\n        address user = msg.sender;\\n        uint256 userBondTokenBalance = bondToken.balanceOf(user);\\n        require(amount_ <= userBondTokenBalance, \\\"Insufficient balance\\\");\\n\\n        // burn user's bond token\\n        bondToken.burnFrom(user, amount_);\\n\\n        uint256 underlyingTokenAmount = underlyingToken.balanceOf(address(this));\\n        if (underlyingTokenAmount < amount_) {\\n            _withdrawFromRemote(amount_ - underlyingTokenAmount);\\n        }\\n\\n        underlyingToken.safeTransfer(user, amount_);\\n    }\\n\\n    function _withdrawFromRemote(uint256 amount_) internal virtual {}\\n\\n    /**\\n     * @dev convert underlying token to bond token to current user\\n     * @param amount_ amount of underlying token to convert\\n     */\\n    function convert(uint256 amount_) external whenNotPaused {\\n        require(amount_ > 0, \\\"Nothing to convert\\\");\\n\\n        _convertOperation(amount_, msg.sender);\\n    }\\n\\n    function requireConvertable() internal view {\\n        require(\\n            checkPoints.convertable &&\\n                block.timestamp >= checkPoints.convertableFrom &&\\n                block.timestamp <= checkPoints.convertableEnd &&\\n                block.timestamp < checkPoints.redeemableFrom,\\n            \\\"Can not convert.\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev distribute pending rewards.\\n     */\\n    function _updateFarmingPools() internal {\\n        bondFarmingPool.updatePool();\\n        bondLPFarmingPool.updatePool();\\n    }\\n\\n    function setFarmingPools(IBondFarmingPool bondPool_, IBondFarmingPool lpPool_) public onlyAdmin {\\n        require(address(bondPool_) != address(0) && address(bondPool_) != address(lpPool_), \\\"invalid farming pools\\\");\\n        bondFarmingPool = bondPool_;\\n        bondLPFarmingPool = lpPool_;\\n    }\\n\\n    /**\\n     * @dev convert underlying token to bond token and stake to bondFarmingPool for current user\\n     */\\n    function convertAndStake(uint256 amount_) external whenNotPaused nonReentrant {\\n        require(amount_ > 0, \\\"Nothing to convert\\\");\\n        requireConvertable();\\n        // Single bond token farming rewards base on  'bond token mount in pool' / 'total bond token supply' * 'total underlying rewards'  (remaining rewards for LP pools)\\n        // In order to distribute pending rewards to old shares, bondToken farming pools should be updated when new bondToken converted.\\n        _updateFarmingPools();\\n\\n        address user = msg.sender;\\n        underlyingToken.safeTransferFrom(user, address(this), amount_);\\n        _depositRemote(amount_);\\n        // 1:1 mint bond token to current contract\\n        bondToken.mint(address(this), amount_);\\n        bondToken.approve(address(bondFarmingPool), amount_);\\n        // stake to bondFarmingPool\\n        bondFarmingPool.stakeForUser(user, amount_);\\n        emit Converted(amount_, user);\\n    }\\n\\n    function _depositRemote(uint256 amount_) internal virtual {}\\n\\n    /**\\n     * @dev convert underlying token to bond token to specific user\\n     */\\n    function _convertOperation(uint256 amount_, address user_) internal nonReentrant {\\n        requireConvertable();\\n        // Single bond token farming rewards base on  'bond token mount in pool' / 'total bond token supply' * 'total underlying rewards'   (remaining rewards for LP pools)\\n        // In order to distribute pending rewards to old shares, bondToken farming pools should be updated when new bondToken converted.\\n        _updateFarmingPools();\\n\\n        underlyingToken.transferFrom(user_, address(this), amount_);\\n        _depositRemote(amount_);\\n        // 1:1 mint bond token to user\\n        bondToken.mint(user_, amount_);\\n        emit Converted(amount_, user_);\\n    }\\n\\n    /**\\n     * @dev update checkPoints\\n     * @param checkPoints_ new checkpoints\\n     */\\n    function updateCheckPoints(CheckPoints calldata checkPoints_) public onlyAdminOrKeeper {\\n        require(checkPoints_.convertableFrom > 0, \\\"convertableFrom must be greater than 0\\\");\\n        require(\\n            checkPoints_.convertableFrom < checkPoints_.convertableEnd,\\n            \\\"redeemableFrom must be earlier than convertableEnd\\\"\\n        );\\n        require(\\n            checkPoints_.redeemableFrom > checkPoints_.convertableEnd &&\\n                checkPoints_.redeemableFrom >= checkPoints_.maturity,\\n            \\\"redeemableFrom must be later than convertableEnd and maturity\\\"\\n        );\\n        require(\\n            checkPoints_.redeemableEnd > checkPoints_.redeemableFrom,\\n            \\\"redeemableEnd must be later than redeemableFrom\\\"\\n        );\\n        checkPoints = checkPoints_;\\n    }\\n\\n    function setRedeemable(bool redeemable_) external onlyAdminOrKeeper {\\n        checkPoints.redeemable = redeemable_;\\n    }\\n\\n    function setConvertable(bool convertable_) external onlyAdminOrKeeper {\\n        checkPoints.convertable = convertable_;\\n    }\\n\\n    /**\\n     * @dev emergency transfer underlying token for security issue or bug encounted.\\n     */\\n    function emergencyTransferUnderlyingTokens(address to_) external onlyAdmin {\\n        checkPoints.convertable = false;\\n        checkPoints.redeemable = false;\\n        underlyingToken.safeTransfer(to_, underlyingAmount());\\n    }\\n\\n    /**\\n     * @notice add fee specification\\n     */\\n    function addFeeSpec(FeeSpec calldata feeSpec_) external onlyAdmin {\\n        require(feeSpecs.length < 5, \\\"Too many fee specs\\\");\\n        require(feeSpec_.rate > 0, \\\"Fee rate is too low\\\");\\n        require(feeSpec_.rate <= PERCENTAGE_FACTOR, \\\"Fee rate is too high\\\");\\n        feeSpecs.push(feeSpec_);\\n        uint256 totalFeeRate = 0;\\n        for (uint256 i = 0; i < feeSpecs.length; i++) {\\n            totalFeeRate += feeSpecs[i].rate;\\n        }\\n        require(totalFeeRate <= PERCENTAGE_FACTOR, \\\"Total fee rate greater than 100%.\\\");\\n    }\\n\\n    /**\\n     * @notice update fee specification\\n     */\\n    function setFeeSpec(uint256 feeId_, FeeSpec calldata feeSpec_) external onlyAdmin {\\n        require(feeSpec_.rate > 0, \\\"Fee rate is too low\\\");\\n        require(feeSpec_.rate <= PERCENTAGE_FACTOR, \\\"Fee rate is too high\\\");\\n        feeSpecs[feeId_] = feeSpec_;\\n        uint256 totalFeeRate = 0;\\n        for (uint256 i = 0; i < feeSpecs.length; i++) {\\n            totalFeeRate += feeSpecs[i].rate;\\n        }\\n        require(totalFeeRate <= PERCENTAGE_FACTOR, \\\"Total fee rate greater than 100%.\\\");\\n    }\\n\\n    function removeFeeSpec(uint256 feeSpecIndex) external onlyAdmin {\\n        delete feeSpecs[feeSpecIndex];\\n    }\\n\\n    function depositToRemote(uint256 amount_) public onlyAdminOrKeeper {\\n        _depositRemote(amount_);\\n    }\\n\\n    function depositAllToRemote() public onlyAdminOrKeeper {\\n        depositToRemote(underlyingToken.balanceOf(address(this)));\\n    }\\n\\n    function setKeeper(address newKeeper) external onlyAdmin {\\n        _setKeeper(newKeeper);\\n    }\\n\\n    /**\\n     * @notice Trigger stopped state\\n     * @dev Only possible when contract not paused.\\n     */\\n    function pause() external onlyAdmin whenNotPaused {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Return to normal state\\n     * @dev Only possible when contract is paused.\\n     */\\n    function unpause() external onlyAdmin whenPaused {\\n        _unpause();\\n    }\\n}\\n\",\"keccak256\":\"0xb43050bfb53549c80b1090fa04ebcf107dbdcc4a33a3ea871b39e3f76d4bb6df\",\"license\":\"GPL-3.0\"},\"contracts/MultiRewardsMasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ninterface IMigratorChef {\\n    function migrate(IERC20 token) external returns (IERC20);\\n}\\n\\n// MasterChef is the master of RewardToken. He can make RewardToken and he is a fair guy.\\n//\\n// Note that it's ownable and the owner wields tremendous power. The ownership\\n// will be transferred to a governance smart contract once RewardToken is sufficiently\\n// distributed and the community can show to govern itself.\\n//\\n// Have fun reading it. Hopefully it's bug-free. God bless.\\ncontract MultiRewardsMasterChef is ReentrancyGuard, Initializable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    address public admin;\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        /**\\n         * @dev claimed rewards mapping. key is reward id, value is claimed rewards since to last claimed\\n         */\\n        mapping(uint256 => uint256) claimedRewards;\\n        /**\\n         * @dev rewardDebt mapping. key is reward id, value is reward debt of the reward.\\n         */\\n        mapping(uint256 => uint256) rewardDebt; // Reward debt in each reward. See explanation below.\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of rewards\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.amount * poolsRewardsAccRewardsPerShare[pid][rewardId]) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n        //   1. The pool's `accCakePerShare` (and `lastRewardBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. rewards to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that rewards distribution occurs.\\n        /**\\n         * Pool with a proxyFarmer means no lpToken transfer (including withdraw and deposit).\\n         */\\n        address proxyFarmer;\\n        /**\\n         * total deposited amount.\\n         */\\n        uint256 totalAmount;\\n    }\\n\\n    struct RewardInfo {\\n        IERC20 token;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * Info of each reward.\\n     */\\n    struct RewardSpec {\\n        IERC20 token;\\n        uint256 rewardPerBlock;\\n        uint256 startedAtBlock;\\n        uint256 endedAtBlock;\\n        uint256 claimedAmount;\\n    }\\n\\n    RewardSpec[] public rewardSpecs;\\n\\n    // The migrator contract. It has a lot of power. Can only be set through governance (owner).\\n    IMigratorChef public migrator;\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n    mapping(uint256 => mapping(uint256 => uint256)) poolsRewardsAccRewardsPerShare; // Accumulated rewards per share in each reward spec, times 1e12. See below.\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event ClaimRewards(address indexed user, uint256 indexed pid);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event AdminChanged(address indexed previousAdmin, address indexed newAdmin);\\n    /**\\n     * @notice Checks if the msg.sender is the admin address.\\n     */\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"Only admin\\\");\\n        _;\\n    }\\n\\n    function initialize(address admin_) public initializer {\\n        admin = admin_;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do. except as proxied farmer\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _lpToken,\\n        address _proxyFarmer,\\n        bool _withUpdate\\n    ) public onlyAdmin {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        if (_proxyFarmer != address(0)) {\\n            require(address(_lpToken) == address(0), \\\"LPToken should be address 0 when proxied farmer.\\\");\\n        }\\n        uint256 lastRewardBlock = block.number;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                allocPoint: _allocPoint,\\n                lastRewardBlock: lastRewardBlock,\\n                proxyFarmer: _proxyFarmer,\\n                totalAmount: 0\\n            })\\n        );\\n    }\\n\\n    // Update the given pool's RewardToken allocation point. Can only be called by the owner.\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate\\n    ) public onlyAdmin {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 prevAllocPoint = poolInfo[_pid].allocPoint;\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        if (prevAllocPoint != _allocPoint) {\\n            totalAllocPoint = totalAllocPoint.sub(prevAllocPoint).add(_allocPoint);\\n        }\\n    }\\n\\n    function addRewardSpec(\\n        IERC20 token,\\n        uint256 rewardPerBlock,\\n        uint256 startedAtBlock,\\n        uint256 endedAtBlock\\n    ) public onlyAdmin {\\n        require(endedAtBlock > startedAtBlock, \\\"endedAtBlock should be greater than startedAtBlock\\\");\\n        require(rewardPerBlock > 0, \\\"rewardPerBlock should be greater than zero\\\");\\n\\n        token.safeTransferFrom(msg.sender, address(this), (endedAtBlock - startedAtBlock) * rewardPerBlock);\\n\\n        rewardSpecs.push(\\n            RewardSpec({\\n                token: token,\\n                rewardPerBlock: rewardPerBlock,\\n                startedAtBlock: startedAtBlock,\\n                endedAtBlock: endedAtBlock,\\n                claimedAmount: 0\\n            })\\n        );\\n    }\\n\\n    function setRewardSpec(\\n        uint256 rewardId,\\n        uint256 rewardPerBlock,\\n        uint256 startedAtBlock,\\n        uint256 endedAtBlock\\n    ) public onlyAdmin {\\n        RewardSpec storage rewardSpec = rewardSpecs[rewardId];\\n        if (rewardSpec.startedAtBlock <= block.number) {\\n            require(\\n                startedAtBlock == rewardSpec.startedAtBlock,\\n                \\\"can not modify startedAtBlock after rewards has began allocating\\\"\\n            );\\n        }\\n\\n        require(endedAtBlock > block.number, \\\"can not modify endedAtBlock to a past block number\\\");\\n        require(endedAtBlock > startedAtBlock, \\\"endedAtBlock should be greater than startedAtBlock\\\");\\n        massUpdatePools();\\n        uint256 requiredAmount = (endedAtBlock - startedAtBlock) * rewardPerBlock;\\n        uint256 tokenBalance = rewardSpec.token.balanceOf(address(this));\\n        if (requiredAmount > tokenBalance + rewardSpec.claimedAmount) {\\n            rewardSpec.token.safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                requiredAmount - tokenBalance - rewardSpec.claimedAmount\\n            );\\n        } else if (requiredAmount < tokenBalance + rewardSpec.claimedAmount) {\\n            // return overflow tokens\\n            rewardSpec.token.safeTransferFrom(\\n                address(this),\\n                msg.sender,\\n                (tokenBalance + rewardSpec.claimedAmount) - requiredAmount\\n            );\\n        }\\n\\n        rewardSpec.startedAtBlock = startedAtBlock;\\n        rewardSpec.endedAtBlock = endedAtBlock;\\n        rewardSpec.rewardPerBlock = rewardPerBlock;\\n    }\\n\\n    // Set the migrator contract. Can only be called by the owner.\\n    function setMigrator(IMigratorChef _migrator) public onlyAdmin {\\n        migrator = _migrator;\\n    }\\n\\n    // Migrate lp token to another lp contract.\\n    function migrate(uint256 _pid) public onlyAdmin {\\n        require(address(migrator) != address(0), \\\"migrate: no migrator\\\");\\n        PoolInfo storage pool = poolInfo[_pid];\\n        IERC20 lpToken = pool.lpToken;\\n        uint256 bal = lpToken.balanceOf(address(this));\\n        lpToken.safeApprove(address(migrator), bal);\\n        IERC20 newLpToken = migrator.migrate(lpToken);\\n        require(bal == newLpToken.balanceOf(address(this)), \\\"migrate: bad\\\");\\n        pool.lpToken = newLpToken;\\n    }\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(\\n        uint256 _from,\\n        uint256 _to,\\n        uint256 rewardId\\n    ) public view returns (uint256) {\\n        RewardSpec storage rewardSpec = rewardSpecs[rewardId];\\n        if (_to < rewardSpec.startedAtBlock) {\\n            return 0;\\n        }\\n        if (_from < rewardSpec.startedAtBlock) {\\n            _from = rewardSpec.startedAtBlock;\\n        }\\n        if (_to > rewardSpec.endedAtBlock) {\\n            _to = rewardSpec.endedAtBlock;\\n        }\\n        if (_from > _to) {\\n            return 0;\\n        }\\n        return _to.sub(_from);\\n    }\\n\\n    // View function to see pending CAKEs on frontend.\\n    function pendingRewards(uint256 _pid, address _user) external view returns (RewardInfo[] memory) {\\n        RewardInfo[] memory rewardsInfo = new RewardInfo[](rewardSpecs.length);\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        for (uint256 rewardId = 0; rewardId < rewardSpecs.length; rewardId++) {\\n            RewardSpec storage rewardSpec = rewardSpecs[rewardId];\\n\\n            if (block.number < rewardSpec.startedAtBlock) {\\n                rewardsInfo[rewardId] = RewardInfo({ token: rewardSpec.token, amount: 0 });\\n                continue;\\n            }\\n\\n            uint256 accRewardPerShare = poolsRewardsAccRewardsPerShare[_pid][rewardId];\\n\\n            uint256 lpSupply = pool.totalAmount;\\n\\n            if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n                uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number, rewardId);\\n                uint256 rewardAmount = multiplier.mul(rewardSpec.rewardPerBlock).mul(pool.allocPoint).div(\\n                    totalAllocPoint\\n                );\\n                accRewardPerShare = accRewardPerShare.add(rewardAmount.mul(1e12).div(lpSupply));\\n            }\\n            rewardsInfo[rewardId] = RewardInfo({\\n                token: rewardSpec.token,\\n                amount: user.amount.mul(accRewardPerShare).div(1e12) // .sub(user.rewardDebt)\\n            });\\n        }\\n\\n        return rewardsInfo;\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n        uint256 lpSupply = pool.totalAmount;\\n        if (lpSupply == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n        for (uint256 rewardId; rewardId < rewardSpecs.length; rewardId++) {\\n            RewardSpec storage rewardSpec = rewardSpecs[rewardId];\\n\\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number, rewardId);\\n            uint256 reward = multiplier.mul(rewardSpec.rewardPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\n            poolsRewardsAccRewardsPerShare[_pid][rewardId] = poolsRewardsAccRewardsPerShare[_pid][rewardId].add(\\n                reward.mul(1e12).div(lpSupply)\\n            );\\n        }\\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    function deposit(uint256 _pid, uint256 _amount) public {\\n        _depositOperation(_pid, _amount, msg.sender);\\n    }\\n\\n    function depositForUser(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address user_\\n    ) public {\\n        _depositOperation(_pid, _amount, user_);\\n    }\\n\\n    // Deposit LP tokens to MasterChef for RewardToken allocation.\\n    function _depositOperation(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _user\\n    ) internal nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (pool.proxyFarmer != address(0)) {\\n            require(msg.sender == pool.proxyFarmer, \\\"Only proxy farmer\\\");\\n        } else {\\n            require(msg.sender == _user, \\\"Can not deposit for others\\\");\\n        }\\n\\n        UserInfo storage user = userInfo[_pid][_user];\\n        updatePool(_pid);\\n        for (uint256 rewardId = 0; rewardId < rewardSpecs.length; rewardId++) {\\n            RewardSpec storage rewardSpec = rewardSpecs[rewardId];\\n            uint256 accRewardPerShare = poolsRewardsAccRewardsPerShare[_pid][rewardId];\\n            if (user.amount > 0) {\\n                uint256 pending = user.amount.mul(accRewardPerShare).div(1e12).sub(user.rewardDebt[rewardId]);\\n                if (pending > 0) {\\n                    rewardSpec.claimedAmount += pending;\\n                    user.claimedRewards[rewardId] += pending;\\n                    rewardSpec.token.safeTransfer(_user, pending);\\n                }\\n            }\\n\\n            user.rewardDebt[rewardId] = user.amount.add(_amount).mul(accRewardPerShare).div(1e12);\\n        }\\n        if (_amount > 0) {\\n            if (pool.proxyFarmer == address(0)) {\\n                pool.lpToken.safeTransferFrom(address(_user), address(this), _amount);\\n            }\\n            pool.totalAmount = pool.totalAmount.add(_amount);\\n            user.amount = user.amount.add(_amount);\\n        }\\n        emit Deposit(_user, _pid, _amount);\\n    }\\n\\n    function withdraw(uint256 _pid, uint256 _amount) public {\\n        _withdrawOperation(_pid, _amount, msg.sender);\\n    }\\n\\n    function withdrawForUser(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address user_\\n    ) public {\\n        _withdrawOperation(_pid, _amount, user_);\\n    }\\n\\n    // Withdraw LP tokens from MasterChef.\\n    function _withdrawOperation(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _user\\n    ) internal nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        require(user.amount >= _amount, \\\"withdraw: Insufficient balance\\\");\\n        if (pool.proxyFarmer != address(0)) {\\n            require(msg.sender == pool.proxyFarmer, \\\"Only proxy farmer\\\");\\n        } else {\\n            require(msg.sender == _user, \\\"Can not withdraw for others\\\");\\n        }\\n        updatePool(_pid);\\n        for (uint256 rewardId = 0; rewardId < rewardSpecs.length; rewardId++) {\\n            RewardSpec storage rewardSpec = rewardSpecs[rewardId];\\n            uint256 accRewardPerShare = poolsRewardsAccRewardsPerShare[_pid][rewardId];\\n            if (user.amount > 0) {\\n                uint256 pending = user.amount.mul(accRewardPerShare).div(1e12).sub(user.rewardDebt[rewardId]);\\n                if (pending > 0) {\\n                    rewardSpec.claimedAmount += pending;\\n                    user.claimedRewards[rewardId] += pending;\\n                    rewardSpec.token.safeTransfer(_user, pending);\\n                }\\n                user.rewardDebt[rewardId] = user.amount.mul(accRewardPerShare).div(1e12);\\n            }\\n\\n            if (_amount > 0) {\\n                user.rewardDebt[rewardId] = user.amount.sub(_amount).mul(accRewardPerShare).div(1e12);\\n            }\\n        }\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            pool.totalAmount = pool.totalAmount.sub(_amount);\\n            if (pool.proxyFarmer == address(0)) {\\n                pool.lpToken.safeTransfer(address(_user), _amount);\\n            }\\n        }\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) public nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        require(pool.proxyFarmer != address(0), \\\"nothing to withdraw\\\");\\n\\n        pool.totalAmount = pool.totalAmount.sub(user.amount);\\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\\n        user.amount = 0;\\n        for (uint256 rewardId = 0; rewardId < rewardSpecs.length; rewardId) {\\n            user.rewardDebt[rewardId] = 0;\\n        }\\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\\n    }\\n\\n    function setAdmin(address admin_) public onlyAdmin {\\n        require(admin_ != address(0), \\\"can not be zero address\\\");\\n        address previousAdmin = admin;\\n        admin = admin_;\\n\\n        emit AdminChanged(previousAdmin, admin_);\\n    }\\n}\\n\",\"keccak256\":\"0xbf927e92f472a3c3cea3e471005863aff35921e322372fe9d28403ec7573d840\",\"license\":\"MIT\"},\"contracts/interfaces/IBondFarmingPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface IBondFarmingPool {\\n    function stake(uint256 amount_) external;\\n\\n    function stakeForUser(address user_, uint256 amount_) external;\\n\\n    function updatePool() external;\\n\\n    function totalPendingRewards() external view returns (uint256);\\n\\n    function lastUpdatedPoolAt() external view returns (uint256);\\n\\n    function setSiblingPool(IBondFarmingPool siblingPool_) external;\\n\\n    function siblingPool() external view returns (IBondFarmingPool);\\n}\\n\",\"keccak256\":\"0x1d4afa93b8ecb751eff37fd01ffa8f5d86946b64bfcba306526153fe9e26cb89\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ICakePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface ICakePool {\\n    struct UserInfo {\\n        uint256 shares; // number of shares for a user.\\n        uint256 lastDepositedTime; // keep track of deposited time for potential penalty.\\n        uint256 cakeAtLastUserAction; // keep track of cake deposited at the last user action.\\n        uint256 lastUserActionTime; // keep track of the last user action time.\\n        uint256 lockStartTime; // lock start time.\\n        uint256 lockEndTime; // lock end time.\\n        uint256 userBoostedShare; // boost share, in order to give the user higher reward. The user only enjoys the reward, so the principal needs to be recorded as a debt.\\n        bool locked; //lock status.\\n        uint256 lockedAmount; // amount deposited during lock period.\\n    }\\n\\n    function MAX_LOCK_DURATION() external view returns (uint256);\\n\\n    function userInfo(address user_) external view returns (UserInfo memory);\\n\\n    function deposit(uint256 _amount, uint256 _lockDuration) external;\\n\\n    function withdrawByAmount(uint256 _amount) external;\\n\\n    /**\\n     * @notice Calculate Performance fee.\\n     * @param _user: User address\\n     * @return Returns Performance fee.\\n     */\\n    function calculatePerformanceFee(address _user) external view returns (uint256);\\n\\n    function calculateWithdrawFee(address _user, uint256 _shares) external view returns (uint256);\\n\\n    function calculateOverdueFee(address _user) external view returns (uint256);\\n\\n    /**\\n     * @notice Withdraw funds from the Cake Pool.\\n     * @param _shares: Number of shares to withdraw\\n     */\\n    function withdraw(uint256 _shares) external;\\n\\n    function withdrawAll() external;\\n\\n    function getPricePerFullShare() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x876d9f70d5ce967e8f772fedb398769906168a2e35d6eb325bd5576368e3bc5d\",\"license\":\"MIT\"},\"contracts/interfaces/IExtendableBond.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ninterface IExtendableBond {\\n    function totalPendingRewards() external view returns (uint256);\\n\\n    function mintBondTokenForRewards(address to_, uint256 amount_) external;\\n}\\n\",\"keccak256\":\"0xc8439d9741703191763efc92ef6c4473d3d379c49a2d7a5f20c3431047c8f30c\",\"license\":\"GPL-3.0\"},\"contracts/libs/Adminable.sol\":{\"content\":\"abstract contract Adminable {\\n    event AdminUpdated(address indexed user, address indexed newAdmin);\\n\\n    address public admin;\\n\\n    modifier onlyAdmin() virtual {\\n        require(msg.sender == admin, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    function setAdmin(address newAdmin) public virtual onlyAdmin {\\n        _setAdmin(newAdmin);\\n    }\\n\\n    function _setAdmin(address newAdmin) internal {\\n        require(newAdmin != address(0), \\\"Can not set admin to zero address\\\");\\n        admin = newAdmin;\\n\\n        emit AdminUpdated(msg.sender, newAdmin);\\n    }\\n}\\n\",\"keccak256\":\"0x81221faf1021dd01c38b1c6c57ab11157a5ea3c141311cb0358a3c0788f9d514\"},\"contracts/libs/DuetMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nlibrary DuetMath {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0;\\n            // Least significant 256 bits of the product\\n            uint256 prod1;\\n            // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = denominator**3;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse;\\n            // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse;\\n            // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse;\\n            // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse;\\n            // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse;\\n            // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse;\\n            // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding direction\\n    ) public pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (direction == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x446efa946a644886f766f83f6ee8009bdcb9ead2d0f0c5f9e801daef4504c63f\",\"license\":\"GPL-3.0\"},\"contracts/libs/Keepable.sol\":{\"content\":\"abstract contract Keepable {\\n    event KeeperUpdated(address indexed user, address indexed newKeeper);\\n\\n    address public keeper;\\n\\n    modifier onlyKeeper() virtual {\\n        require(msg.sender == keeper, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    function _setKeeper(address newKeeper_) internal {\\n        keeper = newKeeper_;\\n\\n        emit KeeperUpdated(msg.sender, newKeeper_);\\n    }\\n}\\n\",\"keccak256\":\"0x39bd23eef784b00b8637664835ee769cd562de863ecc3607e1727e87dcfc7fe4\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c80637614115c116100de578063c28f439211610097578063e3161ddd11610071578063e3161ddd14610342578063ec1371f21461034a578063f2fde38b14610352578063fd79c6a21461036557600080fd5b8063c28f43921461031e578063c62c610b14610331578063d9d72c191461033a57600080fd5b80637614115c146102b9578063768e52c8146102c15780638da5cb5b146102d4578063a694fc3a146102e5578063a90fbd20146102f8578063b811540e1461030b57600080fd5b8063575a86b21161014b5780635d0eaaaf116101255780635d0eaaaf1461024f57806364c9ec6f1461028b578063672f14901461029e578063715018a6146102b157600080fd5b8063575a86b21461021d5780635c975abb146102305780635d0198811461024657600080fd5b80630ad83c7814610193578063123cecbe146101b95780632e17de78146101ce5780633530c61e146101e157806335322f371461020c5780633a98ef3914610214575b600080fd5b6101a66101a1366004611405565b610378565b6040519081526020015b60405180910390f35b6101cc6101c7366004611405565b6103b1565b005b6101cc6101dc366004611422565b610556565b6007546101f4906001600160a01b031681565b6040516001600160a01b0390911681526020016101b0565b6101cc610807565b6101a660055481565b6008546101f4906001600160a01b031681565b60005460ff1660405190151581526020016101b0565b6101a660065481565b61027661025d366004611405565b600a602052600090815260409020805460019091015482565b604080519283526020830191909152016101b0565b6004546101f4906001600160a01b031681565b6101cc6102ac36600461143b565b610873565b6101cc6108c3565b6101a66108f7565b6101a66102cf366004611422565b61098a565b6002546001600160a01b03166101f4565b6101cc6102f3366004611422565b6109b5565b6101a6610306366004611422565b6109e7565b6101a6610319366004611422565b610a03565b6003546101f4906001600160a01b031681565b6101a660095481565b6101cc610a28565b6101cc610aed565b6101a6610b8a565b6101cc610360366004611405565b610d39565b6101cc61037336600461143b565b610dd4565b6001600160a01b0381166000908152600a60205260408120600181015481546103a09061098a565b6103aa919061147d565b9392505050565b6002546001600160a01b031633146103e45760405162461bcd60e51b81526004016103db906114bc565b60405180910390fd5b60006001600160a01b0316816001600160a01b0316633530c61e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561042857600080fd5b505afa15801561043c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046091906114f1565b6001600160a01b031614806104f65750306001600160a01b0316816001600160a01b0316633530c61e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156104b357600080fd5b505afa1580156104c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104eb91906114f1565b6001600160a01b0316145b6105345760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964207369626c696e6760881b60448201526064016103db565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b60005460ff16156105795760405162461bcd60e51b81526004016103db9061150e565b600260015414156105cc5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016103db565b6002600155336000818152600a60205260409020805483118015906105f357508260055410155b61064b5760405162461bcd60e51b815260206004820152602360248201527f756e7374616b65207368617265732065786365656473206f776e65642073686160448201526272657360e81b60648201526084016103db565b61065361101f565b600061065e8461098a565b9050838260000160008282546106749190611538565b92505081905550836005600082825461068d9190611538565b909155505060035460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b1580156106e057600080fd5b505af11580156106f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610718919061154f565b506001600160a01b0383166000908152600a60205260408120600101805483929061074490849061147d565b90915550506008546009546040516370ad001d60e11b81526004810191909152602481018690526001600160a01b0385811660448301529091169063e15a003a90606401600060405180830381600087803b1580156107a257600080fd5b505af11580156107b6573d6000803e3d6000fd5b50505050826001600160a01b03167f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75826040516107f591815260200190565b60405180910390a25050600180555050565b336000908152600a60205260409020546108585760405162461bcd60e51b81526020600482015260126024820152716e6f7468696e6720746f20756e7374616b6560701b60448201526064016103db565b336000908152600a602052604090205461087190610556565b565b6002546001600160a01b0316331461089d5760405162461bcd60e51b81526004016103db906114bc565b600880546001600160a01b0319166001600160a01b039390931692909217909155600955565b6002546001600160a01b031633146108ed5760405162461bcd60e51b81526004016103db906114bc565b6108716000611091565b6003546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561093b57600080fd5b505afa15801561094f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109739190611571565b61097b610b8a565b610985919061158a565b905090565b600080821161099b57506000919050565b6109af6109a66108f7565b836005546110e3565b92915050565b60005460ff16156109d85760405162461bcd60e51b81526004016103db9061150e565b336109e38183610dd4565b5050565b60008082116109f857506000919050565b6109af6109a6610b8a565b60008060055411610a1457816109af565b6109af82600554610a236108f7565b6110e3565b336000818152600a602052604090208054610a785760405162461bcd60e51b815260206004820152601060248201526f4e6f7468696e6720746f20636c61696d60801b60448201526064016103db565b6008546009546040516370ad001d60e11b81526004810191909152600060248201526001600160a01b0384811660448301529091169063e15a003a90606401600060405180830381600087803b158015610ad157600080fd5b505af1158015610ae5573d6000803e3d6000fd5b505050505050565b6007546001600160a01b0316331480610b1057506004546001600160a01b031633145b610b825760405162461bcd60e51b815260206004820152603960248201527f426f6e644c504661726d696e67506f6f6c3a2043616c6c696e672066726f6d2060448201527f7369626c696e6720706f6f6c206f7220626f6e64206f6e6c790000000000000060648201526084016103db565b6108716111a1565b6004805460408051637609b8f960e11b8152905160009384936001600160a01b03169263ec1371f29281830192602092829003018186803b158015610bce57600080fd5b505afa158015610be2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c069190611571565b905060008111610c1857600091505090565b6003546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610c5c57600080fd5b505afa158015610c70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c949190611571565b905060008111610ca75760009250505090565b610d328282600360009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610cfa57600080fd5b505afa158015610d0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a239190611571565b9250505090565b6002546001600160a01b03163314610d635760405162461bcd60e51b81526004016103db906114bc565b6001600160a01b038116610dc85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103db565b610dd181611091565b50565b60005460ff1615610df75760405162461bcd60e51b81526004016103db9061150e565b60026001541415610e4a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016103db565b6002600155610e5761101f565b6000610e6282610a03565b6003546040516323b872dd60e01b8152336004820152306024820152604481018590529192506001600160a01b0316906323b872dd90606401602060405180830381600087803b158015610eb557600080fd5b505af1158015610ec9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eed919061154f565b508060056000828254610f00919061158a565b90915550506001600160a01b0383166000908152600a602052604081208054839290610f2d90849061158a565b90915550506001600160a01b0383166000908152600a602052604081206001018054849290610f5d9084906115a2565b909155505060085460095460405163a3f30d2760e01b81526004810191909152602481018390526001600160a01b0385811660448301529091169063a3f30d2790606401600060405180830381600087803b158015610fbb57600080fd5b505af1158015610fcf573d6000803e3d6000fd5b50505050826001600160a01b03167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d8360405161100e91815260200190565b60405180910390a250506001805550565b6110276111a1565b600760009054906101000a90046001600160a01b03166001600160a01b031663e3161ddd6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561107757600080fd5b505af115801561108b573d6000803e3d6000fd5b50505050565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008080600019858709858702925082811083820303915050806000141561112b576000841161111257600080fd5b838281611121576111216115e3565b04925050506103aa565b80841161113757600080fd5b600084868809600360018719810188169788900491820a808302600290810390910280840282030280840282030280840282030280840282030292830290039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6007546001600160a01b031661120a5760405162461bcd60e51b815260206004820152602860248201527f426f6e644661726d696e67506f6f6c3a20436f6e7472616374206e6f7420726560448201526730b23c903cb2ba1760c11b60648201526084016103db565b60075460408051635d01988160e01b8152905143926001600160a01b031691635d019881916004808301926020929190829003018186803b15801561124e57600080fd5b505afa158015611262573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112869190611571565b10806113245750600654600760009054906101000a90046001600160a01b03166001600160a01b0316635d0198816040518163ffffffff1660e01b815260040160206040518083038186803b1580156112de57600080fd5b505afa1580156112f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113169190611571565b148015611324575043600654145b6113705760405162461bcd60e51b815260206004820152601960248201527f75706461746520626f6e6420706f6f6c2066697273746c792e0000000000000060448201526064016103db565b600061137a610b8a565b436006559050806113885750565b60048054604051632a52d5a560e21b81523092810192909252602482018390526001600160a01b03169063a94b569490604401600060405180830381600087803b1580156113d557600080fd5b505af11580156113e9573d6000803e3d6000fd5b5050505050565b6001600160a01b0381168114610dd157600080fd5b60006020828403121561141757600080fd5b81356103aa816113f0565b60006020828403121561143457600080fd5b5035919050565b6000806040838503121561144e57600080fd5b8235611459816113f0565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b60008083128015600160ff1b85018412161561149b5761149b611467565b6001600160ff1b03840183138116156114b6576114b6611467565b50500390565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561150357600080fd5b81516103aa816113f0565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60008282101561154a5761154a611467565b500390565b60006020828403121561156157600080fd5b815180151581146103aa57600080fd5b60006020828403121561158357600080fd5b5051919050565b6000821982111561159d5761159d611467565b500190565b600080821280156001600160ff1b03849003851316156115c4576115c4611467565b600160ff1b83900384128116156115dd576115dd611467565b50500190565b634e487b7160e01b600052601260045260246000fdfea26469706673582212207959d6babd9892ae96804ad053b2c52629d58101cb025536f68b1eca16a7d86164736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "earnedToDate(address)": {
        "details": "calculate earned amount to date of specific user."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updatePool()": {
        "details": "see: _updatePool"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "unstake(uint256)": {
        "notice": "unstake by shares"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1109,
        "contract": "contracts/BondFarmingPool.sol:BondFarmingPool",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1194,
        "contract": "contracts/BondFarmingPool.sol:BondFarmingPool",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 994,
        "contract": "contracts/BondFarmingPool.sol:BondFarmingPool",
        "label": "_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 3083,
        "contract": "contracts/BondFarmingPool.sol:BondFarmingPool",
        "label": "bondToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)1887"
      },
      {
        "astId": 3086,
        "contract": "contracts/BondFarmingPool.sol:BondFarmingPool",
        "label": "bond",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IExtendableBond)7175"
      },
      {
        "astId": 3089,
        "contract": "contracts/BondFarmingPool.sol:BondFarmingPool",
        "label": "totalShares",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 3092,
        "contract": "contracts/BondFarmingPool.sol:BondFarmingPool",
        "label": "lastUpdatedPoolAt",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3095,
        "contract": "contracts/BondFarmingPool.sol:BondFarmingPool",
        "label": "siblingPool",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IBondFarmingPool)7075"
      },
      {
        "astId": 3098,
        "contract": "contracts/BondFarmingPool.sol:BondFarmingPool",
        "label": "masterChef",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(MultiRewardsMasterChef)7035"
      },
      {
        "astId": 3100,
        "contract": "contracts/BondFarmingPool.sol:BondFarmingPool",
        "label": "masterChefPid",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3112,
        "contract": "contracts/BondFarmingPool.sol:BondFarmingPool",
        "label": "usersInfo",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_struct(UserInfo)3107_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBondFarmingPool)7075": {
        "encoding": "inplace",
        "label": "contract IBondFarmingPool",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1887": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IExtendableBond)7175": {
        "encoding": "inplace",
        "label": "contract IExtendableBond",
        "numberOfBytes": "20"
      },
      "t_contract(MultiRewardsMasterChef)7035": {
        "encoding": "inplace",
        "label": "contract MultiRewardsMasterChef",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(UserInfo)3107_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BondFarmingPool.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)3107_storage"
      },
      "t_struct(UserInfo)3107_storage": {
        "encoding": "inplace",
        "label": "struct BondFarmingPool.UserInfo",
        "members": [
          {
            "astId": 3103,
            "contract": "contracts/BondFarmingPool.sol:BondFarmingPool",
            "label": "shares",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3106,
            "contract": "contracts/BondFarmingPool.sol:BondFarmingPool",
            "label": "accNetStaked",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}