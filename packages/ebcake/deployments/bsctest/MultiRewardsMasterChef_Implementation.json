{
  "address": "0x724Fe80674e5491466710B3280E196190826a2dA",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "ClaimRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_proxyFarmer",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rewardPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startedAtBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endedAtBlock",
          "type": "uint256"
        }
      ],
      "name": "addRewardSpec",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user_",
          "type": "address"
        }
      ],
      "name": "depositForUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_to",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardId",
          "type": "uint256"
        }
      ],
      "name": "getMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrator",
      "outputs": [
        {
          "internalType": "contract IMigratorChef",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingRewards",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct MultiRewardsMasterChef.RewardInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "proxyFarmer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardSpecs",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rewardPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startedAtBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endedAtBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin_",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMigratorChef",
          "name": "_migrator",
          "type": "address"
        }
      ],
      "name": "setMigrator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rewardId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startedAtBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endedAtBlock",
          "type": "uint256"
        }
      ],
      "name": "setRewardSpec",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user_",
          "type": "address"
        }
      ],
      "name": "withdrawForUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x99a888dc77aed4d54235c22441e3ece1115cc69ee9b4f7ff0678178c8a2bcdda",
  "receipt": {
    "to": null,
    "from": "0xe7a2b8C8feD53713F69227e6c3d2384E80CF88a6",
    "contractAddress": "0x724Fe80674e5491466710B3280E196190826a2dA",
    "transactionIndex": 9,
    "gasUsed": "2822363",
    "logsBloom": "0x
    "blockHash": "0x76bf1d619a4f66c89b358d0a117570d904140871e6060cfad43156b15ad3ac00",
    "transactionHash": "0x99a888dc77aed4d54235c22441e3ece1115cc69ee9b4f7ff0678178c8a2bcdda",
    "logs": [],
    "blockNumber": 19445196,
    "cumulativeGasUsed": "7110277",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "39e76159c6219ae83d48729e0541164d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"ClaimRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_proxyFarmer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startedAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endedAtBlock\",\"type\":\"uint256\"}],\"name\":\"addRewardSpec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"depositForUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardId\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"contract IMigratorChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct MultiRewardsMasterChef.RewardInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proxyFarmer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardSpecs\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startedAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endedAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMigratorChef\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startedAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endedAtBlock\",\"type\":\"uint256\"}],\"name\":\"setRewardSpec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"withdrawForUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MultiRewardsMasterChef.sol\":\"MultiRewardsMasterChef\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/MultiRewardsMasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ninterface IMigratorChef {\\n    function migrate(IERC20 token) external returns (IERC20);\\n}\\n\\n// MasterChef is the master of RewardToken. He can make RewardToken and he is a fair guy.\\n//\\n// Note that it's ownable and the owner wields tremendous power. The ownership\\n// will be transferred to a governance smart contract once RewardToken is sufficiently\\n// distributed and the community can show to govern itself.\\n//\\n// Have fun reading it. Hopefully it's bug-free. God bless.\\ncontract MultiRewardsMasterChef is ReentrancyGuard, Initializable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    address public admin;\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        /**\\n         * @dev claimed rewards mapping. key is reward id, value is claimed rewards since to last claimed\\n         */\\n        mapping(uint256 => uint256) claimedRewards;\\n        /**\\n         * @dev rewardDebt mapping. key is reward id, value is reward debt of the reward.\\n         */\\n        mapping(uint256 => uint256) rewardDebt; // Reward debt in each reward. See explanation below.\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of rewards\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.amount * poolsRewardsAccRewardsPerShare[pid][rewardId]) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n        //   1. The pool's `accCakePerShare` (and `lastRewardBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. rewards to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that rewards distribution occurs.\\n        /**\\n         * Pool with a proxyFarmer means no lpToken transfer (including withdraw and deposit).\\n         */\\n        address proxyFarmer;\\n        /**\\n         * total deposited amount.\\n         */\\n        uint256 totalAmount;\\n    }\\n\\n    struct RewardInfo {\\n        IERC20 token;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * Info of each reward.\\n     */\\n    struct RewardSpec {\\n        IERC20 token;\\n        uint256 rewardPerBlock;\\n        uint256 startedAtBlock;\\n        uint256 endedAtBlock;\\n        uint256 claimedAmount;\\n    }\\n\\n    RewardSpec[] public rewardSpecs;\\n\\n    // The migrator contract. It has a lot of power. Can only be set through governance (owner).\\n    IMigratorChef public migrator;\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n    mapping(uint256 => mapping(uint256 => uint256)) poolsRewardsAccRewardsPerShare; // Accumulated rewards per share in each reward spec, times 1e12. See below.\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event ClaimRewards(address indexed user, uint256 indexed pid);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event AdminChanged(address indexed previousAdmin, address indexed newAdmin);\\n    /**\\n     * @notice Checks if the msg.sender is the admin address.\\n     */\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"Only admin\\\");\\n        _;\\n    }\\n\\n    function initialize(address admin_) public initializer {\\n        admin = admin_;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do. except as proxied farmer\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _lpToken,\\n        address _proxyFarmer,\\n        bool _withUpdate\\n    ) public onlyAdmin {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        if (_proxyFarmer != address(0)) {\\n            require(address(_lpToken) == address(0), \\\"LPToken should be address 0 when proxied farmer.\\\");\\n        }\\n        uint256 lastRewardBlock = block.number;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                allocPoint: _allocPoint,\\n                lastRewardBlock: lastRewardBlock,\\n                proxyFarmer: _proxyFarmer,\\n                totalAmount: 0\\n            })\\n        );\\n    }\\n\\n    // Update the given pool's RewardToken allocation point. Can only be called by the owner.\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate\\n    ) public onlyAdmin {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 prevAllocPoint = poolInfo[_pid].allocPoint;\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        if (prevAllocPoint != _allocPoint) {\\n            totalAllocPoint = totalAllocPoint.sub(prevAllocPoint).add(_allocPoint);\\n        }\\n    }\\n\\n    function addRewardSpec(\\n        IERC20 token,\\n        uint256 rewardPerBlock,\\n        uint256 startedAtBlock,\\n        uint256 endedAtBlock\\n    ) public onlyAdmin {\\n        require(endedAtBlock > startedAtBlock, \\\"endedAtBlock should be greater than startedAtBlock\\\");\\n        require(rewardPerBlock > 0, \\\"rewardPerBlock should be greater than zero\\\");\\n\\n        token.safeTransferFrom(msg.sender, address(this), (endedAtBlock - startedAtBlock) * rewardPerBlock);\\n\\n        rewardSpecs.push(\\n            RewardSpec({\\n                token: token,\\n                rewardPerBlock: rewardPerBlock,\\n                startedAtBlock: startedAtBlock,\\n                endedAtBlock: endedAtBlock,\\n                claimedAmount: 0\\n            })\\n        );\\n    }\\n\\n    function setRewardSpec(\\n        uint256 rewardId,\\n        uint256 rewardPerBlock,\\n        uint256 startedAtBlock,\\n        uint256 endedAtBlock\\n    ) public onlyAdmin {\\n        RewardSpec storage rewardSpec = rewardSpecs[rewardId];\\n        if (rewardSpec.startedAtBlock <= block.number) {\\n            require(\\n                startedAtBlock == rewardSpec.startedAtBlock,\\n                \\\"can not modify startedAtBlock after rewards has began allocating\\\"\\n            );\\n        }\\n\\n        require(endedAtBlock > block.number, \\\"can not modify endedAtBlock to a past block number\\\");\\n        require(endedAtBlock > startedAtBlock, \\\"endedAtBlock should be greater than startedAtBlock\\\");\\n        massUpdatePools();\\n        uint256 requiredAmount = (endedAtBlock - startedAtBlock) * rewardPerBlock;\\n        uint256 tokenBalance = rewardSpec.token.balanceOf(address(this));\\n        if (requiredAmount > tokenBalance + rewardSpec.claimedAmount) {\\n            rewardSpec.token.safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                requiredAmount - tokenBalance - rewardSpec.claimedAmount\\n            );\\n        } else if (requiredAmount < tokenBalance + rewardSpec.claimedAmount) {\\n            // return overflow tokens\\n            rewardSpec.token.safeTransferFrom(\\n                address(this),\\n                msg.sender,\\n                (tokenBalance + rewardSpec.claimedAmount) - requiredAmount\\n            );\\n        }\\n\\n        rewardSpec.startedAtBlock = startedAtBlock;\\n        rewardSpec.endedAtBlock = endedAtBlock;\\n        rewardSpec.rewardPerBlock = rewardPerBlock;\\n    }\\n\\n    // Set the migrator contract. Can only be called by the owner.\\n    function setMigrator(IMigratorChef _migrator) public onlyAdmin {\\n        migrator = _migrator;\\n    }\\n\\n    // Migrate lp token to another lp contract.\\n    function migrate(uint256 _pid) public onlyAdmin {\\n        require(address(migrator) != address(0), \\\"migrate: no migrator\\\");\\n        PoolInfo storage pool = poolInfo[_pid];\\n        IERC20 lpToken = pool.lpToken;\\n        uint256 bal = lpToken.balanceOf(address(this));\\n        lpToken.safeApprove(address(migrator), bal);\\n        IERC20 newLpToken = migrator.migrate(lpToken);\\n        require(bal == newLpToken.balanceOf(address(this)), \\\"migrate: bad\\\");\\n        pool.lpToken = newLpToken;\\n    }\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(\\n        uint256 _from,\\n        uint256 _to,\\n        uint256 rewardId\\n    ) public view returns (uint256) {\\n        RewardSpec storage rewardSpec = rewardSpecs[rewardId];\\n        if (_to < rewardSpec.startedAtBlock) {\\n            return 0;\\n        }\\n        if (_from < rewardSpec.startedAtBlock) {\\n            _from = rewardSpec.startedAtBlock;\\n        }\\n        if (_to > rewardSpec.endedAtBlock) {\\n            _to = rewardSpec.endedAtBlock;\\n        }\\n        if (_from > _to) {\\n            return 0;\\n        }\\n        return _to.sub(_from);\\n    }\\n\\n    // View function to see pending CAKEs on frontend.\\n    function pendingRewards(uint256 _pid, address _user) external view returns (RewardInfo[] memory) {\\n        RewardInfo[] memory rewardsInfo = new RewardInfo[](rewardSpecs.length);\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        for (uint256 rewardId = 0; rewardId < rewardSpecs.length; rewardId++) {\\n            RewardSpec storage rewardSpec = rewardSpecs[rewardId];\\n\\n            if (block.number < rewardSpec.startedAtBlock) {\\n                rewardsInfo[rewardId] = RewardInfo({ token: rewardSpec.token, amount: 0 });\\n                continue;\\n            }\\n\\n            uint256 accRewardPerShare = poolsRewardsAccRewardsPerShare[_pid][rewardId];\\n\\n            uint256 lpSupply = pool.totalAmount;\\n\\n            if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n                uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number, rewardId);\\n                uint256 rewardAmount = multiplier.mul(rewardSpec.rewardPerBlock).mul(pool.allocPoint).div(\\n                    totalAllocPoint\\n                );\\n                accRewardPerShare = accRewardPerShare.add(rewardAmount.mul(1e12).div(lpSupply));\\n            }\\n            rewardsInfo[rewardId] = RewardInfo({\\n                token: rewardSpec.token,\\n                amount: user.amount.mul(accRewardPerShare).div(1e12) // .sub(user.rewardDebt)\\n            });\\n        }\\n\\n        return rewardsInfo;\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n        uint256 lpSupply = pool.totalAmount;\\n        if (lpSupply == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n        for (uint256 rewardId; rewardId < rewardSpecs.length; rewardId++) {\\n            RewardSpec storage rewardSpec = rewardSpecs[rewardId];\\n\\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number, rewardId);\\n            uint256 reward = multiplier.mul(rewardSpec.rewardPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\n            poolsRewardsAccRewardsPerShare[_pid][rewardId] = poolsRewardsAccRewardsPerShare[_pid][rewardId].add(\\n                reward.mul(1e12).div(lpSupply)\\n            );\\n        }\\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    function deposit(uint256 _pid, uint256 _amount) public {\\n        _depositOperation(_pid, _amount, msg.sender);\\n    }\\n\\n    function depositForUser(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address user_\\n    ) public {\\n        _depositOperation(_pid, _amount, user_);\\n    }\\n\\n    // Deposit LP tokens to MasterChef for RewardToken allocation.\\n    function _depositOperation(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _user\\n    ) internal nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (pool.proxyFarmer != address(0)) {\\n            require(msg.sender == pool.proxyFarmer, \\\"Only proxy farmer\\\");\\n        } else {\\n            require(msg.sender == _user, \\\"Can not deposit for others\\\");\\n        }\\n\\n        UserInfo storage user = userInfo[_pid][_user];\\n        updatePool(_pid);\\n        for (uint256 rewardId = 0; rewardId < rewardSpecs.length; rewardId++) {\\n            RewardSpec storage rewardSpec = rewardSpecs[rewardId];\\n            uint256 accRewardPerShare = poolsRewardsAccRewardsPerShare[_pid][rewardId];\\n            if (user.amount > 0) {\\n                uint256 pending = user.amount.mul(accRewardPerShare).div(1e12).sub(user.rewardDebt[rewardId]);\\n                if (pending > 0) {\\n                    rewardSpec.claimedAmount += pending;\\n                    user.claimedRewards[rewardId] += pending;\\n                    rewardSpec.token.safeTransfer(_user, pending);\\n                }\\n            }\\n\\n            user.rewardDebt[rewardId] = user.amount.add(_amount).mul(accRewardPerShare).div(1e12);\\n        }\\n        if (_amount > 0) {\\n            if (pool.proxyFarmer == address(0)) {\\n                pool.lpToken.safeTransferFrom(address(_user), address(this), _amount);\\n            }\\n            pool.totalAmount = pool.totalAmount.add(_amount);\\n            user.amount = user.amount.add(_amount);\\n        }\\n        emit Deposit(_user, _pid, _amount);\\n    }\\n\\n    function withdraw(uint256 _pid, uint256 _amount) public {\\n        _withdrawOperation(_pid, _amount, msg.sender);\\n    }\\n\\n    function withdrawForUser(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address user_\\n    ) public {\\n        _withdrawOperation(_pid, _amount, user_);\\n    }\\n\\n    // Withdraw LP tokens from MasterChef.\\n    function _withdrawOperation(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _user\\n    ) internal nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        require(user.amount >= _amount, \\\"withdraw: Insufficient balance\\\");\\n        if (pool.proxyFarmer != address(0)) {\\n            require(msg.sender == pool.proxyFarmer, \\\"Only proxy farmer\\\");\\n        } else {\\n            require(msg.sender == _user, \\\"Can not withdraw for others\\\");\\n        }\\n        updatePool(_pid);\\n        for (uint256 rewardId = 0; rewardId < rewardSpecs.length; rewardId++) {\\n            RewardSpec storage rewardSpec = rewardSpecs[rewardId];\\n            uint256 accRewardPerShare = poolsRewardsAccRewardsPerShare[_pid][rewardId];\\n            if (user.amount > 0) {\\n                uint256 pending = user.amount.mul(accRewardPerShare).div(1e12).sub(user.rewardDebt[rewardId]);\\n                if (pending > 0) {\\n                    rewardSpec.claimedAmount += pending;\\n                    user.claimedRewards[rewardId] += pending;\\n                    rewardSpec.token.safeTransfer(_user, pending);\\n                }\\n                user.rewardDebt[rewardId] = user.amount.mul(accRewardPerShare).div(1e12);\\n            }\\n\\n            if (_amount > 0) {\\n                user.rewardDebt[rewardId] = user.amount.sub(_amount).mul(accRewardPerShare).div(1e12);\\n            }\\n        }\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            pool.totalAmount = pool.totalAmount.sub(_amount);\\n            if (pool.proxyFarmer == address(0)) {\\n                pool.lpToken.safeTransfer(address(_user), _amount);\\n            }\\n        }\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) public nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        require(pool.proxyFarmer != address(0), \\\"nothing to withdraw\\\");\\n\\n        pool.totalAmount = pool.totalAmount.sub(user.amount);\\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\\n        user.amount = 0;\\n        for (uint256 rewardId = 0; rewardId < rewardSpecs.length; rewardId) {\\n            user.rewardDebt[rewardId] = 0;\\n        }\\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\\n    }\\n\\n    function setAdmin(address admin_) public onlyAdmin {\\n        require(admin_ != address(0), \\\"can not be zero address\\\");\\n        address previousAdmin = admin;\\n        admin = admin_;\\n\\n        emit AdminChanged(previousAdmin, admin_);\\n    }\\n}\\n\",\"keccak256\":\"0xbf927e92f472a3c3cea3e471005863aff35921e322372fe9d28403ec7573d840\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600060075534801561001557600080fd5b5060016000556132168061002a6000396000f3fe608060405234801561001057600080fd5b50600436106101985760003560e01c80637bafb029116100e3578063d18df53c1161008c578063e2bbb15811610066578063e2bbb158146103f7578063f40142611461040a578063f851a4401461041d57600080fd5b8063d18df53c14610372578063e11f2f7d14610392578063e15a003a146103e457600080fd5b8063a3f30d27116100bd578063a3f30d2714610339578063c4d66de81461034c578063c71b4b431461035f57600080fd5b80637bafb029146102b65780637cd07e47146102c957806393f1a40b1461030e57600080fd5b8063454b060811610145578063630b5ba11161011f578063630b5ba11461028857806364482f7914610290578063704b6c02146102a357600080fd5b8063454b06081461024f57806351eb05a6146102625780635312ea8e1461027557600080fd5b806323cf31181161017657806323cf31181461021457806338cc39af14610229578063441a3e701461023c57600080fd5b8063081e3eda1461019d5780631526fe27146101b457806317caf6f11461020b575b600080fd5b6004545b6040519081526020015b60405180910390f35b6101c76101c2366004612d14565b610443565b6040805173ffffffffffffffffffffffffffffffffffffffff968716815260208101959095528401929092529092166060820152608081019190915260a0016101ab565b6101a160075481565b610227610222366004612d52565b61049d565b005b610227610237366004612d6f565b610570565b61022761024a366004612da1565b61093f565b61022761025d366004612d14565b61094e565b610227610270366004612d14565b610d3b565b610227610283366004612d14565b610e71565b61022761104b565b61022761029e366004612dd1565b611072565b6102276102b1366004612d52565b611189565b6101a16102c4366004612e0a565b61130c565b6003546102e99073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101ab565b6101a161031c366004612e36565b600660209081526000928352604080842090915290825290205481565b610227610347366004612e66565b611397565b61022761035a366004612d52565b6113a7565b61022761036d366004612e94565b611492565b610385610380366004612e36565b611747565b6040516101ab9190612ee7565b6103a56103a0366004612d14565b6119a4565b6040805173ffffffffffffffffffffffffffffffffffffffff90961686526020860194909452928401919091526060830152608082015260a0016101ab565b6102276103f2366004612e66565b6119fc565b610227610405366004612da1565b611a07565b610227610418366004612f4c565b611a12565b6001546102e99062010000900473ffffffffffffffffffffffffffffffffffffffff1681565b6004818154811061045357600080fd5b60009182526020909120600590910201805460018201546002830154600384015460049094015473ffffffffffffffffffffffffffffffffffffffff938416955091939092169085565b60015462010000900473ffffffffffffffffffffffffffffffffffffffff163314610529576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4f6e6c792061646d696e0000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60015462010000900473ffffffffffffffffffffffffffffffffffffffff1633146105f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4f6e6c792061646d696e000000000000000000000000000000000000000000006044820152606401610520565b60006002858154811061060c5761060c612f87565b90600052602060002090600502019050438160020154116106bc57806002015483146106bc57604080517f08c379a00000000000000000000000000000000000000000000000000000000081526020600482015260248101919091527f63616e206e6f74206d6f6469667920737461727465644174426c6f636b20616660448201527f74657220726577617264732068617320626567616e20616c6c6f636174696e676064820152608401610520565b43821161074b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f63616e206e6f74206d6f6469667920656e6465644174426c6f636b20746f206160448201527f207061737420626c6f636b206e756d62657200000000000000000000000000006064820152608401610520565b8282116107da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f656e6465644174426c6f636b2073686f756c642062652067726561746572207460448201527f68616e20737461727465644174426c6f636b00000000000000000000000000006064820152608401610520565b6107e261104b565b6000846107ef8585612fe5565b6107f99190612ffc565b82546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015291925060009173ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b15801561086757600080fd5b505afa15801561087b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089f9190613039565b90508260040154816108b19190613052565b8211156108fd576108f83330856004015484866108ce9190612fe5565b6108d89190612fe5565b865473ffffffffffffffffffffffffffffffffffffffff16929190611d2e565b610929565b600483015461090c9082613052565b821015610929576109293033848660040154856108ce9190613052565b5050600281019290925560038201556001015550565b61094a828233611e0a565b5050565b60015462010000900473ffffffffffffffffffffffffffffffffffffffff1633146109d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4f6e6c792061646d696e000000000000000000000000000000000000000000006044820152606401610520565b60035473ffffffffffffffffffffffffffffffffffffffff16610a54576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6d6967726174653a206e6f206d69677261746f720000000000000000000000006044820152606401610520565b600060048281548110610a6957610a69612f87565b6000918252602082206005919091020180546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015291935073ffffffffffffffffffffffffffffffffffffffff16919082906370a082319060240160206040518083038186803b158015610ae557600080fd5b505afa158015610af9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1d9190613039565b600354909150610b479073ffffffffffffffffffffffffffffffffffffffff848116911683612285565b6003546040517fce5494bb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152600092169063ce5494bb90602401602060405180830381600087803b158015610bb557600080fd5b505af1158015610bc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bed919061306a565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915073ffffffffffffffffffffffffffffffffffffffff8216906370a082319060240160206040518083038186803b158015610c5557600080fd5b505afa158015610c69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8d9190613039565b8214610cf5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f6d6967726174653a2062616400000000000000000000000000000000000000006044820152606401610520565b83547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9190911617909255505050565b600060048281548110610d5057610d50612f87565b9060005260206000209060050201905080600201544311610d6f575050565b600481015480610d8457504360029091015550565b60005b600254811015610e6557600060028281548110610da657610da6612f87565b906000526020600020906005020190506000610dc78560020154438561130c565b90506000610dfc600754610df68860010154610df087600101548761241690919063ffffffff16565b90612416565b90612422565b9050610e34610e1486610df68464e8d4a51000612416565b60008981526005602090815260408083208984529091529020549061242e565b600088815260056020908152604080832088845290915290205550829150610e5d905081613087565b915050610d87565b50504360029091015550565b60026000541415610ede576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610520565b600260009081556004805483908110610ef957610ef9612f87565b600091825260208083208584526006825260408085203386529092529220600360059092029092019081015490925073ffffffffffffffffffffffffffffffffffffffff16610fa4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f6e6f7468696e6720746f207769746864726177000000000000000000000000006044820152606401610520565b80546004830154610fb49161243a565b600483015580548254610fe19173ffffffffffffffffffffffffffffffffffffffff909116903390612446565b60008082555b600254811015611007576000818152600283016020526040812055610fe7565b508054604051908152839033907fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959060200160405180910390a35050600160005550565b60045460005b8181101561094a5761106281610d3b565b61106b81613087565b9050611051565b60015462010000900473ffffffffffffffffffffffffffffffffffffffff1633146110f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4f6e6c792061646d696e000000000000000000000000000000000000000000006044820152606401610520565b80156111075761110761104b565b60006004848154811061111c5761111c612f87565b9060005260206000209060050201600101549050826004858154811061114457611144612f87565b9060005260206000209060050201600101819055508281146111835761117f836111798360075461243a90919063ffffffff16565b9061242e565b6007555b50505050565b60015462010000900473ffffffffffffffffffffffffffffffffffffffff163314611210576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4f6e6c792061646d696e000000000000000000000000000000000000000000006044820152606401610520565b73ffffffffffffffffffffffffffffffffffffffff811661128d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f63616e206e6f74206265207a65726f20616464726573730000000000000000006044820152606401610520565b6001805473ffffffffffffffffffffffffffffffffffffffff838116620100008181027fffffffffffffffffffff0000000000000000000000000000000000000000ffff85161790945560405193909204169182907f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f90600090a35050565b6000806002838154811061132257611322612f87565b906000526020600020906005020190508060020154841015611348576000915050611390565b806002015485101561135c57806002015494505b806003015484111561137057806003015493505b83851115611382576000915050611390565b61138c848661243a565b9150505b9392505050565b6113a283838361249c565b505050565b60006113b36001612882565b905080156113e857600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b600180547fffffffffffffffffffff0000000000000000000000000000000000000000ffff166201000073ffffffffffffffffffffffffffffffffffffffff851602179055801561094a57600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1681556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b60015462010000900473ffffffffffffffffffffffffffffffffffffffff163314611519576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4f6e6c792061646d696e000000000000000000000000000000000000000000006044820152606401610520565b80156115275761152761104b565b73ffffffffffffffffffffffffffffffffffffffff8216156115e75773ffffffffffffffffffffffffffffffffffffffff8316156115e7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603060248201527f4c50546f6b656e2073686f756c6420626520616464726573732030207768656e60448201527f2070726f78696564206661726d65722e000000000000000000000000000000006064820152608401610520565b60075443906115f6908661242e565b6007556040805160a08101825273ffffffffffffffffffffffffffffffffffffffff95861681526020810196875290810191825292841660608401908152600060808501818152600480546001810182559252945160059091027f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b810180549288167fffffffffffffffffffffffff000000000000000000000000000000000000000093841617905596517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c88015591517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d870155517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19e8601805491909516911617909255517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19f9092019190915550565b60025460609060009067ffffffffffffffff811115611768576117686130c0565b6040519080825280602002602001820160405280156117ad57816020015b60408051808201909152600080825260208201528152602001906001900390816117865790505b5090506000600485815481106117c5576117c5612f87565b6000918252602080832088845260068252604080852073ffffffffffffffffffffffffffffffffffffffff8a1686529092529083206005909202019250905b6002548110156119995760006002828154811061182357611823612f87565b90600052602060002090600502019050806002015443101561188f5760408051808201909152815473ffffffffffffffffffffffffffffffffffffffff16815260006020820152855186908490811061187e5761187e612f87565b602002602001018190525050611987565b600088815260056020908152604080832085845290915290205460048501546002860154431180156118c057508015155b156119235760006118d68760020154438761130c565b905060006118ff600754610df68a60010154610df089600101548761241690919063ffffffff16565b905061191e61191784610df68464e8d4a51000612416565b859061242e565b935050505b60408051808201909152835473ffffffffffffffffffffffffffffffffffffffff168152855460208201906119639064e8d4a5100090610df69087612416565b81525087858151811061197857611978612f87565b60200260200101819052505050505b8061199181613087565b915050611804565b509195945050505050565b600281815481106119b457600080fd5b60009182526020909120600590910201805460018201546002830154600384015460049094015473ffffffffffffffffffffffffffffffffffffffff90931694509092909185565b6113a2838383611e0a565b61094a82823361249c565b60015462010000900473ffffffffffffffffffffffffffffffffffffffff163314611a99576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4f6e6c792061646d696e000000000000000000000000000000000000000000006044820152606401610520565b818111611b28576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f656e6465644174426c6f636b2073686f756c642062652067726561746572207460448201527f68616e20737461727465644174426c6f636b00000000000000000000000000006064820152608401610520565b60008311611bb8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f726577617264506572426c6f636b2073686f756c64206265206772656174657260448201527f207468616e207a65726f000000000000000000000000000000000000000000006064820152608401610520565b611bf1333085611bc88686612fe5565b611bd29190612ffc565b73ffffffffffffffffffffffffffffffffffffffff8816929190611d2e565b6040805160a08101825273ffffffffffffffffffffffffffffffffffffffff9586168152602081019485529081019283526060810191825260006080820181815260028054600181018255925291517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace600590920291820180547fffffffffffffffffffffffff000000000000000000000000000000000000000016919097161790955592517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf85015590517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad0840155517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad1830155517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad290910155565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526111839085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612a08565b60026000541415611e77576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610520565b600260009081556004805485908110611e9257611e92612f87565b6000918252602080832087845260068252604080852073ffffffffffffffffffffffffffffffffffffffff881686529092529220805460059092029092019250841115611f3b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f77697468647261773a20496e73756666696369656e742062616c616e636500006044820152606401610520565b600382015473ffffffffffffffffffffffffffffffffffffffff1615611fe357600382015473ffffffffffffffffffffffffffffffffffffffff163314611fde576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4f6e6c792070726f7879206661726d65720000000000000000000000000000006044820152606401610520565b612062565b3373ffffffffffffffffffffffffffffffffffffffff841614612062576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f43616e206e6f7420776974686472617720666f72206f746865727300000000006044820152606401610520565b61206b85610d3b565b60005b6002548110156121d65760006002828154811061208d5761208d612f87565b600091825260208083208a845260058083526040808620888752909352919093205486549290910290920192501561218557600083815260028501602052604081205485546120f291906120ec9064e8d4a5100090610df69087612416565b9061243a565b9050801561215b578083600401600082825461210e9190613052565b9091555050600084815260018601602052604081208054839290612133908490613052565b9091555050825461215b9073ffffffffffffffffffffffffffffffffffffffff168883612446565b84546121729064e8d4a5100090610df69085612416565b6000858152600287016020526040902055505b86156121c1576121af64e8d4a51000610df683610df08b896000015461243a90919063ffffffff16565b60008481526002860160205260409020555b505080806121ce90613087565b91505061206e565b5083156122415780546121e9908561243a565b815560048201546121fa908561243a565b6004830155600382015473ffffffffffffffffffffffffffffffffffffffff166122415781546122419073ffffffffffffffffffffffffffffffffffffffff168486612446565b604051848152859033907ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568906020015b60405180910390a350506001600055505050565b80158061233457506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156122fa57600080fd5b505afa15801561230e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123329190613039565b155b6123c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610520565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526113a29084907f095ea7b30000000000000000000000000000000000000000000000000000000090606401611d88565b60006113908284612ffc565b600061139082846130ef565b60006113908284613052565b60006113908284612fe5565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526113a29084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401611d88565b60026000541415612509576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610520565b60026000908155600480548590811061252457612524612f87565b60009182526020909120600590910201600381015490915073ffffffffffffffffffffffffffffffffffffffff16156125df57600381015473ffffffffffffffffffffffffffffffffffffffff1633146125da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4f6e6c792070726f7879206661726d65720000000000000000000000000000006044820152606401610520565b61265e565b3373ffffffffffffffffffffffffffffffffffffffff83161461265e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f43616e206e6f74206465706f73697420666f72206f74686572730000000000006044820152606401610520565b600084815260066020908152604080832073ffffffffffffffffffffffffffffffffffffffff86168452909152902061269685610d3b565b60005b6002548110156127cc576000600282815481106126b8576126b8612f87565b600091825260208083208a8452600580835260408086208887529093529190932054865492909102909201925015612782576000838152600285016020526040812054855461271791906120ec9064e8d4a5100090610df69087612416565b9050801561278057808360040160008282546127339190613052565b9091555050600084815260018601602052604081208054839290612758908490613052565b909155505082546127809073ffffffffffffffffffffffffffffffffffffffff168883612446565b505b6127a664e8d4a51000610df683610df08b896000015461242e90919063ffffffff16565b6000848152600286016020526040902055508190506127c481613087565b915050612699565b50831561283957600382015473ffffffffffffffffffffffffffffffffffffffff166128165781546128169073ffffffffffffffffffffffffffffffffffffffff16843087611d2e565b6004820154612825908561242e565b60048301558054612836908561242e565b81555b848373ffffffffffffffffffffffffffffffffffffffff167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a158660405161227191815260200190565b600154600090610100900460ff161561293b578160ff1660011480156128a75750303b155b612933576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610520565b506000919050565b60015460ff8084169116106129d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610520565b50600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff9290921691909117815590565b6000612a6a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612b149092919063ffffffff16565b8051909150156113a25780806020019051810190612a88919061312a565b6113a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610520565b6060612b238484600085612b2b565b949350505050565b606082471015612bbd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610520565b73ffffffffffffffffffffffffffffffffffffffff85163b612c3b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610520565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612c649190613173565b60006040518083038185875af1925050503d8060008114612ca1576040519150601f19603f3d011682016040523d82523d6000602084013e612ca6565b606091505b5091509150612cb6828286612cc1565b979650505050505050565b60608315612cd0575081611390565b825115612ce05782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610520919061318f565b600060208284031215612d2657600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff81168114612d4f57600080fd5b50565b600060208284031215612d6457600080fd5b813561139081612d2d565b60008060008060808587031215612d8557600080fd5b5050823594602084013594506040840135936060013592509050565b60008060408385031215612db457600080fd5b50508035926020909101359150565b8015158114612d4f57600080fd5b600080600060608486031215612de657600080fd5b83359250602084013591506040840135612dff81612dc3565b809150509250925092565b600080600060608486031215612e1f57600080fd5b505081359360208301359350604090920135919050565b60008060408385031215612e4957600080fd5b823591506020830135612e5b81612d2d565b809150509250929050565b600080600060608486031215612e7b57600080fd5b83359250602084013591506040840135612dff81612d2d565b60008060008060808587031215612eaa57600080fd5b843593506020850135612ebc81612d2d565b92506040850135612ecc81612d2d565b91506060850135612edc81612dc3565b939692955090935050565b602080825282518282018190526000919060409081850190868401855b82811015612f3f578151805173ffffffffffffffffffffffffffffffffffffffff168552860151868501529284019290850190600101612f04565b5091979650505050505050565b60008060008060808587031215612f6257600080fd5b8435612f6d81612d2d565b966020860135965060408601359560600135945092505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015612ff757612ff7612fb6565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561303457613034612fb6565b500290565b60006020828403121561304b57600080fd5b5051919050565b6000821982111561306557613065612fb6565b500190565b60006020828403121561307c57600080fd5b815161139081612d2d565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156130b9576130b9612fb6565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082613125577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60006020828403121561313c57600080fd5b815161139081612dc3565b60005b8381101561316257818101518382015260200161314a565b838111156111835750506000910152565b60008251613185818460208701613147565b9190910192915050565b60208152600082518060208401526131ae816040850160208701613147565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea264697066735822122045f976f7f7a1390bde04d097e28f6c261339db5fc4f87115d20fe83c14f998a064736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101985760003560e01c80637bafb029116100e3578063d18df53c1161008c578063e2bbb15811610066578063e2bbb158146103f7578063f40142611461040a578063f851a4401461041d57600080fd5b8063d18df53c14610372578063e11f2f7d14610392578063e15a003a146103e457600080fd5b8063a3f30d27116100bd578063a3f30d2714610339578063c4d66de81461034c578063c71b4b431461035f57600080fd5b80637bafb029146102b65780637cd07e47146102c957806393f1a40b1461030e57600080fd5b8063454b060811610145578063630b5ba11161011f578063630b5ba11461028857806364482f7914610290578063704b6c02146102a357600080fd5b8063454b06081461024f57806351eb05a6146102625780635312ea8e1461027557600080fd5b806323cf31181161017657806323cf31181461021457806338cc39af14610229578063441a3e701461023c57600080fd5b8063081e3eda1461019d5780631526fe27146101b457806317caf6f11461020b575b600080fd5b6004545b6040519081526020015b60405180910390f35b6101c76101c2366004612d14565b610443565b6040805173ffffffffffffffffffffffffffffffffffffffff968716815260208101959095528401929092529092166060820152608081019190915260a0016101ab565b6101a160075481565b610227610222366004612d52565b61049d565b005b610227610237366004612d6f565b610570565b61022761024a366004612da1565b61093f565b61022761025d366004612d14565b61094e565b610227610270366004612d14565b610d3b565b610227610283366004612d14565b610e71565b61022761104b565b61022761029e366004612dd1565b611072565b6102276102b1366004612d52565b611189565b6101a16102c4366004612e0a565b61130c565b6003546102e99073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101ab565b6101a161031c366004612e36565b600660209081526000928352604080842090915290825290205481565b610227610347366004612e66565b611397565b61022761035a366004612d52565b6113a7565b61022761036d366004612e94565b611492565b610385610380366004612e36565b611747565b6040516101ab9190612ee7565b6103a56103a0366004612d14565b6119a4565b6040805173ffffffffffffffffffffffffffffffffffffffff90961686526020860194909452928401919091526060830152608082015260a0016101ab565b6102276103f2366004612e66565b6119fc565b610227610405366004612da1565b611a07565b610227610418366004612f4c565b611a12565b6001546102e99062010000900473ffffffffffffffffffffffffffffffffffffffff1681565b6004818154811061045357600080fd5b60009182526020909120600590910201805460018201546002830154600384015460049094015473ffffffffffffffffffffffffffffffffffffffff938416955091939092169085565b60015462010000900473ffffffffffffffffffffffffffffffffffffffff163314610529576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4f6e6c792061646d696e0000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60015462010000900473ffffffffffffffffffffffffffffffffffffffff1633146105f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4f6e6c792061646d696e000000000000000000000000000000000000000000006044820152606401610520565b60006002858154811061060c5761060c612f87565b90600052602060002090600502019050438160020154116106bc57806002015483146106bc57604080517f08c379a00000000000000000000000000000000000000000000000000000000081526020600482015260248101919091527f63616e206e6f74206d6f6469667920737461727465644174426c6f636b20616660448201527f74657220726577617264732068617320626567616e20616c6c6f636174696e676064820152608401610520565b43821161074b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f63616e206e6f74206d6f6469667920656e6465644174426c6f636b20746f206160448201527f207061737420626c6f636b206e756d62657200000000000000000000000000006064820152608401610520565b8282116107da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f656e6465644174426c6f636b2073686f756c642062652067726561746572207460448201527f68616e20737461727465644174426c6f636b00000000000000000000000000006064820152608401610520565b6107e261104b565b6000846107ef8585612fe5565b6107f99190612ffc565b82546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015291925060009173ffffffffffffffffffffffffffffffffffffffff909116906370a082319060240160206040518083038186803b15801561086757600080fd5b505afa15801561087b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089f9190613039565b90508260040154816108b19190613052565b8211156108fd576108f83330856004015484866108ce9190612fe5565b6108d89190612fe5565b865473ffffffffffffffffffffffffffffffffffffffff16929190611d2e565b610929565b600483015461090c9082613052565b821015610929576109293033848660040154856108ce9190613052565b5050600281019290925560038201556001015550565b61094a828233611e0a565b5050565b60015462010000900473ffffffffffffffffffffffffffffffffffffffff1633146109d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4f6e6c792061646d696e000000000000000000000000000000000000000000006044820152606401610520565b60035473ffffffffffffffffffffffffffffffffffffffff16610a54576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6d6967726174653a206e6f206d69677261746f720000000000000000000000006044820152606401610520565b600060048281548110610a6957610a69612f87565b6000918252602082206005919091020180546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015291935073ffffffffffffffffffffffffffffffffffffffff16919082906370a082319060240160206040518083038186803b158015610ae557600080fd5b505afa158015610af9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1d9190613039565b600354909150610b479073ffffffffffffffffffffffffffffffffffffffff848116911683612285565b6003546040517fce5494bb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152600092169063ce5494bb90602401602060405180830381600087803b158015610bb557600080fd5b505af1158015610bc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bed919061306a565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915073ffffffffffffffffffffffffffffffffffffffff8216906370a082319060240160206040518083038186803b158015610c5557600080fd5b505afa158015610c69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8d9190613039565b8214610cf5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f6d6967726174653a2062616400000000000000000000000000000000000000006044820152606401610520565b83547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9190911617909255505050565b600060048281548110610d5057610d50612f87565b9060005260206000209060050201905080600201544311610d6f575050565b600481015480610d8457504360029091015550565b60005b600254811015610e6557600060028281548110610da657610da6612f87565b906000526020600020906005020190506000610dc78560020154438561130c565b90506000610dfc600754610df68860010154610df087600101548761241690919063ffffffff16565b90612416565b90612422565b9050610e34610e1486610df68464e8d4a51000612416565b60008981526005602090815260408083208984529091529020549061242e565b600088815260056020908152604080832088845290915290205550829150610e5d905081613087565b915050610d87565b50504360029091015550565b60026000541415610ede576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610520565b600260009081556004805483908110610ef957610ef9612f87565b600091825260208083208584526006825260408085203386529092529220600360059092029092019081015490925073ffffffffffffffffffffffffffffffffffffffff16610fa4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f6e6f7468696e6720746f207769746864726177000000000000000000000000006044820152606401610520565b80546004830154610fb49161243a565b600483015580548254610fe19173ffffffffffffffffffffffffffffffffffffffff909116903390612446565b60008082555b600254811015611007576000818152600283016020526040812055610fe7565b508054604051908152839033907fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959060200160405180910390a35050600160005550565b60045460005b8181101561094a5761106281610d3b565b61106b81613087565b9050611051565b60015462010000900473ffffffffffffffffffffffffffffffffffffffff1633146110f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4f6e6c792061646d696e000000000000000000000000000000000000000000006044820152606401610520565b80156111075761110761104b565b60006004848154811061111c5761111c612f87565b9060005260206000209060050201600101549050826004858154811061114457611144612f87565b9060005260206000209060050201600101819055508281146111835761117f836111798360075461243a90919063ffffffff16565b9061242e565b6007555b50505050565b60015462010000900473ffffffffffffffffffffffffffffffffffffffff163314611210576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4f6e6c792061646d696e000000000000000000000000000000000000000000006044820152606401610520565b73ffffffffffffffffffffffffffffffffffffffff811661128d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f63616e206e6f74206265207a65726f20616464726573730000000000000000006044820152606401610520565b6001805473ffffffffffffffffffffffffffffffffffffffff838116620100008181027fffffffffffffffffffff0000000000000000000000000000000000000000ffff85161790945560405193909204169182907f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f90600090a35050565b6000806002838154811061132257611322612f87565b906000526020600020906005020190508060020154841015611348576000915050611390565b806002015485101561135c57806002015494505b806003015484111561137057806003015493505b83851115611382576000915050611390565b61138c848661243a565b9150505b9392505050565b6113a283838361249c565b505050565b60006113b36001612882565b905080156113e857600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b600180547fffffffffffffffffffff0000000000000000000000000000000000000000ffff166201000073ffffffffffffffffffffffffffffffffffffffff851602179055801561094a57600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1681556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b60015462010000900473ffffffffffffffffffffffffffffffffffffffff163314611519576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4f6e6c792061646d696e000000000000000000000000000000000000000000006044820152606401610520565b80156115275761152761104b565b73ffffffffffffffffffffffffffffffffffffffff8216156115e75773ffffffffffffffffffffffffffffffffffffffff8316156115e7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603060248201527f4c50546f6b656e2073686f756c6420626520616464726573732030207768656e60448201527f2070726f78696564206661726d65722e000000000000000000000000000000006064820152608401610520565b60075443906115f6908661242e565b6007556040805160a08101825273ffffffffffffffffffffffffffffffffffffffff95861681526020810196875290810191825292841660608401908152600060808501818152600480546001810182559252945160059091027f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b810180549288167fffffffffffffffffffffffff000000000000000000000000000000000000000093841617905596517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c88015591517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d870155517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19e8601805491909516911617909255517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19f9092019190915550565b60025460609060009067ffffffffffffffff811115611768576117686130c0565b6040519080825280602002602001820160405280156117ad57816020015b60408051808201909152600080825260208201528152602001906001900390816117865790505b5090506000600485815481106117c5576117c5612f87565b6000918252602080832088845260068252604080852073ffffffffffffffffffffffffffffffffffffffff8a1686529092529083206005909202019250905b6002548110156119995760006002828154811061182357611823612f87565b90600052602060002090600502019050806002015443101561188f5760408051808201909152815473ffffffffffffffffffffffffffffffffffffffff16815260006020820152855186908490811061187e5761187e612f87565b602002602001018190525050611987565b600088815260056020908152604080832085845290915290205460048501546002860154431180156118c057508015155b156119235760006118d68760020154438761130c565b905060006118ff600754610df68a60010154610df089600101548761241690919063ffffffff16565b905061191e61191784610df68464e8d4a51000612416565b859061242e565b935050505b60408051808201909152835473ffffffffffffffffffffffffffffffffffffffff168152855460208201906119639064e8d4a5100090610df69087612416565b81525087858151811061197857611978612f87565b60200260200101819052505050505b8061199181613087565b915050611804565b509195945050505050565b600281815481106119b457600080fd5b60009182526020909120600590910201805460018201546002830154600384015460049094015473ffffffffffffffffffffffffffffffffffffffff90931694509092909185565b6113a2838383611e0a565b61094a82823361249c565b60015462010000900473ffffffffffffffffffffffffffffffffffffffff163314611a99576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4f6e6c792061646d696e000000000000000000000000000000000000000000006044820152606401610520565b818111611b28576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f656e6465644174426c6f636b2073686f756c642062652067726561746572207460448201527f68616e20737461727465644174426c6f636b00000000000000000000000000006064820152608401610520565b60008311611bb8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f726577617264506572426c6f636b2073686f756c64206265206772656174657260448201527f207468616e207a65726f000000000000000000000000000000000000000000006064820152608401610520565b611bf1333085611bc88686612fe5565b611bd29190612ffc565b73ffffffffffffffffffffffffffffffffffffffff8816929190611d2e565b6040805160a08101825273ffffffffffffffffffffffffffffffffffffffff9586168152602081019485529081019283526060810191825260006080820181815260028054600181018255925291517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace600590920291820180547fffffffffffffffffffffffff000000000000000000000000000000000000000016919097161790955592517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf85015590517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad0840155517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad1830155517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad290910155565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526111839085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612a08565b60026000541415611e77576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610520565b600260009081556004805485908110611e9257611e92612f87565b6000918252602080832087845260068252604080852073ffffffffffffffffffffffffffffffffffffffff881686529092529220805460059092029092019250841115611f3b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f77697468647261773a20496e73756666696369656e742062616c616e636500006044820152606401610520565b600382015473ffffffffffffffffffffffffffffffffffffffff1615611fe357600382015473ffffffffffffffffffffffffffffffffffffffff163314611fde576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4f6e6c792070726f7879206661726d65720000000000000000000000000000006044820152606401610520565b612062565b3373ffffffffffffffffffffffffffffffffffffffff841614612062576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f43616e206e6f7420776974686472617720666f72206f746865727300000000006044820152606401610520565b61206b85610d3b565b60005b6002548110156121d65760006002828154811061208d5761208d612f87565b600091825260208083208a845260058083526040808620888752909352919093205486549290910290920192501561218557600083815260028501602052604081205485546120f291906120ec9064e8d4a5100090610df69087612416565b9061243a565b9050801561215b578083600401600082825461210e9190613052565b9091555050600084815260018601602052604081208054839290612133908490613052565b9091555050825461215b9073ffffffffffffffffffffffffffffffffffffffff168883612446565b84546121729064e8d4a5100090610df69085612416565b6000858152600287016020526040902055505b86156121c1576121af64e8d4a51000610df683610df08b896000015461243a90919063ffffffff16565b60008481526002860160205260409020555b505080806121ce90613087565b91505061206e565b5083156122415780546121e9908561243a565b815560048201546121fa908561243a565b6004830155600382015473ffffffffffffffffffffffffffffffffffffffff166122415781546122419073ffffffffffffffffffffffffffffffffffffffff168486612446565b604051848152859033907ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568906020015b60405180910390a350506001600055505050565b80158061233457506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156122fa57600080fd5b505afa15801561230e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123329190613039565b155b6123c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610520565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526113a29084907f095ea7b30000000000000000000000000000000000000000000000000000000090606401611d88565b60006113908284612ffc565b600061139082846130ef565b60006113908284613052565b60006113908284612fe5565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526113a29084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401611d88565b60026000541415612509576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610520565b60026000908155600480548590811061252457612524612f87565b60009182526020909120600590910201600381015490915073ffffffffffffffffffffffffffffffffffffffff16156125df57600381015473ffffffffffffffffffffffffffffffffffffffff1633146125da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4f6e6c792070726f7879206661726d65720000000000000000000000000000006044820152606401610520565b61265e565b3373ffffffffffffffffffffffffffffffffffffffff83161461265e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f43616e206e6f74206465706f73697420666f72206f74686572730000000000006044820152606401610520565b600084815260066020908152604080832073ffffffffffffffffffffffffffffffffffffffff86168452909152902061269685610d3b565b60005b6002548110156127cc576000600282815481106126b8576126b8612f87565b600091825260208083208a8452600580835260408086208887529093529190932054865492909102909201925015612782576000838152600285016020526040812054855461271791906120ec9064e8d4a5100090610df69087612416565b9050801561278057808360040160008282546127339190613052565b9091555050600084815260018601602052604081208054839290612758908490613052565b909155505082546127809073ffffffffffffffffffffffffffffffffffffffff168883612446565b505b6127a664e8d4a51000610df683610df08b896000015461242e90919063ffffffff16565b6000848152600286016020526040902055508190506127c481613087565b915050612699565b50831561283957600382015473ffffffffffffffffffffffffffffffffffffffff166128165781546128169073ffffffffffffffffffffffffffffffffffffffff16843087611d2e565b6004820154612825908561242e565b60048301558054612836908561242e565b81555b848373ffffffffffffffffffffffffffffffffffffffff167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a158660405161227191815260200190565b600154600090610100900460ff161561293b578160ff1660011480156128a75750303b155b612933576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610520565b506000919050565b60015460ff8084169116106129d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610520565b50600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff9290921691909117815590565b6000612a6a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612b149092919063ffffffff16565b8051909150156113a25780806020019051810190612a88919061312a565b6113a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610520565b6060612b238484600085612b2b565b949350505050565b606082471015612bbd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610520565b73ffffffffffffffffffffffffffffffffffffffff85163b612c3b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610520565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612c649190613173565b60006040518083038185875af1925050503d8060008114612ca1576040519150601f19603f3d011682016040523d82523d6000602084013e612ca6565b606091505b5091509150612cb6828286612cc1565b979650505050505050565b60608315612cd0575081611390565b825115612ce05782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610520919061318f565b600060208284031215612d2657600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff81168114612d4f57600080fd5b50565b600060208284031215612d6457600080fd5b813561139081612d2d565b60008060008060808587031215612d8557600080fd5b5050823594602084013594506040840135936060013592509050565b60008060408385031215612db457600080fd5b50508035926020909101359150565b8015158114612d4f57600080fd5b600080600060608486031215612de657600080fd5b83359250602084013591506040840135612dff81612dc3565b809150509250925092565b600080600060608486031215612e1f57600080fd5b505081359360208301359350604090920135919050565b60008060408385031215612e4957600080fd5b823591506020830135612e5b81612d2d565b809150509250929050565b600080600060608486031215612e7b57600080fd5b83359250602084013591506040840135612dff81612d2d565b60008060008060808587031215612eaa57600080fd5b843593506020850135612ebc81612d2d565b92506040850135612ecc81612d2d565b91506060850135612edc81612dc3565b939692955090935050565b602080825282518282018190526000919060409081850190868401855b82811015612f3f578151805173ffffffffffffffffffffffffffffffffffffffff168552860151868501529284019290850190600101612f04565b5091979650505050505050565b60008060008060808587031215612f6257600080fd5b8435612f6d81612d2d565b966020860135965060408601359560600135945092505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015612ff757612ff7612fb6565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561303457613034612fb6565b500290565b60006020828403121561304b57600080fd5b5051919050565b6000821982111561306557613065612fb6565b500190565b60006020828403121561307c57600080fd5b815161139081612d2d565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156130b9576130b9612fb6565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082613125577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60006020828403121561313c57600080fd5b815161139081612dc3565b60005b8381101561316257818101518382015260200161314a565b838111156111835750506000910152565b60008251613185818460208701613147565b9190910192915050565b60208152600082518060208401526131ae816040850160208701613147565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea264697066735822122045f976f7f7a1390bde04d097e28f6c261339db5fc4f87115d20fe83c14f998a064736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1194,
        "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 6,
        "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
        "label": "_initialized",
        "offset": 0,
        "slot": "1",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
        "label": "_initializing",
        "offset": 1,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 5509,
        "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
        "label": "admin",
        "offset": 2,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5558,
        "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
        "label": "rewardSpecs",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(RewardSpec)5554_storage)dyn_storage"
      },
      {
        "astId": 5561,
        "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
        "label": "migrator",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IMigratorChef)5496"
      },
      {
        "astId": 5565,
        "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
        "label": "poolInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(PoolInfo)5536_storage)dyn_storage"
      },
      {
        "astId": 5571,
        "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
        "label": "poolsRewardsAccRewardsPerShare",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 5578,
        "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
        "label": "userInfo",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5522_storage))"
      },
      {
        "astId": 5581,
        "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)5536_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)5536_storage",
        "encoding": "dynamic_array",
        "label": "struct MultiRewardsMasterChef.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(RewardSpec)5554_storage)dyn_storage": {
        "base": "t_struct(RewardSpec)5554_storage",
        "encoding": "dynamic_array",
        "label": "struct MultiRewardsMasterChef.RewardSpec[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1887": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMigratorChef)5496": {
        "encoding": "inplace",
        "label": "contract IMigratorChef",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)5522_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MultiRewardsMasterChef.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)5522_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5522_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct MultiRewardsMasterChef.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)5522_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(PoolInfo)5536_storage": {
        "encoding": "inplace",
        "label": "struct MultiRewardsMasterChef.PoolInfo",
        "members": [
          {
            "astId": 5525,
            "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
            "label": "lpToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)1887"
          },
          {
            "astId": 5527,
            "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5529,
            "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5532,
            "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
            "label": "proxyFarmer",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 5535,
            "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
            "label": "totalAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(RewardSpec)5554_storage": {
        "encoding": "inplace",
        "label": "struct MultiRewardsMasterChef.RewardSpec",
        "members": [
          {
            "astId": 5545,
            "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)1887"
          },
          {
            "astId": 5547,
            "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
            "label": "rewardPerBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5549,
            "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
            "label": "startedAtBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5551,
            "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
            "label": "endedAtBlock",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5553,
            "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
            "label": "claimedAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(UserInfo)5522_storage": {
        "encoding": "inplace",
        "label": "struct MultiRewardsMasterChef.UserInfo",
        "members": [
          {
            "astId": 5511,
            "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5516,
            "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
            "label": "claimedRewards",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 5521,
            "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}