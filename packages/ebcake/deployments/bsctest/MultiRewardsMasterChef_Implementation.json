{
  "address": "0xEa06f68DF2aDd7cfD290546db7394DfEa3869e98",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "ClaimRewards",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_proxyFarmer",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rewardPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startedAtBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endedAtBlock",
          "type": "uint256"
        }
      ],
      "name": "addRewardSpec",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user_",
          "type": "address"
        }
      ],
      "name": "depositForUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_to",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardId",
          "type": "uint256"
        }
      ],
      "name": "getMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migrator",
      "outputs": [
        {
          "internalType": "contract IMigratorChef",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingRewards",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct MultiRewardsMasterChef.RewardInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "proxyFarmer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardSpecs",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rewardPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startedAtBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endedAtBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin_",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMigratorChef",
          "name": "_migrator",
          "type": "address"
        }
      ],
      "name": "setMigrator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rewardId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startedAtBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endedAtBlock",
          "type": "uint256"
        }
      ],
      "name": "setRewardSpec",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user_",
          "type": "address"
        }
      ],
      "name": "withdrawForUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8e0c7a1685316d8f048de2ef1d6b754fa835e9b51009f911aade4b11362ce8d5",
  "receipt": {
    "to": null,
    "from": "0xe7a2b8C8feD53713F69227e6c3d2384E80CF88a6",
    "contractAddress": "0xEa06f68DF2aDd7cfD290546db7394DfEa3869e98",
    "transactionIndex": 3,
    "gasUsed": "2175634",
    "logsBloom": "0x
    "blockHash": "0x9dca4ef021be4e390848bd3f9e71c28c9bedbba48e83f24cda45109d6bddf14c",
    "transactionHash": "0x8e0c7a1685316d8f048de2ef1d6b754fa835e9b51009f911aade4b11362ce8d5",
    "logs": [],
    "blockNumber": 19645226,
    "cumulativeGasUsed": "2507343",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d7e10768f9d40d1aec8a6e0bf1c7c156",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"ClaimRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_proxyFarmer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startedAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endedAtBlock\",\"type\":\"uint256\"}],\"name\":\"addRewardSpec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"depositForUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardId\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"contract IMigratorChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct MultiRewardsMasterChef.RewardInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proxyFarmer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardSpecs\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startedAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endedAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMigratorChef\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startedAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endedAtBlock\",\"type\":\"uint256\"}],\"name\":\"setRewardSpec\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"withdrawForUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MultiRewardsMasterChef.sol\":\"MultiRewardsMasterChef\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/MultiRewardsMasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ninterface IMigratorChef {\\n    function migrate(IERC20 token) external returns (IERC20);\\n}\\n\\n// MasterChef is the master of RewardToken. He can make RewardToken and he is a fair guy.\\n//\\n// Note that it's ownable and the owner wields tremendous power. The ownership\\n// will be transferred to a governance smart contract once RewardToken is sufficiently\\n// distributed and the community can show to govern itself.\\n//\\n// Have fun reading it. Hopefully it's bug-free. God bless.\\ncontract MultiRewardsMasterChef is ReentrancyGuard, Initializable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    address public admin;\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        /**\\n         * @dev claimed rewards mapping. key is reward id, value is claimed rewards since to last claimed\\n         */\\n        mapping(uint256 => uint256) claimedRewards;\\n        /**\\n         * @dev rewardDebt mapping. key is reward id, value is reward debt of the reward.\\n         */\\n        mapping(uint256 => uint256) rewardDebt; // Reward debt in each reward. See explanation below.\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of rewards\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.amount * poolsRewardsAccRewardsPerShare[pid][rewardId]) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n        //   1. The pool's `accCakePerShare` (and `lastRewardBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. rewards to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that rewards distribution occurs.\\n        /**\\n         * Pool with a proxyFarmer means no lpToken transfer (including withdraw and deposit).\\n         */\\n        address proxyFarmer;\\n        /**\\n         * total deposited amount.\\n         */\\n        uint256 totalAmount;\\n    }\\n\\n    struct RewardInfo {\\n        IERC20 token;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * Info of each reward.\\n     */\\n    struct RewardSpec {\\n        IERC20 token;\\n        uint256 rewardPerBlock;\\n        uint256 startedAtBlock;\\n        uint256 endedAtBlock;\\n        uint256 claimedAmount;\\n    }\\n\\n    RewardSpec[] public rewardSpecs;\\n\\n    // The migrator contract. It has a lot of power. Can only be set through governance (owner).\\n    IMigratorChef public migrator;\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n    mapping(uint256 => mapping(uint256 => uint256)) poolsRewardsAccRewardsPerShare; // Accumulated rewards per share in each reward spec, times 1e12. See below.\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event ClaimRewards(address indexed user, uint256 indexed pid);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event AdminChanged(address indexed previousAdmin, address indexed newAdmin);\\n    /**\\n     * @notice Checks if the msg.sender is the admin address.\\n     */\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"Only admin\\\");\\n        _;\\n    }\\n\\n    function initialize(address admin_) public initializer {\\n        admin = admin_;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do. except as proxied farmer\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _lpToken,\\n        address _proxyFarmer,\\n        bool _withUpdate\\n    ) public onlyAdmin {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        if (_proxyFarmer != address(0)) {\\n            require(address(_lpToken) == address(0), \\\"LPToken should be address 0 when proxied farmer.\\\");\\n        }\\n        uint256 lastRewardBlock = block.number;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                allocPoint: _allocPoint,\\n                lastRewardBlock: lastRewardBlock,\\n                proxyFarmer: _proxyFarmer,\\n                totalAmount: 0\\n            })\\n        );\\n    }\\n\\n    // Update the given pool's RewardToken allocation point. Can only be called by the owner.\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate\\n    ) public onlyAdmin {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 prevAllocPoint = poolInfo[_pid].allocPoint;\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        if (prevAllocPoint != _allocPoint) {\\n            totalAllocPoint = totalAllocPoint.sub(prevAllocPoint).add(_allocPoint);\\n        }\\n    }\\n\\n    function addRewardSpec(\\n        IERC20 token,\\n        uint256 rewardPerBlock,\\n        uint256 startedAtBlock,\\n        uint256 endedAtBlock\\n    ) public onlyAdmin {\\n        require(endedAtBlock > startedAtBlock, \\\"endedAtBlock should be greater than startedAtBlock\\\");\\n        require(rewardPerBlock > 0, \\\"rewardPerBlock should be greater than zero\\\");\\n\\n        token.safeTransferFrom(msg.sender, address(this), (endedAtBlock - startedAtBlock) * rewardPerBlock);\\n\\n        rewardSpecs.push(\\n            RewardSpec({\\n                token: token,\\n                rewardPerBlock: rewardPerBlock,\\n                startedAtBlock: startedAtBlock,\\n                endedAtBlock: endedAtBlock,\\n                claimedAmount: 0\\n            })\\n        );\\n    }\\n\\n    function setRewardSpec(\\n        uint256 rewardId,\\n        uint256 rewardPerBlock,\\n        uint256 startedAtBlock,\\n        uint256 endedAtBlock\\n    ) public onlyAdmin {\\n        RewardSpec storage rewardSpec = rewardSpecs[rewardId];\\n        if (rewardSpec.startedAtBlock <= block.number) {\\n            require(\\n                startedAtBlock == rewardSpec.startedAtBlock,\\n                \\\"can not modify startedAtBlock after rewards has began allocating\\\"\\n            );\\n        }\\n\\n        require(endedAtBlock > block.number, \\\"can not modify endedAtBlock to a past block number\\\");\\n        require(endedAtBlock > startedAtBlock, \\\"endedAtBlock should be greater than startedAtBlock\\\");\\n        massUpdatePools();\\n        uint256 requiredAmount = (endedAtBlock - startedAtBlock) * rewardPerBlock;\\n        uint256 tokenBalance = rewardSpec.token.balanceOf(address(this));\\n        if (requiredAmount > tokenBalance + rewardSpec.claimedAmount) {\\n            rewardSpec.token.safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                requiredAmount - tokenBalance - rewardSpec.claimedAmount\\n            );\\n        } else if (requiredAmount < tokenBalance + rewardSpec.claimedAmount) {\\n            // return overflow tokens\\n            rewardSpec.token.safeTransferFrom(\\n                address(this),\\n                msg.sender,\\n                (tokenBalance + rewardSpec.claimedAmount) - requiredAmount\\n            );\\n        }\\n\\n        rewardSpec.startedAtBlock = startedAtBlock;\\n        rewardSpec.endedAtBlock = endedAtBlock;\\n        rewardSpec.rewardPerBlock = rewardPerBlock;\\n    }\\n\\n    // Set the migrator contract. Can only be called by the owner.\\n    function setMigrator(IMigratorChef _migrator) public onlyAdmin {\\n        migrator = _migrator;\\n    }\\n\\n    // Migrate lp token to another lp contract.\\n    function migrate(uint256 _pid) public onlyAdmin {\\n        require(address(migrator) != address(0), \\\"migrate: no migrator\\\");\\n        PoolInfo storage pool = poolInfo[_pid];\\n        IERC20 lpToken = pool.lpToken;\\n        uint256 bal = lpToken.balanceOf(address(this));\\n        lpToken.safeApprove(address(migrator), bal);\\n        IERC20 newLpToken = migrator.migrate(lpToken);\\n        require(bal == newLpToken.balanceOf(address(this)), \\\"migrate: bad\\\");\\n        pool.lpToken = newLpToken;\\n    }\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(\\n        uint256 _from,\\n        uint256 _to,\\n        uint256 rewardId\\n    ) public view returns (uint256) {\\n        RewardSpec storage rewardSpec = rewardSpecs[rewardId];\\n        if (_to < rewardSpec.startedAtBlock) {\\n            return 0;\\n        }\\n        if (_from < rewardSpec.startedAtBlock) {\\n            _from = rewardSpec.startedAtBlock;\\n        }\\n        if (_to > rewardSpec.endedAtBlock) {\\n            _to = rewardSpec.endedAtBlock;\\n        }\\n        if (_from > _to) {\\n            return 0;\\n        }\\n        return _to.sub(_from);\\n    }\\n\\n    // View function to see pending CAKEs on frontend.\\n    function pendingRewards(uint256 _pid, address _user) external view returns (RewardInfo[] memory) {\\n        RewardInfo[] memory rewardsInfo = new RewardInfo[](rewardSpecs.length);\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        for (uint256 rewardId = 0; rewardId < rewardSpecs.length; rewardId++) {\\n            RewardSpec storage rewardSpec = rewardSpecs[rewardId];\\n\\n            if (block.number < rewardSpec.startedAtBlock) {\\n                rewardsInfo[rewardId] = RewardInfo({ token: rewardSpec.token, amount: 0 });\\n                continue;\\n            }\\n\\n            uint256 accRewardPerShare = poolsRewardsAccRewardsPerShare[_pid][rewardId];\\n\\n            uint256 lpSupply = pool.totalAmount;\\n\\n            if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n                uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number, rewardId);\\n                uint256 rewardAmount = multiplier.mul(rewardSpec.rewardPerBlock).mul(pool.allocPoint).div(\\n                    totalAllocPoint\\n                );\\n                accRewardPerShare = accRewardPerShare.add(rewardAmount.mul(1e12).div(lpSupply));\\n            }\\n            rewardsInfo[rewardId] = RewardInfo({\\n                token: rewardSpec.token,\\n                amount: user.amount.mul(accRewardPerShare).div(1e12) // .sub(user.rewardDebt)\\n            });\\n        }\\n\\n        return rewardsInfo;\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n        uint256 lpSupply = pool.totalAmount;\\n        if (lpSupply == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n        for (uint256 rewardId; rewardId < rewardSpecs.length; rewardId++) {\\n            RewardSpec storage rewardSpec = rewardSpecs[rewardId];\\n\\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number, rewardId);\\n            uint256 reward = multiplier.mul(rewardSpec.rewardPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\n            poolsRewardsAccRewardsPerShare[_pid][rewardId] = poolsRewardsAccRewardsPerShare[_pid][rewardId].add(\\n                reward.mul(1e12).div(lpSupply)\\n            );\\n        }\\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    function deposit(uint256 _pid, uint256 _amount) public {\\n        _depositOperation(_pid, _amount, msg.sender);\\n    }\\n\\n    function depositForUser(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address user_\\n    ) public {\\n        _depositOperation(_pid, _amount, user_);\\n    }\\n\\n    // Deposit LP tokens to MasterChef for RewardToken allocation.\\n    function _depositOperation(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _user\\n    ) internal nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (pool.proxyFarmer != address(0)) {\\n            require(msg.sender == pool.proxyFarmer, \\\"Only proxy farmer\\\");\\n        } else {\\n            require(msg.sender == _user, \\\"Can not deposit for others\\\");\\n        }\\n\\n        UserInfo storage user = userInfo[_pid][_user];\\n        updatePool(_pid);\\n        for (uint256 rewardId = 0; rewardId < rewardSpecs.length; rewardId++) {\\n            RewardSpec storage rewardSpec = rewardSpecs[rewardId];\\n            uint256 accRewardPerShare = poolsRewardsAccRewardsPerShare[_pid][rewardId];\\n            if (user.amount > 0) {\\n                uint256 pending = user.amount.mul(accRewardPerShare).div(1e12).sub(user.rewardDebt[rewardId]);\\n                if (pending > 0) {\\n                    rewardSpec.claimedAmount += pending;\\n                    user.claimedRewards[rewardId] += pending;\\n                    rewardSpec.token.safeTransfer(_user, pending);\\n                }\\n            }\\n\\n            user.rewardDebt[rewardId] = user.amount.add(_amount).mul(accRewardPerShare).div(1e12);\\n        }\\n        if (_amount > 0) {\\n            if (pool.proxyFarmer == address(0)) {\\n                pool.lpToken.safeTransferFrom(address(_user), address(this), _amount);\\n            }\\n            pool.totalAmount = pool.totalAmount.add(_amount);\\n            user.amount = user.amount.add(_amount);\\n        }\\n        emit Deposit(_user, _pid, _amount);\\n    }\\n\\n    function withdraw(uint256 _pid, uint256 _amount) public {\\n        _withdrawOperation(_pid, _amount, msg.sender);\\n    }\\n\\n    function withdrawForUser(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address user_\\n    ) public {\\n        _withdrawOperation(_pid, _amount, user_);\\n    }\\n\\n    // Withdraw LP tokens from MasterChef.\\n    function _withdrawOperation(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _user\\n    ) internal nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        require(user.amount >= _amount, \\\"withdraw: Insufficient balance\\\");\\n        if (pool.proxyFarmer != address(0)) {\\n            require(msg.sender == pool.proxyFarmer, \\\"Only proxy farmer\\\");\\n        } else {\\n            require(msg.sender == _user, \\\"Can not withdraw for others\\\");\\n        }\\n        updatePool(_pid);\\n        for (uint256 rewardId = 0; rewardId < rewardSpecs.length; rewardId++) {\\n            RewardSpec storage rewardSpec = rewardSpecs[rewardId];\\n            uint256 accRewardPerShare = poolsRewardsAccRewardsPerShare[_pid][rewardId];\\n            if (user.amount > 0) {\\n                uint256 pending = user.amount.mul(accRewardPerShare).div(1e12).sub(user.rewardDebt[rewardId]);\\n                if (pending > 0) {\\n                    rewardSpec.claimedAmount += pending;\\n                    user.claimedRewards[rewardId] += pending;\\n                    rewardSpec.token.safeTransfer(_user, pending);\\n                }\\n                user.rewardDebt[rewardId] = user.amount.mul(accRewardPerShare).div(1e12);\\n            }\\n\\n            if (_amount > 0) {\\n                user.rewardDebt[rewardId] = user.amount.sub(_amount).mul(accRewardPerShare).div(1e12);\\n            }\\n        }\\n        if (_amount > 0) {\\n            user.amount = user.amount.sub(_amount);\\n            pool.totalAmount = pool.totalAmount.sub(_amount);\\n            if (pool.proxyFarmer == address(0)) {\\n                pool.lpToken.safeTransfer(address(_user), _amount);\\n            }\\n        }\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) public nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        require(pool.proxyFarmer != address(0), \\\"nothing to withdraw\\\");\\n\\n        pool.totalAmount = pool.totalAmount.sub(user.amount);\\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\\n        user.amount = 0;\\n        for (uint256 rewardId = 0; rewardId < rewardSpecs.length; rewardId) {\\n            user.rewardDebt[rewardId] = 0;\\n        }\\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\\n    }\\n\\n    function setAdmin(address admin_) public onlyAdmin {\\n        require(admin_ != address(0), \\\"can not be zero address\\\");\\n        address previousAdmin = admin;\\n        admin = admin_;\\n\\n        emit AdminChanged(previousAdmin, admin_);\\n    }\\n}\\n\",\"keccak256\":\"0xbf927e92f472a3c3cea3e471005863aff35921e322372fe9d28403ec7573d840\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600060075534801561001557600080fd5b5060016000556126048061002a6000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80637bafb029116100c3578063d18df53c1161007c578063d18df53c1461030b578063e11f2f7d1461032b578063e15a003a14610370578063e2bbb15814610383578063f401426114610396578063f851a440146103a957600080fd5b80637bafb029146102695780637cd07e471461027c57806393f1a40b146102a7578063a3f30d27146102d2578063c4d66de8146102e5578063c71b4b43146102f857600080fd5b8063454b060811610115578063454b06081461020257806351eb05a6146102155780635312ea8e14610228578063630b5ba11461023b57806364482f7914610243578063704b6c021461025657600080fd5b8063081e3eda1461015d5780631526fe271461017457806317caf6f1146101be57806323cf3118146101c757806338cc39af146101dc578063441a3e70146101ef575b600080fd5b6004545b6040519081526020015b60405180910390f35b6101876101823660046120df565b6103c2565b604080516001600160a01b03968716815260208101959095528401929092529092166060820152608081019190915260a00161016b565b61016160075481565b6101da6101d5366004612110565b61040f565b005b6101da6101ea36600461212d565b61046a565b6101da6101fd36600461215f565b610700565b6101da6102103660046120df565b61070f565b6101da6102233660046120df565b6109a6565b6101da6102363660046120df565b610adc565b6101da610c2e565b6101da61025136600461218f565b610c55565b6101da610264366004612110565b610d15565b6101616102773660046121c8565b610df7565b60035461028f906001600160a01b031681565b6040516001600160a01b03909116815260200161016b565b6101616102b53660046121f4565b600660209081526000928352604080842090915290825290205481565b6101da6102e0366004612224565b610e82565b6101da6102f3366004612110565b610e92565b6101da610306366004612252565b610f20565b61031e6103193660046121f4565b611118565b60405161016b91906122a5565b61033e6103393660046120df565b61134e565b604080516001600160a01b0390961686526020860194909452928401919091526060830152608082015260a00161016b565b6101da61037e366004612224565b611399565b6101da61039136600461215f565b6113a4565b6101da6103a43660046122fd565b6113af565b60015461028f906201000090046001600160a01b031681565b600481815481106103d257600080fd5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b03938416955091939092169085565b6001546201000090046001600160a01b031633146104485760405162461bcd60e51b815260040161043f90612338565b60405180910390fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6001546201000090046001600160a01b0316331461049a5760405162461bcd60e51b815260040161043f90612338565b6000600285815481106104af576104af61235c565b90600052602060002090600502019050438160020154116105455780600201548314610545576040805162461bcd60e51b81526020600482015260248101919091527f63616e206e6f74206d6f6469667920737461727465644174426c6f636b20616660448201527f74657220726577617264732068617320626567616e20616c6c6f636174696e67606482015260840161043f565b4382116105af5760405162461bcd60e51b815260206004820152603260248201527f63616e206e6f74206d6f6469667920656e6465644174426c6f636b20746f2061604482015271103830b9ba10313637b1b590373ab6b132b960711b606482015260840161043f565b8282116105ce5760405162461bcd60e51b815260040161043f90612372565b6105d6610c2e565b6000846105e385856123da565b6105ed91906123f1565b82546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561063557600080fd5b505afa158015610649573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066d9190612410565b905082600401548161067f9190612429565b8211156106be576106b933308560040154848661069c91906123da565b6106a691906123da565b86546001600160a01b03169291906115a5565b6106ea565b60048301546106cd9082612429565b8210156106ea576106ea30338486600401548561069c9190612429565b5050600281019290925560038201556001015550565b61070b828233611610565b5050565b6001546201000090046001600160a01b0316331461073f5760405162461bcd60e51b815260040161043f90612338565b6003546001600160a01b031661078e5760405162461bcd60e51b815260206004820152601460248201527336b4b3b930ba329d1037379036b4b3b930ba37b960611b604482015260640161043f565b6000600482815481106107a3576107a361235c565b6000918252602082206005919091020180546040516370a0823160e01b81523060048201529193506001600160a01b0316919082906370a082319060240160206040518083038186803b1580156107f957600080fd5b505afa15801561080d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108319190612410565b60035490915061084e906001600160a01b0384811691168361198c565b60035460405163ce5494bb60e01b81526001600160a01b038481166004830152600092169063ce5494bb90602401602060405180830381600087803b15801561089657600080fd5b505af11580156108aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ce9190612441565b6040516370a0823160e01b81523060048201529091506001600160a01b038216906370a082319060240160206040518083038186803b15801561091057600080fd5b505afa158015610924573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109489190612410565b82146109855760405162461bcd60e51b815260206004820152600c60248201526b1b5a59dc985d194e8818985960a21b604482015260640161043f565b83546001600160a01b0319166001600160a01b039190911617909255505050565b6000600482815481106109bb576109bb61235c565b90600052602060002090600502019050806002015443116109da575050565b6004810154806109ef57504360029091015550565b60005b600254811015610ad057600060028281548110610a1157610a1161235c565b906000526020600020906005020190506000610a3285600201544385610df7565b90506000610a67600754610a618860010154610a5b876001015487611ab090919063ffffffff16565b90611ab0565b90611abc565b9050610a9f610a7f86610a618464e8d4a51000611ab0565b600089815260056020908152604080832089845290915290205490611ac8565b600088815260056020908152604080832088845290915290205550829150610ac890508161245e565b9150506109f2565b50504360029091015550565b60026000541415610aff5760405162461bcd60e51b815260040161043f90612479565b600260009081556004805483908110610b1a57610b1a61235c565b60009182526020808320858452600682526040808520338652909252922060036005909202909201908101549092506001600160a01b0316610b945760405162461bcd60e51b81526020600482015260136024820152726e6f7468696e6720746f20776974686472617760681b604482015260640161043f565b80546004830154610ba491611ad4565b600483015580548254610bc4916001600160a01b03909116903390611ae0565b60008082555b600254811015610bea576000818152600283016020526040812055610bca565b508054604051908152839033907fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959060200160405180910390a35050600160005550565b60045460005b8181101561070b57610c45816109a6565b610c4e8161245e565b9050610c34565b6001546201000090046001600160a01b03163314610c855760405162461bcd60e51b815260040161043f90612338565b8015610c9357610c93610c2e565b600060048481548110610ca857610ca861235c565b90600052602060002090600502016001015490508260048581548110610cd057610cd061235c565b906000526020600020906005020160010181905550828114610d0f57610d0b83610d0583600754611ad490919063ffffffff16565b90611ac8565b6007555b50505050565b6001546201000090046001600160a01b03163314610d455760405162461bcd60e51b815260040161043f90612338565b6001600160a01b038116610d9b5760405162461bcd60e51b815260206004820152601760248201527f63616e206e6f74206265207a65726f2061646472657373000000000000000000604482015260640161043f565b600180546001600160a01b038381166201000081810262010000600160b01b031985161790945560405193909204169182907f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f90600090a35050565b60008060028381548110610e0d57610e0d61235c565b906000526020600020906005020190508060020154841015610e33576000915050610e7b565b8060020154851015610e4757806002015494505b8060030154841115610e5b57806003015493505b83851115610e6d576000915050610e7b565b610e778486611ad4565b9150505b9392505050565b610e8d838383611b10565b505050565b6000610e9e6001611e04565b90508015610eb6576001805461ff0019166101001790555b6001805462010000600160b01b031916620100006001600160a01b03851602179055801561070b576001805461ff00191681556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b6001546201000090046001600160a01b03163314610f505760405162461bcd60e51b815260040161043f90612338565b8015610f5e57610f5e610c2e565b6001600160a01b03821615610fdd576001600160a01b03831615610fdd5760405162461bcd60e51b815260206004820152603060248201527f4c50546f6b656e2073686f756c6420626520616464726573732030207768656e60448201526f10383937bc34b2b2103330b936b2b91760811b606482015260840161043f565b6007544390610fec9086611ac8565b6007556040805160a0810182526001600160a01b0395861681526020810196875290810191825292841660608401908152600060808501818152600480546001810182559252945160059091027f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b810180549288166001600160a01b031993841617905596517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c88015591517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d870155517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19e8601805491909516911617909255517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19f9092019190915550565b60025460609060009067ffffffffffffffff811115611139576111396124b0565b60405190808252806020026020018201604052801561117e57816020015b60408051808201909152600080825260208201528152602001906001900390816111575790505b5090506000600485815481106111965761119661235c565b600091825260208083208884526006825260408085206001600160a01b038a1686529092529083206005909202019250905b600254811015611343576000600282815481106111e7576111e761235c565b906000526020600020906005020190508060020154431015611246576040805180820190915281546001600160a01b031681526000602082015285518690849081106112355761123561235c565b602002602001018190525050611331565b6000888152600560209081526040808320858452909152902054600485015460028601544311801561127757508015155b156112da57600061128d87600201544387610df7565b905060006112b6600754610a618a60010154610a5b896001015487611ab090919063ffffffff16565b90506112d56112ce84610a618464e8d4a51000611ab0565b8590611ac8565b935050505b6040805180820190915283546001600160a01b031681528554602082019061130d9064e8d4a5100090610a619087611ab0565b8152508785815181106113225761132261235c565b60200260200101819052505050505b8061133b8161245e565b9150506111c8565b509195945050505050565b6002818154811061135e57600080fd5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b0390931694509092909185565b610e8d838383611610565b61070b828233611b10565b6001546201000090046001600160a01b031633146113df5760405162461bcd60e51b815260040161043f90612338565b8181116113fe5760405162461bcd60e51b815260040161043f90612372565b600083116114615760405162461bcd60e51b815260206004820152602a60248201527f726577617264506572426c6f636b2073686f756c642062652067726561746572604482015269207468616e207a65726f60b01b606482015260840161043f565b61148d33308561147186866123da565b61147b91906123f1565b6001600160a01b0388169291906115a5565b6040805160a0810182526001600160a01b039586168152602081019485529081019283526060810191825260006080820181815260028054600181018255925291517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace600590920291820180546001600160a01b031916919097161790955592517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf85015590517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad0840155517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad1830155517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad290910155565b6040516001600160a01b0380851660248301528316604482015260648101829052610d0f9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611e8c565b600260005414156116335760405162461bcd60e51b815260040161043f90612479565b60026000908155600480548590811061164e5761164e61235c565b600091825260208083208784526006825260408085206001600160a01b038816865290925292208054600590920290920192508411156116d05760405162461bcd60e51b815260206004820152601e60248201527f77697468647261773a20496e73756666696369656e742062616c616e63650000604482015260640161043f565b60038201546001600160a01b0316156117385760038201546001600160a01b031633146117335760405162461bcd60e51b815260206004820152601160248201527027b7363c90383937bc3c903330b936b2b960791b604482015260640161043f565b611790565b336001600160a01b038416146117905760405162461bcd60e51b815260206004820152601b60248201527f43616e206e6f7420776974686472617720666f72206f74686572730000000000604482015260640161043f565b611799856109a6565b60005b6002548110156118f7576000600282815481106117bb576117bb61235c565b600091825260208083208a84526005808352604080862088875290935291909320548654929091029092019250156118a65760008381526002850160205260408120548554611820919061181a9064e8d4a5100090610a619087611ab0565b90611ad4565b9050801561187c578083600401600082825461183c9190612429565b9091555050600084815260018601602052604081208054839290611861908490612429565b9091555050825461187c906001600160a01b03168883611ae0565b84546118939064e8d4a5100090610a619085611ab0565b6000858152600287016020526040902055505b86156118e2576118d064e8d4a51000610a6183610a5b8b8960000154611ad490919063ffffffff16565b60008481526002860160205260409020555b505080806118ef9061245e565b91505061179c565b50831561194857805461190a9085611ad4565b8155600482015461191b9085611ad4565b600483015560038201546001600160a01b0316611948578154611948906001600160a01b03168486611ae0565b604051848152859033907ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568906020015b60405180910390a350506001600055505050565b801580611a155750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156119db57600080fd5b505afa1580156119ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a139190612410565b155b611a805760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161043f565b6040516001600160a01b038316602482015260448101829052610e8d90849063095ea7b360e01b906064016115d9565b6000610e7b82846123f1565b6000610e7b82846124c6565b6000610e7b8284612429565b6000610e7b82846123da565b6040516001600160a01b038316602482015260448101829052610e8d90849063a9059cbb60e01b906064016115d9565b60026000541415611b335760405162461bcd60e51b815260040161043f90612479565b600260009081556004805485908110611b4e57611b4e61235c565b6000918252602090912060059091020160038101549091506001600160a01b031615611bc95760038101546001600160a01b03163314611bc45760405162461bcd60e51b815260206004820152601160248201527027b7363c90383937bc3c903330b936b2b960791b604482015260640161043f565b611c21565b336001600160a01b03831614611c215760405162461bcd60e51b815260206004820152601a60248201527f43616e206e6f74206465706f73697420666f72206f7468657273000000000000604482015260640161043f565b60008481526006602090815260408083206001600160a01b03861684529091529020611c4c856109a6565b60005b600254811015611d7557600060028281548110611c6e57611c6e61235c565b600091825260208083208a8452600580835260408086208887529093529190932054865492909102909201925015611d2b5760008381526002850160205260408120548554611ccd919061181a9064e8d4a5100090610a619087611ab0565b90508015611d295780836004016000828254611ce99190612429565b9091555050600084815260018601602052604081208054839290611d0e908490612429565b90915550508254611d29906001600160a01b03168883611ae0565b505b611d4f64e8d4a51000610a6183610a5b8b8960000154611ac890919063ffffffff16565b600084815260028601602052604090205550819050611d6d8161245e565b915050611c4f565b508315611dc85760038201546001600160a01b0316611da5578154611da5906001600160a01b03168430876115a5565b6004820154611db49085611ac8565b60048301558054611dc59085611ac8565b81555b84836001600160a01b03167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a158660405161197891815260200190565b600154600090610100900460ff1615611e4d578160ff166001148015611e295750303b155b611e455760405162461bcd60e51b815260040161043f906124e8565b506000919050565b60015460ff808416911610611e745760405162461bcd60e51b815260040161043f906124e8565b506001805460ff191660ff9290921691909117815590565b6000611ee1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611f5e9092919063ffffffff16565b805190915015610e8d5780806020019051810190611eff9190612536565b610e8d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161043f565b6060611f6d8484600085611f75565b949350505050565b606082471015611fd65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161043f565b6001600160a01b0385163b61202d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161043f565b600080866001600160a01b03168587604051612049919061257f565b60006040518083038185875af1925050503d8060008114612086576040519150601f19603f3d011682016040523d82523d6000602084013e61208b565b606091505b509150915061209b8282866120a6565b979650505050505050565b606083156120b5575081610e7b565b8251156120c55782518084602001fd5b8160405162461bcd60e51b815260040161043f919061259b565b6000602082840312156120f157600080fd5b5035919050565b6001600160a01b038116811461210d57600080fd5b50565b60006020828403121561212257600080fd5b8135610e7b816120f8565b6000806000806080858703121561214357600080fd5b5050823594602084013594506040840135936060013592509050565b6000806040838503121561217257600080fd5b50508035926020909101359150565b801515811461210d57600080fd5b6000806000606084860312156121a457600080fd5b833592506020840135915060408401356121bd81612181565b809150509250925092565b6000806000606084860312156121dd57600080fd5b505081359360208301359350604090920135919050565b6000806040838503121561220757600080fd5b823591506020830135612219816120f8565b809150509250929050565b60008060006060848603121561223957600080fd5b833592506020840135915060408401356121bd816120f8565b6000806000806080858703121561226857600080fd5b84359350602085013561227a816120f8565b9250604085013561228a816120f8565b9150606085013561229a81612181565b939692955090935050565b602080825282518282018190526000919060409081850190868401855b828110156122f057815180516001600160a01b031685528601518685015292840192908501906001016122c2565b5091979650505050505050565b6000806000806080858703121561231357600080fd5b843561231e816120f8565b966020860135965060408601359560600135945092505050565b6020808252600a908201526927b7363c9030b236b4b760b11b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60208082526032908201527f656e6465644174426c6f636b2073686f756c642062652067726561746572207460408201527168616e20737461727465644174426c6f636b60701b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b6000828210156123ec576123ec6123c4565b500390565b600081600019048311821515161561240b5761240b6123c4565b500290565b60006020828403121561242257600080fd5b5051919050565b6000821982111561243c5761243c6123c4565b500190565b60006020828403121561245357600080fd5b8151610e7b816120f8565b6000600019821415612472576124726123c4565b5060010190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b634e487b7160e01b600052604160045260246000fd5b6000826124e357634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60006020828403121561254857600080fd5b8151610e7b81612181565b60005b8381101561256e578181015183820152602001612556565b83811115610d0f5750506000910152565b60008251612591818460208701612553565b9190910192915050565b60208152600082518060208401526125ba816040850160208701612553565b601f01601f1916919091016040019291505056fea26469706673582212202478d826ec171d87672f3de7f7fd78a76aed02703141a7a0488383dd71ea0ffe64736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1194,
        "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 6,
        "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
        "label": "_initialized",
        "offset": 0,
        "slot": "1",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
        "label": "_initializing",
        "offset": 1,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 5486,
        "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
        "label": "admin",
        "offset": 2,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5535,
        "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
        "label": "rewardSpecs",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(RewardSpec)5531_storage)dyn_storage"
      },
      {
        "astId": 5538,
        "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
        "label": "migrator",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IMigratorChef)5473"
      },
      {
        "astId": 5542,
        "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
        "label": "poolInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(PoolInfo)5513_storage)dyn_storage"
      },
      {
        "astId": 5548,
        "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
        "label": "poolsRewardsAccRewardsPerShare",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 5555,
        "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
        "label": "userInfo",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5499_storage))"
      },
      {
        "astId": 5558,
        "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)5513_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)5513_storage",
        "encoding": "dynamic_array",
        "label": "struct MultiRewardsMasterChef.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(RewardSpec)5531_storage)dyn_storage": {
        "base": "t_struct(RewardSpec)5531_storage",
        "encoding": "dynamic_array",
        "label": "struct MultiRewardsMasterChef.RewardSpec[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1887": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMigratorChef)5473": {
        "encoding": "inplace",
        "label": "contract IMigratorChef",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)5499_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MultiRewardsMasterChef.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)5499_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5499_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct MultiRewardsMasterChef.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)5499_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(PoolInfo)5513_storage": {
        "encoding": "inplace",
        "label": "struct MultiRewardsMasterChef.PoolInfo",
        "members": [
          {
            "astId": 5502,
            "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
            "label": "lpToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)1887"
          },
          {
            "astId": 5504,
            "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5506,
            "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5509,
            "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
            "label": "proxyFarmer",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 5512,
            "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
            "label": "totalAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(RewardSpec)5531_storage": {
        "encoding": "inplace",
        "label": "struct MultiRewardsMasterChef.RewardSpec",
        "members": [
          {
            "astId": 5522,
            "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)1887"
          },
          {
            "astId": 5524,
            "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
            "label": "rewardPerBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5526,
            "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
            "label": "startedAtBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5528,
            "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
            "label": "endedAtBlock",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5530,
            "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
            "label": "claimedAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(UserInfo)5499_storage": {
        "encoding": "inplace",
        "label": "struct MultiRewardsMasterChef.UserInfo",
        "members": [
          {
            "astId": 5488,
            "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5493,
            "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
            "label": "claimedRewards",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 5498,
            "contract": "contracts/MultiRewardsMasterChef.sol:MultiRewardsMasterChef",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}