{
  "address": "0x9f592Ddb01B27170dDe989921aC4ee60800f9CDa",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousPool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newPool",
          "type": "address"
        }
      ],
      "name": "SiblingPoolUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACC_REWARDS_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accRewardPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bond",
      "outputs": [
        {
          "internalType": "contract IExtendableBond",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bondRewardsSuspended",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bondToken",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimBonuses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user_",
          "type": "address"
        }
      ],
      "name": "getUserPendingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "bondToken_",
          "type": "address"
        },
        {
          "internalType": "contract IExtendableBond",
          "name": "bond_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdatedPoolAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpToken",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterChef",
      "outputs": [
        {
          "internalType": "contract IMultiRewardsMasterChef",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterChefPid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "suspended_",
          "type": "bool"
        }
      ],
      "name": "setBondRewardsSuspended",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "lpToken_",
          "type": "address"
        }
      ],
      "name": "setLpToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMultiRewardsMasterChef",
          "name": "masterChef_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "masterChefPid_",
          "type": "uint256"
        }
      ],
      "name": "setMasterChef",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBondFarmingPool",
          "name": "siblingPool_",
          "type": "address"
        }
      ],
      "name": "setSiblingPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "siblingPool",
      "outputs": [
        {
          "internalType": "contract IBondFarmingPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "stakeForUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLpAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPendingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unstakeAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "usersInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lpAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedRewards",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa5ad4f2becb65c9d366278b00e03583c0178df3b69ec73ee2b291e012d9c72d7",
  "receipt": {
    "to": null,
    "from": "0xe7a2b8C8feD53713F69227e6c3d2384E80CF88a6",
    "contractAddress": "0x9f592Ddb01B27170dDe989921aC4ee60800f9CDa",
    "transactionIndex": 2,
    "gasUsed": "1655128",
    "logsBloom": "0x
    "blockHash": "0x6083201591b3847c4a4b6df3a2e9b5c12a8439bbaf21402314d1752c95c33680",
    "transactionHash": "0xa5ad4f2becb65c9d366278b00e03583c0178df3b69ec73ee2b291e012d9c72d7",
    "logs": [],
    "blockNumber": 20805030,
    "cumulativeGasUsed": "1796581",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 10,
  "solcInputHash": "56108d1e80ac4df0de564c253faf07c8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousPool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"SiblingPoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACC_REWARDS_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accRewardPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bond\",\"outputs\":[{\"internalType\":\"contract IExtendableBond\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondRewardsSuspended\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBonuses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"getUserPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"bondToken_\",\"type\":\"address\"},{\"internalType\":\"contract IExtendableBond\",\"name\":\"bond_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdatedPoolAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterChef\",\"outputs\":[{\"internalType\":\"contract IMultiRewardsMasterChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterChefPid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"suspended_\",\"type\":\"bool\"}],\"name\":\"setBondRewardsSuspended\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"lpToken_\",\"type\":\"address\"}],\"name\":\"setLpToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMultiRewardsMasterChef\",\"name\":\"masterChef_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"masterChefPid_\",\"type\":\"uint256\"}],\"name\":\"setMasterChef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBondFarmingPool\",\"name\":\"siblingPool_\",\"type\":\"address\"}],\"name\":\"setSiblingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"siblingPool\",\"outputs\":[{\"internalType\":\"contract IBondFarmingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"stakeForUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLpAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usersInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getUserPendingRewards(address)\":{\"details\":\"get pending rewards by specific user\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"totalPendingRewards()\":{\"details\":\"distribute single bond pool first, then LP pool will get the remaining rewards. see _updatePools\"},\"updatePool()\":{\"details\":\"see: _updatePool\"}},\"stateVariables\":{\"accRewardPerShare\":{\"details\":\"accumulated bond token rewards of each lp token.\"},\"bondRewardsSuspended\":{\"details\":\"_updatePools() no longer works after bondRewardsSuspended is true.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bondRewardsSuspended()\":{\"notice\":\"mark bond reward is suspended. If the LP Token needs to be migrated, such as from pancake to ESP, the bond rewards will be suspended.you can not stake anymore when bond rewards has been suspended.\"},\"unstake(uint256)\":{\"notice\":\"unstake by shares\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BondLPFarmingPool.sol\":\"BondLPFarmingPool\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xd0a917e32d1251a9b2f1dea15e932815d5382e64e6b0a18104664a6cc774cd70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@private/shared/libs/Adminable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nabstract contract Adminable {\\n    event AdminUpdated(address indexed user, address indexed newAdmin);\\n\\n    address public admin;\\n\\n    modifier onlyAdmin() virtual {\\n        require(msg.sender == admin, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    function setAdmin(address newAdmin) public virtual onlyAdmin {\\n        _setAdmin(newAdmin);\\n    }\\n\\n    function _setAdmin(address newAdmin) internal {\\n        require(newAdmin != address(0), \\\"Can not set admin to zero address\\\");\\n        admin = newAdmin;\\n\\n        emit AdminUpdated(msg.sender, newAdmin);\\n    }\\n}\\n\",\"keccak256\":\"0xe47c97c0e3edad2d1df3e664376a7bb46e1aaf51b4c4acc73c4a2cfdc747185f\",\"license\":\"GPL-3.0\"},\"@private/shared/libs/DuetMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nlibrary DuetMath {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0;\\n            // Least significant 256 bits of the product\\n            uint256 prod1;\\n            // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = denominator**3;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse;\\n            // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse;\\n            // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse;\\n            // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse;\\n            // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse;\\n            // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse;\\n            // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding direction\\n    ) public pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (direction == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x260a4e00bb4a5105a81d9bf077a9730c660bf29969b7ab3f646fa7bc22fb73f0\",\"license\":\"GPL-3.0\"},\"@private/shared/libs/Keepable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nabstract contract Keepable {\\n    event KeeperUpdated(address indexed user, address indexed newKeeper);\\n\\n    address public keeper;\\n\\n    modifier onlyKeeper() virtual {\\n        require(msg.sender == keeper, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    function _setKeeper(address newKeeper_) internal {\\n        keeper = newKeeper_;\\n\\n        emit KeeperUpdated(msg.sender, newKeeper_);\\n    }\\n}\\n\",\"keccak256\":\"0x163bcd590e7ae707e3f231e3e49eec0394e66ded70f8b15491b6d4347e322739\",\"license\":\"GPL-3.0\"},\"contracts/BondLPFarmingPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\n\\nimport \\\"@private/shared/libs/DuetMath.sol\\\";\\nimport \\\"@private/shared/libs/Adminable.sol\\\";\\n\\nimport \\\"./ExtendableBond.sol\\\";\\nimport \\\"./interfaces/IMultiRewardsMasterChef.sol\\\";\\nimport \\\"./interfaces/IBondFarmingPool.sol\\\";\\nimport \\\"./interfaces/IExtendableBond.sol\\\";\\n\\ncontract BondLPFarmingPool is ReentrancyGuardUpgradeable, PausableUpgradeable, Adminable, IBondFarmingPool {\\n    IERC20Upgradeable public bondToken;\\n    IERC20Upgradeable public lpToken;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    IExtendableBond public bond;\\n\\n    IBondFarmingPool public siblingPool;\\n    uint256 public lastUpdatedPoolAt = 0;\\n\\n    IMultiRewardsMasterChef public masterChef;\\n\\n    uint256 public masterChefPid;\\n\\n    /**\\n     * @dev accumulated bond token rewards of each lp token.\\n     */\\n    uint256 public accRewardPerShare;\\n\\n    uint256 public constant ACC_REWARDS_PRECISION = 1e12;\\n\\n    uint256 public totalLpAmount;\\n    /**\\n     * @notice mark bond reward is suspended. If the LP Token needs to be migrated, such as from pancake to ESP, the bond rewards will be suspended.\\n     * @notice you can not stake anymore when bond rewards has been suspended.\\n     * @dev _updatePools() no longer works after bondRewardsSuspended is true.\\n     */\\n    bool public bondRewardsSuspended = false;\\n\\n    struct UserInfo {\\n        /**\\n         * @dev lp amount deposited by user.\\n         */\\n        uint256 lpAmount;\\n        /**\\n         * @dev like sushi rewardDebt\\n         */\\n        uint256 rewardDebt;\\n        /**\\n         * @dev Rewards credited to rewardDebt but not yet claimed\\n         */\\n        uint256 pendingRewards;\\n        /**\\n         * @dev claimed rewards. for 'earned to date' calculation.\\n         */\\n        uint256 claimedRewards;\\n    }\\n\\n    mapping(address => UserInfo) public usersInfo;\\n\\n    event Staked(address indexed user, uint256 amount);\\n    event Unstaked(address indexed user, uint256 amount);\\n    event SiblingPoolUpdated(address indexed previousPool, address indexed newPool);\\n\\n    function initialize(\\n        IERC20Upgradeable bondToken_,\\n        IExtendableBond bond_,\\n        address admin_\\n    ) public initializer {\\n        __ReentrancyGuard_init();\\n        __Pausable_init();\\n        _setAdmin(admin_);\\n        bondToken = bondToken_;\\n        bond = bond_;\\n    }\\n\\n    function setLpToken(IERC20Upgradeable lpToken_) public onlyAdmin {\\n        lpToken = lpToken_;\\n    }\\n\\n    function setMasterChef(IMultiRewardsMasterChef masterChef_, uint256 masterChefPid_) public onlyAdmin {\\n        masterChef = masterChef_;\\n        masterChefPid = masterChefPid_;\\n    }\\n\\n    /**\\n     * @dev see: _updatePool\\n     */\\n    function updatePool() external {\\n        require(\\n            msg.sender == address(siblingPool) || msg.sender == address(bond),\\n            \\\"BondLPFarmingPool: Calling from sibling pool or bond only\\\"\\n        );\\n        _updatePool();\\n    }\\n\\n    /**\\n     * @dev allocate pending rewards.\\n     */\\n    function _updatePool() internal {\\n        // Single bond token farming rewards base on  'bond token mount in pool' / 'total bond token supply' * 'total underlying rewards' and remaining rewards for LP pools.\\n        // So single bond farming pool should be updated before LP's.\\n        require(\\n            siblingPool.lastUpdatedPoolAt() > lastUpdatedPoolAt ||\\n                (siblingPool.lastUpdatedPoolAt() == lastUpdatedPoolAt && lastUpdatedPoolAt == block.number),\\n            \\\"update bond pool firstly.\\\"\\n        );\\n        uint256 pendingRewards = totalPendingRewards();\\n        lastUpdatedPoolAt = block.number;\\n        _harvestRemote();\\n        // no rewards will be distributed to the LP Pool when it's empty.\\n        // In this case, the single bond farming pool still distributes its rewards proportionally,\\n        // but its rewards will be expanded every time the pools are updated.\\n        // Because the remaining rewards is not distributed to the LP pool\\n        // The first user (start with totalLpAmount = 0) to enter the LP pool will receive this part of the undistributed rewards.\\n        // But this case is very rare and usually doesn't last long.\\n        if (pendingRewards <= 0 || totalLpAmount <= 0) {\\n            return;\\n        }\\n        uint256 feeAmount = bond.mintBondTokenForRewards(address(this), pendingRewards);\\n        accRewardPerShare += ((pendingRewards - feeAmount) * ACC_REWARDS_PRECISION) / totalLpAmount;\\n    }\\n\\n    /**\\n     * @dev distribute single bond pool first, then LP pool will get the remaining rewards. see _updatePools\\n     */\\n    function totalPendingRewards() public view virtual returns (uint256) {\\n        if (bondRewardsSuspended) {\\n            return 0;\\n        }\\n        uint256 totalBondPendingRewards = bond.totalPendingRewards();\\n        if (totalBondPendingRewards <= 0) {\\n            return 0;\\n        }\\n        return totalBondPendingRewards - siblingPool.totalPendingRewards();\\n    }\\n\\n    /**\\n     * @dev get pending rewards by specific user\\n     */\\n    function getUserPendingRewards(address user_) public view virtual returns (uint256) {\\n        UserInfo storage userInfo = usersInfo[user_];\\n        if (totalLpAmount <= 0 || userInfo.lpAmount <= 0) {\\n            return 0;\\n        }\\n        uint256 totalPendingRewards = totalPendingRewards();\\n        uint256 latestAccRewardPerShare = ((totalPendingRewards - bond.calculateFeeAmount(totalPendingRewards)) *\\n            ACC_REWARDS_PRECISION) /\\n            totalLpAmount +\\n            accRewardPerShare;\\n        return\\n            (latestAccRewardPerShare * userInfo.lpAmount) /\\n            ACC_REWARDS_PRECISION +\\n            userInfo.pendingRewards -\\n            userInfo.rewardDebt;\\n    }\\n\\n    function setSiblingPool(IBondFarmingPool siblingPool_) public onlyAdmin {\\n        require(\\n            (address(siblingPool_.siblingPool()) == address(0) ||\\n                address(siblingPool_.siblingPool()) == address(this)) && (address(siblingPool_) != address(this)),\\n            \\\"Invalid sibling\\\"\\n        );\\n        emit SiblingPoolUpdated(address(siblingPool), address(siblingPool_));\\n        siblingPool = siblingPool_;\\n    }\\n\\n    function stake(uint256 amount_) public whenNotPaused {\\n        require(!bondRewardsSuspended, \\\"Reward suspended. Please follow the project announcement \\\");\\n        address user = msg.sender;\\n        stakeForUser(user, amount_);\\n    }\\n\\n    function _updatePools() internal {\\n        if (bondRewardsSuspended) {\\n            return;\\n        }\\n        siblingPool.updatePool();\\n        _updatePool();\\n    }\\n\\n    function _stakeRemote(address user_, uint256 amount_) internal virtual {}\\n\\n    function _unstakeRemote(address user_, uint256 amount_) internal virtual {}\\n\\n    function _harvestRemote() internal virtual {}\\n\\n    function stakeForUser(address user_, uint256 amount_) public whenNotPaused nonReentrant {\\n        require(amount_ > 0, \\\"nothing to stake\\\");\\n        // allocate pending rewards of all sibling pools to correct reward ratio between them.\\n        _updatePools();\\n        UserInfo storage userInfo = usersInfo[user_];\\n        if (userInfo.lpAmount > 0) {\\n            uint256 sharesReward = (accRewardPerShare * userInfo.lpAmount) / ACC_REWARDS_PRECISION;\\n\\n\\n\\n            userInfo.pendingRewards += sharesReward - userInfo.rewardDebt;\\n\\n            userInfo.rewardDebt = (accRewardPerShare * (userInfo.lpAmount + amount_)) / ACC_REWARDS_PRECISION;\\n        } else {\\n            userInfo.rewardDebt = (accRewardPerShare * amount_) / ACC_REWARDS_PRECISION;\\n        }\\n        lpToken.safeTransferFrom(msg.sender, address(this), amount_);\\n        _stakeRemote(user_, amount_);\\n        userInfo.lpAmount += amount_;\\n        totalLpAmount += amount_;\\n        masterChef.depositForUser(masterChefPid, amount_, user_);\\n        emit Staked(user_, amount_);\\n    }\\n\\n    /**\\n     * @notice unstake by shares\\n     */\\n    function unstake(uint256 amount_) public whenNotPaused nonReentrant {\\n        address user = msg.sender;\\n        UserInfo storage userInfo = usersInfo[user];\\n        require(userInfo.lpAmount >= amount_ && userInfo.lpAmount > 0, \\\"unstake amount exceeds owned amount\\\");\\n\\n        // allocate pending rewards of all sibling pools to correct reward ratio between them.\\n        _updatePools();\\n\\n        uint256 sharesReward = (accRewardPerShare * userInfo.lpAmount) / ACC_REWARDS_PRECISION;\\n\\n        uint256 pendingRewards = userInfo.pendingRewards + sharesReward - userInfo.rewardDebt;\\n        uint256 bondBalance = bondToken.balanceOf(address(this));\\n        if (pendingRewards > bondBalance) {\\n            pendingRewards = bondBalance;\\n        }\\n        userInfo.rewardDebt = sharesReward;\\n        userInfo.pendingRewards = 0;\\n\\n\\n        _unstakeRemote(user, amount_);\\n        if (amount_ > 0) {\\n            userInfo.rewardDebt = (accRewardPerShare * (userInfo.lpAmount - amount_)) / ACC_REWARDS_PRECISION;\\n            userInfo.lpAmount -= amount_;\\n            totalLpAmount -= amount_;\\n            // send staked assets\\n            lpToken.safeTransfer(user, amount_);\\n        }\\n\\n        if (pendingRewards > 0) {\\n            // send rewards\\n            bondToken.safeTransfer(user, pendingRewards);\\n        }\\n        userInfo.claimedRewards += pendingRewards;\\n        masterChef.withdrawForUser(masterChefPid, amount_, user);\\n\\n        emit Unstaked(user, amount_);\\n    }\\n\\n    function unstakeAll() public {\\n        require(usersInfo[msg.sender].lpAmount > 0, \\\"nothing to unstake\\\");\\n        unstake(usersInfo[msg.sender].lpAmount);\\n    }\\n\\n    function setBondRewardsSuspended(bool suspended_) public onlyAdmin {\\n        _updatePools();\\n        bondRewardsSuspended = suspended_;\\n    }\\n\\n    function claimBonuses() public {\\n        unstake(0);\\n    }\\n}\\n\",\"keccak256\":\"0x1f7d931673f5f5adbbaaea508d55f7e5e8797f0972768fc804190f4e7b7585f5\",\"license\":\"GPL-3.0\"},\"contracts/BondToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract BondToken is ERC20, Ownable {\\n    address public minter;\\n\\n    modifier onlyMinter() {\\n        require(minter == msg.sender, \\\"Minter only\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address minter_\\n    ) ERC20(name_, symbol_) Ownable() {\\n        minter = minter_;\\n    }\\n\\n    function setMinter(address minter_) public onlyOwner {\\n        require(minter_ != address(0), \\\"Cant set minter to zero address\\\");\\n        minter = minter_;\\n    }\\n\\n    function mint(address to_, uint256 amount_) external onlyMinter {\\n        require(amount_ > 0, \\\"Nothing to mint\\\");\\n        _mint(to_, amount_);\\n    }\\n\\n    function burnFrom(address account_, uint256 amount_) external onlyMinter {\\n        require(amount_ > 0, \\\"Nothing to burn\\\");\\n        _burn(account_, amount_);\\n    }\\n}\\n\",\"keccak256\":\"0x31de7589d016932080f778249f0eeb90aeda14839a8a84c37cd23b5500c46960\",\"license\":\"GPL-3.0\"},\"contracts/ExtendableBond.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"@private/shared/libs/Adminable.sol\\\";\\nimport \\\"@private/shared/libs/Keepable.sol\\\";\\n\\nimport \\\"./BondToken.sol\\\";\\nimport \\\"./interfaces/IBondFarmingPool.sol\\\";\\nimport \\\"./interfaces/IExtendableBond.sol\\\";\\nimport \\\"./interfaces/IBondTokenUpgradeable.sol\\\";\\n\\ncontract ExtendableBond is IExtendableBond, ReentrancyGuardUpgradeable, PausableUpgradeable, Adminable, Keepable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using SafeERC20Upgradeable for IBondTokenUpgradeable;\\n    /**\\n     * Bond token contract\\n     */\\n    IBondTokenUpgradeable public bondToken;\\n\\n    /**\\n     * Bond underlying asset\\n     */\\n    IERC20Upgradeable public underlyingToken;\\n\\n    /**\\n     * @dev factor for percentage that described in integer. It makes 10000 means 100%, and 20 means 0.2%;\\n     *      Calculation formula: x * percentage / PERCENTAGE_FACTOR\\n     */\\n    uint16 public constant PERCENTAGE_FACTOR = 10000;\\n    IBondFarmingPool public bondFarmingPool;\\n    IBondFarmingPool public bondLPFarmingPool;\\n    /**\\n     * Emitted when someone convert underlying token to the bond.\\n     */\\n    event Converted(uint256 amount, address indexed user);\\n\\n    event MintedBondTokenForRewards(address indexed to, uint256 amount);\\n\\n    struct FeeSpec {\\n        string desc;\\n        uint16 rate;\\n        address receiver;\\n    }\\n\\n    /**\\n     * Fee specifications\\n     */\\n    FeeSpec[] public feeSpecs;\\n\\n    struct CheckPoints {\\n        bool convertable;\\n        uint256 convertableFrom;\\n        uint256 convertableEnd;\\n        bool redeemable;\\n        uint256 redeemableFrom;\\n        uint256 redeemableEnd;\\n        uint256 maturity;\\n    }\\n\\n    CheckPoints public checkPoints;\\n    modifier onlyAdminOrKeeper() virtual {\\n        require(msg.sender == admin || msg.sender == keeper, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    function initialize(\\n        IBondTokenUpgradeable bondToken_,\\n        IERC20Upgradeable underlyingToken_,\\n        address admin_\\n    ) public initializer {\\n        require(admin_ != address(0), \\\"Cant set admin to zero address\\\");\\n        __Pausable_init();\\n        __ReentrancyGuard_init();\\n        _setAdmin(msg.sender);\\n\\n        bondToken = bondToken_;\\n        underlyingToken = underlyingToken_;\\n    }\\n\\n    function feeSpecsLength() public view returns (uint256) {\\n        return feeSpecs.length;\\n    }\\n\\n    /**\\n     * @notice Underlying token amount that hold in current contract.\\n     */\\n    function underlyingAmount() public view returns (uint256) {\\n        return underlyingToken.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice total underlying token amount, including hold in current contract and remote\\n     */\\n    function totalUnderlyingAmount() public view returns (uint256) {\\n        return underlyingAmount() + remoteUnderlyingAmount();\\n    }\\n\\n    /**\\n     * @dev Total pending rewards for bond. May be negative in some unexpected circumstances,\\n     *      such as remote underlying amount has unexpectedly decreased makes bond token over issued.\\n     */\\n    function totalPendingRewards() public view returns (uint256) {\\n        uint256 underlying = totalUnderlyingAmount();\\n        uint256 bondAmount = totalBondTokenAmount();\\n        if (bondAmount >= underlying) {\\n            return 0;\\n        }\\n        return underlying - bondAmount;\\n    }\\n\\n    function calculateFeeAmount(uint256 amount_) public view returns (uint256) {\\n        if (amount_ <= 0) {\\n            return 0;\\n        }\\n        uint256 totalFeeAmount = 0;\\n        for (uint256 i = 0; i < feeSpecs.length; i++) {\\n            FeeSpec storage feeSpec = feeSpecs[i];\\n            uint256 feeAmount = (amount_ * feeSpec.rate) / PERCENTAGE_FACTOR;\\n\\n            if (feeAmount <= 0) {\\n                continue;\\n            }\\n            totalFeeAmount += feeAmount;\\n        }\\n        return totalFeeAmount;\\n    }\\n\\n    /**\\n     * @dev mint bond token for rewards and allocate fees.\\n     */\\n    function mintBondTokenForRewards(address to_, uint256 amount_) public returns (uint256 totalFeeAmount) {\\n        require(\\n            msg.sender == address(bondFarmingPool) || msg.sender == address(bondLPFarmingPool),\\n            \\\"only from farming pool\\\"\\n        );\\n        require(totalBondTokenAmount() + amount_ <= totalUnderlyingAmount(), \\\"Can not over issue\\\");\\n\\n        // nothing to happen when reward amount is zero.\\n        if (amount_ <= 0) {\\n            return 0;\\n        }\\n\\n        uint256 amountToTarget = amount_;\\n        // allocate fees.\\n        for (uint256 i = 0; i < feeSpecs.length; i++) {\\n            FeeSpec storage feeSpec = feeSpecs[i];\\n            uint256 feeAmount = (amountToTarget * feeSpec.rate) / PERCENTAGE_FACTOR;\\n\\n            if (feeAmount <= 0) {\\n                continue;\\n            }\\n            amountToTarget -= feeAmount;\\n            bondToken.mint(feeSpec.receiver, feeAmount);\\n        }\\n\\n        if (amountToTarget > 0) {\\n            bondToken.mint(to_, amountToTarget);\\n        }\\n\\n        emit MintedBondTokenForRewards(to_, amount_);\\n        return amount_ - amountToTarget;\\n    }\\n\\n    /**\\n     * Bond token total amount.\\n     */\\n    function totalBondTokenAmount() public view returns (uint256) {\\n        return bondToken.totalSupply();\\n    }\\n\\n    /**\\n     * calculate remote underlying token amount.\\n     */\\n    function remoteUnderlyingAmount() public view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Redeem all my bond tokens to underlying tokens.\\n     */\\n    function redeemAll() external whenNotPaused {\\n        redeem(bondToken.balanceOf(msg.sender));\\n    }\\n\\n    /**\\n     * @dev Redeem specific amount of my bond tokens.\\n     * @param amount_ amount to redeem\\n     */\\n    function redeem(uint256 amount_) public whenNotPaused nonReentrant {\\n        require(amount_ > 0, \\\"Nothing to redeem\\\");\\n        require(\\n            checkPoints.redeemable &&\\n                block.timestamp >= checkPoints.redeemableFrom &&\\n                block.timestamp <= checkPoints.redeemableEnd &&\\n                block.timestamp > checkPoints.convertableEnd,\\n            \\\"Can not redeem at this time.\\\"\\n        );\\n\\n        address user = msg.sender;\\n        uint256 userBondTokenBalance = bondToken.balanceOf(user);\\n        require(amount_ <= userBondTokenBalance, \\\"Insufficient balance\\\");\\n\\n        // burn user's bond token\\n        bondToken.burnFrom(user, amount_);\\n\\n        uint256 underlyingTokenAmount = underlyingToken.balanceOf(address(this));\\n\\n        if (underlyingTokenAmount < amount_) {\\n            _withdrawFromRemote(amount_ - underlyingTokenAmount);\\n        }\\n        // for precision issue\\n        // The underlying asset may be calculated on a share basis, and the amount withdrawn may vary slightly\\n        if (amount_ > underlyingToken.balanceOf(address(this))) {\\n            underlyingToken.safeTransfer(user, underlyingToken.balanceOf(address(this)));\\n        } else {\\n            underlyingToken.safeTransfer(user, amount_);\\n        }\\n\\n    }\\n\\n    function _withdrawFromRemote(uint256 amount_) internal virtual {}\\n\\n    /**\\n     * @dev convert underlying token to bond token to current user\\n     * @param amount_ amount of underlying token to convert\\n     */\\n    function convert(uint256 amount_) external whenNotPaused {\\n        require(amount_ > 0, \\\"Nothing to convert\\\");\\n\\n        _convertOperation(amount_, msg.sender);\\n    }\\n\\n    function requireConvertable() internal view {\\n        require(\\n            checkPoints.convertable &&\\n                block.timestamp >= checkPoints.convertableFrom &&\\n                block.timestamp <= checkPoints.convertableEnd &&\\n                block.timestamp < checkPoints.redeemableFrom,\\n            \\\"Can not convert at this time.\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev distribute pending rewards.\\n     */\\n    function _updateFarmingPools() internal {\\n        bondFarmingPool.updatePool();\\n        bondLPFarmingPool.updatePool();\\n    }\\n\\n    function setFarmingPools(IBondFarmingPool bondPool_, IBondFarmingPool lpPool_) public onlyAdmin {\\n        require(address(bondPool_) != address(0) && address(bondPool_) != address(lpPool_), \\\"invalid farming pools\\\");\\n        bondFarmingPool = bondPool_;\\n        bondLPFarmingPool = lpPool_;\\n    }\\n\\n    /**\\n     * @dev convert underlying token to bond token and stake to bondFarmingPool for current user\\n     */\\n    function convertAndStake(uint256 amount_) external whenNotPaused nonReentrant {\\n        require(amount_ > 0, \\\"Nothing to convert\\\");\\n        requireConvertable();\\n        // Single bond token farming rewards base on  'bond token mount in pool' / 'total bond token supply' * 'total underlying rewards'  (remaining rewards for LP pools)\\n        // In order to distribute pending rewards to old shares, bondToken farming pools should be updated when new bondToken converted.\\n        _updateFarmingPools();\\n\\n        address user = msg.sender;\\n        underlyingToken.safeTransferFrom(user, address(this), amount_);\\n        _depositRemote(amount_);\\n        // 1:1 mint bond token to current contract\\n        bondToken.mint(address(this), amount_);\\n        bondToken.safeApprove(address(bondFarmingPool), amount_);\\n        // stake to bondFarmingPool\\n        bondFarmingPool.stakeForUser(user, amount_);\\n        emit Converted(amount_, user);\\n    }\\n\\n    function _depositRemote(uint256 amount_) internal virtual {}\\n\\n    /**\\n     * @dev convert underlying token to bond token to specific user\\n     */\\n    function _convertOperation(uint256 amount_, address user_) internal nonReentrant {\\n        requireConvertable();\\n        // Single bond token farming rewards base on  'bond token mount in pool' / 'total bond token supply' * 'total underlying rewards'   (remaining rewards for LP pools)\\n        // In order to distribute pending rewards to old shares, bondToken farming pools should be updated when new bondToken converted.\\n        _updateFarmingPools();\\n\\n        underlyingToken.safeTransferFrom(user_, address(this), amount_);\\n        _depositRemote(amount_);\\n        // 1:1 mint bond token to user\\n        bondToken.mint(user_, amount_);\\n        emit Converted(amount_, user_);\\n    }\\n\\n    /**\\n     * @dev update checkPoints\\n     * @param checkPoints_ new checkpoints\\n     */\\n    function updateCheckPoints(CheckPoints calldata checkPoints_) public onlyAdminOrKeeper {\\n        require(checkPoints_.convertableFrom > 0, \\\"convertableFrom must be greater than 0\\\");\\n        require(\\n            checkPoints_.convertableFrom < checkPoints_.convertableEnd,\\n            \\\"redeemableFrom must be earlier than convertableEnd\\\"\\n        );\\n        require(\\n            checkPoints_.redeemableFrom > checkPoints_.convertableEnd &&\\n                checkPoints_.redeemableFrom >= checkPoints_.maturity,\\n            \\\"redeemableFrom must be later than convertableEnd and maturity\\\"\\n        );\\n        require(\\n            checkPoints_.redeemableEnd > checkPoints_.redeemableFrom,\\n            \\\"redeemableEnd must be later than redeemableFrom\\\"\\n        );\\n        checkPoints = checkPoints_;\\n    }\\n\\n    function setRedeemable(bool redeemable_) external onlyAdminOrKeeper {\\n        checkPoints.redeemable = redeemable_;\\n    }\\n\\n    function setConvertable(bool convertable_) external onlyAdminOrKeeper {\\n        checkPoints.convertable = convertable_;\\n    }\\n\\n    /**\\n     * @dev emergency transfer underlying token for security issue or bug encounted.\\n     */\\n    function emergencyTransferUnderlyingTokens(address to_) external onlyAdmin {\\n        checkPoints.convertable = false;\\n        checkPoints.redeemable = false;\\n        underlyingToken.safeTransfer(to_, underlyingAmount());\\n    }\\n\\n    /**\\n     * @notice add fee specification\\n     */\\n    function addFeeSpec(FeeSpec calldata feeSpec_) external onlyAdmin {\\n        require(feeSpecs.length < 5, \\\"Too many fee specs\\\");\\n        require(feeSpec_.rate > 0, \\\"Fee rate is too low\\\");\\n        feeSpecs.push(feeSpec_);\\n        uint256 totalFeeRate = 0;\\n        for (uint256 i = 0; i < feeSpecs.length; i++) {\\n            totalFeeRate += feeSpecs[i].rate;\\n        }\\n        require(totalFeeRate <= PERCENTAGE_FACTOR, \\\"Total fee rate greater than 100%.\\\");\\n    }\\n\\n    /**\\n     * @notice update fee specification\\n     */\\n    function setFeeSpec(uint256 feeId_, FeeSpec calldata feeSpec_) external onlyAdmin {\\n        require(feeSpec_.rate > 0, \\\"Fee rate is too low\\\");\\n        feeSpecs[feeId_] = feeSpec_;\\n        uint256 totalFeeRate = 0;\\n        for (uint256 i = 0; i < feeSpecs.length; i++) {\\n            totalFeeRate += feeSpecs[i].rate;\\n        }\\n        require(totalFeeRate <= PERCENTAGE_FACTOR, \\\"Total fee rate greater than 100%.\\\");\\n    }\\n\\n    function removeFeeSpec(uint256 feeSpecIndex_) external onlyAdmin {\\n        uint256 length = feeSpecs.length;\\n        require(feeSpecIndex_ >=0 && feeSpecIndex_ < length, \\\"Invalid Index\\\");\\n        feeSpecs[feeSpecIndex_] = feeSpecs[length - 1];\\n        feeSpecs.pop();\\n    }\\n\\n    function depositToRemote(uint256 amount_) public onlyAdminOrKeeper {\\n        _depositRemote(amount_);\\n    }\\n\\n    function depositAllToRemote() public onlyAdminOrKeeper {\\n        depositToRemote(underlyingToken.balanceOf(address(this)));\\n    }\\n\\n    function setKeeper(address newKeeper) external onlyAdmin {\\n        _setKeeper(newKeeper);\\n    }\\n\\n    /**\\n     * @notice Trigger stopped state\\n     * @dev Only possible when contract not paused.\\n     */\\n    function pause() external onlyAdmin whenNotPaused {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Return to normal state\\n     * @dev Only possible when contract is paused.\\n     */\\n    function unpause() external onlyAdmin whenPaused {\\n        _unpause();\\n    }\\n\\n    function burnBondToken(uint256 amount_) public onlyAdmin {\\n        bondToken.burnFrom(msg.sender, amount_);\\n    }\\n}\\n\",\"keccak256\":\"0x5390230b127f83d4fb62434158883547ba6e7dbe52e8eba9a0d544b4652d417d\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IBondFarmingPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\ninterface IBondFarmingPool {\\n    function stake(uint256 amount_) external;\\n\\n    function stakeForUser(address user_, uint256 amount_) external;\\n\\n    function updatePool() external;\\n\\n    function totalPendingRewards() external view returns (uint256);\\n\\n    function lastUpdatedPoolAt() external view returns (uint256);\\n\\n    function setSiblingPool(IBondFarmingPool siblingPool_) external;\\n\\n    function siblingPool() external view returns (IBondFarmingPool);\\n}\\n\",\"keccak256\":\"0xe750b6743942407f8ed056fea9a0d247dd9960fba5d162d473df756507422d25\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IBondTokenUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IBondTokenUpgradeable is IERC20Upgradeable {\\n    function mint(address to_, uint256 amount_) external;\\n\\n    function burnFrom(address account_, uint256 amount_) external;\\n}\\n\",\"keccak256\":\"0xbd3800608a213fc36e168a16fe69b40a82e4c3feb21e1993cefc5d219511b77e\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IExtendableBond.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\ninterface IExtendableBond {\\n    function totalPendingRewards() external view returns (uint256);\\n\\n    function mintBondTokenForRewards(address to_, uint256 amount_) external returns (uint256);\\n\\n    function calculateFeeAmount(uint256 amount_) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfb9d5375247b1737be691c4872939bd4e7a969ff59a926abb0fcf76a3f9db2ad\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IMultiRewardsMasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\ninterface IMultiRewardsMasterChef {\\n    function depositForUser(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address user_\\n    ) external;\\n\\n    function withdrawForUser(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address user_\\n    ) external;\\n\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x4c76dfbd81d1f92ae6f8043bbb6159f0de4746941a414e8312a986a14466d64b\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040526000609c5560a1805460ff1916905534801561001f57600080fd5b50611cef8061002f6000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c8063672f1490116100f9578063c62c610b11610097578063e3161ddd11610071578063e3161ddd146103b9578063ec1371f2146103c1578063f851a440146103c9578063fd79c6a2146103dc57600080fd5b8063c62c610b14610395578063cf7c11fa1461039e578063d9d72c19146103b157600080fd5b80639ee933b5116100d35780639ee933b514610349578063a694fc3a1461035c578063c0c53b8b1461036f578063c28f43921461038257600080fd5b8063672f14901461031a578063704b6c021461032d578063939d62371461034057600080fd5b80635b755f39116101665780635d0eaaaf116101405780635d0eaaaf146102925780635fcbd285146102e757806364c9ec6f146102fa5780636702679a1461030d57600080fd5b80635b755f39146102665780635c975abb146102725780635d0198811461028957600080fd5b806335322f37116101a257806335322f371461022157806345a13b9614610229578063532d73971461023c578063575a86b21461025357600080fd5b8063123cecbe146101c95780632e17de78146101de5780633530c61e146101f1575b600080fd5b6101dc6101d73660046119a4565b6103ef565b005b6101dc6101ec3660046119c1565b6105e3565b609b54610204906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101dc610937565b6101dc6102373660046119e8565b6109a3565b61024560a05481565b604051908152602001610218565b609d54610204906001600160a01b031681565b61024564e8d4a5100081565b60655460ff165b6040519015158152602001610218565b610245609c5481565b6102c76102a03660046119a4565b60a26020526000908152604090208054600182015460028301546003909301549192909184565b604080519485526020850193909352918301526060820152608001610218565b609954610204906001600160a01b031681565b609a54610204906001600160a01b031681565b60a1546102799060ff1681565b6101dc610328366004611a05565b6109e8565b6101dc61033b3660046119a4565b610a38565b610245609f5481565b6101dc6103573660046119a4565b610a6e565b6101dc61036a3660046119c1565b610aba565b6101dc61037d366004611a31565b610b65565b609854610204906001600160a01b031681565b610245609e5481565b6102456103ac3660046119a4565b610c1e565b6101dc610d59565b6101dc610d63565b610245610e00565b609754610204906001600160a01b031681565b6101dc6103ea366004611a05565b610f39565b6097546001600160a01b031633146104225760405162461bcd60e51b815260040161041990611a7c565b60405180910390fd5b60006001600160a01b0316816001600160a01b0316633530c61e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561046657600080fd5b505afa15801561047a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049e9190611aa2565b6001600160a01b031614806105345750306001600160a01b0316816001600160a01b0316633530c61e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156104f157600080fd5b505afa158015610505573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105299190611aa2565b6001600160a01b0316145b801561054957506001600160a01b0381163014155b6105875760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964207369626c696e6760881b6044820152606401610419565b609b546040516001600160a01b038084169216907f5c0b1436fffe2be9a261bad04f4b4c330db8e95f54f09d910e47447e94f4329490600090a3609b80546001600160a01b0319166001600160a01b0392909216919091179055565b60655460ff16156106065760405162461bcd60e51b815260040161041990611abf565b600260015414156106595760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610419565b600260015533600081815260a2602052604090208054831180159061067e5750805415155b6106d65760405162461bcd60e51b815260206004820152602360248201527f756e7374616b6520616d6f756e742065786365656473206f776e656420616d6f6044820152621d5b9d60ea1b6064820152608401610419565b6106de6111ca565b600064e8d4a510008260000154609f546106f89190611aff565b6107029190611b1e565b90506000826001015482846002015461071b9190611b40565b6107259190611b58565b6098546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561076e57600080fd5b505afa158015610782573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a69190611b6f565b9050808211156107b4578091505b6001840183905560006002850155851561084157835464e8d4a51000906107dc908890611b58565b609f546107e99190611aff565b6107f39190611b1e565b600185015583548690859060009061080c908490611b58565b925050819055508560a060008282546108259190611b58565b9091555050609954610841906001600160a01b03168688611247565b811561085e5760985461085e906001600160a01b03168684611247565b818460030160008282546108729190611b40565b9091555050609d54609e546040516370ad001d60e11b81526004810191909152602481018890526001600160a01b0387811660448301529091169063e15a003a90606401600060405180830381600087803b1580156108d057600080fd5b505af11580156108e4573d6000803e3d6000fd5b50505050846001600160a01b03167f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f758760405161092391815260200190565b60405180910390a250506001805550505050565b33600090815260a260205260409020546109885760405162461bcd60e51b81526020600482015260126024820152716e6f7468696e6720746f20756e7374616b6560701b6044820152606401610419565b33600090815260a260205260409020546109a1906105e3565b565b6097546001600160a01b031633146109cd5760405162461bcd60e51b815260040161041990611a7c565b6109d56111ca565b60a1805460ff1916911515919091179055565b6097546001600160a01b03163314610a125760405162461bcd60e51b815260040161041990611a7c565b609d80546001600160a01b0319166001600160a01b039390931692909217909155609e55565b6097546001600160a01b03163314610a625760405162461bcd60e51b815260040161041990611a7c565b610a6b816112af565b50565b6097546001600160a01b03163314610a985760405162461bcd60e51b815260040161041990611a7c565b609980546001600160a01b0319166001600160a01b0392909216919091179055565b60655460ff1615610add5760405162461bcd60e51b815260040161041990611abf565b60a15460ff1615610b565760405162461bcd60e51b815260206004820152603960248201527f5265776172642073757370656e6465642e20506c6561736520666f6c6c6f772060448201527f7468652070726f6a65637420616e6e6f756e63656d656e7420000000000000006064820152608401610419565b33610b618183610f39565b5050565b6000610b71600161135b565b90508015610b89576000805461ff0019166101001790555b610b916113e3565b610b99611412565b610ba2826112af565b609880546001600160a01b038087166001600160a01b031992831617909255609a8054928616929091169190911790558015610c18576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6001600160a01b038116600090815260a26020526040812060a0541580610c4457508054155b15610c525750600092915050565b6000610c5c610e00565b609f5460a054609a54604051625e3ded60e61b81526004810185905293945060009364e8d4a51000916001600160a01b03169063178f7b409060240160206040518083038186803b158015610cb057600080fd5b505afa158015610cc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce89190611b6f565b610cf29086611b58565b610cfc9190611aff565b610d069190611b1e565b610d109190611b40565b90508260010154836002015464e8d4a51000856000015484610d329190611aff565b610d3c9190611b1e565b610d469190611b40565b610d509190611b58565b95945050505050565b6109a160006105e3565b609b546001600160a01b0316331480610d865750609a546001600160a01b031633145b610df85760405162461bcd60e51b815260206004820152603960248201527f426f6e644c504661726d696e67506f6f6c3a2043616c6c696e672066726f6d2060448201527f7369626c696e6720706f6f6c206f7220626f6e64206f6e6c79000000000000006064820152608401610419565b6109a1611441565b60a15460009060ff1615610e145750600090565b609a5460408051637609b8f960e11b815290516000926001600160a01b03169163ec1371f2916004808301926020929190829003018186803b158015610e5957600080fd5b505afa158015610e6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e919190611b6f565b905060008111610ea357600091505090565b609b60009054906101000a90046001600160a01b03166001600160a01b031663ec1371f26040518163ffffffff1660e01b815260040160206040518083038186803b158015610ef157600080fd5b505afa158015610f05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f299190611b6f565b610f339082611b58565b91505090565b60655460ff1615610f5c5760405162461bcd60e51b815260040161041990611abf565b60026001541415610faf5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610419565b600260015580610ff45760405162461bcd60e51b815260206004820152601060248201526f6e6f7468696e6720746f207374616b6560801b6044820152606401610419565b610ffc6111ca565b6001600160a01b038216600090815260a26020526040902080541561109f57600064e8d4a510008260000154609f546110359190611aff565b61103f9190611b1e565b90508160010154816110519190611b58565b8260020160008282546110649190611b40565b9091555050815464e8d4a510009061107d908590611b40565b609f5461108a9190611aff565b6110949190611b1e565b6001830155506110c3565b64e8d4a5100082609f546110b39190611aff565b6110bd9190611b1e565b60018201555b6099546110db906001600160a01b03163330856116a2565b818160000160008282546110ef9190611b40565b925050819055508160a060008282546111089190611b40565b9091555050609d54609e5460405163a3f30d2760e01b81526004810191909152602481018490526001600160a01b0385811660448301529091169063a3f30d2790606401600060405180830381600087803b15801561116657600080fd5b505af115801561117a573d6000803e3d6000fd5b50505050826001600160a01b03167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d836040516111b991815260200190565b60405180910390a250506001805550565b60a15460ff16156111d757565b609b60009054906101000a90046001600160a01b03166001600160a01b031663e3161ddd6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561122757600080fd5b505af115801561123b573d6000803e3d6000fd5b505050506109a1611441565b6040516001600160a01b0383166024820152604481018290526112aa90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526116da565b505050565b6001600160a01b03811661130f5760405162461bcd60e51b815260206004820152602160248201527f43616e206e6f74207365742061646d696e20746f207a65726f206164647265736044820152607360f81b6064820152608401610419565b609780546001600160a01b0319166001600160a01b03831690811790915560405133907f101b8081ff3b56bbf45deb824d86a3b0fd38b7e3dd42421105cf8abe9106db0b90600090a350565b60008054610100900460ff16156113a2578160ff16600114801561137e5750303b155b61139a5760405162461bcd60e51b815260040161041990611b88565b506000919050565b60005460ff8084169116106113c95760405162461bcd60e51b815260040161041990611b88565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff1661140a5760405162461bcd60e51b815260040161041990611bd6565b6109a16117ac565b600054610100900460ff166114395760405162461bcd60e51b815260040161041990611bd6565b6109a16117d9565b609c54609b60009054906101000a90046001600160a01b03166001600160a01b0316635d0198816040518163ffffffff1660e01b815260040160206040518083038186803b15801561149257600080fd5b505afa1580156114a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ca9190611b6f565b11806115685750609c54609b60009054906101000a90046001600160a01b03166001600160a01b0316635d0198816040518163ffffffff1660e01b815260040160206040518083038186803b15801561152257600080fd5b505afa158015611536573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155a9190611b6f565b148015611568575043609c54145b6115b45760405162461bcd60e51b815260206004820152601960248201527f75706461746520626f6e6420706f6f6c2066697273746c792e000000000000006044820152606401610419565b60006115be610e00565b43609c5590508015806115d1575060a054155b156115d95750565b609a54604051632a52d5a560e21b8152306004820152602481018390526000916001600160a01b03169063a94b569490604401602060405180830381600087803b15801561162657600080fd5b505af115801561163a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165e9190611b6f565b60a05490915064e8d4a510006116748385611b58565b61167e9190611aff565b6116889190611b1e565b609f60008282546116999190611b40565b90915550505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610c189085906323b872dd60e01b90608401611273565b600061172f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661180c9092919063ffffffff16565b8051909150156112aa578080602001905181019061174d9190611c21565b6112aa5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610419565b600054610100900460ff166117d35760405162461bcd60e51b815260040161041990611bd6565b60018055565b600054610100900460ff166118005760405162461bcd60e51b815260040161041990611bd6565b6065805460ff19169055565b606061181b8484600085611825565b90505b9392505050565b6060824710156118865760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610419565b6001600160a01b0385163b6118dd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610419565b600080866001600160a01b031685876040516118f99190611c6a565b60006040518083038185875af1925050503d8060008114611936576040519150601f19603f3d011682016040523d82523d6000602084013e61193b565b606091505b509150915061194b828286611956565b979650505050505050565b6060831561196557508161181e565b8251156119755782518084602001fd5b8160405162461bcd60e51b81526004016104199190611c86565b6001600160a01b0381168114610a6b57600080fd5b6000602082840312156119b657600080fd5b813561181e8161198f565b6000602082840312156119d357600080fd5b5035919050565b8015158114610a6b57600080fd5b6000602082840312156119fa57600080fd5b813561181e816119da565b60008060408385031215611a1857600080fd5b8235611a238161198f565b946020939093013593505050565b600080600060608486031215611a4657600080fd5b8335611a518161198f565b92506020840135611a618161198f565b91506040840135611a718161198f565b809150509250925092565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b600060208284031215611ab457600080fd5b815161181e8161198f565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611b1957611b19611ae9565b500290565b600082611b3b57634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115611b5357611b53611ae9565b500190565b600082821015611b6a57611b6a611ae9565b500390565b600060208284031215611b8157600080fd5b5051919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215611c3357600080fd5b815161181e816119da565b60005b83811015611c59578181015183820152602001611c41565b83811115610c185750506000910152565b60008251611c7c818460208701611c3e565b9190910192915050565b6020815260008251806020840152611ca5816040850160208701611c3e565b601f01601f1916919091016040019291505056fea26469706673582212204ca5ac4981ff0471b69be03d7eb5606d6d9a9fed31d8cc29db8afb3e9c1bcef364736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c8063672f1490116100f9578063c62c610b11610097578063e3161ddd11610071578063e3161ddd146103b9578063ec1371f2146103c1578063f851a440146103c9578063fd79c6a2146103dc57600080fd5b8063c62c610b14610395578063cf7c11fa1461039e578063d9d72c19146103b157600080fd5b80639ee933b5116100d35780639ee933b514610349578063a694fc3a1461035c578063c0c53b8b1461036f578063c28f43921461038257600080fd5b8063672f14901461031a578063704b6c021461032d578063939d62371461034057600080fd5b80635b755f39116101665780635d0eaaaf116101405780635d0eaaaf146102925780635fcbd285146102e757806364c9ec6f146102fa5780636702679a1461030d57600080fd5b80635b755f39146102665780635c975abb146102725780635d0198811461028957600080fd5b806335322f37116101a257806335322f371461022157806345a13b9614610229578063532d73971461023c578063575a86b21461025357600080fd5b8063123cecbe146101c95780632e17de78146101de5780633530c61e146101f1575b600080fd5b6101dc6101d73660046119a4565b6103ef565b005b6101dc6101ec3660046119c1565b6105e3565b609b54610204906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101dc610937565b6101dc6102373660046119e8565b6109a3565b61024560a05481565b604051908152602001610218565b609d54610204906001600160a01b031681565b61024564e8d4a5100081565b60655460ff165b6040519015158152602001610218565b610245609c5481565b6102c76102a03660046119a4565b60a26020526000908152604090208054600182015460028301546003909301549192909184565b604080519485526020850193909352918301526060820152608001610218565b609954610204906001600160a01b031681565b609a54610204906001600160a01b031681565b60a1546102799060ff1681565b6101dc610328366004611a05565b6109e8565b6101dc61033b3660046119a4565b610a38565b610245609f5481565b6101dc6103573660046119a4565b610a6e565b6101dc61036a3660046119c1565b610aba565b6101dc61037d366004611a31565b610b65565b609854610204906001600160a01b031681565b610245609e5481565b6102456103ac3660046119a4565b610c1e565b6101dc610d59565b6101dc610d63565b610245610e00565b609754610204906001600160a01b031681565b6101dc6103ea366004611a05565b610f39565b6097546001600160a01b031633146104225760405162461bcd60e51b815260040161041990611a7c565b60405180910390fd5b60006001600160a01b0316816001600160a01b0316633530c61e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561046657600080fd5b505afa15801561047a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049e9190611aa2565b6001600160a01b031614806105345750306001600160a01b0316816001600160a01b0316633530c61e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156104f157600080fd5b505afa158015610505573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105299190611aa2565b6001600160a01b0316145b801561054957506001600160a01b0381163014155b6105875760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964207369626c696e6760881b6044820152606401610419565b609b546040516001600160a01b038084169216907f5c0b1436fffe2be9a261bad04f4b4c330db8e95f54f09d910e47447e94f4329490600090a3609b80546001600160a01b0319166001600160a01b0392909216919091179055565b60655460ff16156106065760405162461bcd60e51b815260040161041990611abf565b600260015414156106595760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610419565b600260015533600081815260a2602052604090208054831180159061067e5750805415155b6106d65760405162461bcd60e51b815260206004820152602360248201527f756e7374616b6520616d6f756e742065786365656473206f776e656420616d6f6044820152621d5b9d60ea1b6064820152608401610419565b6106de6111ca565b600064e8d4a510008260000154609f546106f89190611aff565b6107029190611b1e565b90506000826001015482846002015461071b9190611b40565b6107259190611b58565b6098546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b15801561076e57600080fd5b505afa158015610782573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a69190611b6f565b9050808211156107b4578091505b6001840183905560006002850155851561084157835464e8d4a51000906107dc908890611b58565b609f546107e99190611aff565b6107f39190611b1e565b600185015583548690859060009061080c908490611b58565b925050819055508560a060008282546108259190611b58565b9091555050609954610841906001600160a01b03168688611247565b811561085e5760985461085e906001600160a01b03168684611247565b818460030160008282546108729190611b40565b9091555050609d54609e546040516370ad001d60e11b81526004810191909152602481018890526001600160a01b0387811660448301529091169063e15a003a90606401600060405180830381600087803b1580156108d057600080fd5b505af11580156108e4573d6000803e3d6000fd5b50505050846001600160a01b03167f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f758760405161092391815260200190565b60405180910390a250506001805550505050565b33600090815260a260205260409020546109885760405162461bcd60e51b81526020600482015260126024820152716e6f7468696e6720746f20756e7374616b6560701b6044820152606401610419565b33600090815260a260205260409020546109a1906105e3565b565b6097546001600160a01b031633146109cd5760405162461bcd60e51b815260040161041990611a7c565b6109d56111ca565b60a1805460ff1916911515919091179055565b6097546001600160a01b03163314610a125760405162461bcd60e51b815260040161041990611a7c565b609d80546001600160a01b0319166001600160a01b039390931692909217909155609e55565b6097546001600160a01b03163314610a625760405162461bcd60e51b815260040161041990611a7c565b610a6b816112af565b50565b6097546001600160a01b03163314610a985760405162461bcd60e51b815260040161041990611a7c565b609980546001600160a01b0319166001600160a01b0392909216919091179055565b60655460ff1615610add5760405162461bcd60e51b815260040161041990611abf565b60a15460ff1615610b565760405162461bcd60e51b815260206004820152603960248201527f5265776172642073757370656e6465642e20506c6561736520666f6c6c6f772060448201527f7468652070726f6a65637420616e6e6f756e63656d656e7420000000000000006064820152608401610419565b33610b618183610f39565b5050565b6000610b71600161135b565b90508015610b89576000805461ff0019166101001790555b610b916113e3565b610b99611412565b610ba2826112af565b609880546001600160a01b038087166001600160a01b031992831617909255609a8054928616929091169190911790558015610c18576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6001600160a01b038116600090815260a26020526040812060a0541580610c4457508054155b15610c525750600092915050565b6000610c5c610e00565b609f5460a054609a54604051625e3ded60e61b81526004810185905293945060009364e8d4a51000916001600160a01b03169063178f7b409060240160206040518083038186803b158015610cb057600080fd5b505afa158015610cc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce89190611b6f565b610cf29086611b58565b610cfc9190611aff565b610d069190611b1e565b610d109190611b40565b90508260010154836002015464e8d4a51000856000015484610d329190611aff565b610d3c9190611b1e565b610d469190611b40565b610d509190611b58565b95945050505050565b6109a160006105e3565b609b546001600160a01b0316331480610d865750609a546001600160a01b031633145b610df85760405162461bcd60e51b815260206004820152603960248201527f426f6e644c504661726d696e67506f6f6c3a2043616c6c696e672066726f6d2060448201527f7369626c696e6720706f6f6c206f7220626f6e64206f6e6c79000000000000006064820152608401610419565b6109a1611441565b60a15460009060ff1615610e145750600090565b609a5460408051637609b8f960e11b815290516000926001600160a01b03169163ec1371f2916004808301926020929190829003018186803b158015610e5957600080fd5b505afa158015610e6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e919190611b6f565b905060008111610ea357600091505090565b609b60009054906101000a90046001600160a01b03166001600160a01b031663ec1371f26040518163ffffffff1660e01b815260040160206040518083038186803b158015610ef157600080fd5b505afa158015610f05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f299190611b6f565b610f339082611b58565b91505090565b60655460ff1615610f5c5760405162461bcd60e51b815260040161041990611abf565b60026001541415610faf5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610419565b600260015580610ff45760405162461bcd60e51b815260206004820152601060248201526f6e6f7468696e6720746f207374616b6560801b6044820152606401610419565b610ffc6111ca565b6001600160a01b038216600090815260a26020526040902080541561109f57600064e8d4a510008260000154609f546110359190611aff565b61103f9190611b1e565b90508160010154816110519190611b58565b8260020160008282546110649190611b40565b9091555050815464e8d4a510009061107d908590611b40565b609f5461108a9190611aff565b6110949190611b1e565b6001830155506110c3565b64e8d4a5100082609f546110b39190611aff565b6110bd9190611b1e565b60018201555b6099546110db906001600160a01b03163330856116a2565b818160000160008282546110ef9190611b40565b925050819055508160a060008282546111089190611b40565b9091555050609d54609e5460405163a3f30d2760e01b81526004810191909152602481018490526001600160a01b0385811660448301529091169063a3f30d2790606401600060405180830381600087803b15801561116657600080fd5b505af115801561117a573d6000803e3d6000fd5b50505050826001600160a01b03167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d836040516111b991815260200190565b60405180910390a250506001805550565b60a15460ff16156111d757565b609b60009054906101000a90046001600160a01b03166001600160a01b031663e3161ddd6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561122757600080fd5b505af115801561123b573d6000803e3d6000fd5b505050506109a1611441565b6040516001600160a01b0383166024820152604481018290526112aa90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526116da565b505050565b6001600160a01b03811661130f5760405162461bcd60e51b815260206004820152602160248201527f43616e206e6f74207365742061646d696e20746f207a65726f206164647265736044820152607360f81b6064820152608401610419565b609780546001600160a01b0319166001600160a01b03831690811790915560405133907f101b8081ff3b56bbf45deb824d86a3b0fd38b7e3dd42421105cf8abe9106db0b90600090a350565b60008054610100900460ff16156113a2578160ff16600114801561137e5750303b155b61139a5760405162461bcd60e51b815260040161041990611b88565b506000919050565b60005460ff8084169116106113c95760405162461bcd60e51b815260040161041990611b88565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff1661140a5760405162461bcd60e51b815260040161041990611bd6565b6109a16117ac565b600054610100900460ff166114395760405162461bcd60e51b815260040161041990611bd6565b6109a16117d9565b609c54609b60009054906101000a90046001600160a01b03166001600160a01b0316635d0198816040518163ffffffff1660e01b815260040160206040518083038186803b15801561149257600080fd5b505afa1580156114a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ca9190611b6f565b11806115685750609c54609b60009054906101000a90046001600160a01b03166001600160a01b0316635d0198816040518163ffffffff1660e01b815260040160206040518083038186803b15801561152257600080fd5b505afa158015611536573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155a9190611b6f565b148015611568575043609c54145b6115b45760405162461bcd60e51b815260206004820152601960248201527f75706461746520626f6e6420706f6f6c2066697273746c792e000000000000006044820152606401610419565b60006115be610e00565b43609c5590508015806115d1575060a054155b156115d95750565b609a54604051632a52d5a560e21b8152306004820152602481018390526000916001600160a01b03169063a94b569490604401602060405180830381600087803b15801561162657600080fd5b505af115801561163a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165e9190611b6f565b60a05490915064e8d4a510006116748385611b58565b61167e9190611aff565b6116889190611b1e565b609f60008282546116999190611b40565b90915550505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610c189085906323b872dd60e01b90608401611273565b600061172f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661180c9092919063ffffffff16565b8051909150156112aa578080602001905181019061174d9190611c21565b6112aa5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610419565b600054610100900460ff166117d35760405162461bcd60e51b815260040161041990611bd6565b60018055565b600054610100900460ff166118005760405162461bcd60e51b815260040161041990611bd6565b6065805460ff19169055565b606061181b8484600085611825565b90505b9392505050565b6060824710156118865760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610419565b6001600160a01b0385163b6118dd5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610419565b600080866001600160a01b031685876040516118f99190611c6a565b60006040518083038185875af1925050503d8060008114611936576040519150601f19603f3d011682016040523d82523d6000602084013e61193b565b606091505b509150915061194b828286611956565b979650505050505050565b6060831561196557508161181e565b8251156119755782518084602001fd5b8160405162461bcd60e51b81526004016104199190611c86565b6001600160a01b0381168114610a6b57600080fd5b6000602082840312156119b657600080fd5b813561181e8161198f565b6000602082840312156119d357600080fd5b5035919050565b8015158114610a6b57600080fd5b6000602082840312156119fa57600080fd5b813561181e816119da565b60008060408385031215611a1857600080fd5b8235611a238161198f565b946020939093013593505050565b600080600060608486031215611a4657600080fd5b8335611a518161198f565b92506020840135611a618161198f565b91506040840135611a718161198f565b809150509250925092565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b600060208284031215611ab457600080fd5b815161181e8161198f565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611b1957611b19611ae9565b500290565b600082611b3b57634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115611b5357611b53611ae9565b500190565b600082821015611b6a57611b6a611ae9565b500390565b600060208284031215611b8157600080fd5b5051919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215611c3357600080fd5b815161181e816119da565b60005b83811015611c59578181015183820152602001611c41565b83811115610c185750506000910152565b60008251611c7c818460208701611c3e565b9190910192915050565b6020815260008251806020840152611ca5816040850160208701611c3e565b601f01601f1916919091016040019291505056fea26469706673582212204ca5ac4981ff0471b69be03d7eb5606d6d9a9fed31d8cc29db8afb3e9c1bcef364736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getUserPendingRewards(address)": {
        "details": "get pending rewards by specific user"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "totalPendingRewards()": {
        "details": "distribute single bond pool first, then LP pool will get the remaining rewards. see _updatePools"
      },
      "updatePool()": {
        "details": "see: _updatePool"
      }
    },
    "stateVariables": {
      "accRewardPerShare": {
        "details": "accumulated bond token rewards of each lp token."
      },
      "bondRewardsSuspended": {
        "details": "_updatePools() no longer works after bondRewardsSuspended is true."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bondRewardsSuspended()": {
        "notice": "mark bond reward is suspended. If the LP Token needs to be migrated, such as from pancake to ESP, the bond rewards will be suspended.you can not stake anymore when bond rewards has been suspended."
      },
      "unstake(uint256)": {
        "notice": "unstake by shares"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/BondLPFarmingPool.sol:BondLPFarmingPool",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/BondLPFarmingPool.sol:BondLPFarmingPool",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 266,
        "contract": "contracts/BondLPFarmingPool.sol:BondLPFarmingPool",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 310,
        "contract": "contracts/BondLPFarmingPool.sol:BondLPFarmingPool",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 897,
        "contract": "contracts/BondLPFarmingPool.sol:BondLPFarmingPool",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 162,
        "contract": "contracts/BondLPFarmingPool.sol:BondLPFarmingPool",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 251,
        "contract": "contracts/BondLPFarmingPool.sol:BondLPFarmingPool",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3100,
        "contract": "contracts/BondLPFarmingPool.sol:BondLPFarmingPool",
        "label": "admin",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 4827,
        "contract": "contracts/BondLPFarmingPool.sol:BondLPFarmingPool",
        "label": "bondToken",
        "offset": 0,
        "slot": "152",
        "type": "t_contract(IERC20Upgradeable)389"
      },
      {
        "astId": 4830,
        "contract": "contracts/BondLPFarmingPool.sol:BondLPFarmingPool",
        "label": "lpToken",
        "offset": 0,
        "slot": "153",
        "type": "t_contract(IERC20Upgradeable)389"
      },
      {
        "astId": 4837,
        "contract": "contracts/BondLPFarmingPool.sol:BondLPFarmingPool",
        "label": "bond",
        "offset": 0,
        "slot": "154",
        "type": "t_contract(IExtendableBond)8808"
      },
      {
        "astId": 4840,
        "contract": "contracts/BondLPFarmingPool.sol:BondLPFarmingPool",
        "label": "siblingPool",
        "offset": 0,
        "slot": "155",
        "type": "t_contract(IBondFarmingPool)8764"
      },
      {
        "astId": 4843,
        "contract": "contracts/BondLPFarmingPool.sol:BondLPFarmingPool",
        "label": "lastUpdatedPoolAt",
        "offset": 0,
        "slot": "156",
        "type": "t_uint256"
      },
      {
        "astId": 4846,
        "contract": "contracts/BondLPFarmingPool.sol:BondLPFarmingPool",
        "label": "masterChef",
        "offset": 0,
        "slot": "157",
        "type": "t_contract(IMultiRewardsMasterChef)8843"
      },
      {
        "astId": 4848,
        "contract": "contracts/BondLPFarmingPool.sol:BondLPFarmingPool",
        "label": "masterChefPid",
        "offset": 0,
        "slot": "158",
        "type": "t_uint256"
      },
      {
        "astId": 4851,
        "contract": "contracts/BondLPFarmingPool.sol:BondLPFarmingPool",
        "label": "accRewardPerShare",
        "offset": 0,
        "slot": "159",
        "type": "t_uint256"
      },
      {
        "astId": 4856,
        "contract": "contracts/BondLPFarmingPool.sol:BondLPFarmingPool",
        "label": "totalLpAmount",
        "offset": 0,
        "slot": "160",
        "type": "t_uint256"
      },
      {
        "astId": 4860,
        "contract": "contracts/BondLPFarmingPool.sol:BondLPFarmingPool",
        "label": "bondRewardsSuspended",
        "offset": 0,
        "slot": "161",
        "type": "t_bool"
      },
      {
        "astId": 4878,
        "contract": "contracts/BondLPFarmingPool.sol:BondLPFarmingPool",
        "label": "usersInfo",
        "offset": 0,
        "slot": "162",
        "type": "t_mapping(t_address,t_struct(UserInfo)4873_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBondFarmingPool)8764": {
        "encoding": "inplace",
        "label": "contract IBondFarmingPool",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Upgradeable)389": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(IExtendableBond)8808": {
        "encoding": "inplace",
        "label": "contract IExtendableBond",
        "numberOfBytes": "20"
      },
      "t_contract(IMultiRewardsMasterChef)8843": {
        "encoding": "inplace",
        "label": "contract IMultiRewardsMasterChef",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)4873_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BondLPFarmingPool.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)4873_storage"
      },
      "t_struct(UserInfo)4873_storage": {
        "encoding": "inplace",
        "label": "struct BondLPFarmingPool.UserInfo",
        "members": [
          {
            "astId": 4863,
            "contract": "contracts/BondLPFarmingPool.sol:BondLPFarmingPool",
            "label": "lpAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4866,
            "contract": "contracts/BondLPFarmingPool.sol:BondLPFarmingPool",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4869,
            "contract": "contracts/BondLPFarmingPool.sol:BondLPFarmingPool",
            "label": "pendingRewards",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4872,
            "contract": "contracts/BondLPFarmingPool.sol:BondLPFarmingPool",
            "label": "claimedRewards",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}