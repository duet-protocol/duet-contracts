{
  "address": "0xD8fF683007b14d73fc55dd04AC37f9fde9403f24",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Borrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "ControllerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeconf",
          "type": "address"
        }
      ],
      "name": "FeeConfChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrows",
          "type": "uint256"
        }
      ],
      "name": "Liquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "repayer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "leftBorrows",
          "type": "uint256"
        }
      ],
      "name": "Repay",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrows",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeConf",
      "outputs": [
        {
          "internalType": "contract IFeeConf",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeConf",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isDuetVault",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "amount",
          "type": "int256"
        }
      ],
      "name": "pendingValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "repayTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "setAppController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeConf",
          "type": "address"
        }
      ],
      "name": "setFeeConf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "exData",
          "type": "bytes"
        }
      ],
      "name": "tokensReceived",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlying",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "dp",
          "type": "bool"
        }
      ],
      "name": "underlyingAmountValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "dp",
          "type": "bool"
        }
      ],
      "name": "userValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "dp",
          "type": "bool"
        }
      ],
      "name": "valueToAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa84f94cea0278eb506713ac3e26cf12845feff2342e479140e3e65a54aada050",
  "receipt": {
    "to": null,
    "from": "0xe7a2b8C8feD53713F69227e6c3d2384E80CF88a6",
    "contractAddress": "0xD8fF683007b14d73fc55dd04AC37f9fde9403f24",
    "transactionIndex": 0,
    "gasUsed": "1736823",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xe4d634f8d718b0ccfb580efb795b738924facb1e8d9a04d667e8b39489954c37",
    "transactionHash": "0xa84f94cea0278eb506713ac3e26cf12845feff2342e479140e3e65a54aada050",
    "logs": [],
    "blockNumber": 21057383,
    "cumulativeGasUsed": "1736823",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d6f5bbd7e7b1fa9c3ec472700583bbff",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"ControllerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeconf\",\"type\":\"address\"}],\"name\":\"FeeConfChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrows\",\"type\":\"uint256\"}],\"name\":\"Liquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"repayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"leftBorrows\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrows\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeConf\",\"outputs\":[{\"internalType\":\"contract IFeeConf\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeConf\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDuetVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"pendingValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repayTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setAppController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeConf\",\"type\":\"address\"}],\"name\":\"setFeeConf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"exData\",\"type\":\"bytes\"}],\"name\":\"tokensReceived\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"dp\",\"type\":\"bool\"}],\"name\":\"underlyingAmountValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"dp\",\"type\":\"bool\"}],\"name\":\"userValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"dp\",\"type\":\"bool\"}],\"name\":\"valueToAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"Borrow(address,uint256)\":{\"notice\":\"\\u501f\\u6b3e\\u4e8b\\u4ef6\"},\"Liquidated(address,address,uint256)\":{\"notice\":\"\\u501f\\u6b3e\\u4eba\\u62b5\\u62bc\\u54c1\\u88ab\\u6e05\\u7b97\\u4e8b\\u4ef6\"},\"Repay(address,uint256,uint256)\":{\"notice\":\"\\u8fd8\\u6b3e\\u4e8b\\u4ef6\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MintVault.sol\":\"MintVault\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"contracts/MintVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IDUSD.sol\\\";\\nimport \\\"./interfaces/ITokenRecipient.sol\\\";\\n\\nimport \\\"./_MintVaultBase.sol\\\";\\n\\ncontract MintVault is TokenRecipient, MintVaultBase {\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n  uint internal decimalScale;\\n\\n  function initialize(\\n    address _controller,\\n    address _feeConf,\\n    address _underlying) external initializer {\\n      super.init(_controller, _feeConf, _underlying);\\n      decimalScale = 10 ** IERC20Metadata(_underlying).decimals();\\n  }\\n\\n  function underlyingTransferIn(address sender, uint256 amount) internal virtual override {\\n    IERC20Upgradeable(underlying).safeTransferFrom(sender, address(this), amount);\\n  }\\n\\n  function underlyingTransferOut(address receipt, uint256 amount, bool) internal virtual override {\\n    //  skip transfer to myself\\n    if (receipt == address(this)) {\\n        return;\\n    }\\n\\n    require(receipt != address(0), \\\"receipt is empty\\\");\\n    IERC20Upgradeable(underlying).safeTransfer(receipt, amount);\\n  }\\n\\n  // TODO: \\u4e0d\\u540c\\u7684dAsset \\u53ef\\u4ee5\\u53ef\\u80fd\\u6709\\u4e0d\\u540c\\u7684\\u5b9e\\u73b0mint\\u3002\\n  function underlyingMint(address to, uint amount) internal virtual override {\\n    IDUSD(underlying).mint(to, amount);\\n  }\\n\\n// TODO: \\u4e0d\\u540c\\u7684dAsset \\u53ef\\u4ee5\\u53ef\\u80fd\\u6709\\u4e0d\\u540c\\u7684\\u5b9e\\u73b0mint\\u3002\\n  function underlyingBurn(uint amount) internal virtual override {\\n    IDUSD(underlying).burn(amount);\\n  }\\n\\n  function borrow(uint256 amount) external override {\\n    _borrow(msg.sender, amount);\\n  }\\n\\n\\n  function tokensReceived(address from, uint amount, bytes calldata exData) external override returns (bool) {\\n    require(msg.sender == underlying, \\\"INVALID_CALLER\\\");\\n\\n    uint256 repays = _repayFor(from, from, amount, true);\\n    if (amount > repays) {\\n      underlyingTransferOut(from, amount - repays, true);\\n    }\\n    return true;\\n  }\\n\\n  //\\n  function repay(uint256 amount) external override {\\n    _repayFor(msg.sender, msg.sender, amount, false);\\n  }\\n\\n  function repayTo(address to, uint256 amount) external override {\\n    _repayFor(msg.sender, to, amount, false);\\n  }\\n\\n  function liquidate(address liquidator, address borrower, bytes calldata data) external  {\\n    _liquidate(liquidator, borrower, data);\\n  }\\n\\n  function valueToAmount(uint value, bool dp) external override view returns(uint amount) {\\n    (address oracle, , uint pr) = IController(controller).getValueConf(underlying);\\n    uint price = IUSDOracle(oracle).getPrice(underlying);\\n    if (dp) {\\n      amount = value * decimalScale * PercentBase / price / pr;\\n    } else {\\n      amount = value * decimalScale / price;\\n    }\\n  }\\n\\n  function underlyingAmountValue(uint amount, bool dp) public view returns(uint value) {\\n    if(amount == 0) {\\n      return 0;\\n    }\\n\\n    (address oracle, , uint pr) = IController(controller).getValueConf(underlying);\\n    uint price = IUSDOracle(oracle).getPrice(underlying);\\n    if (dp) {\\n      value = price * amount * pr / PercentBase / decimalScale;\\n    } else {\\n      value = price * amount / decimalScale;\\n    }\\n\\n  }\\n\\n  function userValue(address user, bool dp) external override view returns(uint) {\\n    if(borrows[user] == 0) {\\n      return 0;\\n    }\\n    return underlyingAmountValue(borrows[user], dp);\\n  }\\n\\n  // amount > 0 :  borrows\\n  // amount < 0 :  repay\\n  function pendingValue(address user, int amount) external override view returns(uint) {\\n    if (amount >= 0) {\\n      return underlyingAmountValue(borrows[user] + uint(amount), true);\\n    } else {\\n      return underlyingAmountValue(borrows[user] - uint(0 - amount), true);\\n    }\\n\\n  }\\n\\n}\\n\",\"keccak256\":\"0xee84a7a55301fc05f9278b06d90ea66571e235d705045385d693d015f356a133\",\"license\":\"MIT\"},\"contracts/_MintVaultBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/IMintVault.sol\\\";\\nimport \\\"./interfaces/IController.sol\\\";\\nimport \\\"./interfaces/IUSDOracle.sol\\\";\\nimport \\\"./interfaces/IFeeConf.sol\\\";\\nimport \\\"./interfaces/ILiquidateCallee.sol\\\";\\n\\nabstract contract MintVaultBase is IVault, IMintVault, OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n\\n  uint internal constant PercentBase = 10000;\\n  address public override underlying;\\n  address public controller;\\n  IFeeConf public feeConf;\\n\\n\\n  // \\u7528\\u6237\\u501f\\u6b3e\\n  mapping(address => uint) public borrows;\\n\\n  /**\\n      @notice \\u501f\\u6b3e\\u4e8b\\u4ef6\\n      @param borrower \\u501f\\u6b3e\\u4eba\\n      @param amount \\u501f\\u6b3e\\u4eba\\u5f53\\u524d\\u7684\\u501f\\u6b3e\\u6570\\n    */\\n  event Borrow(address indexed borrower, uint256 amount);\\n\\n  /**\\n      @notice \\u8fd8\\u6b3e\\u4e8b\\u4ef6\\n      @param repayer \\u8fd8\\u6b3e\\u4eba\\n      @param amount \\u8fd8\\u6b3e\\u4eba\\u5b9e\\u9645\\u8fd8\\u6b3e\\u7684\\u6570\\u91cf\\n      @param leftBorrows \\u5269\\u4f59\\u501f\\u6b3e\\u6570\\u91cf\\n    */\\n  event Repay(address indexed repayer, uint256 amount, uint256 leftBorrows);\\n\\n  /**\\n      @notice \\u501f\\u6b3e\\u4eba\\u62b5\\u62bc\\u54c1\\u88ab\\u6e05\\u7b97\\u4e8b\\u4ef6\\n      @param liquidator \\u6e05\\u7b97\\u4eba\\n      @param borrower \\u501f\\u6b3e\\u4eba\\n      @param borrows  \\u501f\\u6b3e\\n    */\\n  event Liquidated(address indexed liquidator, address indexed borrower,  uint256 borrows);\\n\\n  event FeeConfChanged(address feeconf);\\n  event ControllerChanged(address controller);\\n\\n  /**\\n    * @notice \\u521d\\u59cb\\u5316\\n    * @dev  \\u5728Vault\\u521d\\u59cb\\u5316\\u65f6\\u8bbe\\u7f6e\\u8d27\\u5e01\\u57fa\\u7840\\u4fe1\\u606f\\u3002\\n    */\\n  function init(\\n    address _controller,\\n    address _feeConf,\\n    address _underlying) internal {\\n\\n    OwnableUpgradeable.__Ownable_init();\\n    controller = _controller;\\n    feeConf = IFeeConf(_feeConf);\\n    underlying = _underlying;\\n  }\\n\\n  function isDuetVault() external override view returns (bool) {\\n    return true;\\n  }\\n\\n  function underlyingTransferIn(address sender, uint256 amount) internal virtual;\\n  function underlyingTransferOut(\\n      address receipt,\\n      uint256 amount,\\n      bool giveWETH\\n  ) internal virtual;\\n\\n  function underlyingMint(address to, uint amount) internal virtual;\\n  function underlyingBurn(uint amount) internal virtual;\\n\\n  function setFeeConf(address _feeConf) external onlyOwner {\\n    require(_feeConf != address(0), \\\"INVALID_FEECONF\\\");\\n    feeConf = IFeeConf(_feeConf);\\n    emit FeeConfChanged(_feeConf);\\n  }\\n\\n  function setAppController(address _controller) external onlyOwner {\\n    require(_controller != address(0), \\\"INVALID_CONTROLLER\\\");\\n    controller = _controller;\\n    emit ControllerChanged(_controller);\\n  }\\n\\n  /**\\n    @dev \\u501f\\u5165\\u6807\\u7684\\u8d44\\u4ea7\\uff0c\\u501f\\u6b3e\\u5fc5\\u987b\\u6709\\u8db3\\u591f\\u7684\\u8d44\\u4ea7\\u8fdb\\u884c\\u62b5\\u62bc\\n  */\\n  function _borrow(address borrower, uint256 amount) internal nonReentrant {\\n    // \\u98ce\\u63a7\\u68c0\\u67e5\\n    IController(controller).beforeBorrow(borrower, address(this), amount);\\n\\n    (address receiver, uint borrowFee) = feeConf.getConfig(\\\"borrow_fee\\\");\\n\\n    uint fee = amount * borrowFee / PercentBase;\\n    uint actualBorrow = amount - fee;\\n    borrows[borrower] += actualBorrow;\\n\\n    _updateJoinStatus(borrower);\\n\\n    //\\u94f8\\u9020\\n    underlyingMint(borrower, actualBorrow);\\n    if (fee > 0) {\\n      underlyingMint(receiver, fee);\\n    }\\n\\n    emit Borrow(borrower, actualBorrow);\\n  }\\n\\n  /**\\n    @notice \\u8fd8\\u6b3e\\n    @dev \\u501f\\u6b3e\\u4eba\\u507f\\u8fd8\\u672c\\u606f\\uff0c\\u591a\\u4f59\\u8fd8\\u6b3e\\u5c06\\u4f5c\\u4e3a\\u5b58\\u6b3e\\u5b58\\u5165\\u5e02\\u573a\\u3002\\n    @param repayer \\u8fd8\\u6b3e\\u4eba\\n    @param borrower \\u501f\\u6b3e\\u4eba\\n    @param amount \\u8fd8\\u6b3e\\u7684\\u6807\\u7684\\u8d44\\u4ea7\\u6570\\u91cf\\n    */\\n  function _repayFor(address repayer, address borrower, uint256 amount, bool isTransed) internal nonReentrant returns (uint256 repays) {\\n    require(amount > 0, \\\"REPAY_ZERO\\\");\\n    IController(controller).beforeRepay(repayer, address(this), amount);\\n    repays = _repayBorrows(repayer, borrower, amount, isTransed);\\n    require(repays > 0, \\\"NO_LOAN_REPAY\\\");\\n  }\\n\\n  function _repayBorrows(address repayer, address borrower, uint256 amount, bool isTransed) internal returns (uint256 repays) {\\n    uint256 borrowsOld = borrows[borrower];\\n    if (borrowsOld == 0) {\\n      return 0;\\n    }\\n\\n    (address receiver, uint repayFee) = feeConf.getConfig(\\\"repay_fee\\\");\\n    uint fee = borrowsOld * repayFee / PercentBase;\\n    uint actualRepays;\\n    if (amount >= borrowsOld + fee) {  // repay all.\\n      actualRepays = borrowsOld;\\n      borrows[borrower] = 0;\\n      repays = actualRepays + fee;\\n    } else {\\n      actualRepays = amount * PercentBase / (PercentBase + repayFee);\\n      fee = amount - actualRepays;\\n      borrows[borrower] = borrowsOld - actualRepays;\\n      repays = amount;\\n    }\\n\\n    // \\u8f6c\\u79fb\\u8d44\\u4ea7\\n\\n    if (!isTransed) {\\n      underlyingTransferIn(repayer, repays);\\n    } else {\\n      require(amount >= repays, \\\"INSUFFICIENT_REPAY\\\");\\n    }\\n\\n    underlyingBurn(actualRepays);\\n    underlyingTransferOut(receiver, fee, true);\\n\\n    //\\u66f4\\u65b0\\n    emit Repay(borrower, actualRepays, borrows[borrower]);\\n  }\\n\\n  /**\\n    * @notice \\u6e05\\u7b97\\u8d26\\u6237\\u8d44\\u4ea7\\n    * @param liquidator \\u6e05\\u7b97\\u4eba\\n    * @param borrower \\u501f\\u6b3e\\u4eba\\n    */\\n  function _liquidate(address liquidator, address borrower, bytes calldata data) internal nonReentrant {\\n    require(msg.sender == controller, \\\"LIQUIDATE_INVALID_CALLER\\\");\\n    require(liquidator != borrower, \\\"LIQUIDATE_DISABLE_YOURSELF\\\");\\n    uint256 loan = borrows[borrower];\\n\\n    //\\u507f\\u8fd8\\u501f\\u6b3e\\n    if (loan > 0) {\\n      if (data.length > 0) ILiquidateCallee(liquidator).liquidateBorrow(borrower, underlying, loan, data);\\n      underlyingTransferIn(liquidator, loan);\\n    }\\n\\n    borrows[borrower] = 0;\\n    _updateJoinStatus(borrower);\\n\\n    emit Liquidated(liquidator, borrower, loan);\\n  }\\n\\n\\n  function _updateJoinStatus(address _user) internal {\\n    bool isDepositVault = false;\\n    if (borrows[_user] > 0) {\\n      IController(controller).joinVault(_user, isDepositVault);\\n    } else {\\n      IController(controller).exitVault(_user, isDepositVault);\\n    }\\n  }\\n\\n}\\n\",\"keccak256\":\"0x1e6f91998844a6ffa0203811cfc5f3d88df455e67ae5982b4695acc7d182b654\",\"license\":\"MIT\"},\"contracts/interfaces/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IController {\\n  function dyTokens(address) external view returns (address);\\n  function getValueConf(address _underlying) external view returns (address oracle, uint16 dr, uint16 pr);\\n  function getValueConfs(address token0, address token1) external view returns (address oracle0, uint16 dr0, uint16 pr0, address oracle1, uint16 dr1, uint16 pr1);\\n\\n  function strategies(address) external view returns (address);\\n  function dyTokenVaults(address) external view returns (address);\\n\\n  function beforeDeposit(address , address _vault, uint) external view;\\n  function beforeBorrow(address _borrower, address _vault, uint256 _amount) external view;\\n  function beforeWithdraw(address _redeemer, address _vault, uint256 _amount) external view;\\n  function beforeRepay(address _repayer , address _vault, uint256 _amount) external view;\\n\\n  function joinVault(address _user, bool isDeposit) external;\\n  function exitVault(address _user, bool isDeposit) external;\\n\\n\\n  function userValues(address _user, bool _dp) external view returns(uint totalDepositValue, uint totalBorrowValue);\\n  function userTotalValues(address _user, bool _dp) external view returns(uint totalDepositValue, uint totalBorrowValue);\\n\\n  function liquidate(address _borrower, bytes calldata data) external;\\n\\n  // ValidVault 0: uninitialized, default value\\n  // ValidVault 1: No, vault can not be collateralized\\n  // ValidVault 2: Yes, vault can be collateralized\\n  enum ValidVault { UnInit, No, Yes }\\n  function validVaults(address _vault) external view returns(ValidVault);\\n  function validVaultsOfUser(address _vault, address _user) external view returns(ValidVault);\\n\\n  // ------\\n\\n  struct VaultState {\\n    bool enabled;\\n    bool enableDeposit;\\n    bool enableWithdraw;\\n    bool enableBorrow;\\n    bool enableRepay;\\n    bool enableLiquidate;\\n  }\\n  function setVault(address _dyToken, address _vault, uint vtype) external;\\n  function setVaultStates(address _vault, VaultState memory _state) external;\\n  function setOracles(address _underlying, address _oracle, uint16 _discount, uint16 _premium) external;\\n\\n}\\n\",\"keccak256\":\"0xae5d72088c5fa829d75f649b6c4c023d3dfa0ab9a7e7c2dd662d6f1a074c3b33\",\"license\":\"MIT\"},\"contracts/interfaces/IDUSD.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface IDUSD {\\n  function mint(address to, uint256 amount) external;\\n  function burn(uint256 amount) external;\\n  function burnme(uint256 amount) external;\\n  function approve(address to, uint256 amount) external;\\n}\",\"keccak256\":\"0x72b182a75f6f237f86d20466d6fd3646883eb30d7d0d3355422ca82e51af0ab0\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeConf.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IFeeConf {\\n  function getConfig(bytes32 _key) external view returns (address, uint); \\n}\",\"keccak256\":\"0xe9ff93f36b91b0e80f17d1b1a87156e19ca458287fab7913c826ecad19e91367\",\"license\":\"MIT\"},\"contracts/interfaces/ILiquidateCallee.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface ILiquidateCallee {\\n  function liquidateDeposit(address borrower, address underlying, uint amount, bytes calldata data) external;\\n  function liquidateBorrow(address borrower, address underlying, uint amount, bytes calldata data) external;\\n}\",\"keccak256\":\"0x3f4e13053d5d5e69daf33784b338187b400ae027f3b55805bd142d3f8182c13d\",\"license\":\"MIT\"},\"contracts/interfaces/IMintVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IMintVault {\\n\\n  function borrows(address user) external view returns(uint amount);\\n  function borrow(uint256 amount) external;\\n  function repay(uint256 amount) external;\\n  function repayTo(address to, uint256 amount) external;\\n\\n  function valueToAmount(uint value, bool dp) external view returns(uint amount);\\n\\n}\",\"keccak256\":\"0x0a365d475a099d551aef919eba5771f5694dc1d3e14566b69ea557c0c49ea1e1\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenRecipient.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\ninterface TokenRecipient {\\n  // must return ture\\n  function tokensReceived(\\n      address from,\\n      uint amount,\\n      bytes calldata exData\\n  ) external returns (bool);\\n}\",\"keccak256\":\"0xa8ec8cc8df0b9b7e5c5a4130f325268ed5d0a51a1ef1f758ab3fdc5687a85391\",\"license\":\"MIT\"},\"contracts/interfaces/IUSDOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\ninterface IUSDOracle {\\n  // Must 8 dec, same as chainlink decimals.\\n  function getPrice(address token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb2d61b8e116a91ee462037152382f40dda542cb4d40bbd2891472dff6dd057ef\",\"license\":\"MIT\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IVault {\\n  // call from controller must impl.\\n  function underlying() external view returns (address);\\n  function isDuetVault() external view returns (bool);\\n  function liquidate(address liquidator, address borrower, bytes calldata data) external;\\n  function userValue(address user, bool dp) external view returns(uint);\\n  function pendingValue(address user, int pending) external view returns(uint);\\n  function underlyingAmountValue(uint amount, bool dp) external view returns(uint value);\\n}\",\"keccak256\":\"0xb713c3e19b97f7018acc1c34cadd92ff78200bbf90f3b68a7b55597f18cb8e33\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611e75806100206000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80638da5cb5b116100ad578063c0c53b8b11610071578063c0c53b8b1461027b578063c5ebeaec1461028e578063d0314263146102a1578063f2fde38b146102b4578063f77c4791146102c757600080fd5b80638da5cb5b1461021e578063a06a9ff41461022f578063a0d9d1d914610242578063ae318c4d14610255578063ba58591c1461026857600080fd5b80636695535c116100f45780636695535c146101b25780636f307dc3146101c5578063715018a6146101f057806374eb83c1146101f8578063877c8cd11461020b57600080fd5b806314223902146101315780631db44b8e14610146578063371fd8e61461016c57806354a5706f1461017f5780635ac28bf91461019f575b600080fd5b61014461013f3660046117ca565b6102da565b005b610159610154366004611804565b6102ec565b6040519081526020015b60405180910390f35b61014461017a366004611834565b61046d565b61015961018d36600461184d565b609a6020526000908152604090205481565b6101596101ad3660046117ca565b61047e565b6101446101c036600461184d565b6104ee565b6097546101d8906001600160a01b031681565b6040516001600160a01b039091168152602001610163565b6101446105be565b6101446102063660046118b3565b6105f4565b6099546101d8906001600160a01b031681565b6033546001600160a01b03166101d8565b61015961023d366004611804565b610606565b61014461025036600461184d565b610743565b610159610263366004611918565b610806565b60015b6040519015158152602001610163565b610144610289366004611946565b610855565b61014461029c366004611834565b61094e565b61026b6102af366004611991565b61095b565b6101446102c236600461184d565b6109e5565b6098546101d8906001600160a01b031681565b6102e73383836000610a7d565b505050565b6000826102fb57506000610467565b6098546097546040516306b3632760e21b81526001600160a01b03918216600482015260009283921690631acd8c9c9060240160606040518083038186803b15801561034657600080fd5b505afa15801561035a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037e91906119e7565b6097546040516341976e0960e01b81526001600160a01b03918216600482015293955061ffff91909116935060009290851691506341976e099060240160206040518083038186803b1580156103d357600080fd5b505afa1580156103e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040b9190611a2c565b9050841561044957609b54612710836104248985611a5b565b61042e9190611a5b565b6104389190611a7a565b6104429190611a7a565b9350610463565b609b546104568783611a5b565b6104609190611a7a565b93505b5050505b92915050565b61047a3333836000610a7d565b5050565b60008082126104bd576001600160a01b0383166000908152609a60205260409020546104b6906104af908490611a9c565b60016102ec565b9050610467565b6104b66104cb836000611ab4565b6001600160a01b0385166000908152609a60205260409020546104af9190611af3565b6033546001600160a01b031633146105215760405162461bcd60e51b815260040161051890611b0a565b60405180910390fd5b6001600160a01b0381166105695760405162461bcd60e51b815260206004820152600f60248201526e24a72b20a624a22fa322a2a1a7a72360891b6044820152606401610518565b609980546001600160a01b0319166001600160a01b0383169081179091556040519081527f2f848457f88c295370f87d543957f8cfe46e0759b3a528ae233eb79885a2949d906020015b60405180910390a150565b6033546001600160a01b031633146105e85760405162461bcd60e51b815260040161051890611b0a565b6105f26000610ba6565b565b61060084848484610bf8565b50505050565b6098546097546040516306b3632760e21b81526001600160a01b03918216600482015260009283928392911690631acd8c9c9060240160606040518083038186803b15801561065457600080fd5b505afa158015610668573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068c91906119e7565b6097546040516341976e0960e01b81526001600160a01b03918216600482015293955061ffff91909116935060009290851691506341976e099060240160206040518083038186803b1580156106e157600080fd5b505afa1580156106f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107199190611a2c565b90508415610734578181612710609b54896104249190611a5b565b80609b54876104569190611a5b565b6033546001600160a01b0316331461076d5760405162461bcd60e51b815260040161051890611b0a565b6001600160a01b0381166107b85760405162461bcd60e51b815260206004820152601260248201527124a72b20a624a22fa1a7a72a2927a62622a960711b6044820152606401610518565b609880546001600160a01b0319166001600160a01b0383169081179091556040519081527f027c3e080ed9215f564a9455a666f7e459b3edc0bb6e02a1bf842fde4d0ccfc1906020016105b3565b6001600160a01b0382166000908152609a602052604081205461082b57506000610467565b6001600160a01b0383166000908152609a602052604090205461084e90836102ec565b9392505050565b60006108616001610df1565b90508015610879576000805461ff0019166101001790555b610884848484610e7e565b816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156108bd57600080fd5b505afa1580156108d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f59190611b3f565b61090090600a611c46565b609b558015610600576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050565b6109583382610ec5565b50565b6097546000906001600160a01b031633146109a95760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa1a0a62622a960911b6044820152606401610518565b60006109b88687876001610a7d565b9050808511156109d7576109d7866109d08388611af3565b60016110b5565b60019150505b949350505050565b6033546001600160a01b03163314610a0f5760405162461bcd60e51b815260040161051890611b0a565b6001600160a01b038116610a745760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610518565b61095881610ba6565b600060026065541415610aa25760405162461bcd60e51b815260040161051890611c55565b600260655582610ae15760405162461bcd60e51b815260206004820152600a60248201526952455041595f5a45524f60b01b6044820152606401610518565b609854604051631a625c9760e21b81526001600160a01b0387811660048301523060248301526044820186905290911690636989725c9060640160006040518083038186803b158015610b3357600080fd5b505afa158015610b47573d6000803e3d6000fd5b50505050610b578585858561112b565b905060008111610b995760405162461bcd60e51b815260206004820152600d60248201526c4e4f5f4c4f414e5f524550415960981b6044820152606401610518565b6001606555949350505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60026065541415610c1b5760405162461bcd60e51b815260040161051890611c55565b60026065556098546001600160a01b03163314610c7a5760405162461bcd60e51b815260206004820152601860248201527f4c49515549444154455f494e56414c49445f43414c4c455200000000000000006044820152606401610518565b826001600160a01b0316846001600160a01b03161415610cdc5760405162461bcd60e51b815260206004820152601a60248201527f4c49515549444154455f44495341424c455f594f555253454c460000000000006044820152606401610518565b6001600160a01b0383166000908152609a60205260409020548015610d76578115610d6c5760975460405163fb66893b60e01b81526001600160a01b038088169263fb66893b92610d399289921690869089908990600401611c8c565b600060405180830381600087803b158015610d5357600080fd5b505af1158015610d67573d6000803e3d6000fd5b505050505b610d76858261135f565b6001600160a01b0384166000908152609a6020526040812055610d9884611377565b836001600160a01b0316856001600160a01b03167fde0aa27286f5cb3a4ed853dc4823ead62d63e92cdf13de09d6aece56970721a483604051610ddd91815260200190565b60405180910390a350506001606555505050565b60008054610100900460ff1615610e38578160ff166001148015610e145750303b155b610e305760405162461bcd60e51b815260040161051890611ce0565b506000919050565b60005460ff808416911610610e5f5760405162461bcd60e51b815260040161051890611ce0565b506000805460ff191660ff92909216919091179055600190565b919050565b610e8661143b565b609880546001600160a01b039485166001600160a01b031991821617909155609980549385169382169390931790925560978054919093169116179055565b60026065541415610ee85760405162461bcd60e51b815260040161051890611c55565b60026065556098546040516315caa9e760e11b81526001600160a01b0384811660048301523060248301526044820184905290911690632b9553ce9060640160006040518083038186803b158015610f3f57600080fd5b505afa158015610f53573d6000803e3d6000fd5b5050609954604051636dd5b69d60e01b815269626f72726f775f66656560b01b6004820152600093508392506001600160a01b0390911690636dd5b69d90602401604080518083038186803b158015610fab57600080fd5b505afa158015610fbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe39190611d2e565b90925090506000612710610ff78386611a5b565b6110019190611a7a565b9050600061100f8286611af3565b6001600160a01b0387166000908152609a602052604081208054929350839290919061103c908490611a9c565b9091555061104b905086611377565b611055868261146a565b811561106557611065848361146a565b856001600160a01b03167fcbc04eca7e9da35cb1393a6135a199ca52e450d5e9251cbd99f7847d33a36750826040516110a091815260200190565b60405180910390a25050600160655550505050565b6001600160a01b0383163014156110cb57505050565b6001600160a01b0383166111145760405162461bcd60e51b815260206004820152601060248201526f7265636569707420697320656d70747960801b6044820152606401610518565b6097546102e7906001600160a01b031684846114a3565b6001600160a01b0383166000908152609a6020526040812054806111535760009150506109dd565b609954604051636dd5b69d60e01b81526872657061795f66656560b81b600482015260009182916001600160a01b0390911690636dd5b69d90602401604080518083038186803b1580156111a657600080fd5b505afa1580156111ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111de9190611d2e565b909250905060006127106111f28386611a5b565b6111fc9190611a7a565b9050600061120a8286611a9c565b881061123c57506001600160a01b0388166000908152609a6020526040812055836112358282611a9c565b9550611293565b61124883612710611a9c565b6112546127108a611a5b565b61125e9190611a7a565b905061126a8189611af3565b91506112768186611af3565b6001600160a01b038a166000908152609a60205260409020558795505b866112a7576112a28a8761135f565b6112ec565b858810156112ec5760405162461bcd60e51b8152602060048201526012602482015271494e53554646494349454e545f524550415960701b6044820152606401610518565b6112f581611506565b611301848360016110b5565b6001600160a01b0389166000818152609a6020908152604091829020548251858152918201527f77c6871227e5d2dec8dadd5354f78453203e22e669cd0ec4c19d9a8c5edb31d0910160405180910390a25050505050949350505050565b60975461047a906001600160a01b0316833084611567565b6001600160a01b0381166000908152609a6020526040812054156114015760985460405163c4c0048760e01b81526001600160a01b03848116600483015283151560248301529091169063c4c00487906044015b600060405180830381600087803b1580156113e557600080fd5b505af11580156113f9573d6000803e3d6000fd5b505050505050565b6098546040516379bf27b160e01b81526001600160a01b0384811660048301528315156024830152909116906379bf27b1906044016113cb565b600054610100900460ff166114625760405162461bcd60e51b815260040161051890611d5c565b6105f261159f565b6097546040516340c10f1960e01b81526001600160a01b03848116600483015260248201849052909116906340c10f19906044016113cb565b6040516001600160a01b0383166024820152604481018290526102e790849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526115cf565b609754604051630852cd8d60e31b8152600481018390526001600160a01b03909116906342966c6890602401600060405180830381600087803b15801561154c57600080fd5b505af1158015611560573d6000803e3d6000fd5b5050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526106009085906323b872dd60e01b906084016114cf565b600054610100900460ff166115c65760405162461bcd60e51b815260040161051890611d5c565b6105f233610ba6565b6000611624826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166116a19092919063ffffffff16565b8051909150156102e757808060200190518101906116429190611da7565b6102e75760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610518565b60606109dd8484600085856001600160a01b0385163b6117035760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610518565b600080866001600160a01b0316858760405161171f9190611df0565b60006040518083038185875af1925050503d806000811461175c576040519150601f19603f3d011682016040523d82523d6000602084013e611761565b606091505b509150915061177182828661177c565b979650505050505050565b6060831561178b57508161084e565b82511561179b5782518084602001fd5b8160405162461bcd60e51b81526004016105189190611e0c565b6001600160a01b038116811461095857600080fd5b600080604083850312156117dd57600080fd5b82356117e8816117b5565b946020939093013593505050565b801515811461095857600080fd5b6000806040838503121561181757600080fd5b823591506020830135611829816117f6565b809150509250929050565b60006020828403121561184657600080fd5b5035919050565b60006020828403121561185f57600080fd5b813561084e816117b5565b60008083601f84011261187c57600080fd5b50813567ffffffffffffffff81111561189457600080fd5b6020830191508360208285010111156118ac57600080fd5b9250929050565b600080600080606085870312156118c957600080fd5b84356118d4816117b5565b935060208501356118e4816117b5565b9250604085013567ffffffffffffffff81111561190057600080fd5b61190c8782880161186a565b95989497509550505050565b6000806040838503121561192b57600080fd5b8235611936816117b5565b91506020830135611829816117f6565b60008060006060848603121561195b57600080fd5b8335611966816117b5565b92506020840135611976816117b5565b91506040840135611986816117b5565b809150509250925092565b600080600080606085870312156119a757600080fd5b84356119b2816117b5565b935060208501359250604085013567ffffffffffffffff81111561190057600080fd5b805161ffff81168114610e7957600080fd5b6000806000606084860312156119fc57600080fd5b8351611a07816117b5565b9250611a15602085016119d5565b9150611a23604085016119d5565b90509250925092565b600060208284031215611a3e57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611a7557611a75611a45565b500290565b600082611a9757634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115611aaf57611aaf611a45565b500190565b60008083128015600160ff1b850184121615611ad257611ad2611a45565b6001600160ff1b0384018313811615611aed57611aed611a45565b50500390565b600082821015611b0557611b05611a45565b500390565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215611b5157600080fd5b815160ff8116811461084e57600080fd5b600181815b80851115611b9d578160001904821115611b8357611b83611a45565b80851615611b9057918102915b93841c9390800290611b67565b509250929050565b600082611bb457506001610467565b81611bc157506000610467565b8160018114611bd75760028114611be157611bfd565b6001915050610467565b60ff841115611bf257611bf2611a45565b50506001821b610467565b5060208310610133831016604e8410600b8410161715611c20575081810a610467565b611c2a8383611b62565b8060001904821115611c3e57611c3e611a45565b029392505050565b600061084e60ff841683611ba5565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6001600160a01b038681168252851660208201526040810184905260806060820181905281018290526000828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60008060408385031215611d4157600080fd5b8251611d4c816117b5565b6020939093015192949293505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215611db957600080fd5b815161084e816117f6565b60005b83811015611ddf578181015183820152602001611dc7565b838111156106005750506000910152565b60008251611e02818460208701611dc4565b9190910192915050565b6020815260008251806020840152611e2b816040850160208701611dc4565b601f01601f1916919091016040019291505056fea2646970667358221220d9fb2f9d936eeb30cb691196abf6f73d519ea9d1d2f5b04f8cf5fafb468c6e8764736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c80638da5cb5b116100ad578063c0c53b8b11610071578063c0c53b8b1461027b578063c5ebeaec1461028e578063d0314263146102a1578063f2fde38b146102b4578063f77c4791146102c757600080fd5b80638da5cb5b1461021e578063a06a9ff41461022f578063a0d9d1d914610242578063ae318c4d14610255578063ba58591c1461026857600080fd5b80636695535c116100f45780636695535c146101b25780636f307dc3146101c5578063715018a6146101f057806374eb83c1146101f8578063877c8cd11461020b57600080fd5b806314223902146101315780631db44b8e14610146578063371fd8e61461016c57806354a5706f1461017f5780635ac28bf91461019f575b600080fd5b61014461013f3660046117ca565b6102da565b005b610159610154366004611804565b6102ec565b6040519081526020015b60405180910390f35b61014461017a366004611834565b61046d565b61015961018d36600461184d565b609a6020526000908152604090205481565b6101596101ad3660046117ca565b61047e565b6101446101c036600461184d565b6104ee565b6097546101d8906001600160a01b031681565b6040516001600160a01b039091168152602001610163565b6101446105be565b6101446102063660046118b3565b6105f4565b6099546101d8906001600160a01b031681565b6033546001600160a01b03166101d8565b61015961023d366004611804565b610606565b61014461025036600461184d565b610743565b610159610263366004611918565b610806565b60015b6040519015158152602001610163565b610144610289366004611946565b610855565b61014461029c366004611834565b61094e565b61026b6102af366004611991565b61095b565b6101446102c236600461184d565b6109e5565b6098546101d8906001600160a01b031681565b6102e73383836000610a7d565b505050565b6000826102fb57506000610467565b6098546097546040516306b3632760e21b81526001600160a01b03918216600482015260009283921690631acd8c9c9060240160606040518083038186803b15801561034657600080fd5b505afa15801561035a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037e91906119e7565b6097546040516341976e0960e01b81526001600160a01b03918216600482015293955061ffff91909116935060009290851691506341976e099060240160206040518083038186803b1580156103d357600080fd5b505afa1580156103e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040b9190611a2c565b9050841561044957609b54612710836104248985611a5b565b61042e9190611a5b565b6104389190611a7a565b6104429190611a7a565b9350610463565b609b546104568783611a5b565b6104609190611a7a565b93505b5050505b92915050565b61047a3333836000610a7d565b5050565b60008082126104bd576001600160a01b0383166000908152609a60205260409020546104b6906104af908490611a9c565b60016102ec565b9050610467565b6104b66104cb836000611ab4565b6001600160a01b0385166000908152609a60205260409020546104af9190611af3565b6033546001600160a01b031633146105215760405162461bcd60e51b815260040161051890611b0a565b60405180910390fd5b6001600160a01b0381166105695760405162461bcd60e51b815260206004820152600f60248201526e24a72b20a624a22fa322a2a1a7a72360891b6044820152606401610518565b609980546001600160a01b0319166001600160a01b0383169081179091556040519081527f2f848457f88c295370f87d543957f8cfe46e0759b3a528ae233eb79885a2949d906020015b60405180910390a150565b6033546001600160a01b031633146105e85760405162461bcd60e51b815260040161051890611b0a565b6105f26000610ba6565b565b61060084848484610bf8565b50505050565b6098546097546040516306b3632760e21b81526001600160a01b03918216600482015260009283928392911690631acd8c9c9060240160606040518083038186803b15801561065457600080fd5b505afa158015610668573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068c91906119e7565b6097546040516341976e0960e01b81526001600160a01b03918216600482015293955061ffff91909116935060009290851691506341976e099060240160206040518083038186803b1580156106e157600080fd5b505afa1580156106f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107199190611a2c565b90508415610734578181612710609b54896104249190611a5b565b80609b54876104569190611a5b565b6033546001600160a01b0316331461076d5760405162461bcd60e51b815260040161051890611b0a565b6001600160a01b0381166107b85760405162461bcd60e51b815260206004820152601260248201527124a72b20a624a22fa1a7a72a2927a62622a960711b6044820152606401610518565b609880546001600160a01b0319166001600160a01b0383169081179091556040519081527f027c3e080ed9215f564a9455a666f7e459b3edc0bb6e02a1bf842fde4d0ccfc1906020016105b3565b6001600160a01b0382166000908152609a602052604081205461082b57506000610467565b6001600160a01b0383166000908152609a602052604090205461084e90836102ec565b9392505050565b60006108616001610df1565b90508015610879576000805461ff0019166101001790555b610884848484610e7e565b816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156108bd57600080fd5b505afa1580156108d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f59190611b3f565b61090090600a611c46565b609b558015610600576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050565b6109583382610ec5565b50565b6097546000906001600160a01b031633146109a95760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa1a0a62622a960911b6044820152606401610518565b60006109b88687876001610a7d565b9050808511156109d7576109d7866109d08388611af3565b60016110b5565b60019150505b949350505050565b6033546001600160a01b03163314610a0f5760405162461bcd60e51b815260040161051890611b0a565b6001600160a01b038116610a745760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610518565b61095881610ba6565b600060026065541415610aa25760405162461bcd60e51b815260040161051890611c55565b600260655582610ae15760405162461bcd60e51b815260206004820152600a60248201526952455041595f5a45524f60b01b6044820152606401610518565b609854604051631a625c9760e21b81526001600160a01b0387811660048301523060248301526044820186905290911690636989725c9060640160006040518083038186803b158015610b3357600080fd5b505afa158015610b47573d6000803e3d6000fd5b50505050610b578585858561112b565b905060008111610b995760405162461bcd60e51b815260206004820152600d60248201526c4e4f5f4c4f414e5f524550415960981b6044820152606401610518565b6001606555949350505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60026065541415610c1b5760405162461bcd60e51b815260040161051890611c55565b60026065556098546001600160a01b03163314610c7a5760405162461bcd60e51b815260206004820152601860248201527f4c49515549444154455f494e56414c49445f43414c4c455200000000000000006044820152606401610518565b826001600160a01b0316846001600160a01b03161415610cdc5760405162461bcd60e51b815260206004820152601a60248201527f4c49515549444154455f44495341424c455f594f555253454c460000000000006044820152606401610518565b6001600160a01b0383166000908152609a60205260409020548015610d76578115610d6c5760975460405163fb66893b60e01b81526001600160a01b038088169263fb66893b92610d399289921690869089908990600401611c8c565b600060405180830381600087803b158015610d5357600080fd5b505af1158015610d67573d6000803e3d6000fd5b505050505b610d76858261135f565b6001600160a01b0384166000908152609a6020526040812055610d9884611377565b836001600160a01b0316856001600160a01b03167fde0aa27286f5cb3a4ed853dc4823ead62d63e92cdf13de09d6aece56970721a483604051610ddd91815260200190565b60405180910390a350506001606555505050565b60008054610100900460ff1615610e38578160ff166001148015610e145750303b155b610e305760405162461bcd60e51b815260040161051890611ce0565b506000919050565b60005460ff808416911610610e5f5760405162461bcd60e51b815260040161051890611ce0565b506000805460ff191660ff92909216919091179055600190565b919050565b610e8661143b565b609880546001600160a01b039485166001600160a01b031991821617909155609980549385169382169390931790925560978054919093169116179055565b60026065541415610ee85760405162461bcd60e51b815260040161051890611c55565b60026065556098546040516315caa9e760e11b81526001600160a01b0384811660048301523060248301526044820184905290911690632b9553ce9060640160006040518083038186803b158015610f3f57600080fd5b505afa158015610f53573d6000803e3d6000fd5b5050609954604051636dd5b69d60e01b815269626f72726f775f66656560b01b6004820152600093508392506001600160a01b0390911690636dd5b69d90602401604080518083038186803b158015610fab57600080fd5b505afa158015610fbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe39190611d2e565b90925090506000612710610ff78386611a5b565b6110019190611a7a565b9050600061100f8286611af3565b6001600160a01b0387166000908152609a602052604081208054929350839290919061103c908490611a9c565b9091555061104b905086611377565b611055868261146a565b811561106557611065848361146a565b856001600160a01b03167fcbc04eca7e9da35cb1393a6135a199ca52e450d5e9251cbd99f7847d33a36750826040516110a091815260200190565b60405180910390a25050600160655550505050565b6001600160a01b0383163014156110cb57505050565b6001600160a01b0383166111145760405162461bcd60e51b815260206004820152601060248201526f7265636569707420697320656d70747960801b6044820152606401610518565b6097546102e7906001600160a01b031684846114a3565b6001600160a01b0383166000908152609a6020526040812054806111535760009150506109dd565b609954604051636dd5b69d60e01b81526872657061795f66656560b81b600482015260009182916001600160a01b0390911690636dd5b69d90602401604080518083038186803b1580156111a657600080fd5b505afa1580156111ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111de9190611d2e565b909250905060006127106111f28386611a5b565b6111fc9190611a7a565b9050600061120a8286611a9c565b881061123c57506001600160a01b0388166000908152609a6020526040812055836112358282611a9c565b9550611293565b61124883612710611a9c565b6112546127108a611a5b565b61125e9190611a7a565b905061126a8189611af3565b91506112768186611af3565b6001600160a01b038a166000908152609a60205260409020558795505b866112a7576112a28a8761135f565b6112ec565b858810156112ec5760405162461bcd60e51b8152602060048201526012602482015271494e53554646494349454e545f524550415960701b6044820152606401610518565b6112f581611506565b611301848360016110b5565b6001600160a01b0389166000818152609a6020908152604091829020548251858152918201527f77c6871227e5d2dec8dadd5354f78453203e22e669cd0ec4c19d9a8c5edb31d0910160405180910390a25050505050949350505050565b60975461047a906001600160a01b0316833084611567565b6001600160a01b0381166000908152609a6020526040812054156114015760985460405163c4c0048760e01b81526001600160a01b03848116600483015283151560248301529091169063c4c00487906044015b600060405180830381600087803b1580156113e557600080fd5b505af11580156113f9573d6000803e3d6000fd5b505050505050565b6098546040516379bf27b160e01b81526001600160a01b0384811660048301528315156024830152909116906379bf27b1906044016113cb565b600054610100900460ff166114625760405162461bcd60e51b815260040161051890611d5c565b6105f261159f565b6097546040516340c10f1960e01b81526001600160a01b03848116600483015260248201849052909116906340c10f19906044016113cb565b6040516001600160a01b0383166024820152604481018290526102e790849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526115cf565b609754604051630852cd8d60e31b8152600481018390526001600160a01b03909116906342966c6890602401600060405180830381600087803b15801561154c57600080fd5b505af1158015611560573d6000803e3d6000fd5b5050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526106009085906323b872dd60e01b906084016114cf565b600054610100900460ff166115c65760405162461bcd60e51b815260040161051890611d5c565b6105f233610ba6565b6000611624826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166116a19092919063ffffffff16565b8051909150156102e757808060200190518101906116429190611da7565b6102e75760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610518565b60606109dd8484600085856001600160a01b0385163b6117035760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610518565b600080866001600160a01b0316858760405161171f9190611df0565b60006040518083038185875af1925050503d806000811461175c576040519150601f19603f3d011682016040523d82523d6000602084013e611761565b606091505b509150915061177182828661177c565b979650505050505050565b6060831561178b57508161084e565b82511561179b5782518084602001fd5b8160405162461bcd60e51b81526004016105189190611e0c565b6001600160a01b038116811461095857600080fd5b600080604083850312156117dd57600080fd5b82356117e8816117b5565b946020939093013593505050565b801515811461095857600080fd5b6000806040838503121561181757600080fd5b823591506020830135611829816117f6565b809150509250929050565b60006020828403121561184657600080fd5b5035919050565b60006020828403121561185f57600080fd5b813561084e816117b5565b60008083601f84011261187c57600080fd5b50813567ffffffffffffffff81111561189457600080fd5b6020830191508360208285010111156118ac57600080fd5b9250929050565b600080600080606085870312156118c957600080fd5b84356118d4816117b5565b935060208501356118e4816117b5565b9250604085013567ffffffffffffffff81111561190057600080fd5b61190c8782880161186a565b95989497509550505050565b6000806040838503121561192b57600080fd5b8235611936816117b5565b91506020830135611829816117f6565b60008060006060848603121561195b57600080fd5b8335611966816117b5565b92506020840135611976816117b5565b91506040840135611986816117b5565b809150509250925092565b600080600080606085870312156119a757600080fd5b84356119b2816117b5565b935060208501359250604085013567ffffffffffffffff81111561190057600080fd5b805161ffff81168114610e7957600080fd5b6000806000606084860312156119fc57600080fd5b8351611a07816117b5565b9250611a15602085016119d5565b9150611a23604085016119d5565b90509250925092565b600060208284031215611a3e57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611a7557611a75611a45565b500290565b600082611a9757634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115611aaf57611aaf611a45565b500190565b60008083128015600160ff1b850184121615611ad257611ad2611a45565b6001600160ff1b0384018313811615611aed57611aed611a45565b50500390565b600082821015611b0557611b05611a45565b500390565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215611b5157600080fd5b815160ff8116811461084e57600080fd5b600181815b80851115611b9d578160001904821115611b8357611b83611a45565b80851615611b9057918102915b93841c9390800290611b67565b509250929050565b600082611bb457506001610467565b81611bc157506000610467565b8160018114611bd75760028114611be157611bfd565b6001915050610467565b60ff841115611bf257611bf2611a45565b50506001821b610467565b5060208310610133831016604e8410600b8410161715611c20575081810a610467565b611c2a8383611b62565b8060001904821115611c3e57611c3e611a45565b029392505050565b600061084e60ff841683611ba5565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6001600160a01b038681168252851660208201526040810184905260806060820181905281018290526000828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60008060408385031215611d4157600080fd5b8251611d4c816117b5565b6020939093015192949293505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215611db957600080fd5b815161084e816117f6565b60005b83811015611ddf578181015183820152602001611dc7565b838111156106005750506000910152565b60008251611e02818460208701611dc4565b9190910192915050565b6020815260008251806020840152611e2b816040850160208701611dc4565b601f01601f1916919091016040019291505056fea2646970667358221220d9fb2f9d936eeb30cb691196abf6f73d519ea9d1d2f5b04f8cf5fafb468c6e8764736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Borrow(address,uint256)": {
        "notice": "借款事件"
      },
      "Liquidated(address,address,uint256)": {
        "notice": "借款人抵押品被清算事件"
      },
      "Repay(address,uint256,uint256)": {
        "notice": "还款事件"
      }
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/MintVault.sol:MintVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 133,
        "contract": "contracts/MintVault.sol:MintVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 910,
        "contract": "contracts/MintVault.sol:MintVault",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/MintVault.sol:MintVault",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/MintVault.sol:MintVault",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 279,
        "contract": "contracts/MintVault.sol:MintVault",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 323,
        "contract": "contracts/MintVault.sol:MintVault",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4080,
        "contract": "contracts/MintVault.sol:MintVault",
        "label": "underlying",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 4082,
        "contract": "contracts/MintVault.sol:MintVault",
        "label": "controller",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 4085,
        "contract": "contracts/MintVault.sol:MintVault",
        "label": "feeConf",
        "offset": 0,
        "slot": "153",
        "type": "t_contract(IFeeConf)4851"
      },
      {
        "astId": 4089,
        "contract": "contracts/MintVault.sol:MintVault",
        "label": "borrows",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3639,
        "contract": "contracts/MintVault.sol:MintVault",
        "label": "decimalScale",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IFeeConf)4851": {
        "encoding": "inplace",
        "label": "contract IFeeConf",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}