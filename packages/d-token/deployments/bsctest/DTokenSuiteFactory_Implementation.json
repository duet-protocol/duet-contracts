{
  "address": "0x684b833C92e777D5Ea2c9D85908f0E14b99d72AA",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "DTokenCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "appCtrl",
      "outputs": [
        {
          "internalType": "contract IController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "aggregator_",
          "type": "address"
        }
      ],
      "name": "createMintingSuite",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dTokenList",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "vault",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "oracle",
              "type": "address"
            }
          ],
          "internalType": "struct DTokenSuiteFactory.DTokenSuite[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeConf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "forgetMintingSuite",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "appCtrl_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feeConf_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sharedVaultImplement_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implement_",
          "type": "address"
        }
      ],
      "name": "setSharedVaultImplement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sharedVaultImplement",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        }
      ],
      "name": "updateAppCtrl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contract_",
          "type": "address"
        }
      ],
      "name": "updateFeeConf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd8e5d8241d7d000f9f4251c51593fee60a94f1be9721896fb370f8bab3a9a2d2",
  "receipt": {
    "to": null,
    "from": "0xe7a2b8C8feD53713F69227e6c3d2384E80CF88a6",
    "contractAddress": "0x684b833C92e777D5Ea2c9D85908f0E14b99d72AA",
    "transactionIndex": 3,
    "gasUsed": "4916267",
    "logsBloom": "0x
    "blockHash": "0x7df0fdef609bed464b48881f5272f0a01b974782844626402700235e54d7441b",
    "transactionHash": "0xd8e5d8241d7d000f9f4251c51593fee60a94f1be9721896fb370f8bab3a9a2d2",
    "logs": [],
    "blockNumber": 21190667,
    "cumulativeGasUsed": "4996456",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 6,
  "solcInputHash": "f0c5b8e3b13b6e3b977d5751816c3c91",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"DTokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"appCtrl\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"aggregator_\",\"type\":\"address\"}],\"name\":\"createMintingSuite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dTokenList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"internalType\":\"struct DTokenSuiteFactory.DTokenSuite[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeConf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"forgetMintingSuite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"appCtrl_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeConf_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sharedVaultImplement_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implement_\",\"type\":\"address\"}],\"name\":\"setSharedVaultImplement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharedVaultImplement\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"}],\"name\":\"updateAppCtrl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contract_\",\"type\":\"address\"}],\"name\":\"updateFeeConf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DTokenSuiteFactory.sol\":\"DTokenSuiteFactory\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\",\"keccak256\":\"0x07536242e24ee7067295d32c08e495a33e605f3c52f8ee4ec3bdcb7a351313d2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\"},\"@private/shared/3rd/chainlink/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@private/shared/libs/Adminable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nabstract contract Adminable {\\n    event AdminUpdated(address indexed user, address indexed newAdmin);\\n\\n    address public admin;\\n\\n    modifier onlyAdmin() virtual {\\n        require(msg.sender == admin, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    function setAdmin(address newAdmin) public virtual onlyAdmin {\\n        _setAdmin(newAdmin);\\n    }\\n\\n    function _setAdmin(address newAdmin) internal {\\n        require(newAdmin != address(0), \\\"Can not set admin to zero address\\\");\\n        admin = newAdmin;\\n\\n        emit AdminUpdated(msg.sender, newAdmin);\\n    }\\n}\\n\",\"keccak256\":\"0xe47c97c0e3edad2d1df3e664376a7bb46e1aaf51b4c4acc73c4a2cfdc747185f\",\"license\":\"GPL-3.0\"},\"contracts/DToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport { ERC20Permit } from \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\\\";\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"./interfaces/ITokenRecipient.sol\\\";\\n\\ncontract DToken is ERC20, ERC20Permit, Ownable {\\n\\n  using Address for address;\\n\\n  mapping(address => bool) public miners;\\n\\n  event MinerChanged(address indexed miner, bool enabled);\\n\\n  constructor(\\n    string memory name_,\\n    string memory symbol_\\n  ) ERC20(name_, symbol_) ERC20Permit(name_) {\\n    _mint(msg.sender, 0);\\n  }\\n\\n  function addMiner(address _miner) public onlyOwner {\\n    miners[_miner] = true;\\n    emit MinerChanged(_miner, true);\\n  }\\n\\n  function removeMiner(address _miner) public onlyOwner {\\n    miners[_miner] = false;\\n    emit MinerChanged(_miner, false);\\n  }\\n\\n\\n  function mint(address to, uint256 amount) public {\\n    require(miners[msg.sender], \\\"invalid miner\\\");\\n    _mint(to, amount);\\n  }\\n\\n  function burn(uint256 amount) public {\\n    _burn(msg.sender, amount);\\n  }\\n\\n  function send(address recipient, uint256 amount, bytes calldata exData) external returns (bool) {\\n    _transfer(msg.sender, recipient, amount);\\n\\n    if (recipient.isContract()) {\\n      bool rv = TokenRecipient(recipient).tokensReceived(msg.sender, amount, exData);\\n      require(rv, \\\"No tokensReceived\\\");\\n    }\\n\\n    return true;\\n  }\\n\\n}\\n\",\"keccak256\":\"0x73612bf69a3fa91e14467912140743105621472345e87f054289c7cb4240bf9e\",\"license\":\"MIT\"},\"contracts/DTokenSuiteFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\npragma abicoder v2;\\n\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"@private/shared/libs/Adminable.sol\\\";\\nimport \\\"@private/shared/3rd/chainlink/AggregatorV3Interface.sol\\\";\\n\\nimport \\\"./interfaces/IController.sol\\\";\\nimport \\\"./interfaces/IUpgradable.sol\\\";\\nimport \\\"./DToken.sol\\\";\\nimport \\\"./DTokenUSDOracle.sol\\\";\\nimport \\\"./MintVault.sol\\\";\\nimport \\\"./MintVault_Proxy.sol\\\";\\n\\n\\ncontract DTokenSuiteFactory is Initializable, Adminable {\\n\\n    struct DTokenSuite {\\n        address token;\\n        address vault;\\n        address oracle;\\n    }\\n\\n    DTokenSuite[] private dTokens;\\n    event DTokenCreated(address token, address vault, address oracle);\\n\\n    IController public appCtrl;\\n    address public feeConf;\\n\\n    address public sharedVaultImplement;\\n\\n\\n    // --------------\\n\\n\\n    function dTokenList() view external returns (DTokenSuite[] memory) {\\n        return dTokens;\\n    }\\n\\n    function initialize(\\n        address admin_,\\n        address appCtrl_,\\n        address feeConf_,\\n        address sharedVaultImplement_\\n    ) public initializer {\\n        require(admin_ != address(0), \\\"Cant set admin to zero address\\\");\\n        _setAdmin(admin_);\\n\\n        appCtrl = IController(appCtrl_);\\n        feeConf = feeConf_;\\n        sharedVaultImplement = sharedVaultImplement_;\\n    }\\n\\n    function updateAppCtrl(address contract_) external onlyAdmin {\\n        appCtrl = IController(contract_);\\n    }\\n\\n    function updateFeeConf(address contract_) external onlyAdmin {\\n        feeConf = contract_;\\n    }\\n\\n\\n     // --------------\\n\\n\\n    function setSharedVaultImplement(address implement_) external onlyAdmin {\\n        sharedVaultImplement = implement_;\\n        for (uint256 i; i < dTokens.length; i++) {\\n            IUpgradable(dTokens[i].vault).upgradeTo(sharedVaultImplement);\\n        }\\n    }\\n\\n    function createMintingSuite(\\n        string memory name_,\\n        string memory symbol_,\\n        AggregatorV3Interface aggregator_\\n    ) external onlyAdmin {\\n        DToken token = new DToken(name_, symbol_);\\n        DTokenUSDOracle oracle = new DTokenUSDOracle();\\n\\n        MintVault_Proxy vault = new MintVault_Proxy(sharedVaultImplement);\\n        vault.initialize(address(appCtrl), feeConf, address(token));\\n\\n        oracle.setAggregator(address(token), aggregator_);\\n        token.addMiner(address(vault));\\n\\n        DTokenSuite memory suite = DTokenSuite(address(token), address(vault), address(oracle));\\n        dTokens.push(suite);\\n        emit DTokenCreated(suite.token, suite.vault, suite.oracle);\\n    }\\n\\n\\n    function forgetMintingSuite(uint index) external onlyAdmin {\\n        for(uint i = index; i < dTokens.length - 1; i++){\\n            dTokens[i] = dTokens[i +1 ];\\n        }\\n        dTokens.pop();\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0x3d83de504e22da1ee87363cd8455a40b3932427f3c559e11ec6c6d67b305de87\",\"license\":\"GPL-3.0\"},\"contracts/DTokenUSDOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@private/shared/3rd/chainlink/AggregatorV3Interface.sol\\\";\\n\\nimport \\\"./interfaces/IUSDOracle.sol\\\";\\n\\ncontract DTokenUSDOracle is Ownable, IUSDOracle {\\n\\n  mapping(address => AggregatorV3Interface) public aggregators;\\n  event SetAggregator(address indexed token, AggregatorV3Interface indexed aggregator);\\n\\n  function setAggregator(address token, AggregatorV3Interface aggregator) external onlyOwner {\\n    uint8 dec = aggregator.decimals();\\n    require(dec == 8, \\\"not support decimals\\\");\\n    aggregators[token] = aggregator;\\n    emit SetAggregator(token, aggregator);\\n  }\\n\\n  // get latest price\\n  function getPrice(address token) external override view returns (uint256) {\\n    (, int256 price, , , ) = aggregators[token].latestRoundData();\\n    require(price >= 0, \\\"Negative Price!\\\");\\n    return uint256(price);\\n  }\\n\\n}\\n\",\"keccak256\":\"0xbdae2ffefe0c1bac70d44ab8dc636449bf642e7e9f02f979052e90b91ef4e481\",\"license\":\"MIT\"},\"contracts/MintVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IDUSD.sol\\\";\\nimport \\\"./interfaces/ITokenRecipient.sol\\\";\\n\\nimport \\\"./_MintVaultBase.sol\\\";\\n\\ncontract MintVault is TokenRecipient, MintVaultBase {\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n  uint internal decimalScale;\\n\\n  function initialize(\\n    address _controller,\\n    address _feeConf,\\n    address _underlying) external initializer {\\n      super.init(_controller, _feeConf, _underlying);\\n      decimalScale = 10 ** IERC20Metadata(_underlying).decimals();\\n  }\\n\\n  function underlyingTransferIn(address sender, uint256 amount) internal virtual override {\\n    IERC20Upgradeable(underlying).safeTransferFrom(sender, address(this), amount);\\n  }\\n\\n  function underlyingTransferOut(address receipt, uint256 amount, bool) internal virtual override {\\n    //  skip transfer to myself\\n    if (receipt == address(this)) {\\n        return;\\n    }\\n\\n    require(receipt != address(0), \\\"receipt is empty\\\");\\n    IERC20Upgradeable(underlying).safeTransfer(receipt, amount);\\n  }\\n\\n  // TODO: \\u4e0d\\u540c\\u7684dAsset \\u53ef\\u4ee5\\u53ef\\u80fd\\u6709\\u4e0d\\u540c\\u7684\\u5b9e\\u73b0mint\\u3002\\n  function underlyingMint(address to, uint amount) internal virtual override {\\n    IDUSD(underlying).mint(to, amount);\\n  }\\n\\n// TODO: \\u4e0d\\u540c\\u7684dAsset \\u53ef\\u4ee5\\u53ef\\u80fd\\u6709\\u4e0d\\u540c\\u7684\\u5b9e\\u73b0mint\\u3002\\n  function underlyingBurn(uint amount) internal virtual override {\\n    IDUSD(underlying).burn(amount);\\n  }\\n\\n  function borrow(uint256 amount) external override {\\n    _borrow(msg.sender, amount);\\n  }\\n\\n\\n  function tokensReceived(address from, uint amount, bytes calldata exData) external override returns (bool) {\\n    require(msg.sender == underlying, \\\"INVALID_CALLER\\\");\\n\\n    uint256 repays = _repayFor(from, from, amount, true);\\n    if (amount > repays) {\\n      underlyingTransferOut(from, amount - repays, true);\\n    }\\n    return true;\\n  }\\n\\n  //\\n  function repay(uint256 amount) external override {\\n    _repayFor(msg.sender, msg.sender, amount, false);\\n  }\\n\\n  function repayTo(address to, uint256 amount) external override {\\n    _repayFor(msg.sender, to, amount, false);\\n  }\\n\\n  function liquidate(address liquidator, address borrower, bytes calldata data) external  {\\n    _liquidate(liquidator, borrower, data);\\n  }\\n\\n  function valueToAmount(uint value, bool dp) external override view returns(uint amount) {\\n    (address oracle, , uint pr) = IController(controller).getValueConf(underlying);\\n    uint price = IUSDOracle(oracle).getPrice(underlying);\\n    if (dp) {\\n      amount = value * decimalScale * PercentBase / price / pr;\\n    } else {\\n      amount = value * decimalScale / price;\\n    }\\n  }\\n\\n  function underlyingAmountValue(uint amount, bool dp) public view returns(uint value) {\\n    if(amount == 0) {\\n      return 0;\\n    }\\n\\n    (address oracle, , uint pr) = IController(controller).getValueConf(underlying);\\n    uint price = IUSDOracle(oracle).getPrice(underlying);\\n    if (dp) {\\n      value = price * amount * pr / PercentBase / decimalScale;\\n    } else {\\n      value = price * amount / decimalScale;\\n    }\\n\\n  }\\n\\n  function userValue(address user, bool dp) external override view returns(uint) {\\n    if(borrows[user] == 0) {\\n      return 0;\\n    }\\n    return underlyingAmountValue(borrows[user], dp);\\n  }\\n\\n  // amount > 0 :  borrows\\n  // amount < 0 :  repay\\n  function pendingValue(address user, int amount) external override view returns(uint) {\\n    if (amount >= 0) {\\n      return underlyingAmountValue(borrows[user] + uint(amount), true);\\n    } else {\\n      return underlyingAmountValue(borrows[user] - uint(0 - amount), true);\\n    }\\n\\n  }\\n\\n}\\n\",\"keccak256\":\"0xee84a7a55301fc05f9278b06d90ea66571e235d705045385d693d015f356a133\",\"license\":\"MIT\"},\"contracts/MintVault_Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\n\\nimport \\\"@openzeppelin/contracts/proxy/Proxy.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\n\\nimport \\\"./MintVault.sol\\\";\\n\\ncontract MintVault_Proxy is MintVault, Proxy, ERC1967Upgrade {\\n\\n    constructor(address _logic) payable {\\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _changeAdmin(msg.sender);\\n        _upgradeTo(_logic);\\n    }\\n\\n    function upgradeTo(address newImplementation) public {\\n        require(msg.sender == _getAdmin(), 'Invalid proxy admin');\\n        _upgradeTo(newImplementation);\\n    }\\n\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n\\n}\\n\",\"keccak256\":\"0xcbab453e145f46c55e433c111d0cbc8d77895895b7382379d80c094b7ea8f08b\",\"license\":\"MIT\"},\"contracts/_MintVaultBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/IMintVault.sol\\\";\\nimport \\\"./interfaces/IController.sol\\\";\\nimport \\\"./interfaces/IUSDOracle.sol\\\";\\nimport \\\"./interfaces/IFeeConf.sol\\\";\\nimport \\\"./interfaces/ILiquidateCallee.sol\\\";\\n\\nabstract contract MintVaultBase is IVault, IMintVault, OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n\\n  uint internal constant PercentBase = 10000;\\n  address public override underlying;\\n  address public controller;\\n  IFeeConf public feeConf;\\n\\n\\n  // \\u7528\\u6237\\u501f\\u6b3e\\n  mapping(address => uint) public borrows;\\n\\n  /**\\n      @notice \\u501f\\u6b3e\\u4e8b\\u4ef6\\n      @param borrower \\u501f\\u6b3e\\u4eba\\n      @param amount \\u501f\\u6b3e\\u4eba\\u5f53\\u524d\\u7684\\u501f\\u6b3e\\u6570\\n    */\\n  event Borrow(address indexed borrower, uint256 amount);\\n\\n  /**\\n      @notice \\u8fd8\\u6b3e\\u4e8b\\u4ef6\\n      @param repayer \\u8fd8\\u6b3e\\u4eba\\n      @param amount \\u8fd8\\u6b3e\\u4eba\\u5b9e\\u9645\\u8fd8\\u6b3e\\u7684\\u6570\\u91cf\\n      @param leftBorrows \\u5269\\u4f59\\u501f\\u6b3e\\u6570\\u91cf\\n    */\\n  event Repay(address indexed repayer, uint256 amount, uint256 leftBorrows);\\n\\n  /**\\n      @notice \\u501f\\u6b3e\\u4eba\\u62b5\\u62bc\\u54c1\\u88ab\\u6e05\\u7b97\\u4e8b\\u4ef6\\n      @param liquidator \\u6e05\\u7b97\\u4eba\\n      @param borrower \\u501f\\u6b3e\\u4eba\\n      @param borrows  \\u501f\\u6b3e\\n    */\\n  event Liquidated(address indexed liquidator, address indexed borrower,  uint256 borrows);\\n\\n  event FeeConfChanged(address feeconf);\\n  event ControllerChanged(address controller);\\n\\n  /**\\n    * @notice \\u521d\\u59cb\\u5316\\n    * @dev  \\u5728Vault\\u521d\\u59cb\\u5316\\u65f6\\u8bbe\\u7f6e\\u8d27\\u5e01\\u57fa\\u7840\\u4fe1\\u606f\\u3002\\n    */\\n  function init(\\n    address _controller,\\n    address _feeConf,\\n    address _underlying) internal {\\n\\n    OwnableUpgradeable.__Ownable_init();\\n    controller = _controller;\\n    feeConf = IFeeConf(_feeConf);\\n    underlying = _underlying;\\n  }\\n\\n  function isDuetVault() external override view returns (bool) {\\n    return true;\\n  }\\n\\n  function underlyingTransferIn(address sender, uint256 amount) internal virtual;\\n  function underlyingTransferOut(\\n      address receipt,\\n      uint256 amount,\\n      bool giveWETH\\n  ) internal virtual;\\n\\n  function underlyingMint(address to, uint amount) internal virtual;\\n  function underlyingBurn(uint amount) internal virtual;\\n\\n  function setFeeConf(address _feeConf) external onlyOwner {\\n    require(_feeConf != address(0), \\\"INVALID_FEECONF\\\");\\n    feeConf = IFeeConf(_feeConf);\\n    emit FeeConfChanged(_feeConf);\\n  }\\n\\n  function setAppController(address _controller) external onlyOwner {\\n    require(_controller != address(0), \\\"INVALID_CONTROLLER\\\");\\n    controller = _controller;\\n    emit ControllerChanged(_controller);\\n  }\\n\\n  /**\\n    @dev \\u501f\\u5165\\u6807\\u7684\\u8d44\\u4ea7\\uff0c\\u501f\\u6b3e\\u5fc5\\u987b\\u6709\\u8db3\\u591f\\u7684\\u8d44\\u4ea7\\u8fdb\\u884c\\u62b5\\u62bc\\n  */\\n  function _borrow(address borrower, uint256 amount) internal nonReentrant {\\n    // \\u98ce\\u63a7\\u68c0\\u67e5\\n    IController(controller).beforeBorrow(borrower, address(this), amount);\\n\\n    (address receiver, uint borrowFee) = feeConf.getConfig(\\\"borrow_fee\\\");\\n\\n    uint fee = amount * borrowFee / PercentBase;\\n    uint actualBorrow = amount - fee;\\n    borrows[borrower] += actualBorrow;\\n\\n    _updateJoinStatus(borrower);\\n\\n    //\\u94f8\\u9020\\n    underlyingMint(borrower, actualBorrow);\\n    if (fee > 0) {\\n      underlyingMint(receiver, fee);\\n    }\\n\\n    emit Borrow(borrower, actualBorrow);\\n  }\\n\\n  /**\\n    @notice \\u8fd8\\u6b3e\\n    @dev \\u501f\\u6b3e\\u4eba\\u507f\\u8fd8\\u672c\\u606f\\uff0c\\u591a\\u4f59\\u8fd8\\u6b3e\\u5c06\\u4f5c\\u4e3a\\u5b58\\u6b3e\\u5b58\\u5165\\u5e02\\u573a\\u3002\\n    @param repayer \\u8fd8\\u6b3e\\u4eba\\n    @param borrower \\u501f\\u6b3e\\u4eba\\n    @param amount \\u8fd8\\u6b3e\\u7684\\u6807\\u7684\\u8d44\\u4ea7\\u6570\\u91cf\\n    */\\n  function _repayFor(address repayer, address borrower, uint256 amount, bool isTransed) internal nonReentrant returns (uint256 repays) {\\n    require(amount > 0, \\\"REPAY_ZERO\\\");\\n    IController(controller).beforeRepay(repayer, address(this), amount);\\n    repays = _repayBorrows(repayer, borrower, amount, isTransed);\\n    require(repays > 0, \\\"NO_LOAN_REPAY\\\");\\n  }\\n\\n  function _repayBorrows(address repayer, address borrower, uint256 amount, bool isTransed) internal returns (uint256 repays) {\\n    uint256 borrowsOld = borrows[borrower];\\n    if (borrowsOld == 0) {\\n      return 0;\\n    }\\n\\n    (address receiver, uint repayFee) = feeConf.getConfig(\\\"repay_fee\\\");\\n    uint fee = borrowsOld * repayFee / PercentBase;\\n    uint actualRepays;\\n    if (amount >= borrowsOld + fee) {  // repay all.\\n      actualRepays = borrowsOld;\\n      borrows[borrower] = 0;\\n      repays = actualRepays + fee;\\n    } else {\\n      actualRepays = amount * PercentBase / (PercentBase + repayFee);\\n      fee = amount - actualRepays;\\n      borrows[borrower] = borrowsOld - actualRepays;\\n      repays = amount;\\n    }\\n\\n    // \\u8f6c\\u79fb\\u8d44\\u4ea7\\n\\n    if (!isTransed) {\\n      underlyingTransferIn(repayer, repays);\\n    } else {\\n      require(amount >= repays, \\\"INSUFFICIENT_REPAY\\\");\\n    }\\n\\n    underlyingBurn(actualRepays);\\n    underlyingTransferOut(receiver, fee, true);\\n\\n    //\\u66f4\\u65b0\\n    emit Repay(borrower, actualRepays, borrows[borrower]);\\n  }\\n\\n  /**\\n    * @notice \\u6e05\\u7b97\\u8d26\\u6237\\u8d44\\u4ea7\\n    * @param liquidator \\u6e05\\u7b97\\u4eba\\n    * @param borrower \\u501f\\u6b3e\\u4eba\\n    */\\n  function _liquidate(address liquidator, address borrower, bytes calldata data) internal nonReentrant {\\n    require(msg.sender == controller, \\\"LIQUIDATE_INVALID_CALLER\\\");\\n    require(liquidator != borrower, \\\"LIQUIDATE_DISABLE_YOURSELF\\\");\\n    uint256 loan = borrows[borrower];\\n\\n    //\\u507f\\u8fd8\\u501f\\u6b3e\\n    if (loan > 0) {\\n      if (data.length > 0) ILiquidateCallee(liquidator).liquidateBorrow(borrower, underlying, loan, data);\\n      underlyingTransferIn(liquidator, loan);\\n    }\\n\\n    borrows[borrower] = 0;\\n    _updateJoinStatus(borrower);\\n\\n    emit Liquidated(liquidator, borrower, loan);\\n  }\\n\\n\\n  function _updateJoinStatus(address _user) internal {\\n    bool isDepositVault = false;\\n    if (borrows[_user] > 0) {\\n      IController(controller).joinVault(_user, isDepositVault);\\n    } else {\\n      IController(controller).exitVault(_user, isDepositVault);\\n    }\\n  }\\n\\n}\\n\",\"keccak256\":\"0x1e6f91998844a6ffa0203811cfc5f3d88df455e67ae5982b4695acc7d182b654\",\"license\":\"MIT\"},\"contracts/interfaces/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IController {\\n  function dyTokens(address) external view returns (address);\\n  function getValueConf(address _underlying) external view returns (address oracle, uint16 dr, uint16 pr);\\n  function getValueConfs(address token0, address token1) external view returns (address oracle0, uint16 dr0, uint16 pr0, address oracle1, uint16 dr1, uint16 pr1);\\n\\n  function strategies(address) external view returns (address);\\n  function dyTokenVaults(address) external view returns (address);\\n\\n  function beforeDeposit(address , address _vault, uint) external view;\\n  function beforeBorrow(address _borrower, address _vault, uint256 _amount) external view;\\n  function beforeWithdraw(address _redeemer, address _vault, uint256 _amount) external view;\\n  function beforeRepay(address _repayer , address _vault, uint256 _amount) external view;\\n\\n  function joinVault(address _user, bool isDeposit) external;\\n  function exitVault(address _user, bool isDeposit) external;\\n\\n\\n  function userValues(address _user, bool _dp) external view returns(uint totalDepositValue, uint totalBorrowValue);\\n  function userTotalValues(address _user, bool _dp) external view returns(uint totalDepositValue, uint totalBorrowValue);\\n\\n  function liquidate(address _borrower, bytes calldata data) external;\\n\\n  // ValidVault 0: uninitialized, default value\\n  // ValidVault 1: No, vault can not be collateralized\\n  // ValidVault 2: Yes, vault can be collateralized\\n  enum ValidVault { UnInit, No, Yes }\\n  function validVaults(address _vault) external view returns(ValidVault);\\n  function validVaultsOfUser(address _vault, address _user) external view returns(ValidVault);\\n\\n  // ------\\n\\n  struct VaultState {\\n    bool enabled;\\n    bool enableDeposit;\\n    bool enableWithdraw;\\n    bool enableBorrow;\\n    bool enableRepay;\\n    bool enableLiquidate;\\n  }\\n  function setVault(address _dyToken, address _vault, uint vtype) external;\\n  function setVaultStates(address _vault, VaultState memory _state) external;\\n  function setOracles(address _underlying, address _oracle, uint16 _discount, uint16 _premium) external;\\n\\n}\\n\",\"keccak256\":\"0xae5d72088c5fa829d75f649b6c4c023d3dfa0ab9a7e7c2dd662d6f1a074c3b33\",\"license\":\"MIT\"},\"contracts/interfaces/IDUSD.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface IDUSD {\\n  function mint(address to, uint256 amount) external;\\n  function burn(uint256 amount) external;\\n  function burnme(uint256 amount) external;\\n  function approve(address to, uint256 amount) external;\\n}\",\"keccak256\":\"0x72b182a75f6f237f86d20466d6fd3646883eb30d7d0d3355422ca82e51af0ab0\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeConf.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IFeeConf {\\n  function getConfig(bytes32 _key) external view returns (address, uint); \\n}\",\"keccak256\":\"0xe9ff93f36b91b0e80f17d1b1a87156e19ca458287fab7913c826ecad19e91367\",\"license\":\"MIT\"},\"contracts/interfaces/ILiquidateCallee.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface ILiquidateCallee {\\n  function liquidateDeposit(address borrower, address underlying, uint amount, bytes calldata data) external;\\n  function liquidateBorrow(address borrower, address underlying, uint amount, bytes calldata data) external;\\n}\",\"keccak256\":\"0x3f4e13053d5d5e69daf33784b338187b400ae027f3b55805bd142d3f8182c13d\",\"license\":\"MIT\"},\"contracts/interfaces/IMintVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IMintVault {\\n\\n  function borrows(address user) external view returns(uint amount);\\n  function borrow(uint256 amount) external;\\n  function repay(uint256 amount) external;\\n  function repayTo(address to, uint256 amount) external;\\n\\n  function valueToAmount(uint value, bool dp) external view returns(uint amount);\\n\\n}\",\"keccak256\":\"0x0a365d475a099d551aef919eba5771f5694dc1d3e14566b69ea557c0c49ea1e1\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenRecipient.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\ninterface TokenRecipient {\\n  // must return ture\\n  function tokensReceived(\\n      address from,\\n      uint amount,\\n      bytes calldata exData\\n  ) external returns (bool);\\n}\",\"keccak256\":\"0xa8ec8cc8df0b9b7e5c5a4130f325268ed5d0a51a1ef1f758ab3fdc5687a85391\",\"license\":\"MIT\"},\"contracts/interfaces/IUSDOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\ninterface IUSDOracle {\\n  // Must 8 dec, same as chainlink decimals.\\n  function getPrice(address token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb2d61b8e116a91ee462037152382f40dda542cb4d40bbd2891472dff6dd057ef\",\"license\":\"MIT\"},\"contracts/interfaces/IUpgradable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.9;\\n\\ninterface IUpgradable {\\n\\n  function upgradeTo(address newImplementation) external;\\n\\n  function upgradeToAndCall(\\n      address newImplementation,\\n      bytes memory data,\\n      bool forceCall\\n  ) external;\\n\\n}\\n\",\"keccak256\":\"0x9b870ae6787d27e35f4a318d16a6184255dd939f87e713d9aff42c032f921f87\",\"license\":\"MIT\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IVault {\\n  // call from controller must impl.\\n  function underlying() external view returns (address);\\n  function isDuetVault() external view returns (bool);\\n  function liquidate(address liquidator, address borrower, bytes calldata data) external;\\n  function userValue(address user, bool dp) external view returns(uint);\\n  function pendingValue(address user, int pending) external view returns(uint);\\n  function underlyingAmountValue(uint amount, bool dp) external view returns(uint value);\\n}\",\"keccak256\":\"0xb713c3e19b97f7018acc1c34cadd92ff78200bbf90f3b68a7b55597f18cb8e33\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615817806100206000396000f3fe60806040523480156200001157600080fd5b5060043610620000c35760003560e01c8063877c8cd1116200007a578063877c8cd1146200016e578063d539c69e1462000182578063e17e14181462000199578063eb88e42b14620001ad578063f851a44014620001c6578063f8c8765e14620001e057600080fd5b80630ee8284d14620000c85780633a97a1e114620000e1578063491e507814620000f85780634ad9e9f1146200010f578063704b6c02146200014057806385aeeac91462000157575b600080fd5b620000df620000d936600462000ba2565b620001f7565b005b620000df620000f236600462000bd2565b62000359565b620000df6200010936600462000bd2565b620003ae565b60025462000123906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b620000df6200015136600462000bd2565b62000403565b620000df6200016836600462000bd2565b62000444565b60035462000123906001600160a01b031681565b620000df6200019336600462000ca4565b62000548565b60045462000123906001600160a01b031681565b620001b762000893565b60405162000137919062000d25565b60005462000123906201000090046001600160a01b031681565b620000df620001f136600462000d8f565b6200091c565b6000546201000090046001600160a01b03163314620002335760405162461bcd60e51b81526004016200022a9062000df4565b60405180910390fd5b805b6001805462000245919062000e30565b811015620003045760016200025b828262000e4a565b815481106200026e576200026e62000e65565b90600052602060002090600302016001828154811062000292576200029262000e65565b60009182526020909120825460039092020180546001600160a01b03199081166001600160a01b03938416178255600180850154908301805483169185169190911790556002938401549390910180549091169290911691909117905580620002fb8162000e7b565b91505062000235565b50600180548062000319576200031962000e99565b60008281526020902060036000199092019182020180546001600160a01b0319908116825560018201805482169055600290910180549091169055905550565b6000546201000090046001600160a01b031633146200038c5760405162461bcd60e51b81526004016200022a9062000df4565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000546201000090046001600160a01b03163314620003e15760405162461bcd60e51b81526004016200022a9062000df4565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000546201000090046001600160a01b03163314620004365760405162461bcd60e51b81526004016200022a9062000df4565b620004418162000a31565b50565b6000546201000090046001600160a01b03163314620004775760405162461bcd60e51b81526004016200022a9062000df4565b600480546001600160a01b0319166001600160a01b03831617905560005b600154811015620005445760018181548110620004b657620004b662000e65565b600091825260209091206003909102016001015460048054604051631b2ce7f360e11b81526001600160a01b039182169281019290925290911690633659cfe690602401600060405180830381600087803b1580156200051557600080fd5b505af11580156200052a573d6000803e3d6000fd5b5050505080806200053b9062000e7b565b91505062000495565b5050565b6000546201000090046001600160a01b031633146200057b5760405162461bcd60e51b81526004016200022a9062000df4565b600083836040516200058d9062000b78565b6200059a92919062000eff565b604051809103906000f080158015620005b7573d6000803e3d6000fd5b5090506000604051620005ca9062000b86565b604051809103906000f080158015620005e7573d6000803e3d6000fd5b506004546040519192506000916001600160a01b03909116906200060b9062000b94565b6001600160a01b039091168152602001604051809103906000f08015801562000638573d6000803e3d6000fd5b5060025460035460405163c0c53b8b60e01b81526001600160a01b0392831660048201529082166024820152858216604482015291925082169063c0c53b8b90606401600060405180830381600087803b1580156200069657600080fd5b505af1158015620006ab573d6000803e3d6000fd5b50506040516339ca53fb60e11b81526001600160a01b038681166004830152878116602483015285169250637394a7f69150604401600060405180830381600087803b158015620006fb57600080fd5b505af115801562000710573d6000803e3d6000fd5b50506040516379cc172f60e11b81526001600160a01b0384811660048301528616925063f3982e5e9150602401600060405180830381600087803b1580156200075857600080fd5b505af11580156200076d573d6000803e3d6000fd5b505060408051606080820183526001600160a01b0388811683528681166020808501918252898316858701908152600180548082018255600091909152865160039091027fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6810180549287166001600160a01b0319938416811790915594517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf7820180549188169184168217905592517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf890910180549190961691168117909455865192835290820152938401529093507fb9b804d067955ba3fb653162be4888bb4494e63911c6a0ae909ecdfcffade9d092500160405180910390a150505050505050565b60606001805480602002602001604051908101604052809291908181526020016000905b8282101562000913576000848152602090819020604080516060810182526003860290920180546001600160a01b03908116845260018083015482168587015260029092015416918301919091529083529092019101620008b7565b50505050905090565b60006200092a600162000ae8565b9050801562000943576000805461ff0019166101001790555b6001600160a01b0385166200099b5760405162461bcd60e51b815260206004820152601e60248201527f43616e74207365742061646d696e20746f207a65726f2061646472657373000060448201526064016200022a565b620009a68562000a31565b600280546001600160a01b038087166001600160a01b031992831617909255600380548684169083161790556004805492851692909116919091179055801562000a2a576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6001600160a01b03811662000a935760405162461bcd60e51b815260206004820152602160248201527f43616e206e6f74207365742061646d696e20746f207a65726f206164647265736044820152607360f81b60648201526084016200022a565b6000805462010000600160b01b031916620100006001600160a01b038416908102919091178255604051909133917f101b8081ff3b56bbf45deb824d86a3b0fd38b7e3dd42421105cf8abe9106db0b9190a350565b60008054610100900460ff161562000b34578160ff16600114801562000b0d5750303b155b62000b2c5760405162461bcd60e51b81526004016200022a9062000f31565b506000919050565b60005460ff80841691161062000b5e5760405162461bcd60e51b81526004016200022a9062000f31565b506000805460ff191660ff92909216919091179055600190565b611c9c8062000f8083390190565b61063f8062002c1c83390190565b612587806200325b83390190565b60006020828403121562000bb557600080fd5b5035919050565b6001600160a01b03811681146200044157600080fd5b60006020828403121562000be557600080fd5b813562000bf28162000bbc565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011262000c2157600080fd5b813567ffffffffffffffff8082111562000c3f5762000c3f62000bf9565b604051601f8301601f19908116603f0116810190828211818310171562000c6a5762000c6a62000bf9565b8160405283815286602085880101111562000c8457600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121562000cba57600080fd5b833567ffffffffffffffff8082111562000cd357600080fd5b62000ce18783880162000c0f565b9450602086013591508082111562000cf857600080fd5b5062000d078682870162000c0f565b925050604084013562000d1a8162000bbc565b809150509250925092565b602080825282518282018190526000919060409081850190868401855b8281101562000d8257815180516001600160a01b039081168652878201518116888701529086015116858501526060909301929085019060010162000d42565b5091979650505050505050565b6000806000806080858703121562000da657600080fd5b843562000db38162000bbc565b9350602085013562000dc58162000bbc565b9250604085013562000dd78162000bbc565b9150606085013562000de98162000bbc565b939692955090935050565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008282101562000e455762000e4562000e1a565b500390565b6000821982111562000e605762000e6062000e1a565b500190565b634e487b7160e01b600052603260045260246000fd5b600060001982141562000e925762000e9262000e1a565b5060010190565b634e487b7160e01b600052603160045260246000fd5b6000815180845260005b8181101562000ed75760208185018101518683018201520162000eb9565b8181111562000eea576000602083870101525b50601f01601f19169290920160200192915050565b60408152600062000f14604083018562000eaf565b828103602084015262000f28818562000eaf565b95945050505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b60608201526080019056fe6101406040523480156200001257600080fd5b5060405162001c9c38038062001c9c8339810160408190526200003591620003e2565b8180604051806040016040528060018152602001603160f81b815250848481600390805190602001906200006b9291906200026f565b508051620000819060049060208401906200026f565b5050825160209384012082519284019290922060e08390526101008190524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818901819052818301979097526060810194909452608080850193909352308483018190528151808603909301835260c09485019091528151919096012090529290925261012052506200012090503362000135565b6200012d33600062000187565b5050620004b0565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038216620001e25760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b8060026000828254620001f691906200044c565b90915550506001600160a01b03821660009081526020819052604081208054839290620002259084906200044c565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b8280546200027d9062000473565b90600052602060002090601f016020900481019282620002a15760008555620002ec565b82601f10620002bc57805160ff1916838001178555620002ec565b82800160010185558215620002ec579182015b82811115620002ec578251825591602001919060010190620002cf565b50620002fa929150620002fe565b5090565b5b80821115620002fa5760008155600101620002ff565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200033d57600080fd5b81516001600160401b03808211156200035a576200035a62000315565b604051601f8301601f19908116603f0116810190828211818310171562000385576200038562000315565b81604052838152602092508683858801011115620003a257600080fd5b600091505b83821015620003c65785820183015181830184015290820190620003a7565b83821115620003d85760008385830101525b9695505050505050565b60008060408385031215620003f657600080fd5b82516001600160401b03808211156200040e57600080fd5b6200041c868387016200032b565b935060208501519150808211156200043357600080fd5b5062000442858286016200032b565b9150509250929050565b600082198211156200046e57634e487b7160e01b600052601160045260246000fd5b500190565b600181811c908216806200048857607f821691505b60208210811415620004aa57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e051610100516101205161179c620005006000396000610d9e01526000610ded01526000610dc801526000610d2101526000610d4b01526000610d75015261179c6000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c806370a08231116100c3578063a457c2d71161007c578063a457c2d7146102ba578063a9059cbb146102cd578063d505accf146102e0578063dd62ed3e146102f3578063f2fde38b14610306578063f3982e5e1461031957600080fd5b806370a0823114610240578063715018a6146102695780637ecebe00146102715780638da5cb5b1461028457806395d89b411461029f5780639bd9bbc6146102a757600080fd5b8063313ce56711610115578063313ce567146101cd5780633644e515146101dc57806339509351146101e457806340c10f19146101f757806342966c681461020a578063648ec7b91461021d57600080fd5b806306fdde0314610152578063095ea7b314610170578063102425901461019357806318160ddd146101a857806323b872dd146101ba575b600080fd5b61015a61032c565b60405161016791906113f8565b60405180910390f35b61018361017e366004611469565b6103be565b6040519015158152602001610167565b6101a66101a1366004611493565b6103d6565b005b6002545b604051908152602001610167565b6101836101c83660046114b5565b61045f565b60405160128152602001610167565b6101ac610483565b6101836101f2366004611469565b610492565b6101a6610205366004611469565b6104b4565b6101a66102183660046114f1565b610511565b61018361022b366004611493565b60086020526000908152604090205460ff1681565b6101ac61024e366004611493565b6001600160a01b031660009081526020819052604090205490565b6101a661051e565b6101ac61027f366004611493565b610554565b6007546040516001600160a01b039091168152602001610167565b61015a610574565b6101836102b536600461150a565b610583565b6101836102c8366004611469565b610676565b6101836102db366004611469565b6106f1565b6101a66102ee366004611591565b6106ff565b6101ac610301366004611604565b610863565b6101a6610314366004611493565b61088e565b6101a6610327366004611493565b610926565b60606003805461033b90611637565b80601f016020809104026020016040519081016040528092919081815260200182805461036790611637565b80156103b45780601f10610389576101008083540402835291602001916103b4565b820191906000526020600020905b81548152906001019060200180831161039757829003601f168201915b5050505050905090565b6000336103cc8185856109a7565b5060019392505050565b6007546001600160a01b031633146104095760405162461bcd60e51b81526004016104009061166c565b60405180910390fd5b6001600160a01b0381166000818152600860209081526040808320805460ff19169055519182527f57669c236ecc06eb96f3d7bc6305804f857a3ed5a6bfe71c68049adae78f6e0f91015b60405180910390a250565b60003361046d858285610acc565b610478858585610b46565b506001949350505050565b600061048d610d14565b905090565b6000336103cc8185856104a58383610863565b6104af91906116b7565b6109a7565b3360009081526008602052604090205460ff166105035760405162461bcd60e51b815260206004820152600d60248201526c34b73b30b634b21036b4b732b960991b6044820152606401610400565b61050d8282610e3b565b5050565b61051b3382610f1a565b50565b6007546001600160a01b031633146105485760405162461bcd60e51b81526004016104009061166c565b6105526000611060565b565b6001600160a01b0381166000908152600560205260408120545b92915050565b60606004805461033b90611637565b6000610590338686610b46565b6001600160a01b0385163b156104785760405163d031426360e01b81526000906001600160a01b0387169063d0314263906105d59033908990899089906004016116cf565b602060405180830381600087803b1580156105ef57600080fd5b505af1158015610603573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106279190611717565b90508061066a5760405162461bcd60e51b8152602060048201526011602482015270139bc81d1bdad95b9cd49958d95a5d9959607a1b6044820152606401610400565b50506001949350505050565b600033816106848286610863565b9050838110156106e45760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610400565b61047882868684036109a7565b6000336103cc818585610b46565b8342111561074f5760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610400565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c988888861077e8c6110b2565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e00160405160208183030381529060405280519060200120905060006107d9826110da565b905060006107e982878787611128565b9050896001600160a01b0316816001600160a01b03161461084c5760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610400565b6108578a8a8a6109a7565b50505050505050505050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6007546001600160a01b031633146108b85760405162461bcd60e51b81526004016104009061166c565b6001600160a01b03811661091d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610400565b61051b81611060565b6007546001600160a01b031633146109505760405162461bcd60e51b81526004016104009061166c565b6001600160a01b038116600081815260086020908152604091829020805460ff1916600190811790915591519182527f57669c236ecc06eb96f3d7bc6305804f857a3ed5a6bfe71c68049adae78f6e0f9101610454565b6001600160a01b038316610a095760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610400565b6001600160a01b038216610a6a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610400565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000610ad88484610863565b90506000198114610b405781811015610b335760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610400565b610b4084848484036109a7565b50505050565b6001600160a01b038316610baa5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610400565b6001600160a01b038216610c0c5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610400565b6001600160a01b03831660009081526020819052604090205481811015610c845760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610400565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610cbb9084906116b7565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610d0791815260200190565b60405180910390a3610b40565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015610d6d57507f000000000000000000000000000000000000000000000000000000000000000046145b15610d9757507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6001600160a01b038216610e915760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610400565b8060026000828254610ea391906116b7565b90915550506001600160a01b03821660009081526020819052604081208054839290610ed09084906116b7565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b038216610f7a5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610400565b6001600160a01b03821660009081526020819052604090205481811015610fee5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610400565b6001600160a01b038316600090815260208190526040812083830390556002805484929061101d908490611739565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610abf565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b03811660009081526005602052604090208054600181018255905b50919050565b600061056e6110e7610d14565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b600080600061113987878787611150565b915091506111468161123d565b5095945050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156111875750600090506003611234565b8460ff16601b1415801561119f57508460ff16601c14155b156111b05750600090506004611234565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611204573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661122d57600060019250925050611234565b9150600090505b94509492505050565b600081600481111561125157611251611750565b141561125a5750565b600181600481111561126e5761126e611750565b14156112bc5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610400565b60028160048111156112d0576112d0611750565b141561131e5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610400565b600381600481111561133257611332611750565b141561138b5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610400565b600481600481111561139f5761139f611750565b141561051b5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610400565b600060208083528351808285015260005b8181101561142557858101830151858201604001528201611409565b81811115611437576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461146457600080fd5b919050565b6000806040838503121561147c57600080fd5b6114858361144d565b946020939093013593505050565b6000602082840312156114a557600080fd5b6114ae8261144d565b9392505050565b6000806000606084860312156114ca57600080fd5b6114d38461144d565b92506114e16020850161144d565b9150604084013590509250925092565b60006020828403121561150357600080fd5b5035919050565b6000806000806060858703121561152057600080fd5b6115298561144d565b935060208501359250604085013567ffffffffffffffff8082111561154d57600080fd5b818701915087601f83011261156157600080fd5b81358181111561157057600080fd5b88602082850101111561158257600080fd5b95989497505060200194505050565b600080600080600080600060e0888a0312156115ac57600080fd5b6115b58861144d565b96506115c36020890161144d565b95506040880135945060608801359350608088013560ff811681146115e757600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561161757600080fd5b6116208361144d565b915061162e6020840161144d565b90509250929050565b600181811c9082168061164b57607f821691505b602082108114156110d457634e487b7160e01b600052602260045260246000fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082198211156116ca576116ca6116a1565b500190565b6001600160a01b0385168152602081018490526060604082018190528101829052818360808301376000818301608090810191909152601f909201601f191601019392505050565b60006020828403121561172957600080fd5b815180151581146114ae57600080fd5b60008282101561174b5761174b6116a1565b500390565b634e487b7160e01b600052602160045260246000fdfea264697066735822122095f5a223484482778450eb01a84b460703b62c9b78f2bb5aa55c7078a39b425964736f6c63430008090033608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6105c18061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063112cdab91461006757806341976e09146100ad578063715018a6146100ce5780637394a7f6146100d85780638da5cb5b146100eb578063f2fde38b146100fc575b600080fd5b610090610075366004610467565b6001602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100c06100bb366004610467565b61010f565b6040519081526020016100a4565b6100d66101f0565b005b6100d66100e636600461048b565b610226565b6000546001600160a01b0316610090565b6100d661010a366004610467565b610367565b6001600160a01b03808216600090815260016020526040808220548151633fabe5a360e21b815291519293849391169163feaf968c9160048083019260a0929190829003018186803b15801561016457600080fd5b505afa158015610178573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019c91906104e3565b50505091505060008112156101ea5760405162461bcd60e51b815260206004820152600f60248201526e4e656761746976652050726963652160881b60448201526064015b60405180910390fd5b92915050565b6000546001600160a01b0316331461021a5760405162461bcd60e51b81526004016101e190610533565b6102246000610402565b565b6000546001600160a01b031633146102505760405162461bcd60e51b81526004016101e190610533565b6000816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561028b57600080fd5b505afa15801561029f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c39190610568565b90508060ff1660081461030f5760405162461bcd60e51b81526020600482015260146024820152736e6f7420737570706f727420646563696d616c7360601b60448201526064016101e1565b6001600160a01b0383811660008181526001602052604080822080546001600160a01b0319169487169485179055517fc437dd54e22b198f1cbc09dee1a8e823dec5346dd8cd48b5be2c55f6e4f517e99190a3505050565b6000546001600160a01b031633146103915760405162461bcd60e51b81526004016101e190610533565b6001600160a01b0381166103f65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101e1565b6103ff81610402565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146103ff57600080fd5b60006020828403121561047957600080fd5b813561048481610452565b9392505050565b6000806040838503121561049e57600080fd5b82356104a981610452565b915060208301356104b981610452565b809150509250929050565b805169ffffffffffffffffffff811681146104de57600080fd5b919050565b600080600080600060a086880312156104fb57600080fd5b610504866104c4565b9450602086015193506040860151925060608601519150610527608087016104c4565b90509295509295909350565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561057a57600080fd5b815160ff8116811461048457600080fdfea2646970667358221220a28469570289b5a5a4de6a368375a0880824d164f5dde255abe37917d809cb3264736f6c634300080900336080604052604051620025873803806200258783398101604081905262000026916200031d565b6200005360017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61046200034f565b600080516020620025478339815191521462000073576200007362000375565b620000a060017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd6200034f565b6000805160206200256783398151915214620000c057620000c062000375565b620000cb33620000dd565b620000d68162000138565b506200038b565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f620001086200017a565b604080516001600160a01b03928316815291841660208301520160405180910390a16200013581620001b3565b50565b620001438162000268565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6000620001a46000805160206200254783398151915260001b6200030b60201b62000c261760201c565b546001600160a01b0316919050565b6001600160a01b0381166200021e5760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b80620002476000805160206200254783398151915260001b6200030b60201b62000c261760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6200027e816200030e60201b62000c291760201c565b620002e25760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840162000215565b80620002476000805160206200256783398151915260001b6200030b60201b62000c261760201c565b90565b6001600160a01b03163b151590565b6000602082840312156200033057600080fd5b81516001600160a01b03811681146200034857600080fd5b9392505050565b6000828210156200037057634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b6121ac806200039b6000396000f3fe60806040526004361061012e5760003560e01c8063877c8cd1116100ab578063ba58591c1161006f578063ba58591c14610350578063c0c53b8b14610370578063c5ebeaec14610390578063d0314263146103b0578063f2fde38b146103d0578063f77c4791146103f05761013d565b8063877c8cd1146102b25780638da5cb5b146102d2578063a06a9ff4146102f0578063a0d9d1d914610310578063ae318c4d146103305761013d565b80635ac28bf9116100f25780635ac28bf9146102055780636695535c146102255780636f307dc314610245578063715018a61461027d57806374eb83c1146102925761013d565b806314223902146101455780631db44b8e146101655780633659cfe614610198578063371fd8e6146101b857806354a5706f146101d85761013d565b3661013d5761013b610410565b005b61013b610410565b34801561015157600080fd5b5061013b610160366004611b01565b610422565b34801561017157600080fd5b50610185610180366004611b3b565b610434565b6040519081526020015b60405180910390f35b3480156101a457600080fd5b5061013b6101b3366004611b6b565b6105b5565b3480156101c457600080fd5b5061013b6101d3366004611b88565b610624565b3480156101e457600080fd5b506101856101f3366004611b6b565b609a6020526000908152604090205481565b34801561021157600080fd5b50610185610220366004611b01565b610635565b34801561023157600080fd5b5061013b610240366004611b6b565b6106a5565b34801561025157600080fd5b50609754610265906001600160a01b031681565b6040516001600160a01b03909116815260200161018f565b34801561028957600080fd5b5061013b61076c565b34801561029e57600080fd5b5061013b6102ad366004611bea565b6107a0565b3480156102be57600080fd5b50609954610265906001600160a01b031681565b3480156102de57600080fd5b506033546001600160a01b0316610265565b3480156102fc57600080fd5b5061018561030b366004611b3b565b6107b2565b34801561031c57600080fd5b5061013b61032b366004611b6b565b6108ef565b34801561033c57600080fd5b5061018561034b366004611c4f565b6109b2565b34801561035c57600080fd5b5060015b604051901515815260200161018f565b34801561037c57600080fd5b5061013b61038b366004611c7d565b610a01565b34801561039c57600080fd5b5061013b6103ab366004611b88565b610afa565b3480156103bc57600080fd5b506103606103cb366004611cc8565b610b04565b3480156103dc57600080fd5b5061013b6103eb366004611b6b565b610b8e565b3480156103fc57600080fd5b50609854610265906001600160a01b031681565b61042061041b610c38565b610c47565b565b61042f3383836000610c6b565b505050565b600082610443575060006105af565b6098546097546040516306b3632760e21b81526001600160a01b03918216600482015260009283921690631acd8c9c9060240160606040518083038186803b15801561048e57600080fd5b505afa1580156104a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c69190611d1e565b6097546040516341976e0960e01b81526001600160a01b03918216600482015293955061ffff91909116935060009290851691506341976e099060240160206040518083038186803b15801561051b57600080fd5b505afa15801561052f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105539190611d63565b9050841561059157609b546127108361056c8985611d92565b6105769190611d92565b6105809190611db1565b61058a9190611db1565b93506105ab565b609b5461059e8783611d92565b6105a89190611db1565b93505b5050505b92915050565b6105bd610d94565b6001600160a01b0316336001600160a01b0316146106185760405162461bcd60e51b815260206004820152601360248201527224b73b30b634b210383937bc3c9030b236b4b760691b60448201526064015b60405180910390fd5b61062181610dc7565b50565b6106313333836000610c6b565b5050565b6000808212610674576001600160a01b0383166000908152609a602052604090205461066d90610666908490611dd3565b6001610434565b90506105af565b61066d610682836000611deb565b6001600160a01b0385166000908152609a60205260409020546106669190611e2a565b6033546001600160a01b031633146106cf5760405162461bcd60e51b815260040161060f90611e41565b6001600160a01b0381166107175760405162461bcd60e51b815260206004820152600f60248201526e24a72b20a624a22fa322a2a1a7a72360891b604482015260640161060f565b609980546001600160a01b0319166001600160a01b0383169081179091556040519081527f2f848457f88c295370f87d543957f8cfe46e0759b3a528ae233eb79885a2949d906020015b60405180910390a150565b6033546001600160a01b031633146107965760405162461bcd60e51b815260040161060f90611e41565b6104206000610e07565b6107ac84848484610e59565b50505050565b6098546097546040516306b3632760e21b81526001600160a01b03918216600482015260009283928392911690631acd8c9c9060240160606040518083038186803b15801561080057600080fd5b505afa158015610814573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108389190611d1e565b6097546040516341976e0960e01b81526001600160a01b03918216600482015293955061ffff91909116935060009290851691506341976e099060240160206040518083038186803b15801561088d57600080fd5b505afa1580156108a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c59190611d63565b905084156108e0578181612710609b548961056c9190611d92565b80609b548761059e9190611d92565b6033546001600160a01b031633146109195760405162461bcd60e51b815260040161060f90611e41565b6001600160a01b0381166109645760405162461bcd60e51b815260206004820152601260248201527124a72b20a624a22fa1a7a72a2927a62622a960711b604482015260640161060f565b609880546001600160a01b0319166001600160a01b0383169081179091556040519081527f027c3e080ed9215f564a9455a666f7e459b3edc0bb6e02a1bf842fde4d0ccfc190602001610761565b6001600160a01b0382166000908152609a60205260408120546109d7575060006105af565b6001600160a01b0383166000908152609a60205260409020546109fa9083610434565b9392505050565b6000610a0d6001611052565b90508015610a25576000805461ff0019166101001790555b610a308484846110df565b816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610a6957600080fd5b505afa158015610a7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa19190611e76565b610aac90600a611f7d565b609b5580156107ac576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050565b6106213382611126565b6097546000906001600160a01b03163314610b525760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa1a0a62622a960911b604482015260640161060f565b6000610b618687876001610c6b565b905080851115610b8057610b8086610b798388611e2a565b6001611316565b60019150505b949350505050565b6033546001600160a01b03163314610bb85760405162461bcd60e51b815260040161060f90611e41565b6001600160a01b038116610c1d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161060f565b61062181610e07565b90565b6001600160a01b03163b151590565b6000610c4261138c565b905090565b3660008037600080366000845af43d6000803e808015610c66573d6000f35b3d6000fd5b600060026065541415610c905760405162461bcd60e51b815260040161060f90611f8c565b600260655582610ccf5760405162461bcd60e51b815260206004820152600a60248201526952455041595f5a45524f60b01b604482015260640161060f565b609854604051631a625c9760e21b81526001600160a01b0387811660048301523060248301526044820186905290911690636989725c9060640160006040518083038186803b158015610d2157600080fd5b505afa158015610d35573d6000803e3d6000fd5b50505050610d45858585856113b4565b905060008111610d875760405162461bcd60e51b815260206004820152600d60248201526c4e4f5f4c4f414e5f524550415960981b604482015260640161060f565b6001606555949350505050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b610dd0816115e8565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60026065541415610e7c5760405162461bcd60e51b815260040161060f90611f8c565b60026065556098546001600160a01b03163314610edb5760405162461bcd60e51b815260206004820152601860248201527f4c49515549444154455f494e56414c49445f43414c4c45520000000000000000604482015260640161060f565b826001600160a01b0316846001600160a01b03161415610f3d5760405162461bcd60e51b815260206004820152601a60248201527f4c49515549444154455f44495341424c455f594f555253454c46000000000000604482015260640161060f565b6001600160a01b0383166000908152609a60205260409020548015610fd7578115610fcd5760975460405163fb66893b60e01b81526001600160a01b038088169263fb66893b92610f9a9289921690869089908990600401611fc3565b600060405180830381600087803b158015610fb457600080fd5b505af1158015610fc8573d6000803e3d6000fd5b505050505b610fd78582611696565b6001600160a01b0384166000908152609a6020526040812055610ff9846116ae565b836001600160a01b0316856001600160a01b03167fde0aa27286f5cb3a4ed853dc4823ead62d63e92cdf13de09d6aece56970721a48360405161103e91815260200190565b60405180910390a350506001606555505050565b60008054610100900460ff1615611099578160ff1660011480156110755750303b155b6110915760405162461bcd60e51b815260040161060f90612017565b506000919050565b60005460ff8084169116106110c05760405162461bcd60e51b815260040161060f90612017565b506000805460ff191660ff92909216919091179055600190565b919050565b6110e7611772565b609880546001600160a01b039485166001600160a01b031991821617909155609980549385169382169390931790925560978054919093169116179055565b600260655414156111495760405162461bcd60e51b815260040161060f90611f8c565b60026065556098546040516315caa9e760e11b81526001600160a01b0384811660048301523060248301526044820184905290911690632b9553ce9060640160006040518083038186803b1580156111a057600080fd5b505afa1580156111b4573d6000803e3d6000fd5b5050609954604051636dd5b69d60e01b815269626f72726f775f66656560b01b6004820152600093508392506001600160a01b0390911690636dd5b69d90602401604080518083038186803b15801561120c57600080fd5b505afa158015611220573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112449190612065565b909250905060006127106112588386611d92565b6112629190611db1565b905060006112708286611e2a565b6001600160a01b0387166000908152609a602052604081208054929350839290919061129d908490611dd3565b909155506112ac9050866116ae565b6112b686826117a1565b81156112c6576112c684836117a1565b856001600160a01b03167fcbc04eca7e9da35cb1393a6135a199ca52e450d5e9251cbd99f7847d33a367508260405161130191815260200190565b60405180910390a25050600160655550505050565b6001600160a01b03831630141561132c57505050565b6001600160a01b0383166113755760405162461bcd60e51b815260206004820152601060248201526f7265636569707420697320656d70747960801b604482015260640161060f565b60975461042f906001600160a01b031684846117da565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610db8565b6001600160a01b0383166000908152609a6020526040812054806113dc576000915050610b86565b609954604051636dd5b69d60e01b81526872657061795f66656560b81b600482015260009182916001600160a01b0390911690636dd5b69d90602401604080518083038186803b15801561142f57600080fd5b505afa158015611443573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114679190612065565b9092509050600061271061147b8386611d92565b6114859190611db1565b905060006114938286611dd3565b88106114c557506001600160a01b0388166000908152609a6020526040812055836114be8282611dd3565b955061151c565b6114d183612710611dd3565b6114dd6127108a611d92565b6114e79190611db1565b90506114f38189611e2a565b91506114ff8186611e2a565b6001600160a01b038a166000908152609a60205260409020558795505b866115305761152b8a87611696565b611575565b858810156115755760405162461bcd60e51b8152602060048201526012602482015271494e53554646494349454e545f524550415960701b604482015260640161060f565b61157e8161183d565b61158a84836001611316565b6001600160a01b0389166000818152609a6020908152604091829020548251858152918201527f77c6871227e5d2dec8dadd5354f78453203e22e669cd0ec4c19d9a8c5edb31d0910160405180910390a25050505050949350505050565b6001600160a01b0381163b6116555760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161060f565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b609754610631906001600160a01b031683308461189e565b6001600160a01b0381166000908152609a6020526040812054156117385760985460405163c4c0048760e01b81526001600160a01b03848116600483015283151560248301529091169063c4c00487906044015b600060405180830381600087803b15801561171c57600080fd5b505af1158015611730573d6000803e3d6000fd5b505050505050565b6098546040516379bf27b160e01b81526001600160a01b0384811660048301528315156024830152909116906379bf27b190604401611702565b600054610100900460ff166117995760405162461bcd60e51b815260040161060f90612093565b6104206118d6565b6097546040516340c10f1960e01b81526001600160a01b03848116600483015260248201849052909116906340c10f1990604401611702565b6040516001600160a01b03831660248201526044810182905261042f90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611906565b609754604051630852cd8d60e31b8152600481018390526001600160a01b03909116906342966c6890602401600060405180830381600087803b15801561188357600080fd5b505af1158015611897573d6000803e3d6000fd5b5050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526107ac9085906323b872dd60e01b90608401611806565b600054610100900460ff166118fd5760405162461bcd60e51b815260040161060f90612093565b61042033610e07565b600061195b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166119d89092919063ffffffff16565b80519091501561042f578080602001905181019061197991906120de565b61042f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161060f565b6060610b868484600085856001600160a01b0385163b611a3a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161060f565b600080866001600160a01b03168587604051611a569190612127565b60006040518083038185875af1925050503d8060008114611a93576040519150601f19603f3d011682016040523d82523d6000602084013e611a98565b606091505b5091509150611aa8828286611ab3565b979650505050505050565b60608315611ac25750816109fa565b825115611ad25782518084602001fd5b8160405162461bcd60e51b815260040161060f9190612143565b6001600160a01b038116811461062157600080fd5b60008060408385031215611b1457600080fd5b8235611b1f81611aec565b946020939093013593505050565b801515811461062157600080fd5b60008060408385031215611b4e57600080fd5b823591506020830135611b6081611b2d565b809150509250929050565b600060208284031215611b7d57600080fd5b81356109fa81611aec565b600060208284031215611b9a57600080fd5b5035919050565b60008083601f840112611bb357600080fd5b50813567ffffffffffffffff811115611bcb57600080fd5b602083019150836020828501011115611be357600080fd5b9250929050565b60008060008060608587031215611c0057600080fd5b8435611c0b81611aec565b93506020850135611c1b81611aec565b9250604085013567ffffffffffffffff811115611c3757600080fd5b611c4387828801611ba1565b95989497509550505050565b60008060408385031215611c6257600080fd5b8235611c6d81611aec565b91506020830135611b6081611b2d565b600080600060608486031215611c9257600080fd5b8335611c9d81611aec565b92506020840135611cad81611aec565b91506040840135611cbd81611aec565b809150509250925092565b60008060008060608587031215611cde57600080fd5b8435611ce981611aec565b935060208501359250604085013567ffffffffffffffff811115611c3757600080fd5b805161ffff811681146110da57600080fd5b600080600060608486031215611d3357600080fd5b8351611d3e81611aec565b9250611d4c60208501611d0c565b9150611d5a60408501611d0c565b90509250925092565b600060208284031215611d7557600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611dac57611dac611d7c565b500290565b600082611dce57634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115611de657611de6611d7c565b500190565b60008083128015600160ff1b850184121615611e0957611e09611d7c565b6001600160ff1b0384018313811615611e2457611e24611d7c565b50500390565b600082821015611e3c57611e3c611d7c565b500390565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215611e8857600080fd5b815160ff811681146109fa57600080fd5b600181815b80851115611ed4578160001904821115611eba57611eba611d7c565b80851615611ec757918102915b93841c9390800290611e9e565b509250929050565b600082611eeb575060016105af565b81611ef8575060006105af565b8160018114611f0e5760028114611f1857611f34565b60019150506105af565b60ff841115611f2957611f29611d7c565b50506001821b6105af565b5060208310610133831016604e8410600b8410161715611f57575081810a6105af565b611f618383611e99565b8060001904821115611f7557611f75611d7c565b029392505050565b60006109fa60ff841683611edc565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6001600160a01b038681168252851660208201526040810184905260806060820181905281018290526000828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6000806040838503121561207857600080fd5b825161208381611aec565b6020939093015192949293505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000602082840312156120f057600080fd5b81516109fa81611b2d565b60005b838110156121165781810151838201526020016120fe565b838111156107ac5750506000910152565b600082516121398184602087016120fb565b9190910192915050565b60208152600082518060208401526121628160408501602087016120fb565b601f01601f1916919091016040019291505056fea2646970667358221220e3926dba4560d1df24214dd80d6489e8607b8247d3a369b78bc38d34808816f664736f6c63430008090033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220c44254fd1c26dc874bdc952150dde64835c09676fc58495fcb215e4fb74aa95b64736f6c63430008090033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000c35760003560e01c8063877c8cd1116200007a578063877c8cd1146200016e578063d539c69e1462000182578063e17e14181462000199578063eb88e42b14620001ad578063f851a44014620001c6578063f8c8765e14620001e057600080fd5b80630ee8284d14620000c85780633a97a1e114620000e1578063491e507814620000f85780634ad9e9f1146200010f578063704b6c02146200014057806385aeeac91462000157575b600080fd5b620000df620000d936600462000ba2565b620001f7565b005b620000df620000f236600462000bd2565b62000359565b620000df6200010936600462000bd2565b620003ae565b60025462000123906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b620000df6200015136600462000bd2565b62000403565b620000df6200016836600462000bd2565b62000444565b60035462000123906001600160a01b031681565b620000df6200019336600462000ca4565b62000548565b60045462000123906001600160a01b031681565b620001b762000893565b60405162000137919062000d25565b60005462000123906201000090046001600160a01b031681565b620000df620001f136600462000d8f565b6200091c565b6000546201000090046001600160a01b03163314620002335760405162461bcd60e51b81526004016200022a9062000df4565b60405180910390fd5b805b6001805462000245919062000e30565b811015620003045760016200025b828262000e4a565b815481106200026e576200026e62000e65565b90600052602060002090600302016001828154811062000292576200029262000e65565b60009182526020909120825460039092020180546001600160a01b03199081166001600160a01b03938416178255600180850154908301805483169185169190911790556002938401549390910180549091169290911691909117905580620002fb8162000e7b565b91505062000235565b50600180548062000319576200031962000e99565b60008281526020902060036000199092019182020180546001600160a01b0319908116825560018201805482169055600290910180549091169055905550565b6000546201000090046001600160a01b031633146200038c5760405162461bcd60e51b81526004016200022a9062000df4565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000546201000090046001600160a01b03163314620003e15760405162461bcd60e51b81526004016200022a9062000df4565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000546201000090046001600160a01b03163314620004365760405162461bcd60e51b81526004016200022a9062000df4565b620004418162000a31565b50565b6000546201000090046001600160a01b03163314620004775760405162461bcd60e51b81526004016200022a9062000df4565b600480546001600160a01b0319166001600160a01b03831617905560005b600154811015620005445760018181548110620004b657620004b662000e65565b600091825260209091206003909102016001015460048054604051631b2ce7f360e11b81526001600160a01b039182169281019290925290911690633659cfe690602401600060405180830381600087803b1580156200051557600080fd5b505af11580156200052a573d6000803e3d6000fd5b5050505080806200053b9062000e7b565b91505062000495565b5050565b6000546201000090046001600160a01b031633146200057b5760405162461bcd60e51b81526004016200022a9062000df4565b600083836040516200058d9062000b78565b6200059a92919062000eff565b604051809103906000f080158015620005b7573d6000803e3d6000fd5b5090506000604051620005ca9062000b86565b604051809103906000f080158015620005e7573d6000803e3d6000fd5b506004546040519192506000916001600160a01b03909116906200060b9062000b94565b6001600160a01b039091168152602001604051809103906000f08015801562000638573d6000803e3d6000fd5b5060025460035460405163c0c53b8b60e01b81526001600160a01b0392831660048201529082166024820152858216604482015291925082169063c0c53b8b90606401600060405180830381600087803b1580156200069657600080fd5b505af1158015620006ab573d6000803e3d6000fd5b50506040516339ca53fb60e11b81526001600160a01b038681166004830152878116602483015285169250637394a7f69150604401600060405180830381600087803b158015620006fb57600080fd5b505af115801562000710573d6000803e3d6000fd5b50506040516379cc172f60e11b81526001600160a01b0384811660048301528616925063f3982e5e9150602401600060405180830381600087803b1580156200075857600080fd5b505af11580156200076d573d6000803e3d6000fd5b505060408051606080820183526001600160a01b0388811683528681166020808501918252898316858701908152600180548082018255600091909152865160039091027fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6810180549287166001600160a01b0319938416811790915594517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf7820180549188169184168217905592517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf890910180549190961691168117909455865192835290820152938401529093507fb9b804d067955ba3fb653162be4888bb4494e63911c6a0ae909ecdfcffade9d092500160405180910390a150505050505050565b60606001805480602002602001604051908101604052809291908181526020016000905b8282101562000913576000848152602090819020604080516060810182526003860290920180546001600160a01b03908116845260018083015482168587015260029092015416918301919091529083529092019101620008b7565b50505050905090565b60006200092a600162000ae8565b9050801562000943576000805461ff0019166101001790555b6001600160a01b0385166200099b5760405162461bcd60e51b815260206004820152601e60248201527f43616e74207365742061646d696e20746f207a65726f2061646472657373000060448201526064016200022a565b620009a68562000a31565b600280546001600160a01b038087166001600160a01b031992831617909255600380548684169083161790556004805492851692909116919091179055801562000a2a576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6001600160a01b03811662000a935760405162461bcd60e51b815260206004820152602160248201527f43616e206e6f74207365742061646d696e20746f207a65726f206164647265736044820152607360f81b60648201526084016200022a565b6000805462010000600160b01b031916620100006001600160a01b038416908102919091178255604051909133917f101b8081ff3b56bbf45deb824d86a3b0fd38b7e3dd42421105cf8abe9106db0b9190a350565b60008054610100900460ff161562000b34578160ff16600114801562000b0d5750303b155b62000b2c5760405162461bcd60e51b81526004016200022a9062000f31565b506000919050565b60005460ff80841691161062000b5e5760405162461bcd60e51b81526004016200022a9062000f31565b506000805460ff191660ff92909216919091179055600190565b611c9c8062000f8083390190565b61063f8062002c1c83390190565b612587806200325b83390190565b60006020828403121562000bb557600080fd5b5035919050565b6001600160a01b03811681146200044157600080fd5b60006020828403121562000be557600080fd5b813562000bf28162000bbc565b9392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011262000c2157600080fd5b813567ffffffffffffffff8082111562000c3f5762000c3f62000bf9565b604051601f8301601f19908116603f0116810190828211818310171562000c6a5762000c6a62000bf9565b8160405283815286602085880101111562000c8457600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121562000cba57600080fd5b833567ffffffffffffffff8082111562000cd357600080fd5b62000ce18783880162000c0f565b9450602086013591508082111562000cf857600080fd5b5062000d078682870162000c0f565b925050604084013562000d1a8162000bbc565b809150509250925092565b602080825282518282018190526000919060409081850190868401855b8281101562000d8257815180516001600160a01b039081168652878201518116888701529086015116858501526060909301929085019060010162000d42565b5091979650505050505050565b6000806000806080858703121562000da657600080fd5b843562000db38162000bbc565b9350602085013562000dc58162000bbc565b9250604085013562000dd78162000bbc565b9150606085013562000de98162000bbc565b939692955090935050565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008282101562000e455762000e4562000e1a565b500390565b6000821982111562000e605762000e6062000e1a565b500190565b634e487b7160e01b600052603260045260246000fd5b600060001982141562000e925762000e9262000e1a565b5060010190565b634e487b7160e01b600052603160045260246000fd5b6000815180845260005b8181101562000ed75760208185018101518683018201520162000eb9565b8181111562000eea576000602083870101525b50601f01601f19169290920160200192915050565b60408152600062000f14604083018562000eaf565b828103602084015262000f28818562000eaf565b95945050505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b60608201526080019056fe6101406040523480156200001257600080fd5b5060405162001c9c38038062001c9c8339810160408190526200003591620003e2565b8180604051806040016040528060018152602001603160f81b815250848481600390805190602001906200006b9291906200026f565b508051620000819060049060208401906200026f565b5050825160209384012082519284019290922060e08390526101008190524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818901819052818301979097526060810194909452608080850193909352308483018190528151808603909301835260c09485019091528151919096012090529290925261012052506200012090503362000135565b6200012d33600062000187565b5050620004b0565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038216620001e25760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b8060026000828254620001f691906200044c565b90915550506001600160a01b03821660009081526020819052604081208054839290620002259084906200044c565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b8280546200027d9062000473565b90600052602060002090601f016020900481019282620002a15760008555620002ec565b82601f10620002bc57805160ff1916838001178555620002ec565b82800160010185558215620002ec579182015b82811115620002ec578251825591602001919060010190620002cf565b50620002fa929150620002fe565b5090565b5b80821115620002fa5760008155600101620002ff565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200033d57600080fd5b81516001600160401b03808211156200035a576200035a62000315565b604051601f8301601f19908116603f0116810190828211818310171562000385576200038562000315565b81604052838152602092508683858801011115620003a257600080fd5b600091505b83821015620003c65785820183015181830184015290820190620003a7565b83821115620003d85760008385830101525b9695505050505050565b60008060408385031215620003f657600080fd5b82516001600160401b03808211156200040e57600080fd5b6200041c868387016200032b565b935060208501519150808211156200043357600080fd5b5062000442858286016200032b565b9150509250929050565b600082198211156200046e57634e487b7160e01b600052601160045260246000fd5b500190565b600181811c908216806200048857607f821691505b60208210811415620004aa57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e051610100516101205161179c620005006000396000610d9e01526000610ded01526000610dc801526000610d2101526000610d4b01526000610d75015261179c6000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c806370a08231116100c3578063a457c2d71161007c578063a457c2d7146102ba578063a9059cbb146102cd578063d505accf146102e0578063dd62ed3e146102f3578063f2fde38b14610306578063f3982e5e1461031957600080fd5b806370a0823114610240578063715018a6146102695780637ecebe00146102715780638da5cb5b1461028457806395d89b411461029f5780639bd9bbc6146102a757600080fd5b8063313ce56711610115578063313ce567146101cd5780633644e515146101dc57806339509351146101e457806340c10f19146101f757806342966c681461020a578063648ec7b91461021d57600080fd5b806306fdde0314610152578063095ea7b314610170578063102425901461019357806318160ddd146101a857806323b872dd146101ba575b600080fd5b61015a61032c565b60405161016791906113f8565b60405180910390f35b61018361017e366004611469565b6103be565b6040519015158152602001610167565b6101a66101a1366004611493565b6103d6565b005b6002545b604051908152602001610167565b6101836101c83660046114b5565b61045f565b60405160128152602001610167565b6101ac610483565b6101836101f2366004611469565b610492565b6101a6610205366004611469565b6104b4565b6101a66102183660046114f1565b610511565b61018361022b366004611493565b60086020526000908152604090205460ff1681565b6101ac61024e366004611493565b6001600160a01b031660009081526020819052604090205490565b6101a661051e565b6101ac61027f366004611493565b610554565b6007546040516001600160a01b039091168152602001610167565b61015a610574565b6101836102b536600461150a565b610583565b6101836102c8366004611469565b610676565b6101836102db366004611469565b6106f1565b6101a66102ee366004611591565b6106ff565b6101ac610301366004611604565b610863565b6101a6610314366004611493565b61088e565b6101a6610327366004611493565b610926565b60606003805461033b90611637565b80601f016020809104026020016040519081016040528092919081815260200182805461036790611637565b80156103b45780601f10610389576101008083540402835291602001916103b4565b820191906000526020600020905b81548152906001019060200180831161039757829003601f168201915b5050505050905090565b6000336103cc8185856109a7565b5060019392505050565b6007546001600160a01b031633146104095760405162461bcd60e51b81526004016104009061166c565b60405180910390fd5b6001600160a01b0381166000818152600860209081526040808320805460ff19169055519182527f57669c236ecc06eb96f3d7bc6305804f857a3ed5a6bfe71c68049adae78f6e0f91015b60405180910390a250565b60003361046d858285610acc565b610478858585610b46565b506001949350505050565b600061048d610d14565b905090565b6000336103cc8185856104a58383610863565b6104af91906116b7565b6109a7565b3360009081526008602052604090205460ff166105035760405162461bcd60e51b815260206004820152600d60248201526c34b73b30b634b21036b4b732b960991b6044820152606401610400565b61050d8282610e3b565b5050565b61051b3382610f1a565b50565b6007546001600160a01b031633146105485760405162461bcd60e51b81526004016104009061166c565b6105526000611060565b565b6001600160a01b0381166000908152600560205260408120545b92915050565b60606004805461033b90611637565b6000610590338686610b46565b6001600160a01b0385163b156104785760405163d031426360e01b81526000906001600160a01b0387169063d0314263906105d59033908990899089906004016116cf565b602060405180830381600087803b1580156105ef57600080fd5b505af1158015610603573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106279190611717565b90508061066a5760405162461bcd60e51b8152602060048201526011602482015270139bc81d1bdad95b9cd49958d95a5d9959607a1b6044820152606401610400565b50506001949350505050565b600033816106848286610863565b9050838110156106e45760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610400565b61047882868684036109a7565b6000336103cc818585610b46565b8342111561074f5760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606401610400565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c988888861077e8c6110b2565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e00160405160208183030381529060405280519060200120905060006107d9826110da565b905060006107e982878787611128565b9050896001600160a01b0316816001600160a01b03161461084c5760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606401610400565b6108578a8a8a6109a7565b50505050505050505050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6007546001600160a01b031633146108b85760405162461bcd60e51b81526004016104009061166c565b6001600160a01b03811661091d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610400565b61051b81611060565b6007546001600160a01b031633146109505760405162461bcd60e51b81526004016104009061166c565b6001600160a01b038116600081815260086020908152604091829020805460ff1916600190811790915591519182527f57669c236ecc06eb96f3d7bc6305804f857a3ed5a6bfe71c68049adae78f6e0f9101610454565b6001600160a01b038316610a095760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610400565b6001600160a01b038216610a6a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610400565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6000610ad88484610863565b90506000198114610b405781811015610b335760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610400565b610b4084848484036109a7565b50505050565b6001600160a01b038316610baa5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610400565b6001600160a01b038216610c0c5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610400565b6001600160a01b03831660009081526020819052604090205481811015610c845760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610400565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610cbb9084906116b7565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610d0791815260200190565b60405180910390a3610b40565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015610d6d57507f000000000000000000000000000000000000000000000000000000000000000046145b15610d9757507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6001600160a01b038216610e915760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610400565b8060026000828254610ea391906116b7565b90915550506001600160a01b03821660009081526020819052604081208054839290610ed09084906116b7565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b038216610f7a5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610400565b6001600160a01b03821660009081526020819052604090205481811015610fee5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610400565b6001600160a01b038316600090815260208190526040812083830390556002805484929061101d908490611739565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610abf565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b03811660009081526005602052604090208054600181018255905b50919050565b600061056e6110e7610d14565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b600080600061113987878787611150565b915091506111468161123d565b5095945050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156111875750600090506003611234565b8460ff16601b1415801561119f57508460ff16601c14155b156111b05750600090506004611234565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611204573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661122d57600060019250925050611234565b9150600090505b94509492505050565b600081600481111561125157611251611750565b141561125a5750565b600181600481111561126e5761126e611750565b14156112bc5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610400565b60028160048111156112d0576112d0611750565b141561131e5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610400565b600381600481111561133257611332611750565b141561138b5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610400565b600481600481111561139f5761139f611750565b141561051b5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610400565b600060208083528351808285015260005b8181101561142557858101830151858201604001528201611409565b81811115611437576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461146457600080fd5b919050565b6000806040838503121561147c57600080fd5b6114858361144d565b946020939093013593505050565b6000602082840312156114a557600080fd5b6114ae8261144d565b9392505050565b6000806000606084860312156114ca57600080fd5b6114d38461144d565b92506114e16020850161144d565b9150604084013590509250925092565b60006020828403121561150357600080fd5b5035919050565b6000806000806060858703121561152057600080fd5b6115298561144d565b935060208501359250604085013567ffffffffffffffff8082111561154d57600080fd5b818701915087601f83011261156157600080fd5b81358181111561157057600080fd5b88602082850101111561158257600080fd5b95989497505060200194505050565b600080600080600080600060e0888a0312156115ac57600080fd5b6115b58861144d565b96506115c36020890161144d565b95506040880135945060608801359350608088013560ff811681146115e757600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561161757600080fd5b6116208361144d565b915061162e6020840161144d565b90509250929050565b600181811c9082168061164b57607f821691505b602082108114156110d457634e487b7160e01b600052602260045260246000fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082198211156116ca576116ca6116a1565b500190565b6001600160a01b0385168152602081018490526060604082018190528101829052818360808301376000818301608090810191909152601f909201601f191601019392505050565b60006020828403121561172957600080fd5b815180151581146114ae57600080fd5b60008282101561174b5761174b6116a1565b500390565b634e487b7160e01b600052602160045260246000fdfea264697066735822122095f5a223484482778450eb01a84b460703b62c9b78f2bb5aa55c7078a39b425964736f6c63430008090033608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6105c18061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063112cdab91461006757806341976e09146100ad578063715018a6146100ce5780637394a7f6146100d85780638da5cb5b146100eb578063f2fde38b146100fc575b600080fd5b610090610075366004610467565b6001602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100c06100bb366004610467565b61010f565b6040519081526020016100a4565b6100d66101f0565b005b6100d66100e636600461048b565b610226565b6000546001600160a01b0316610090565b6100d661010a366004610467565b610367565b6001600160a01b03808216600090815260016020526040808220548151633fabe5a360e21b815291519293849391169163feaf968c9160048083019260a0929190829003018186803b15801561016457600080fd5b505afa158015610178573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019c91906104e3565b50505091505060008112156101ea5760405162461bcd60e51b815260206004820152600f60248201526e4e656761746976652050726963652160881b60448201526064015b60405180910390fd5b92915050565b6000546001600160a01b0316331461021a5760405162461bcd60e51b81526004016101e190610533565b6102246000610402565b565b6000546001600160a01b031633146102505760405162461bcd60e51b81526004016101e190610533565b6000816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561028b57600080fd5b505afa15801561029f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c39190610568565b90508060ff1660081461030f5760405162461bcd60e51b81526020600482015260146024820152736e6f7420737570706f727420646563696d616c7360601b60448201526064016101e1565b6001600160a01b0383811660008181526001602052604080822080546001600160a01b0319169487169485179055517fc437dd54e22b198f1cbc09dee1a8e823dec5346dd8cd48b5be2c55f6e4f517e99190a3505050565b6000546001600160a01b031633146103915760405162461bcd60e51b81526004016101e190610533565b6001600160a01b0381166103f65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101e1565b6103ff81610402565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146103ff57600080fd5b60006020828403121561047957600080fd5b813561048481610452565b9392505050565b6000806040838503121561049e57600080fd5b82356104a981610452565b915060208301356104b981610452565b809150509250929050565b805169ffffffffffffffffffff811681146104de57600080fd5b919050565b600080600080600060a086880312156104fb57600080fd5b610504866104c4565b9450602086015193506040860151925060608601519150610527608087016104c4565b90509295509295909350565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561057a57600080fd5b815160ff8116811461048457600080fdfea2646970667358221220a28469570289b5a5a4de6a368375a0880824d164f5dde255abe37917d809cb3264736f6c634300080900336080604052604051620025873803806200258783398101604081905262000026916200031d565b6200005360017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61046200034f565b600080516020620025478339815191521462000073576200007362000375565b620000a060017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd6200034f565b6000805160206200256783398151915214620000c057620000c062000375565b620000cb33620000dd565b620000d68162000138565b506200038b565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f620001086200017a565b604080516001600160a01b03928316815291841660208301520160405180910390a16200013581620001b3565b50565b620001438162000268565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6000620001a46000805160206200254783398151915260001b6200030b60201b62000c261760201c565b546001600160a01b0316919050565b6001600160a01b0381166200021e5760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b80620002476000805160206200254783398151915260001b6200030b60201b62000c261760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6200027e816200030e60201b62000c291760201c565b620002e25760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840162000215565b80620002476000805160206200256783398151915260001b6200030b60201b62000c261760201c565b90565b6001600160a01b03163b151590565b6000602082840312156200033057600080fd5b81516001600160a01b03811681146200034857600080fd5b9392505050565b6000828210156200037057634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b6121ac806200039b6000396000f3fe60806040526004361061012e5760003560e01c8063877c8cd1116100ab578063ba58591c1161006f578063ba58591c14610350578063c0c53b8b14610370578063c5ebeaec14610390578063d0314263146103b0578063f2fde38b146103d0578063f77c4791146103f05761013d565b8063877c8cd1146102b25780638da5cb5b146102d2578063a06a9ff4146102f0578063a0d9d1d914610310578063ae318c4d146103305761013d565b80635ac28bf9116100f25780635ac28bf9146102055780636695535c146102255780636f307dc314610245578063715018a61461027d57806374eb83c1146102925761013d565b806314223902146101455780631db44b8e146101655780633659cfe614610198578063371fd8e6146101b857806354a5706f146101d85761013d565b3661013d5761013b610410565b005b61013b610410565b34801561015157600080fd5b5061013b610160366004611b01565b610422565b34801561017157600080fd5b50610185610180366004611b3b565b610434565b6040519081526020015b60405180910390f35b3480156101a457600080fd5b5061013b6101b3366004611b6b565b6105b5565b3480156101c457600080fd5b5061013b6101d3366004611b88565b610624565b3480156101e457600080fd5b506101856101f3366004611b6b565b609a6020526000908152604090205481565b34801561021157600080fd5b50610185610220366004611b01565b610635565b34801561023157600080fd5b5061013b610240366004611b6b565b6106a5565b34801561025157600080fd5b50609754610265906001600160a01b031681565b6040516001600160a01b03909116815260200161018f565b34801561028957600080fd5b5061013b61076c565b34801561029e57600080fd5b5061013b6102ad366004611bea565b6107a0565b3480156102be57600080fd5b50609954610265906001600160a01b031681565b3480156102de57600080fd5b506033546001600160a01b0316610265565b3480156102fc57600080fd5b5061018561030b366004611b3b565b6107b2565b34801561031c57600080fd5b5061013b61032b366004611b6b565b6108ef565b34801561033c57600080fd5b5061018561034b366004611c4f565b6109b2565b34801561035c57600080fd5b5060015b604051901515815260200161018f565b34801561037c57600080fd5b5061013b61038b366004611c7d565b610a01565b34801561039c57600080fd5b5061013b6103ab366004611b88565b610afa565b3480156103bc57600080fd5b506103606103cb366004611cc8565b610b04565b3480156103dc57600080fd5b5061013b6103eb366004611b6b565b610b8e565b3480156103fc57600080fd5b50609854610265906001600160a01b031681565b61042061041b610c38565b610c47565b565b61042f3383836000610c6b565b505050565b600082610443575060006105af565b6098546097546040516306b3632760e21b81526001600160a01b03918216600482015260009283921690631acd8c9c9060240160606040518083038186803b15801561048e57600080fd5b505afa1580156104a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c69190611d1e565b6097546040516341976e0960e01b81526001600160a01b03918216600482015293955061ffff91909116935060009290851691506341976e099060240160206040518083038186803b15801561051b57600080fd5b505afa15801561052f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105539190611d63565b9050841561059157609b546127108361056c8985611d92565b6105769190611d92565b6105809190611db1565b61058a9190611db1565b93506105ab565b609b5461059e8783611d92565b6105a89190611db1565b93505b5050505b92915050565b6105bd610d94565b6001600160a01b0316336001600160a01b0316146106185760405162461bcd60e51b815260206004820152601360248201527224b73b30b634b210383937bc3c9030b236b4b760691b60448201526064015b60405180910390fd5b61062181610dc7565b50565b6106313333836000610c6b565b5050565b6000808212610674576001600160a01b0383166000908152609a602052604090205461066d90610666908490611dd3565b6001610434565b90506105af565b61066d610682836000611deb565b6001600160a01b0385166000908152609a60205260409020546106669190611e2a565b6033546001600160a01b031633146106cf5760405162461bcd60e51b815260040161060f90611e41565b6001600160a01b0381166107175760405162461bcd60e51b815260206004820152600f60248201526e24a72b20a624a22fa322a2a1a7a72360891b604482015260640161060f565b609980546001600160a01b0319166001600160a01b0383169081179091556040519081527f2f848457f88c295370f87d543957f8cfe46e0759b3a528ae233eb79885a2949d906020015b60405180910390a150565b6033546001600160a01b031633146107965760405162461bcd60e51b815260040161060f90611e41565b6104206000610e07565b6107ac84848484610e59565b50505050565b6098546097546040516306b3632760e21b81526001600160a01b03918216600482015260009283928392911690631acd8c9c9060240160606040518083038186803b15801561080057600080fd5b505afa158015610814573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108389190611d1e565b6097546040516341976e0960e01b81526001600160a01b03918216600482015293955061ffff91909116935060009290851691506341976e099060240160206040518083038186803b15801561088d57600080fd5b505afa1580156108a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c59190611d63565b905084156108e0578181612710609b548961056c9190611d92565b80609b548761059e9190611d92565b6033546001600160a01b031633146109195760405162461bcd60e51b815260040161060f90611e41565b6001600160a01b0381166109645760405162461bcd60e51b815260206004820152601260248201527124a72b20a624a22fa1a7a72a2927a62622a960711b604482015260640161060f565b609880546001600160a01b0319166001600160a01b0383169081179091556040519081527f027c3e080ed9215f564a9455a666f7e459b3edc0bb6e02a1bf842fde4d0ccfc190602001610761565b6001600160a01b0382166000908152609a60205260408120546109d7575060006105af565b6001600160a01b0383166000908152609a60205260409020546109fa9083610434565b9392505050565b6000610a0d6001611052565b90508015610a25576000805461ff0019166101001790555b610a308484846110df565b816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610a6957600080fd5b505afa158015610a7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa19190611e76565b610aac90600a611f7d565b609b5580156107ac576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050565b6106213382611126565b6097546000906001600160a01b03163314610b525760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa1a0a62622a960911b604482015260640161060f565b6000610b618687876001610c6b565b905080851115610b8057610b8086610b798388611e2a565b6001611316565b60019150505b949350505050565b6033546001600160a01b03163314610bb85760405162461bcd60e51b815260040161060f90611e41565b6001600160a01b038116610c1d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161060f565b61062181610e07565b90565b6001600160a01b03163b151590565b6000610c4261138c565b905090565b3660008037600080366000845af43d6000803e808015610c66573d6000f35b3d6000fd5b600060026065541415610c905760405162461bcd60e51b815260040161060f90611f8c565b600260655582610ccf5760405162461bcd60e51b815260206004820152600a60248201526952455041595f5a45524f60b01b604482015260640161060f565b609854604051631a625c9760e21b81526001600160a01b0387811660048301523060248301526044820186905290911690636989725c9060640160006040518083038186803b158015610d2157600080fd5b505afa158015610d35573d6000803e3d6000fd5b50505050610d45858585856113b4565b905060008111610d875760405162461bcd60e51b815260206004820152600d60248201526c4e4f5f4c4f414e5f524550415960981b604482015260640161060f565b6001606555949350505050565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b610dd0816115e8565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60026065541415610e7c5760405162461bcd60e51b815260040161060f90611f8c565b60026065556098546001600160a01b03163314610edb5760405162461bcd60e51b815260206004820152601860248201527f4c49515549444154455f494e56414c49445f43414c4c45520000000000000000604482015260640161060f565b826001600160a01b0316846001600160a01b03161415610f3d5760405162461bcd60e51b815260206004820152601a60248201527f4c49515549444154455f44495341424c455f594f555253454c46000000000000604482015260640161060f565b6001600160a01b0383166000908152609a60205260409020548015610fd7578115610fcd5760975460405163fb66893b60e01b81526001600160a01b038088169263fb66893b92610f9a9289921690869089908990600401611fc3565b600060405180830381600087803b158015610fb457600080fd5b505af1158015610fc8573d6000803e3d6000fd5b505050505b610fd78582611696565b6001600160a01b0384166000908152609a6020526040812055610ff9846116ae565b836001600160a01b0316856001600160a01b03167fde0aa27286f5cb3a4ed853dc4823ead62d63e92cdf13de09d6aece56970721a48360405161103e91815260200190565b60405180910390a350506001606555505050565b60008054610100900460ff1615611099578160ff1660011480156110755750303b155b6110915760405162461bcd60e51b815260040161060f90612017565b506000919050565b60005460ff8084169116106110c05760405162461bcd60e51b815260040161060f90612017565b506000805460ff191660ff92909216919091179055600190565b919050565b6110e7611772565b609880546001600160a01b039485166001600160a01b031991821617909155609980549385169382169390931790925560978054919093169116179055565b600260655414156111495760405162461bcd60e51b815260040161060f90611f8c565b60026065556098546040516315caa9e760e11b81526001600160a01b0384811660048301523060248301526044820184905290911690632b9553ce9060640160006040518083038186803b1580156111a057600080fd5b505afa1580156111b4573d6000803e3d6000fd5b5050609954604051636dd5b69d60e01b815269626f72726f775f66656560b01b6004820152600093508392506001600160a01b0390911690636dd5b69d90602401604080518083038186803b15801561120c57600080fd5b505afa158015611220573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112449190612065565b909250905060006127106112588386611d92565b6112629190611db1565b905060006112708286611e2a565b6001600160a01b0387166000908152609a602052604081208054929350839290919061129d908490611dd3565b909155506112ac9050866116ae565b6112b686826117a1565b81156112c6576112c684836117a1565b856001600160a01b03167fcbc04eca7e9da35cb1393a6135a199ca52e450d5e9251cbd99f7847d33a367508260405161130191815260200190565b60405180910390a25050600160655550505050565b6001600160a01b03831630141561132c57505050565b6001600160a01b0383166113755760405162461bcd60e51b815260206004820152601060248201526f7265636569707420697320656d70747960801b604482015260640161060f565b60975461042f906001600160a01b031684846117da565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610db8565b6001600160a01b0383166000908152609a6020526040812054806113dc576000915050610b86565b609954604051636dd5b69d60e01b81526872657061795f66656560b81b600482015260009182916001600160a01b0390911690636dd5b69d90602401604080518083038186803b15801561142f57600080fd5b505afa158015611443573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114679190612065565b9092509050600061271061147b8386611d92565b6114859190611db1565b905060006114938286611dd3565b88106114c557506001600160a01b0388166000908152609a6020526040812055836114be8282611dd3565b955061151c565b6114d183612710611dd3565b6114dd6127108a611d92565b6114e79190611db1565b90506114f38189611e2a565b91506114ff8186611e2a565b6001600160a01b038a166000908152609a60205260409020558795505b866115305761152b8a87611696565b611575565b858810156115755760405162461bcd60e51b8152602060048201526012602482015271494e53554646494349454e545f524550415960701b604482015260640161060f565b61157e8161183d565b61158a84836001611316565b6001600160a01b0389166000818152609a6020908152604091829020548251858152918201527f77c6871227e5d2dec8dadd5354f78453203e22e669cd0ec4c19d9a8c5edb31d0910160405180910390a25050505050949350505050565b6001600160a01b0381163b6116555760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161060f565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b609754610631906001600160a01b031683308461189e565b6001600160a01b0381166000908152609a6020526040812054156117385760985460405163c4c0048760e01b81526001600160a01b03848116600483015283151560248301529091169063c4c00487906044015b600060405180830381600087803b15801561171c57600080fd5b505af1158015611730573d6000803e3d6000fd5b505050505050565b6098546040516379bf27b160e01b81526001600160a01b0384811660048301528315156024830152909116906379bf27b190604401611702565b600054610100900460ff166117995760405162461bcd60e51b815260040161060f90612093565b6104206118d6565b6097546040516340c10f1960e01b81526001600160a01b03848116600483015260248201849052909116906340c10f1990604401611702565b6040516001600160a01b03831660248201526044810182905261042f90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611906565b609754604051630852cd8d60e31b8152600481018390526001600160a01b03909116906342966c6890602401600060405180830381600087803b15801561188357600080fd5b505af1158015611897573d6000803e3d6000fd5b5050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526107ac9085906323b872dd60e01b90608401611806565b600054610100900460ff166118fd5760405162461bcd60e51b815260040161060f90612093565b61042033610e07565b600061195b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166119d89092919063ffffffff16565b80519091501561042f578080602001905181019061197991906120de565b61042f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161060f565b6060610b868484600085856001600160a01b0385163b611a3a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161060f565b600080866001600160a01b03168587604051611a569190612127565b60006040518083038185875af1925050503d8060008114611a93576040519150601f19603f3d011682016040523d82523d6000602084013e611a98565b606091505b5091509150611aa8828286611ab3565b979650505050505050565b60608315611ac25750816109fa565b825115611ad25782518084602001fd5b8160405162461bcd60e51b815260040161060f9190612143565b6001600160a01b038116811461062157600080fd5b60008060408385031215611b1457600080fd5b8235611b1f81611aec565b946020939093013593505050565b801515811461062157600080fd5b60008060408385031215611b4e57600080fd5b823591506020830135611b6081611b2d565b809150509250929050565b600060208284031215611b7d57600080fd5b81356109fa81611aec565b600060208284031215611b9a57600080fd5b5035919050565b60008083601f840112611bb357600080fd5b50813567ffffffffffffffff811115611bcb57600080fd5b602083019150836020828501011115611be357600080fd5b9250929050565b60008060008060608587031215611c0057600080fd5b8435611c0b81611aec565b93506020850135611c1b81611aec565b9250604085013567ffffffffffffffff811115611c3757600080fd5b611c4387828801611ba1565b95989497509550505050565b60008060408385031215611c6257600080fd5b8235611c6d81611aec565b91506020830135611b6081611b2d565b600080600060608486031215611c9257600080fd5b8335611c9d81611aec565b92506020840135611cad81611aec565b91506040840135611cbd81611aec565b809150509250925092565b60008060008060608587031215611cde57600080fd5b8435611ce981611aec565b935060208501359250604085013567ffffffffffffffff811115611c3757600080fd5b805161ffff811681146110da57600080fd5b600080600060608486031215611d3357600080fd5b8351611d3e81611aec565b9250611d4c60208501611d0c565b9150611d5a60408501611d0c565b90509250925092565b600060208284031215611d7557600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611dac57611dac611d7c565b500290565b600082611dce57634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115611de657611de6611d7c565b500190565b60008083128015600160ff1b850184121615611e0957611e09611d7c565b6001600160ff1b0384018313811615611e2457611e24611d7c565b50500390565b600082821015611e3c57611e3c611d7c565b500390565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215611e8857600080fd5b815160ff811681146109fa57600080fd5b600181815b80851115611ed4578160001904821115611eba57611eba611d7c565b80851615611ec757918102915b93841c9390800290611e9e565b509250929050565b600082611eeb575060016105af565b81611ef8575060006105af565b8160018114611f0e5760028114611f1857611f34565b60019150506105af565b60ff841115611f2957611f29611d7c565b50506001821b6105af565b5060208310610133831016604e8410600b8410161715611f57575081810a6105af565b611f618383611e99565b8060001904821115611f7557611f75611d7c565b029392505050565b60006109fa60ff841683611edc565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6001600160a01b038681168252851660208201526040810184905260806060820181905281018290526000828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6000806040838503121561207857600080fd5b825161208381611aec565b6020939093015192949293505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000602082840312156120f057600080fd5b81516109fa81611b2d565b60005b838110156121165781810151838201526020016120fe565b838111156107ac5750506000910152565b600082516121398184602087016120fb565b9190910192915050565b60208152600082518060208401526121628160408501602087016120fb565b601f01601f1916919091016040019291505056fea2646970667358221220e3926dba4560d1df24214dd80d6489e8607b8247d3a369b78bc38d34808816f664736f6c63430008090033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220c44254fd1c26dc874bdc952150dde64835c09676fc58495fcb215e4fb74aa95b64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/DTokenSuiteFactory.sol:DTokenSuiteFactory",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 133,
        "contract": "contracts/DTokenSuiteFactory.sol:DTokenSuiteFactory",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3574,
        "contract": "contracts/DTokenSuiteFactory.sol:DTokenSuiteFactory",
        "label": "admin",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3816,
        "contract": "contracts/DTokenSuiteFactory.sol:DTokenSuiteFactory",
        "label": "dTokens",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(DTokenSuite)3812_storage)dyn_storage"
      },
      {
        "astId": 3827,
        "contract": "contracts/DTokenSuiteFactory.sol:DTokenSuiteFactory",
        "label": "appCtrl",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IController)5454"
      },
      {
        "astId": 3829,
        "contract": "contracts/DTokenSuiteFactory.sol:DTokenSuiteFactory",
        "label": "feeConf",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3831,
        "contract": "contracts/DTokenSuiteFactory.sol:DTokenSuiteFactory",
        "label": "sharedVaultImplement",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(DTokenSuite)3812_storage)dyn_storage": {
        "base": "t_struct(DTokenSuite)3812_storage",
        "encoding": "dynamic_array",
        "label": "struct DTokenSuiteFactory.DTokenSuite[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IController)5454": {
        "encoding": "inplace",
        "label": "contract IController",
        "numberOfBytes": "20"
      },
      "t_struct(DTokenSuite)3812_storage": {
        "encoding": "inplace",
        "label": "struct DTokenSuiteFactory.DTokenSuite",
        "members": [
          {
            "astId": 3807,
            "contract": "contracts/DTokenSuiteFactory.sol:DTokenSuiteFactory",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3809,
            "contract": "contracts/DTokenSuiteFactory.sol:DTokenSuiteFactory",
            "label": "vault",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3811,
            "contract": "contracts/DTokenSuiteFactory.sol:DTokenSuiteFactory",
            "label": "oracle",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}