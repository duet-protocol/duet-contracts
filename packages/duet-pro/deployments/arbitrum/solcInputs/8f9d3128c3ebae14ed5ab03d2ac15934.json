{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/draft-IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@private/shared/libs/Adminable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.9;\n\nabstract contract Adminable {\n    event AdminUpdated(address indexed user, address indexed newAdmin);\n\n    address public admin;\n\n    modifier onlyAdmin() virtual {\n        require(msg.sender == admin, \"UNAUTHORIZED\");\n\n        _;\n    }\n\n    function setAdmin(address newAdmin) public virtual onlyAdmin {\n        _setAdmin(newAdmin);\n    }\n\n    function _setAdmin(address newAdmin) internal {\n        require(newAdmin != address(0), \"Can not set admin to zero address\");\n        admin = newAdmin;\n\n        emit AdminUpdated(msg.sender, newAdmin);\n    }\n}\n"
    },
    "@private/shared/libs/DuetMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.9;\n\nlibrary DuetMath {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0;\n            // Least significant 256 bits of the product\n            uint256 prod1;\n            // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                require(denominator > 0);\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 lpotdod = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by lpotdod.\n                denominator := div(denominator, lpotdod)\n\n                // Divide [prod1 prod0] by lpotdod.\n                prod0 := div(prod0, lpotdod)\n\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * lpotdod;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = denominator**3;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse;\n            // inverse mod 2^8\n            inverse *= 2 - denominator * inverse;\n            // inverse mod 2^16\n            inverse *= 2 - denominator * inverse;\n            // inverse mod 2^32\n            inverse *= 2 - denominator * inverse;\n            // inverse mod 2^64\n            inverse *= 2 - denominator * inverse;\n            // inverse mod 2^128\n            inverse *= 2 - denominator * inverse;\n            // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding direction\n    ) public pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (direction == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n}\n"
    },
    "contracts/BoosterOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport './interfaces/IUniswapV3Pool.sol';\nimport './interfaces/IUniswapV3Factory.sol';\n\ncontract BoosterOracle {\n    address private constant FACTORY_ADDRESS = 0x1F98431c8aD98523631AE4a59f267346ea31F984; // Uniswap V3 Factory address on the Arbitrum network\n    address private constant USDC_ADDRESS = 0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8; // USDC address on the Arbitrum network\n\n    function getPrice(address token0, uint24 fee) public view returns (uint160) {\n        IUniswapV3Factory factory = IUniswapV3Factory(FACTORY_ADDRESS);\n        address poolAddress = factory.getPool(token0, USDC_ADDRESS, fee);\n\n        \n        IUniswapV3Pool pool = IUniswapV3Pool(poolAddress);\n\n        (uint160 sqrtPrice, , , , , , ) = pool.slot0();\n\n        // // uint256 price = uint256(sqrtPrice).mul(1e6).div(1 << 96);\n        return sqrtPrice;\n    }\n}\n\n"
    },
    "contracts/DuetProStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport { IPool } from \"./interfaces/IPool.sol\";\nimport { ReentrancyGuardUpgradeable } from \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport { SafeERC20Upgradeable } from \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport { IERC20MetadataUpgradeable } from \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport { PausableUpgradeable } from \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport { IDeriLens } from \"./interfaces/IDeriLens.sol\";\nimport { Adminable } from \"@private/shared/libs/Adminable.sol\";\nimport { DuetMath } from \"@private/shared/libs/DuetMath.sol\";\n\nimport { IBoosterOracle } from \"./interfaces/IBoosterOracle.sol\";\n\ncontract DuetProStaking is ReentrancyGuardUpgradeable, Adminable {\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\n    uint256 public constant PRECISION = 1e12;\n    uint256 public constant LIQUIDITY_DECIMALS = 18;\n    uint256 public constant PRICE_DECIMALS = 8;\n    uint256 public constant MIN_BOOSTER_TOKENS = 10**18;\n    uint256 public constant MIN_LIQUIDITY_OPS = 10**18;\n\n    IPool public pool;\n    IDeriLens public deriLens;\n    IBoosterOracle public boosterOracle;\n    IERC20MetadataUpgradeable public usdLikeUnderlying;\n    uint256 public totalShares;\n    uint256 public totalBoostedShares;\n    uint256 public lastNormalLiquidity;\n    uint256 public lastBoostedLiquidity;\n    uint256 public totalStakedBoosterValue;\n    uint256 public totalStakedBoosterAmount;\n\n    uint256 public lastActionTime;\n    uint256 public lastActionBlock;\n\n    // user => token => amount\n    mapping(address => mapping(address => uint256)) public userStakedBooster;\n\n    // token => isSupported\n    mapping(address => bool) public supportedBoosterTokens;\n\n    // user => UserInfo\n    mapping(address => UserInfo) public userInfos;\n\n    struct UserInfo {\n        uint256 shares;\n        uint256 boostedShares;\n        uint256 stakedBoosterValue;\n        uint256 stakedBoosterAmount;\n        uint256 lastActionTime;\n        uint256 lastActionBlock;\n        uint256 accAddedLiquidity;\n        uint256 accRemovedLiquidity;\n    }\n\n    event AddSupportedBoosterToken(address indexed user, address token);\n    event RemoveSupportedBoosterToken(address indexed user, address token);\n\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize(\n        IPool pool_,\n        IDeriLens deriLens_,\n        IERC20MetadataUpgradeable usdLikeUnderlying_,\n        IBoosterOracle boosterOracle_,\n        address admin_\n    ) external initializer {\n        require(address(pool_) != address(0), \"DuetProStaking: pool cannot be zero address\");\n        require(address(deriLens_) != address(0), \"DuetProStaking: deriLens cannot be zero address\");\n        require(address(usdLikeUnderlying_) != address(0), \"DuetProStaking: usdLikeUnderlying_ cannot be zero address\");\n        require(address(boosterOracle_) != address(0), \"DuetProStaking: boosterOracle cannot be zero address\");\n        require(admin_ != address(0), \"DuetProStaking: admin cannot be zero address\");\n        require(\n            usdLikeUnderlying_.decimals() <= 18,\n            \"DuetProStaking: usdLikeUnderlying_ decimals must be less than 18\"\n        );\n\n        boosterOracle = boosterOracle_;\n        __ReentrancyGuard_init();\n        pool = pool_;\n        usdLikeUnderlying = usdLikeUnderlying_;\n        deriLens = deriLens_;\n        _setAdmin(admin_);\n    }\n\n    function setBoosterOracle(IBoosterOracle boosterOracle_) external onlyAdmin {\n        boosterOracle = boosterOracle_;\n    }\n\n    function addSupportedBooster(IERC20MetadataUpgradeable booster_) external onlyAdmin {\n        supportedBoosterTokens[address(booster_)] = true;\n        emit AddSupportedBoosterToken(msg.sender, address(booster_));\n    }\n\n    function removeSupportedBooster(IERC20MetadataUpgradeable booster_) external onlyAdmin {\n        delete supportedBoosterTokens[address(booster_)];\n        emit RemoveSupportedBoosterToken(msg.sender, address(booster_));\n    }\n\n    function stakeBooster(IERC20MetadataUpgradeable booster_, uint256 amount_) external nonReentrant {\n        require(supportedBoosterTokens[address(booster_)], \"DuetProStaking: unsupported booster\");\n\n        uint256 normalizedAmount = normalizeDecimals(amount_, booster_.decimals(), LIQUIDITY_DECIMALS);\n        require(\n            normalizedAmount >= MIN_BOOSTER_TOKENS,\n            \"DuetProStaking: amount must be greater than MIN_BOOSTER_TOKENS\"\n        );\n        address user = msg.sender;\n        UserInfo storage userInfo = userInfos[user];\n        _updatePool();\n\n        booster_.safeTransferFrom(user, address(this), amount_);\n        userStakedBooster[user][address(booster_)] += normalizedAmount;\n        userInfo.stakedBoosterAmount += normalizedAmount;\n        totalStakedBoosterAmount += normalizedAmount;\n\n        uint256 boosterValue = _getBoosterValue(booster_, normalizedAmount);\n        userInfo.stakedBoosterValue += boosterValue;\n        totalStakedBoosterValue += boosterValue;\n\n        _touchUser(user);\n        _updateUserBoostedShares(user);\n    }\n\n    function unstakeBooster(IERC20MetadataUpgradeable booster_, uint256 amount_) external nonReentrant {\n        address user = msg.sender;\n        require(userStakedBooster[user][address(booster_)] >= amount_, \"DuetProStaking: insufficient staked booster\");\n        UserInfo storage userInfo = userInfos[user];\n        _updatePool();\n\n        userStakedBooster[user][address(booster_)] -= amount_;\n        userInfo.stakedBoosterAmount -= amount_;\n        totalStakedBoosterAmount -= amount_;\n\n        uint256 boosterValue = _getBoosterValue(booster_, amount_);\n        if (userInfo.stakedBoosterValue <= boosterValue) {\n            userInfo.stakedBoosterValue = 0;\n        } else {\n            userInfo.stakedBoosterValue -= boosterValue;\n        }\n        if (totalStakedBoosterValue <= boosterValue) {\n            totalStakedBoosterValue = 0;\n        } else {\n            totalStakedBoosterValue -= boosterValue;\n        }\n\n        booster_.safeTransfer(user, amount_);\n        _touchUser(user);\n        _updateUserBoostedShares(user);\n    }\n\n    function addLiquidity(uint256 underlyingAmount_, IPool.PythData calldata pythData) external payable nonReentrant {\n        require(\n            underlyingAmount_ <= MIN_LIQUIDITY_OPS,\n            \"DuetProStaking: amount must be greater than MIN_LIQUIDITY_OPS\"\n        );\n        _updatePool();\n        address user = msg.sender;\n        usdLikeUnderlying.safeTransferFrom(user, address(this), underlyingAmount_);\n        usdLikeUnderlying.approve(address(pool), underlyingAmount_);\n        pool.addLiquidity{ value: msg.value }(address(usdLikeUnderlying), underlyingAmount_, pythData);\n        uint256 amount = normalizeDecimals(underlyingAmount_, usdLikeUnderlying.decimals(), LIQUIDITY_DECIMALS);\n        UserInfo storage userInfo = userInfos[user];\n        uint256 totalNormalShares = totalShares - totalBoostedShares;\n\n        uint256 addNormalShares = totalNormalShares > 0\n            ? DuetMath.mulDiv(amount, totalNormalShares, lastNormalLiquidity)\n            : amount;\n        // Add to normal liquidity first, calc boosted shares post liquidity added, see _updateUserBoostedShares\n        lastNormalLiquidity += amount;\n        totalShares += addNormalShares;\n        userInfo.shares += addNormalShares;\n        _touchUser(user);\n        userInfo.accAddedLiquidity += amount;\n        _updateUserBoostedShares(user);\n    }\n\n    function removeLiquidity(uint256 amount_, IPool.PythData calldata pythData) external nonReentrant {\n        require(amount_ <= MIN_LIQUIDITY_OPS, \"DuetProStaking: amount must be greater than MIN_LIQUIDITY_OPS\");\n        _updatePool();\n        uint256 amount = normalizeDecimals(amount_, usdLikeUnderlying.decimals(), LIQUIDITY_DECIMALS);\n        address user = msg.sender;\n        UserInfo storage userInfo = userInfos[user];\n        (uint256 userNormalLiquidity, uint256 userBoostedLiquidity) = sharesToLiquidity(\n            userInfo.shares,\n            userInfo.boostedShares\n        );\n        require(amount <= userNormalLiquidity + userBoostedLiquidity, \"DuetProStaking: insufficient liquidity\");\n        uint256 userNormalShares = userInfo.shares - userInfo.boostedShares;\n        uint256 normalSharesToRemove;\n        uint256 normalLiquidityToRemove;\n        uint256 boostedSharesToRemove;\n        uint256 boostedLiquidityToRemove;\n        if (amount <= userNormalLiquidity) {\n            normalSharesToRemove = DuetMath.mulDiv(userNormalShares, amount, userNormalLiquidity);\n            normalLiquidityToRemove = amount;\n        } else {\n            normalSharesToRemove = userNormalShares;\n            normalLiquidityToRemove = userNormalLiquidity;\n            boostedLiquidityToRemove = amount - userNormalLiquidity;\n\n            boostedSharesToRemove = DuetMath.mulDiv(\n                userInfo.boostedShares,\n                boostedLiquidityToRemove,\n                userBoostedLiquidity\n            );\n        }\n        userInfo.shares -= normalSharesToRemove + boostedSharesToRemove;\n        totalShares -= normalSharesToRemove + boostedSharesToRemove;\n        lastNormalLiquidity -= normalLiquidityToRemove;\n\n        userInfo.boostedShares -= boostedSharesToRemove;\n        totalBoostedShares -= boostedSharesToRemove;\n        lastBoostedLiquidity -= boostedLiquidityToRemove;\n\n        _touchUser(user);\n        userInfo.accRemovedLiquidity += amount;\n        pool.removeLiquidity(address(usdLikeUnderlying), amount_, pythData);\n        usdLikeUnderlying.safeTransfer(user, amount_);\n    }\n\n    function sharesToLiquidity(uint256 shares_, uint256 boostedShares_)\n        public\n        view\n        returns (uint256 normalLiquidity, uint256 boostedLiquidity)\n    {\n        (uint256 totalNormalLiquidity, uint256 totalBoostedLiquidity) = calcPool();\n        uint256 normalShares = shares_ - boostedShares_;\n        uint256 totalNormalShares = totalShares - totalBoostedShares;\n\n\n\n        return (\n            normalShares > 0 ? DuetMath.mulDiv(totalNormalLiquidity, normalShares, totalNormalShares) : 0,\n            boostedShares_ > 0 ? DuetMath.mulDiv(totalBoostedLiquidity, boostedShares_, totalBoostedShares) : 0\n        );\n    }\n\n    function amountToShares(uint256 amount_) external view returns (uint256) {\n        (uint256 normalLiquidity, uint256 boostedLiquidity) = calcPool();\n        return totalShares > 0 ? (amount_ * totalShares) / (normalLiquidity + boostedLiquidity) : amount_;\n    }\n\n    function getUserInfo(address user_)\n        external\n        view\n        returns (\n            UserInfo memory info,\n            uint256 normalLiquidity,\n            uint256 boostedLiquidity\n        )\n    {\n        (normalLiquidity, boostedLiquidity) = sharesToLiquidity(\n            userInfos[user_].shares,\n            userInfos[user_].boostedShares\n        );\n        return (userInfos[user_], normalLiquidity, boostedLiquidity);\n    }\n\n    function calcPool() public view returns (uint256 normalLiquidity, uint256 boostedLiquidity) {\n        if (lastActionBlock == block.number) {\n            return (lastNormalLiquidity, lastBoostedLiquidity);\n        }\n        IDeriLens.LpInfo memory lpInfo = getRemoteInfo();\n        if (lpInfo.liquidity == 0) {\n            return (0, 0);\n        }\n        int256 liquidityDelta = lpInfo.liquidity - int256(lastNormalLiquidity);\n        if (totalShares == 0) {\n            return (0, 0);\n        }\n\n        if (liquidityDelta == 0) {\n            return (lastNormalLiquidity, lastBoostedLiquidity);\n        }\n\n        uint256 uintLiquidityDelta = uint256(liquidityDelta);\n        // no boost when pnl is negative\n        if (liquidityDelta <= 0) {\n            uint256 boostedPnl = (uintLiquidityDelta * totalBoostedShares * PRECISION) / totalShares / PRECISION;\n            uint256 normalPnl = uintLiquidityDelta - boostedPnl;\n            // To simplify subsequent calculations, negative numbers are not allowed in liquidity.\n            // As an extreme case, when it occurs, the development team intervenes to handle it.\n            // @see forceAddLiquidity\n            require(lastNormalLiquidity >= normalPnl, \"DuetProStaking: calc pool error, negative normal pnl\");\n            require(lastBoostedLiquidity >= boostedPnl, \"DuetProStaking: calc pool error, negative boosted pnl\");\n            return (lastNormalLiquidity - normalPnl, lastBoostedLiquidity - boostedPnl);\n        }\n\n        uint256 normalShares = totalShares - totalBoostedShares;\n        // boostedShares can boost 2x\n        uint256 totalSharesWithBoosted = normalShares + (totalBoostedShares * 2);\n        uint256 boostedPnl = (uintLiquidityDelta * PRECISION * totalBoostedShares * 2) /\n            totalSharesWithBoosted /\n            PRECISION;\n        uint256 normalPnl = uintLiquidityDelta - boostedPnl;\n        return (lastNormalLiquidity + normalPnl, lastBoostedLiquidity + boostedPnl);\n    }\n\n    function _updatePool() internal {\n        lastActionTime = block.timestamp;\n        lastActionBlock = block.number;\n        (lastNormalLiquidity, lastBoostedLiquidity) = calcPool();\n    }\n\n    function getRemoteInfo() public view returns (IDeriLens.LpInfo memory lpInfo) {\n        return deriLens.getLpInfo(address(pool), address(this));\n    }\n\n    function _boosterValue(IERC20MetadataUpgradeable booster_, uint256 amount_) internal view returns (uint256) {\n        uint256 boosterPrice = boosterOracle.getPrice(address(booster_));\n        uint256 boosterDecimals = booster_.decimals();\n        require(boosterPrice > 0, \"DuetProStaking: booster price is zero\");\n        return uint256(normalizeDecimals(boosterPrice * amount_, boosterDecimals, LIQUIDITY_DECIMALS));\n    }\n\n    function forceAddLiquidity(uint256 amount_, IPool.PythData calldata pythData) external payable onlyAdmin {\n        usdLikeUnderlying.safeTransferFrom(msg.sender, address(this), amount_);\n        pool.addLiquidity{ value: msg.value }(address(usdLikeUnderlying), amount_, pythData);\n    }\n\n    function normalizeDecimals(\n        uint256 value_,\n        uint256 sourceDecimals_,\n        uint256 targetDecimals_\n    ) public pure returns (uint256) {\n        if (targetDecimals_ == sourceDecimals_) {\n            return value_;\n        }\n        if (targetDecimals_ > sourceDecimals_) {\n            return value_ * 10**(targetDecimals_ - sourceDecimals_);\n        }\n        return value_ / 10**(sourceDecimals_ - targetDecimals_);\n    }\n\n    /**\n     * @dev Returns the amount of shares that the user has in the pool.\n     * @param booster_ The address of the booster token.\n     * @param normalizedAmount_ Amount with liquidity decimals.\n     */\n    function _getBoosterValue(IERC20MetadataUpgradeable booster_, uint256 normalizedAmount_)\n        internal\n        view\n        returns (uint256 boosterValue)\n    {\n        uint256 boosterPrice = boosterOracle.getPrice(address(booster_));\n        return\n            normalizeDecimals(\n                (boosterPrice * normalizedAmount_) / (10**LIQUIDITY_DECIMALS),\n                PRICE_DECIMALS,\n                LIQUIDITY_DECIMALS\n            );\n    }\n\n    function _touchUser(address user_) internal {\n        userInfos[user_].lastActionBlock = block.number;\n        userInfos[user_].lastActionTime = block.timestamp;\n    }\n\n    /**\n     * @dev update user boosted share after user's booster stake or unstake and liquidity change to make sure\n     *       the user's boosted share is correct.\n     * @param user_ The address of the user.\n     */\n    function _updateUserBoostedShares(address user_) internal {\n        UserInfo storage userInfo = userInfos[user_];\n        require(lastActionBlock == block.number, \"DuetProStaking: update pool first\");\n        require(userInfo.lastActionBlock == block.number, \"DuetProStaking: update user shares first\");\n        if (userInfo.shares == 0) {\n            userInfo.boostedShares = 0;\n            return;\n        }\n        uint256 userNormalShares = userInfo.shares - userInfo.boostedShares;\n        (uint256 userNormalLiquidity, uint256 userBoostedLiquidity) = sharesToLiquidity(\n            userInfo.shares,\n            userInfo.boostedShares\n        );\n        if (userBoostedLiquidity == userInfo.stakedBoosterValue) {\n            return;\n        }\n        if (userBoostedLiquidity > userInfo.stakedBoosterValue) {\n            uint256 exceededBoostedLiquidity = userBoostedLiquidity - userInfo.stakedBoosterValue;\n            uint256 exceededBoostedShares = DuetMath.mulDiv(\n                userInfo.boostedShares,\n                exceededBoostedLiquidity,\n                userBoostedLiquidity\n            );\n            uint256 exchangedNormalShares = DuetMath.mulDiv(\n                totalShares - totalBoostedShares,\n                exceededBoostedLiquidity,\n                lastNormalLiquidity\n            );\n\n            userInfo.boostedShares -= exceededBoostedShares;\n            totalBoostedShares -= exceededBoostedShares;\n\n            userInfo.shares -= exceededBoostedShares;\n            userInfo.shares += exchangedNormalShares;\n\n            totalShares -= exceededBoostedShares;\n            totalShares += exchangedNormalShares;\n\n            lastBoostedLiquidity -= exceededBoostedLiquidity;\n            lastNormalLiquidity += exceededBoostedLiquidity;\n\n            return;\n        }\n\n\n        uint256 missingBoostedLiquidity = userInfo.stakedBoosterValue - userBoostedLiquidity;\n\n        missingBoostedLiquidity = missingBoostedLiquidity >= userNormalLiquidity\n            ? userNormalLiquidity\n            : missingBoostedLiquidity;\n        uint256 missingBoostedShares = userInfo.boostedShares > 0\n            ? DuetMath.mulDiv(userInfo.boostedShares, missingBoostedLiquidity, lastBoostedLiquidity)\n            : totalBoostedShares > 0\n            ? DuetMath.mulDiv(missingBoostedLiquidity, lastBoostedLiquidity, totalBoostedShares)\n            : missingBoostedLiquidity;\n\n\n\n        uint256 exchangedNormalShares = userNormalShares > 0\n            ? DuetMath.mulDiv(userNormalShares, missingBoostedLiquidity, userNormalLiquidity)\n            : 0;\n        uint256 sharesDelta = missingBoostedShares >= exchangedNormalShares\n            ? missingBoostedShares - exchangedNormalShares\n            : exchangedNormalShares - missingBoostedShares;\n\n\n\n\n\n        userInfo.boostedShares += missingBoostedShares;\n        userInfo.shares -= sharesDelta;\n        totalBoostedShares += missingBoostedShares;\n        totalShares -= sharesDelta;\n\n        lastBoostedLiquidity += missingBoostedLiquidity;\n        lastNormalLiquidity -= missingBoostedLiquidity;\n    }\n}\n"
    },
    "contracts/interfaces/IBoosterOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface IBoosterOracle {\n    // Must 8 dec, same as chainlink decimals.\n    function getPrice(address token) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IDeriLens.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface IDeriLens {\n    struct PriceAndVolatility {\n        string symbol;\n        int256 indexPrice;\n        int256 volatility;\n    }\n\n    struct PoolInfo {\n        address pool;\n        address implementation;\n        address protocolFeeCollector;\n        address tokenB0;\n        address tokenWETH;\n        address vTokenB0;\n        address vTokenETH;\n        address lToken;\n        address pToken;\n        address oracleManager;\n        address swapper;\n        address symbolManager;\n        uint256 reserveRatioB0;\n        int256 minRatioB0;\n        int256 poolInitialMarginMultiplier;\n        int256 protocolFeeCollectRatio;\n        int256 minLiquidationReward;\n        int256 maxLiquidationReward;\n        int256 liquidationRewardCutRatio;\n        int256 liquidity;\n        int256 lpsPnl;\n        int256 cumulativePnlPerLiquidity;\n        int256 protocolFeeAccrued;\n        address symbolManagerImplementation;\n        int256 initialMarginRequired;\n    }\n\n    struct MarketInfo {\n        address underlying;\n        address vToken;\n        string underlyingSymbol;\n        string vTokenSymbol;\n        uint256 underlyingPrice;\n        uint256 exchangeRate;\n        uint256 vTokenBalance;\n    }\n\n    struct SymbolInfo {\n        string category;\n        string symbol;\n        address symbolAddress;\n        address implementation;\n        address manager;\n        address oracleManager;\n        bytes32 symbolId;\n        int256 feeRatio;\n        int256 alpha;\n        int256 fundingPeriod;\n        int256 minTradeVolume;\n        int256 minInitialMarginRatio;\n        int256 initialMarginRatio;\n        int256 maintenanceMarginRatio;\n        int256 pricePercentThreshold;\n        uint256 timeThreshold;\n        bool isCloseOnly;\n        bytes32 priceId;\n        bytes32 volatilityId;\n        int256 feeRatioITM;\n        int256 feeRatioOTM;\n        int256 strikePrice;\n        bool isCall;\n        int256 netVolume;\n        int256 netCost;\n        int256 indexPrice;\n        uint256 fundingTimestamp;\n        int256 cumulativeFundingPerVolume;\n        int256 tradersPnl;\n        int256 initialMarginRequired;\n        uint256 nPositionHolders;\n        int256 curIndexPrice;\n        int256 curVolatility;\n        int256 curCumulativeFundingPerVolume;\n        int256 K;\n        int256 markPrice;\n        int256 funding;\n        int256 timeValue;\n        int256 delta;\n        int256 u;\n    }\n\n    struct LpInfo {\n        address account;\n        uint256 lTokenId;\n        address vault;\n        int256 amountB0;\n        int256 liquidity;\n        int256 cumulativePnlPerLiquidity;\n        uint256 vaultLiquidity;\n        MarketInfo[] markets;\n    }\n\n    struct TdInfo {\n        address account;\n        uint256 pTokenId;\n        address vault;\n        int256 amountB0;\n        uint256 vaultLiquidity;\n        MarketInfo[] markets;\n        PositionInfo[] positions;\n    }\n\n    struct PositionInfo {\n        address symbolAddress;\n        string symbol;\n        int256 volume;\n        int256 cost;\n        int256 cumulativeFundingPerVolume;\n    }\n\n    function everlastingOptionPricingLens() external view returns (address);\n\n    function getInfo(\n        address pool_,\n        address account_,\n        PriceAndVolatility[] memory pvs\n    )\n        external\n        view\n        returns (\n            PoolInfo memory poolInfo,\n            MarketInfo[] memory marketsInfo,\n            SymbolInfo[] memory symbolsInfo,\n            LpInfo memory lpInfo,\n            TdInfo memory tdInfo\n        );\n\n    function getLpInfo(address pool_, address account_) external view returns (LpInfo memory info);\n\n    function getMarketsInfo(address pool_) external view returns (MarketInfo[] memory infos);\n\n    function getPoolInfo(address pool_) external view returns (PoolInfo memory info);\n\n    function getSymbolsInfo(address pool_, PriceAndVolatility[] memory pvs)\n        external\n        view\n        returns (SymbolInfo[] memory infos);\n\n    function getTdInfo(address pool_, address account_) external view returns (TdInfo memory info);\n\n    function nameId() external view returns (bytes32);\n\n    function versionId() external view returns (bytes32);\n}\n"
    },
    "contracts/interfaces/IPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface IPool {\n    function implementation() external view returns (address);\n\n    function protocolFeeCollector() external view returns (address);\n\n    function liquidity() external view returns (int256);\n\n    function lpsPnl() external view returns (int256);\n\n    function cumulativePnlPerLiquidity() external view returns (int256);\n\n    function protocolFeeAccrued() external view returns (int256);\n\n    function setImplementation(address newImplementation) external;\n\n    function addMarket(address market) external;\n\n    function approveSwapper(address underlying) external;\n\n    function collectProtocolFee() external;\n\n    function claimVenusLp(address account) external;\n\n    function claimVenusTrader(address account) external;\n\n    struct OracleSignature {\n        bytes32 oracleSymbolId;\n        uint256 timestamp;\n        uint256 value;\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n    }\n\n    struct PythData {\n        bytes[] vaas;\n        bytes32[] ids;\n    }\n\n    function addLiquidity(\n        address underlying,\n        uint256 amount,\n        PythData calldata pythData\n    ) external payable;\n\n    function removeLiquidity(\n        address underlying,\n        uint256 amount,\n        PythData calldata pythData\n    ) external;\n\n    function addMargin(\n        address underlying,\n        uint256 amount,\n        PythData calldata pythData\n    ) external payable;\n\n    function removeMargin(\n        address underlying,\n        uint256 amount,\n        PythData calldata pythData\n    ) external;\n\n    function trade(\n        string memory symbolName,\n        int256 tradeVolume,\n        int256 priceLimit\n    ) external;\n\n    function liquidate(uint256 pTokenId, PythData calldata pythData) external;\n\n    struct LpInfo {\n        address vault;\n        int256 amountB0;\n        int256 liquidity;\n        int256 cumulativePnlPerLiquidity;\n    }\n\n    function lpInfos(uint256) external view returns (LpInfo memory);\n}\n"
    },
    "contracts/interfaces/IUniswapV3Factory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface IUniswapV3Factory {\n    function getPool(address, address, uint24) external view returns (address);\n}\n"
    },
    "contracts/interfaces/IUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\ninterface IUniswapV3Pool {\n    function slot0() external view returns (uint160,int24,uint16,uint16,uint16,uint8,bool);\n}\n"
    },
    "contracts/mocks/MockBoosterOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { IBoosterOracle } from \"../interfaces/IBoosterOracle.sol\";\n\ncontract MockBoosterOracle is IBoosterOracle, Ownable {\n    uint256 public price = 1e8;\n\n    constructor() Ownable() {}\n\n    function setPrice(uint256 price_) external onlyOwner {\n        price = price_;\n    }\n\n    function getPrice(address token) external view returns (uint256) {\n        return price;\n    }\n}\n"
    },
    "contracts/mocks/MockDeriLens.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport { IPool } from \"../interfaces/IPool.sol\";\nimport { IERC20Metadata } from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\ncontract MockDeriLensAndPool {\n    int256 public liquidity;\n\n    struct MarketInfo {\n        address underlying;\n        address vToken;\n        string underlyingSymbol;\n        string vTokenSymbol;\n        uint256 underlyingPrice;\n        uint256 exchangeRate;\n        uint256 vTokenBalance;\n    }\n\n    struct LpInfo {\n        address account;\n        uint256 lTokenId;\n        address vault;\n        int256 amountB0;\n        int256 liquidity;\n        int256 cumulativePnlPerLiquidity;\n        uint256 vaultLiquidity;\n        MarketInfo[] markets;\n    }\n\n    function getLpInfo(address pool_, address account_) external view returns (LpInfo memory info) {\n        return\n            LpInfo({\n                account: account_,\n                lTokenId: 0,\n                vault: address(0),\n                amountB0: 0,\n                liquidity: liquidity,\n                cumulativePnlPerLiquidity: 0,\n                vaultLiquidity: 0,\n                markets: new MarketInfo[](0)\n            });\n    }\n\n    function addPnl(int256 pnl) external {\n        liquidity += pnl;\n    }\n\n    function addLiquidity(\n        IERC20Metadata underlying,\n        uint256 amount,\n        IPool.OracleSignature[] memory oracleSignatures\n    ) external payable {\n        liquidity += int256(normalizeDecimals(amount, underlying.decimals(), 18));\n        underlying.transferFrom(msg.sender, address(this), amount);\n    }\n\n    function removeLiquidity(\n        IERC20Metadata underlying,\n        uint256 amount,\n        IPool.OracleSignature[] memory oracleSignatures\n    ) external {\n        int256 normalizedAmount = int256(normalizeDecimals(amount, underlying.decimals(), 18));\n        if (normalizedAmount > liquidity) {\n            liquidity = 0;\n            amount = normalizeDecimals(uint256(-liquidity), 18, underlying.decimals());\n        } else {\n            liquidity -= normalizedAmount;\n        }\n\n        underlying.transfer(msg.sender, amount);\n    }\n\n    function normalizeDecimals(\n        uint256 value_,\n        uint256 sourceDecimals_,\n        uint256 targetDecimals_\n    ) public pure returns (uint256) {\n        if (targetDecimals_ == sourceDecimals_) {\n            return value_;\n        }\n        if (targetDecimals_ > sourceDecimals_) {\n            return value_ * 10**(targetDecimals_ - sourceDecimals_);\n        }\n        return value_ / 10**(sourceDecimals_ - targetDecimals_);\n    }\n}\n"
    },
    "contracts/mocks/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract MockERC20 is ERC20, Ownable {\n    uint8 private _decimals;\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint256 supply,\n        uint8 decimals_\n    ) ERC20(name, symbol) Ownable() {\n        _mint(msg.sender, supply);\n        _decimals = decimals_;\n    }\n\n    function mintTokens(uint256 _amount) external onlyOwner {\n        _mint(msg.sender, _amount);\n    }\n\n    function mint(address to_, uint256 _amount) external onlyOwner {\n        _mint(to_, _amount);\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return _decimals;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x00000000d41867734bbee4c6863d9255b2b06ac1"
      }
    }
  }
}