{
  "address": "0xFD348dC51F042cC2b531C6e673F4fc84C8c3d1A9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "AddSupportedBoosterToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "RemoveSupportedBoosterToken",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "LIQUIDITY_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_BOOSTER_TOKENS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_LIQUIDITY_OPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "underlyingAmount_",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "oracleSymbolId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IPool.OracleSignature[]",
          "name": "oracleSignatures_",
          "type": "tuple[]"
        }
      ],
      "name": "addLiquidity",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20MetadataUpgradeable",
          "name": "booster_",
          "type": "address"
        }
      ],
      "name": "addSupportedBooster",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "amountToShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "boosterOracle",
      "outputs": [
        {
          "internalType": "contract IBoosterOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calcPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "normalLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "boostedLiquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deriLens",
      "outputs": [
        {
          "internalType": "contract IDeriLens",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "oracleSymbolId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IPool.OracleSignature[]",
          "name": "oracleSignatures_",
          "type": "tuple[]"
        }
      ],
      "name": "forceAddLiquidity",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRemoteInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "lTokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "vault",
              "type": "address"
            },
            {
              "internalType": "int256",
              "name": "amountB0",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "liquidity",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "cumulativePnlPerLiquidity",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "vaultLiquidity",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "underlying",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "vToken",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "underlyingSymbol",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "vTokenSymbol",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "underlyingPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "exchangeRate",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "vTokenBalance",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IDeriLens.MarketInfo[]",
              "name": "markets",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IDeriLens.LpInfo",
          "name": "lpInfo",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user_",
          "type": "address"
        }
      ],
      "name": "getUserInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "boostedShares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakedBoosterValue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakedBoosterAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastActionTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastActionBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "accAddedLiquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "accRemovedLiquidity",
              "type": "uint256"
            }
          ],
          "internalType": "struct DuetProStaking.UserInfo",
          "name": "info",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "normalLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "boostedLiquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool_",
          "type": "address"
        },
        {
          "internalType": "contract IDeriLens",
          "name": "deriLens_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20MetadataUpgradeable",
          "name": "usdLikeUnderlying_",
          "type": "address"
        },
        {
          "internalType": "contract IBoosterOracle",
          "name": "boosterOracle_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastActionBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastActionTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastBoostedLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastNormalLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sourceDecimals_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetDecimals_",
          "type": "uint256"
        }
      ],
      "name": "normalizeDecimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract IPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "oracleSymbolId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IPool.OracleSignature[]",
          "name": "oracleSignatures_",
          "type": "tuple[]"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20MetadataUpgradeable",
          "name": "booster_",
          "type": "address"
        }
      ],
      "name": "removeSupportedBooster",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBoosterOracle",
          "name": "boosterOracle_",
          "type": "address"
        }
      ],
      "name": "setBoosterOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "boostedShares_",
          "type": "uint256"
        }
      ],
      "name": "sharesToLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "normalLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "boostedLiquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20MetadataUpgradeable",
          "name": "booster_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "stakeBooster",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supportedBoosterTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBoostedShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakedBoosterAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakedBoosterValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20MetadataUpgradeable",
          "name": "booster_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "unstakeBooster",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdLikeUnderlying",
      "outputs": [
        {
          "internalType": "contract IERC20MetadataUpgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfos",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "boostedShares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakedBoosterValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakedBoosterAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastActionTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastActionBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accAddedLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accRemovedLiquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userStakedBooster",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3a1e71bf442b1d6292eabc1c9d8fb868d7160950fe384a841ff7878710776dd1",
  "receipt": {
    "to": null,
    "from": "0x00d7A6a2F161d3f4971a3d1B071Ef55b284FD3Bf",
    "contractAddress": "0xFD348dC51F042cC2b531C6e673F4fc84C8c3d1A9",
    "transactionIndex": 1,
    "gasUsed": "29318957",
    "logsBloom": "0x
    "blockHash": "0x6216943329aa6dcd30979ad64e38cd545681f99a28f92f1208aa1a465a5fdad7",
    "transactionHash": "0x3a1e71bf442b1d6292eabc1c9d8fb868d7160950fe384a841ff7878710776dd1",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 82686268,
        "transactionHash": "0x3a1e71bf442b1d6292eabc1c9d8fb868d7160950fe384a841ff7878710776dd1",
        "address": "0xFD348dC51F042cC2b531C6e673F4fc84C8c3d1A9",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0x6216943329aa6dcd30979ad64e38cd545681f99a28f92f1208aa1a465a5fdad7"
      }
    ],
    "blockNumber": 82686268,
    "cumulativeGasUsed": "29318957",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "01e510245a5d017cce4027d5075363fc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"AddSupportedBoosterToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RemoveSupportedBoosterToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LIQUIDITY_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_BOOSTER_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_LIQUIDITY_OPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingAmount_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"oracleSymbolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IPool.OracleSignature[]\",\"name\":\"oracleSignatures_\",\"type\":\"tuple[]\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20MetadataUpgradeable\",\"name\":\"booster_\",\"type\":\"address\"}],\"name\":\"addSupportedBooster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"amountToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boosterOracle\",\"outputs\":[{\"internalType\":\"contract IBoosterOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calcPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"normalLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boostedLiquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deriLens\",\"outputs\":[{\"internalType\":\"contract IDeriLens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"oracleSymbolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IPool.OracleSignature[]\",\"name\":\"oracleSignatures_\",\"type\":\"tuple[]\"}],\"name\":\"forceAddLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemoteInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"amountB0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"liquidity\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cumulativePnlPerLiquidity\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"vaultLiquidity\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"underlyingSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"vTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"underlyingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vTokenBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct IDeriLens.MarketInfo[]\",\"name\":\"markets\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IDeriLens.LpInfo\",\"name\":\"lpInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boostedShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedBoosterValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedBoosterAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastActionTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastActionBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accAddedLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRemovedLiquidity\",\"type\":\"uint256\"}],\"internalType\":\"struct DuetProStaking.UserInfo\",\"name\":\"info\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"normalLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boostedLiquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool_\",\"type\":\"address\"},{\"internalType\":\"contract IDeriLens\",\"name\":\"deriLens_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20MetadataUpgradeable\",\"name\":\"usdLikeUnderlying_\",\"type\":\"address\"},{\"internalType\":\"contract IBoosterOracle\",\"name\":\"boosterOracle_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastActionBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastActionTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBoostedLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastNormalLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceDecimals_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetDecimals_\",\"type\":\"uint256\"}],\"name\":\"normalizeDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"oracleSymbolId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IPool.OracleSignature[]\",\"name\":\"oracleSignatures_\",\"type\":\"tuple[]\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20MetadataUpgradeable\",\"name\":\"booster_\",\"type\":\"address\"}],\"name\":\"removeSupportedBooster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBoosterOracle\",\"name\":\"boosterOracle_\",\"type\":\"address\"}],\"name\":\"setBoosterOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boostedShares_\",\"type\":\"uint256\"}],\"name\":\"sharesToLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"normalLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boostedLiquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20MetadataUpgradeable\",\"name\":\"booster_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"stakeBooster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedBoosterTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBoostedShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedBoosterAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedBoosterValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20MetadataUpgradeable\",\"name\":\"booster_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"unstakeBooster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdLikeUnderlying\",\"outputs\":[{\"internalType\":\"contract IERC20MetadataUpgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boostedShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedBoosterValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedBoosterAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastActionTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastActionBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accAddedLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRemovedLiquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStakedBooster\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DuetProStaking.sol\":\"DuetProStaking\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x220c4a5af915e656be2aaa85ca57505d102418e476b1e2ef6c62e0c6ac143871\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@private/shared/libs/Adminable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nabstract contract Adminable {\\n    event AdminUpdated(address indexed user, address indexed newAdmin);\\n\\n    address public admin;\\n\\n    modifier onlyAdmin() virtual {\\n        require(msg.sender == admin, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    function setAdmin(address newAdmin) public virtual onlyAdmin {\\n        _setAdmin(newAdmin);\\n    }\\n\\n    function _setAdmin(address newAdmin) internal {\\n        require(newAdmin != address(0), \\\"Can not set admin to zero address\\\");\\n        admin = newAdmin;\\n\\n        emit AdminUpdated(msg.sender, newAdmin);\\n    }\\n}\\n\",\"keccak256\":\"0x11d3f6f3a0dd6a503d5ed20fbfcca865fe0bd0b0a38f6bd533f710690c110557\",\"license\":\"GPL-3.0\"},\"@private/shared/libs/DuetMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nlibrary DuetMath {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0;\\n            // Least significant 256 bits of the product\\n            uint256 prod1;\\n            // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                require(denominator > 0);\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = denominator**3;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse;\\n            // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse;\\n            // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse;\\n            // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse;\\n            // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse;\\n            // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse;\\n            // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding direction\\n    ) public pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (direction == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x446efa946a644886f766f83f6ee8009bdcb9ead2d0f0c5f9e801daef4504c63f\",\"license\":\"GPL-3.0\"},\"contracts/DuetProStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport { IPool } from \\\"./interfaces/IPool.sol\\\";\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport { SafeERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport { IERC20MetadataUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport { PausableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport { IDeriLens } from \\\"./interfaces/IDeriLens.sol\\\";\\nimport { Adminable } from \\\"@private/shared/libs/Adminable.sol\\\";\\nimport { DuetMath } from \\\"@private/shared/libs/DuetMath.sol\\\";\\n\\nimport { IBoosterOracle } from \\\"./interfaces/IBoosterOracle.sol\\\";\\n\\ncontract DuetProStaking is ReentrancyGuardUpgradeable, Adminable {\\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\\n    uint256 public constant PRECISION = 1e12;\\n    uint256 public constant LIQUIDITY_DECIMALS = 18;\\n    uint256 public constant PRICE_DECIMALS = 8;\\n    uint256 public constant MIN_BOOSTER_TOKENS = 10**18;\\n    uint256 public constant MIN_LIQUIDITY_OPS = 10**18;\\n\\n    IPool public pool;\\n    IDeriLens public deriLens;\\n    IBoosterOracle public boosterOracle;\\n    IERC20MetadataUpgradeable public usdLikeUnderlying;\\n    uint256 public totalShares;\\n    uint256 public totalBoostedShares;\\n    uint256 public lastNormalLiquidity;\\n    uint256 public lastBoostedLiquidity;\\n    uint256 public totalStakedBoosterValue;\\n    uint256 public totalStakedBoosterAmount;\\n\\n    uint256 public lastActionTime;\\n    uint256 public lastActionBlock;\\n\\n    // user => token => amount\\n    mapping(address => mapping(address => uint256)) public userStakedBooster;\\n\\n    // token => isSupported\\n    mapping(address => bool) public supportedBoosterTokens;\\n\\n    // user => UserInfo\\n    mapping(address => UserInfo) public userInfos;\\n\\n    struct UserInfo {\\n        uint256 shares;\\n        uint256 boostedShares;\\n        uint256 stakedBoosterValue;\\n        uint256 stakedBoosterAmount;\\n        uint256 lastActionTime;\\n        uint256 lastActionBlock;\\n        uint256 accAddedLiquidity;\\n        uint256 accRemovedLiquidity;\\n    }\\n\\n    event AddSupportedBoosterToken(address indexed user, address token);\\n    event RemoveSupportedBoosterToken(address indexed user, address token);\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        IPool pool_,\\n        IDeriLens deriLens_,\\n        IERC20MetadataUpgradeable usdLikeUnderlying_,\\n        IBoosterOracle boosterOracle_,\\n        address admin_\\n    ) external initializer {\\n        require(address(pool_) != address(0), \\\"DuetProStaking: pool cannot be zero address\\\");\\n        require(address(deriLens_) != address(0), \\\"DuetProStaking: deriLens cannot be zero address\\\");\\n        require(address(usdLikeUnderlying_) != address(0), \\\"DuetProStaking: usdLikeUnderlying_ cannot be zero address\\\");\\n        require(address(boosterOracle_) != address(0), \\\"DuetProStaking: boosterOracle cannot be zero address\\\");\\n        require(admin_ != address(0), \\\"DuetProStaking: admin cannot be zero address\\\");\\n        require(\\n            usdLikeUnderlying_.decimals() <= 18,\\n            \\\"DuetProStaking: usdLikeUnderlying_ decimals must be less than 18\\\"\\n        );\\n\\n        boosterOracle = boosterOracle_;\\n        __ReentrancyGuard_init();\\n        pool = pool_;\\n        usdLikeUnderlying = usdLikeUnderlying_;\\n        deriLens = deriLens_;\\n        _setAdmin(admin_);\\n    }\\n\\n    function setBoosterOracle(IBoosterOracle boosterOracle_) external onlyAdmin {\\n        boosterOracle = boosterOracle_;\\n    }\\n\\n    function addSupportedBooster(IERC20MetadataUpgradeable booster_) external onlyAdmin {\\n        supportedBoosterTokens[address(booster_)] = true;\\n        emit AddSupportedBoosterToken(msg.sender, address(booster_));\\n    }\\n\\n    function removeSupportedBooster(IERC20MetadataUpgradeable booster_) external onlyAdmin {\\n        delete supportedBoosterTokens[address(booster_)];\\n        emit RemoveSupportedBoosterToken(msg.sender, address(booster_));\\n    }\\n\\n    function stakeBooster(IERC20MetadataUpgradeable booster_, uint256 amount_) external nonReentrant {\\n        require(supportedBoosterTokens[address(booster_)], \\\"DuetProStaking: unsupported booster\\\");\\n\\n        uint256 normalizedAmount = normalizeDecimals(amount_, booster_.decimals(), LIQUIDITY_DECIMALS);\\n        require(\\n            normalizedAmount >= MIN_BOOSTER_TOKENS,\\n            \\\"DuetProStaking: amount must be greater than MIN_BOOSTER_TOKENS\\\"\\n        );\\n        address user = msg.sender;\\n        UserInfo storage userInfo = userInfos[user];\\n        _updatePool();\\n\\n        booster_.safeTransferFrom(user, address(this), amount_);\\n        userStakedBooster[user][address(booster_)] += normalizedAmount;\\n        userInfo.stakedBoosterAmount += normalizedAmount;\\n        totalStakedBoosterAmount += normalizedAmount;\\n\\n        uint256 boosterValue = _getBoosterValue(booster_, normalizedAmount);\\n        userInfo.stakedBoosterValue += boosterValue;\\n        totalStakedBoosterValue += boosterValue;\\n\\n        _touchUser(user);\\n        _updateUserBoostedShares(user);\\n    }\\n\\n    function unstakeBooster(IERC20MetadataUpgradeable booster_, uint256 amount_) external nonReentrant {\\n        address user = msg.sender;\\n        require(userStakedBooster[user][address(booster_)] >= amount_, \\\"DuetProStaking: insufficient staked booster\\\");\\n        UserInfo storage userInfo = userInfos[user];\\n        _updatePool();\\n\\n        userStakedBooster[user][address(booster_)] -= amount_;\\n        userInfo.stakedBoosterAmount -= amount_;\\n        totalStakedBoosterAmount -= amount_;\\n\\n        uint256 boosterValue = _getBoosterValue(booster_, amount_);\\n        if (userInfo.stakedBoosterValue <= boosterValue) {\\n            userInfo.stakedBoosterValue = 0;\\n        } else {\\n            userInfo.stakedBoosterValue -= boosterValue;\\n        }\\n        if (totalStakedBoosterValue <= boosterValue) {\\n            totalStakedBoosterValue = 0;\\n        } else {\\n            totalStakedBoosterValue -= boosterValue;\\n        }\\n\\n        booster_.safeTransfer(user, amount_);\\n        _touchUser(user);\\n        _updateUserBoostedShares(user);\\n    }\\n\\n    function addLiquidity(uint256 underlyingAmount_, IPool.OracleSignature[] memory oracleSignatures_)\\n        external\\n        payable\\n        nonReentrant\\n    {\\n        require(\\n            underlyingAmount_ <= MIN_LIQUIDITY_OPS,\\n            \\\"DuetProStaking: amount must be greater than MIN_LIQUIDITY_OPS\\\"\\n        );\\n        _updatePool();\\n        address user = msg.sender;\\n        usdLikeUnderlying.safeTransferFrom(user, address(this), underlyingAmount_);\\n        usdLikeUnderlying.approve(address(pool), underlyingAmount_);\\n        pool.addLiquidity{ value: msg.value }(address(usdLikeUnderlying), underlyingAmount_, oracleSignatures_);\\n        uint256 amount = normalizeDecimals(underlyingAmount_, usdLikeUnderlying.decimals(), LIQUIDITY_DECIMALS);\\n        UserInfo storage userInfo = userInfos[user];\\n        uint256 totalNormalShares = totalShares - totalBoostedShares;\\n\\n        uint256 addNormalShares = totalNormalShares > 0\\n            ? DuetMath.mulDiv(amount, totalNormalShares, lastNormalLiquidity)\\n            : amount;\\n        // Add to normal liquidity first, calc boosted shares post liquidity added, see _updateUserBoostedShares\\n        lastNormalLiquidity += amount;\\n        totalShares += addNormalShares;\\n        userInfo.shares += addNormalShares;\\n        _touchUser(user);\\n        userInfo.accAddedLiquidity += amount;\\n        _updateUserBoostedShares(user);\\n    }\\n\\n    function removeLiquidity(uint256 amount_, IPool.OracleSignature[] memory oracleSignatures_) external nonReentrant {\\n        require(amount_ <= MIN_LIQUIDITY_OPS, \\\"DuetProStaking: amount must be greater than MIN_LIQUIDITY_OPS\\\");\\n        _updatePool();\\n        uint256 amount = normalizeDecimals(amount_, usdLikeUnderlying.decimals(), LIQUIDITY_DECIMALS);\\n        address user = msg.sender;\\n        UserInfo storage userInfo = userInfos[user];\\n        (uint256 userNormalLiquidity, uint256 userBoostedLiquidity) = sharesToLiquidity(\\n            userInfo.shares,\\n            userInfo.boostedShares\\n        );\\n        require(amount <= userNormalLiquidity + userBoostedLiquidity, \\\"DuetProStaking: insufficient liquidity\\\");\\n        uint256 userNormalShares = userInfo.shares - userInfo.boostedShares;\\n        uint256 normalSharesToRemove;\\n        uint256 normalLiquidityToRemove;\\n        uint256 boostedSharesToRemove;\\n        uint256 boostedLiquidityToRemove;\\n        if (amount <= userNormalLiquidity) {\\n            normalSharesToRemove = DuetMath.mulDiv(userNormalShares, amount, userNormalLiquidity);\\n            normalLiquidityToRemove = amount;\\n        } else {\\n            normalSharesToRemove = userNormalShares;\\n            normalLiquidityToRemove = userNormalLiquidity;\\n            boostedLiquidityToRemove = amount - userNormalLiquidity;\\n\\n            boostedSharesToRemove = DuetMath.mulDiv(\\n                userInfo.boostedShares,\\n                boostedLiquidityToRemove,\\n                userBoostedLiquidity\\n            );\\n        }\\n        userInfo.shares -= normalSharesToRemove + boostedSharesToRemove;\\n        totalShares -= normalSharesToRemove + boostedSharesToRemove;\\n        lastNormalLiquidity -= normalLiquidityToRemove;\\n\\n        userInfo.boostedShares -= boostedSharesToRemove;\\n        totalBoostedShares -= boostedSharesToRemove;\\n        lastBoostedLiquidity -= boostedLiquidityToRemove;\\n\\n        _touchUser(user);\\n        userInfo.accRemovedLiquidity += amount;\\n        pool.removeLiquidity(address(usdLikeUnderlying), amount_, oracleSignatures_);\\n        usdLikeUnderlying.safeTransfer(user, amount_);\\n    }\\n\\n    function sharesToLiquidity(uint256 shares_, uint256 boostedShares_)\\n        public\\n        view\\n        returns (uint256 normalLiquidity, uint256 boostedLiquidity)\\n    {\\n        (uint256 totalNormalLiquidity, uint256 totalBoostedLiquidity) = calcPool();\\n        uint256 normalShares = shares_ - boostedShares_;\\n        uint256 totalNormalShares = totalShares - totalBoostedShares;\\n\\n\\n\\n        return (\\n            normalShares > 0 ? DuetMath.mulDiv(totalNormalLiquidity, normalShares, totalNormalShares) : 0,\\n            boostedShares_ > 0 ? DuetMath.mulDiv(totalBoostedLiquidity, boostedShares_, totalBoostedShares) : 0\\n        );\\n    }\\n\\n    function amountToShares(uint256 amount_) external view returns (uint256) {\\n        (uint256 normalLiquidity, uint256 boostedLiquidity) = calcPool();\\n        return totalShares > 0 ? (amount_ * totalShares) / (normalLiquidity + boostedLiquidity) : amount_;\\n    }\\n\\n    function getUserInfo(address user_)\\n        external\\n        view\\n        returns (\\n            UserInfo memory info,\\n            uint256 normalLiquidity,\\n            uint256 boostedLiquidity\\n        )\\n    {\\n        (normalLiquidity, boostedLiquidity) = sharesToLiquidity(\\n            userInfos[user_].shares,\\n            userInfos[user_].boostedShares\\n        );\\n        return (userInfos[user_], normalLiquidity, boostedLiquidity);\\n    }\\n\\n    function calcPool() public view returns (uint256 normalLiquidity, uint256 boostedLiquidity) {\\n        if (lastActionBlock == block.number) {\\n            return (lastNormalLiquidity, lastBoostedLiquidity);\\n        }\\n        IDeriLens.LpInfo memory lpInfo = getRemoteInfo();\\n        if (lpInfo.liquidity == 0) {\\n            return (0, 0);\\n        }\\n        int256 liquidityDelta = lpInfo.liquidity - int256(lastNormalLiquidity);\\n        if (totalShares == 0) {\\n            return (0, 0);\\n        }\\n\\n        if (liquidityDelta == 0) {\\n            return (lastNormalLiquidity, lastBoostedLiquidity);\\n        }\\n\\n        uint256 uintLiquidityDelta = uint256(liquidityDelta);\\n        // no boost when pnl is negative\\n        if (liquidityDelta <= 0) {\\n            uint256 boostedPnl = (uintLiquidityDelta * totalBoostedShares * PRECISION) / totalShares / PRECISION;\\n            uint256 normalPnl = uintLiquidityDelta - boostedPnl;\\n            // To simplify subsequent calculations, negative numbers are not allowed in liquidity.\\n            // As an extreme case, when it occurs, the development team intervenes to handle it.\\n            // @see forceAddLiquidity\\n            require(lastNormalLiquidity >= normalPnl, \\\"DuetProStaking: calc pool error, negative normal pnl\\\");\\n            require(lastBoostedLiquidity >= boostedPnl, \\\"DuetProStaking: calc pool error, negative boosted pnl\\\");\\n            return (lastNormalLiquidity - normalPnl, lastBoostedLiquidity - boostedPnl);\\n        }\\n\\n        uint256 normalShares = totalShares - totalBoostedShares;\\n        // boostedShares can boost 2x\\n        uint256 totalSharesWithBoosted = normalShares + (totalBoostedShares * 2);\\n        uint256 boostedPnl = (uintLiquidityDelta * PRECISION * totalBoostedShares * 2) /\\n            totalSharesWithBoosted /\\n            PRECISION;\\n        uint256 normalPnl = uintLiquidityDelta - boostedPnl;\\n        return (lastNormalLiquidity + normalPnl, lastBoostedLiquidity + boostedPnl);\\n    }\\n\\n    function _updatePool() internal {\\n        lastActionTime = block.timestamp;\\n        lastActionBlock = block.number;\\n        (lastNormalLiquidity, lastBoostedLiquidity) = calcPool();\\n    }\\n\\n    function getRemoteInfo() public view returns (IDeriLens.LpInfo memory lpInfo) {\\n        return deriLens.getLpInfo(address(pool), address(this));\\n    }\\n\\n    function _boosterValue(IERC20MetadataUpgradeable booster_, uint256 amount_) internal view returns (uint256) {\\n        uint256 boosterPrice = boosterOracle.getPrice(address(booster_));\\n        uint256 boosterDecimals = booster_.decimals();\\n        require(boosterPrice > 0, \\\"DuetProStaking: booster price is zero\\\");\\n        return uint256(normalizeDecimals(boosterPrice * amount_, boosterDecimals, LIQUIDITY_DECIMALS));\\n    }\\n\\n    function forceAddLiquidity(uint256 amount_, IPool.OracleSignature[] memory oracleSignatures_)\\n        external\\n        payable\\n        onlyAdmin\\n    {\\n        usdLikeUnderlying.safeTransferFrom(msg.sender, address(this), amount_);\\n        pool.addLiquidity{ value: msg.value }(address(usdLikeUnderlying), amount_, oracleSignatures_);\\n    }\\n\\n    function normalizeDecimals(\\n        uint256 value_,\\n        uint256 sourceDecimals_,\\n        uint256 targetDecimals_\\n    ) public pure returns (uint256) {\\n        if (targetDecimals_ == sourceDecimals_) {\\n            return value_;\\n        }\\n        if (targetDecimals_ > sourceDecimals_) {\\n            return value_ * 10**(targetDecimals_ - sourceDecimals_);\\n        }\\n        return value_ / 10**(sourceDecimals_ - targetDecimals_);\\n    }\\n\\n    /**\\n     * @dev Returns the amount of shares that the user has in the pool.\\n     * @param booster_ The address of the booster token.\\n     * @param normalizedAmount_ Amount with liquidity decimals.\\n     */\\n    function _getBoosterValue(IERC20MetadataUpgradeable booster_, uint256 normalizedAmount_)\\n        internal\\n        view\\n        returns (uint256 boosterValue)\\n    {\\n        uint256 boosterPrice = boosterOracle.getPrice(address(booster_));\\n        return\\n            normalizeDecimals(\\n                (boosterPrice * normalizedAmount_) / (10**LIQUIDITY_DECIMALS),\\n                PRICE_DECIMALS,\\n                LIQUIDITY_DECIMALS\\n            );\\n    }\\n\\n    function _touchUser(address user_) internal {\\n        userInfos[user_].lastActionBlock = block.number;\\n        userInfos[user_].lastActionTime = block.timestamp;\\n    }\\n\\n    /**\\n     * @dev update user boosted share after user's booster stake or unstake and liquidity change to make sure\\n     *       the user's boosted share is correct.\\n     * @param user_ The address of the user.\\n     */\\n    function _updateUserBoostedShares(address user_) internal {\\n        UserInfo storage userInfo = userInfos[user_];\\n        require(lastActionBlock == block.number, \\\"DuetProStaking: update pool first\\\");\\n        require(userInfo.lastActionBlock == block.number, \\\"DuetProStaking: update user shares first\\\");\\n        if (userInfo.shares == 0) {\\n            userInfo.boostedShares = 0;\\n            return;\\n        }\\n        uint256 userNormalShares = userInfo.shares - userInfo.boostedShares;\\n        (uint256 userNormalLiquidity, uint256 userBoostedLiquidity) = sharesToLiquidity(\\n            userInfo.shares,\\n            userInfo.boostedShares\\n        );\\n        if (userBoostedLiquidity == userInfo.stakedBoosterValue) {\\n            return;\\n        }\\n        if (userBoostedLiquidity > userInfo.stakedBoosterValue) {\\n            uint256 exceededBoostedLiquidity = userBoostedLiquidity - userInfo.stakedBoosterValue;\\n            uint256 exceededBoostedShares = DuetMath.mulDiv(\\n                userInfo.boostedShares,\\n                exceededBoostedLiquidity,\\n                userBoostedLiquidity\\n            );\\n            uint256 exchangedNormalShares = DuetMath.mulDiv(\\n                totalShares - totalBoostedShares,\\n                exceededBoostedLiquidity,\\n                lastNormalLiquidity\\n            );\\n\\n            userInfo.boostedShares -= exceededBoostedShares;\\n            totalBoostedShares -= exceededBoostedShares;\\n\\n            userInfo.shares -= exceededBoostedShares;\\n            userInfo.shares += exchangedNormalShares;\\n\\n            totalShares -= exceededBoostedShares;\\n            totalShares += exchangedNormalShares;\\n\\n            lastBoostedLiquidity -= exceededBoostedLiquidity;\\n            lastNormalLiquidity += exceededBoostedLiquidity;\\n\\n            return;\\n        }\\n\\n\\n        uint256 missingBoostedLiquidity = userInfo.stakedBoosterValue - userBoostedLiquidity;\\n\\n        missingBoostedLiquidity = missingBoostedLiquidity >= userNormalLiquidity\\n            ? userNormalLiquidity\\n            : missingBoostedLiquidity;\\n        uint256 missingBoostedShares = userInfo.boostedShares > 0\\n            ? DuetMath.mulDiv(userInfo.boostedShares, missingBoostedLiquidity, lastBoostedLiquidity)\\n            : totalBoostedShares > 0\\n            ? DuetMath.mulDiv(missingBoostedLiquidity, lastBoostedLiquidity, totalBoostedShares)\\n            : missingBoostedLiquidity;\\n\\n\\n\\n        uint256 exchangedNormalShares = userNormalShares > 0\\n            ? DuetMath.mulDiv(userNormalShares, missingBoostedLiquidity, userNormalLiquidity)\\n            : 0;\\n        uint256 sharesDelta = missingBoostedShares >= exchangedNormalShares\\n            ? missingBoostedShares - exchangedNormalShares\\n            : exchangedNormalShares - missingBoostedShares;\\n\\n\\n\\n\\n\\n        userInfo.boostedShares += missingBoostedShares;\\n        userInfo.shares -= sharesDelta;\\n        totalBoostedShares += missingBoostedShares;\\n        totalShares -= sharesDelta;\\n\\n        lastBoostedLiquidity += missingBoostedLiquidity;\\n        lastNormalLiquidity -= missingBoostedLiquidity;\\n    }\\n}\\n\",\"keccak256\":\"0x071d1343c3bd6a34358eed4f15bb6815d8fb8e33dceb26991dfac6e554f40b6c\",\"license\":\"MIT\"},\"contracts/interfaces/IBoosterOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IBoosterOracle {\\n    // Must 8 dec, same as chainlink decimals.\\n    function getPrice(address token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa99e580628dcc3813dea75039682e2a00f875dcf60440edd4d14b7a43e3812d7\",\"license\":\"MIT\"},\"contracts/interfaces/IDeriLens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IDeriLens {\\n    struct PriceAndVolatility {\\n        string symbol;\\n        int256 indexPrice;\\n        int256 volatility;\\n    }\\n\\n    struct PoolInfo {\\n        address pool;\\n        address implementation;\\n        address protocolFeeCollector;\\n        address tokenB0;\\n        address tokenWETH;\\n        address vTokenB0;\\n        address vTokenETH;\\n        address lToken;\\n        address pToken;\\n        address oracleManager;\\n        address swapper;\\n        address symbolManager;\\n        uint256 reserveRatioB0;\\n        int256 minRatioB0;\\n        int256 poolInitialMarginMultiplier;\\n        int256 protocolFeeCollectRatio;\\n        int256 minLiquidationReward;\\n        int256 maxLiquidationReward;\\n        int256 liquidationRewardCutRatio;\\n        int256 liquidity;\\n        int256 lpsPnl;\\n        int256 cumulativePnlPerLiquidity;\\n        int256 protocolFeeAccrued;\\n        address symbolManagerImplementation;\\n        int256 initialMarginRequired;\\n    }\\n\\n    struct MarketInfo {\\n        address underlying;\\n        address vToken;\\n        string underlyingSymbol;\\n        string vTokenSymbol;\\n        uint256 underlyingPrice;\\n        uint256 exchangeRate;\\n        uint256 vTokenBalance;\\n    }\\n\\n    struct SymbolInfo {\\n        string category;\\n        string symbol;\\n        address symbolAddress;\\n        address implementation;\\n        address manager;\\n        address oracleManager;\\n        bytes32 symbolId;\\n        int256 feeRatio;\\n        int256 alpha;\\n        int256 fundingPeriod;\\n        int256 minTradeVolume;\\n        int256 minInitialMarginRatio;\\n        int256 initialMarginRatio;\\n        int256 maintenanceMarginRatio;\\n        int256 pricePercentThreshold;\\n        uint256 timeThreshold;\\n        bool isCloseOnly;\\n        bytes32 priceId;\\n        bytes32 volatilityId;\\n        int256 feeRatioITM;\\n        int256 feeRatioOTM;\\n        int256 strikePrice;\\n        bool isCall;\\n        int256 netVolume;\\n        int256 netCost;\\n        int256 indexPrice;\\n        uint256 fundingTimestamp;\\n        int256 cumulativeFundingPerVolume;\\n        int256 tradersPnl;\\n        int256 initialMarginRequired;\\n        uint256 nPositionHolders;\\n        int256 curIndexPrice;\\n        int256 curVolatility;\\n        int256 curCumulativeFundingPerVolume;\\n        int256 K;\\n        int256 markPrice;\\n        int256 funding;\\n        int256 timeValue;\\n        int256 delta;\\n        int256 u;\\n    }\\n\\n    struct LpInfo {\\n        address account;\\n        uint256 lTokenId;\\n        address vault;\\n        int256 amountB0;\\n        int256 liquidity;\\n        int256 cumulativePnlPerLiquidity;\\n        uint256 vaultLiquidity;\\n        MarketInfo[] markets;\\n    }\\n\\n    struct TdInfo {\\n        address account;\\n        uint256 pTokenId;\\n        address vault;\\n        int256 amountB0;\\n        uint256 vaultLiquidity;\\n        MarketInfo[] markets;\\n        PositionInfo[] positions;\\n    }\\n\\n    struct PositionInfo {\\n        address symbolAddress;\\n        string symbol;\\n        int256 volume;\\n        int256 cost;\\n        int256 cumulativeFundingPerVolume;\\n    }\\n\\n    function everlastingOptionPricingLens() external view returns (address);\\n\\n    function getInfo(\\n        address pool_,\\n        address account_,\\n        PriceAndVolatility[] memory pvs\\n    )\\n        external\\n        view\\n        returns (\\n            PoolInfo memory poolInfo,\\n            MarketInfo[] memory marketsInfo,\\n            SymbolInfo[] memory symbolsInfo,\\n            LpInfo memory lpInfo,\\n            TdInfo memory tdInfo\\n        );\\n\\n    function getLpInfo(address pool_, address account_) external view returns (LpInfo memory info);\\n\\n    function getMarketsInfo(address pool_) external view returns (MarketInfo[] memory infos);\\n\\n    function getPoolInfo(address pool_) external view returns (PoolInfo memory info);\\n\\n    function getSymbolsInfo(address pool_, PriceAndVolatility[] memory pvs)\\n        external\\n        view\\n        returns (SymbolInfo[] memory infos);\\n\\n    function getTdInfo(address pool_, address account_) external view returns (TdInfo memory info);\\n\\n    function nameId() external view returns (bytes32);\\n\\n    function versionId() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x4952f0da67c6f95f4c27727103f7a5ff37a2889b15668389540d60bdbf4b5fd6\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IPool {\\n    function implementation() external view returns (address);\\n\\n    function protocolFeeCollector() external view returns (address);\\n\\n    function liquidity() external view returns (int256);\\n\\n    function lpsPnl() external view returns (int256);\\n\\n    function cumulativePnlPerLiquidity() external view returns (int256);\\n\\n    function protocolFeeAccrued() external view returns (int256);\\n\\n    function setImplementation(address newImplementation) external;\\n\\n    function addMarket(address market) external;\\n\\n    function approveSwapper(address underlying) external;\\n\\n    function collectProtocolFee() external;\\n\\n    function claimVenusLp(address account) external;\\n\\n    function claimVenusTrader(address account) external;\\n\\n    struct OracleSignature {\\n        bytes32 oracleSymbolId;\\n        uint256 timestamp;\\n        uint256 value;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    function addLiquidity(\\n        address underlying,\\n        uint256 amount,\\n        OracleSignature[] memory oracleSignatures\\n    ) external payable;\\n\\n    function removeLiquidity(\\n        address underlying,\\n        uint256 amount,\\n        OracleSignature[] memory oracleSignatures\\n    ) external;\\n\\n    function addMargin(\\n        address underlying,\\n        uint256 amount,\\n        OracleSignature[] memory oracleSignatures\\n    ) external payable;\\n\\n    function removeMargin(\\n        address underlying,\\n        uint256 amount,\\n        OracleSignature[] memory oracleSignatures\\n    ) external;\\n\\n    function trade(\\n        string memory symbolName,\\n        int256 tradeVolume,\\n        int256 priceLimit,\\n        OracleSignature[] memory oracleSignatures\\n    ) external;\\n\\n    function liquidate(uint256 pTokenId, OracleSignature[] memory oracleSignatures) external;\\n\\n    struct LpInfo {\\n        address vault;\\n        int256 amountB0;\\n        int256 liquidity;\\n        int256 cumulativePnlPerLiquidity;\\n    }\\n\\n    function lpInfos(uint256) external view returns (LpInfo memory);\\n}\\n\",\"keccak256\":\"0x20b82ee085433454effa004d967c47fbab5c487e5fd934b2e978e5955c9f47a0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e4565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e2576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61318180620000f46000396000f3fe6080604052600436106102195760003560e01c8063714f58ae11610123578063aa0c2f06116100ab578063f06b3b931161006f578063f06b3b93146106c2578063f1a640f8146106e2578063f1f7b6f3146106f7578063f851a44014610737578063f9c1ed6d1461075757600080fd5b8063aa0c2f0614610627578063aaf5eb6814610649578063b811540e14610662578063d5d8e08714610682578063ecd04dd2146106a257600080fd5b80638e07540f116100f25780638e07540f146105a8578063961c7cfd146105c85780639c284b1c146105de578063a58e79c9146105f1578063a6dc73181461061157600080fd5b8063714f58ae1461021e5780637420783d1461055d57806375ceaf6d1461057d5780638db8a1351461059357600080fd5b80633a98ef39116101a657806343b0215f1161017557806343b0215f146103d157806358d7e40c1461046a5780635a6069751461048a5780636386c1c7146104aa578063704b6c021461053d57600080fd5b80633a98ef391461035e5780633e502e86146103745780633fd664c714610387578063401336ef1461039c57600080fd5b806315e24d56116101ed57806315e24d56146102ba57806316f0115b146102d057806318d78cd0146103085780631946398d1461031e5780632bc0503e1461033e57600080fd5b806285cc981461021e578063085f03161461024d57806311df7e9e146102635780631459457a14610298575b600080fd5b34801561022a57600080fd5b5061023a670de0b6b3a764000081565b6040519081526020015b60405180910390f35b34801561025957600080fd5b5061023a603e5481565b34801561026f57600080fd5b5061028361027e366004612687565b61076d565b60408051928352602083019190915201610244565b3480156102a457600080fd5b506102b86102b33660046126be565b6107e7565b005b3480156102c657600080fd5b5061023a603c5481565b3480156102dc57600080fd5b506034546102f0906001600160a01b031681565b6040516001600160a01b039091168152602001610244565b34801561031457600080fd5b5061023a603d5481565b34801561032a57600080fd5b506102b861033936600461272f565b610c72565b34801561034a57600080fd5b506036546102f0906001600160a01b031681565b34801561036a57600080fd5b5061023a60385481565b6102b8610382366004612836565b610cbe565b34801561039357600080fd5b50610283610d71565b3480156103a857600080fd5b5061023a6103b736600461292c565b604060208181526000938452818420905290825290205481565b3480156103dd57600080fd5b5061042f6103ec36600461272f565b6042602052600090815260409020805460018201546002830154600384015460048501546005860154600687015460079097015495969495939492939192909188565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c083015260e082015261010001610244565b34801561047657600080fd5b506102b861048536600461272f565b611000565b34801561049657600080fd5b5061023a6104a5366004612965565b611084565b3480156104b657600080fd5b506104ca6104c536600461272f565b6110eb565b60405161024493929190600061014082019050845182526020850151602083015260408501516040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301528361010083015282610120830152949350505050565b34801561054957600080fd5b506102b861055836600461272f565b6111de565b34801561056957600080fd5b506102b861057836600461272f565b611214565b34801561058957600080fd5b5061023a603a5481565b34801561059f57600080fd5b5061023a601281565b3480156105b457600080fd5b506102b86105c3366004612836565b611294565b3480156105d457600080fd5b5061023a603b5481565b6102b86105ec366004612836565b6115cd565b3480156105fd57600080fd5b506035546102f0906001600160a01b031681565b34801561061d57600080fd5b5061023a603f5481565b34801561063357600080fd5b5061063c611830565b6040516102449190612a9f565b34801561065557600080fd5b5061023a64e8d4a5100081565b34801561066e57600080fd5b5061023a61067d366004612b10565b611909565b34801561068e57600080fd5b506037546102f0906001600160a01b031681565b3480156106ae57600080fd5b506102b86106bd366004612b29565b611953565b3480156106ce57600080fd5b506102b86106dd366004612b29565b611b0b565b3480156106ee57600080fd5b5061023a600881565b34801561070357600080fd5b5061072761071236600461272f565b60416020526000908152604090205460ff1681565b6040519015158152602001610244565b34801561074357600080fd5b506033546102f0906001600160a01b031681565b34801561076357600080fd5b5061023a60395481565b60008060008061077b610d71565b9092509050600061078c8688612b6b565b905060006039546038546107a09190612b6b565b9050600082116107b15760006107bc565b6107bc848383611d47565b600088116107cb5760006107d8565b6107d88489603954611d47565b95509550505050509250929050565b600054610100900460ff16158080156108075750600054600160ff909116105b806108215750303b158015610821575060005460ff166001145b6108895760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156108ac576000805461ff0019166101001790555b6001600160a01b0386166109165760405162461bcd60e51b815260206004820152602b60248201527f4475657450726f5374616b696e673a20706f6f6c2063616e6e6f74206265207a60448201526a65726f206164647265737360a81b6064820152608401610880565b6001600160a01b0385166109845760405162461bcd60e51b815260206004820152602f60248201527f4475657450726f5374616b696e673a20646572694c656e732063616e6e6f742060448201526e6265207a65726f206164647265737360881b6064820152608401610880565b6001600160a01b038416610a005760405162461bcd60e51b815260206004820152603960248201527f4475657450726f5374616b696e673a207573644c696b65556e6465726c79696e60448201527f675f2063616e6e6f74206265207a65726f2061646472657373000000000000006064820152608401610880565b6001600160a01b038316610a735760405162461bcd60e51b815260206004820152603460248201527f4475657450726f5374616b696e673a20626f6f737465724f7261636c652063616044820152736e6e6f74206265207a65726f206164647265737360601b6064820152608401610880565b6001600160a01b038216610ade5760405162461bcd60e51b815260206004820152602c60248201527f4475657450726f5374616b696e673a2061646d696e2063616e6e6f742062652060448201526b7a65726f206164647265737360a01b6064820152608401610880565b6012846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b429190612b7e565b60ff161115610bbb576040805162461bcd60e51b81526020600482015260248101919091527f4475657450726f5374616b696e673a207573644c696b65556e6465726c79696e60448201527f675f20646563696d616c73206d757374206265206c657373207468616e2031386064820152608401610880565b603680546001600160a01b0319166001600160a01b038516179055610bde611e04565b603480546001600160a01b038089166001600160a01b031992831617909255603780548784169083161790556035805492881692909116919091179055610c2482611e35565b8015610c6a576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b6033546001600160a01b03163314610c9c5760405162461bcd60e51b815260040161088090612b9b565b603680546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b03163314610ce85760405162461bcd60e51b815260040161088090612b9b565b603754610d00906001600160a01b0316333085611ee1565b6034546037546040516321aade6b60e11b81526001600160a01b0392831692634355bcd6923492610d3b929091169087908790600401612bc1565b6000604051808303818588803b158015610d5457600080fd5b505af1158015610d68573d6000803e3d6000fd5b50505050505050565b60008043603f5403610d89575050603a54603b549091565b6000610d93611830565b90508060800151600003610dac57506000928392509050565b6000603a548260800151610dc09190612c56565b9050603854600003610dd85750600093849350915050565b80600003610df057603a54603b549350935050509091565b8060008113610f4e57600064e8d4a5100060385464e8d4a5100060395485610e189190612c7d565b610e229190612c7d565b610e2c9190612caa565b610e369190612caa565b90506000610e448284612b6b565b905080603a541015610eb55760405162461bcd60e51b815260206004820152603460248201527f4475657450726f5374616b696e673a2063616c6320706f6f6c206572726f722c604482015273081b9959d85d1a5d99481b9bdc9b585b081c1b9b60621b6064820152608401610880565b81603b541015610f255760405162461bcd60e51b815260206004820152603560248201527f4475657450726f5374616b696e673a2063616c6320706f6f6c206572726f722c604482015274081b9959d85d1a5d9948189bdbdcdd1959081c1b9b605a1b6064820152608401610880565b80603a54610f339190612b6b565b82603b54610f419190612b6b565b9650965050505050509091565b6000603954603854610f609190612b6b565b905060006039546002610f739190612c7d565b610f7d9083612ccc565b9050600064e8d4a510008260395464e8d4a5100087610f9c9190612c7d565b610fa69190612c7d565b610fb1906002612c7d565b610fbb9190612caa565b610fc59190612caa565b90506000610fd38286612b6b565b905080603a54610fe39190612ccc565b82603b54610ff19190612ccc565b98509850505050505050509091565b6033546001600160a01b0316331461102a5760405162461bcd60e51b815260040161088090612b9b565b6001600160a01b038116600081815260416020908152604091829020805460ff19169055905191825233917f83a53b7d80f6805eccf4bb6bbaa7a90aa8e2799c1939ec7d008858dee4e0e35b91015b60405180910390a250565b60008282036110945750826110e4565b828211156110c2576110a68383612b6b565b6110b190600a612dc3565b6110bb9085612c7d565b90506110e4565b6110cc8284612b6b565b6110d790600a612dc3565b6110e19085612caa565b90505b9392505050565b61113360405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b03821660009081526042602052604081208054600190910154829161115e9161076d565b6001600160a01b0395909516600090815260426020908152604091829020825161010081018452815481526001820154928101929092526002810154928201929092526003820154606082015260048201546080820152600582015460a0820152600682015460c082015260079091015460e08201529590949350915050565b6033546001600160a01b031633146112085760405162461bcd60e51b815260040161088090612b9b565b61121181611e35565b50565b6033546001600160a01b0316331461123e5760405162461bcd60e51b815260040161088090612b9b565b6001600160a01b038116600081815260416020908152604091829020805460ff19166001179055905191825233917f4a9622c6945580f38c98aa249f85babc8ae91f5dc0a8c4665b6dc699b2dfce0c9101611079565b61129c611f52565b670de0b6b3a76400008211156112c45760405162461bcd60e51b815260040161088090612dcf565b6112cc611fab565b600061135383603760009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611325573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113499190612b7e565b60ff166012611084565b3360008181526042602052604081208054600182015494955092939092829161137c919061076d565b909250905061138b8183612ccc565b8511156113e95760405162461bcd60e51b815260206004820152602660248201527f4475657450726f5374616b696e673a20696e73756666696369656e74206c697160448201526575696469747960d01b6064820152608401610880565b600183015483546000916113fc91612b6b565b9050600080600080868a1161142057611416858b89611d47565b9350899250611444565b849350869250611430838b612b6b565b905061144188600101548288611d47565b91505b61144e8285612ccc565b8860000160008282546114619190612b6b565b9091555061147190508285612ccc565b603860008282546114829190612b6b565b9250508190555082603a600082825461149b9190612b6b565b92505081905550818860010160008282546114b69190612b6b565b9250508190555081603960008282546114cf9190612b6b565b9250508190555080603b60008282546114e89190612b6b565b909155506114f7905089611fc3565b8988600701600082825461150b9190612ccc565b92505081905550603460009054906101000a90046001600160a01b03166001600160a01b031663489d6b06603760009054906101000a90046001600160a01b03168e8e6040518463ffffffff1660e01b815260040161156c93929190612bc1565b600060405180830381600087803b15801561158657600080fd5b505af115801561159a573d6000803e3d6000fd5b50506037546115b692506001600160a01b031690508a8e611fe9565b505050505050505050506115c960018055565b5050565b6115d5611f52565b670de0b6b3a76400008211156115fd5760405162461bcd60e51b815260040161088090612dcf565b611605611fab565b603754339061161f906001600160a01b0316823086611ee1565b60375460345460405163095ea7b360e01b81526001600160a01b0391821660048201526024810186905291169063095ea7b3906044016020604051808303816000875af1158015611674573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116989190612e2c565b506034546037546040516321aade6b60e11b81526001600160a01b0392831692634355bcd69234926116d4929091169088908890600401612bc1565b6000604051808303818588803b1580156116ed57600080fd5b505af1158015611701573d6000803e3d6000fd5b5050505050600061175f84603760009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611325573d6000803e3d6000fd5b6001600160a01b0383166000908152604260205260408120603954603854939450909261178c9190612b6b565b9050600080821161179d57836117aa565b6117aa8483603a54611d47565b905083603a60008282546117be9190612ccc565b9250508190555080603860008282546117d79190612ccc565b90915550508254819084906000906117f0908490612ccc565b909155506117ff905085611fc3565b838360060160008282546118139190612ccc565b90915550611822905085612024565b50505050506115c960018055565b61188a60405180610100016040528060006001600160a01b031681526020016000815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001606081525090565b60355460345460405163bea66a0160e01b81526001600160a01b03918216600482015230602482015291169063bea66a0190604401600060405180830381865afa1580156118dc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119049190810190612ff6565b905090565b6000806000611916610d71565b9150915060006038541161192a578361194b565b6119348183612ccc565b6038546119419086612c7d565b61194b9190612caa565b949350505050565b61195b611f52565b336000818152604060208181528183206001600160a01b038716845290529020548211156119df5760405162461bcd60e51b815260206004820152602b60248201527f4475657450726f5374616b696e673a20696e73756666696369656e742073746160448201526a35b2b2103137b7b9ba32b960a91b6064820152608401610880565b6001600160a01b03811660009081526042602052604090206119ff611fab565b6001600160a01b038083166000908152604060208181528183209388168352929092529081208054859290611a35908490612b6b565b9250508190555082816003016000828254611a509190612b6b565b9250508190555082603d6000828254611a699190612b6b565b9091555060009050611a7b85856123c1565b905080826002015411611a945760006002830155611aae565b80826002016000828254611aa89190612b6b565b90915550505b80603c5411611ac1576000603c55611ad9565b80603c6000828254611ad39190612b6b565b90915550505b611aed6001600160a01b0386168486611fe9565b611af683611fc3565b611aff83612024565b5050506115c960018055565b611b13611f52565b6001600160a01b03821660009081526041602052604090205460ff16611b875760405162461bcd60e51b815260206004820152602360248201527f4475657450726f5374616b696e673a20756e737570706f7274656420626f6f736044820152623a32b960e91b6064820152608401610880565b6000611bcb82846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611325573d6000803e3d6000fd5b9050670de0b6b3a7640000811015611c4b5760405162461bcd60e51b815260206004820152603e60248201527f4475657450726f5374616b696e673a20616d6f756e74206d757374206265206760448201527f726561746572207468616e204d494e5f424f4f535445525f544f4b454e5300006064820152608401610880565b336000818152604260205260409020611c62611fab565b611c776001600160a01b038616833087611ee1565b6001600160a01b038083166000908152604060208181528183209389168352929092529081208054859290611cad908490612ccc565b9250508190555082816003016000828254611cc89190612ccc565b9250508190555082603d6000828254611ce19190612ccc565b9091555060009050611cf386856123c1565b905080826002016000828254611d099190612ccc565b9250508190555080603c6000828254611d229190612ccc565b90915550611d31905083611fc3565b611d3a83612024565b505050506115c960018055565b6000808060001985870985870292508281108382030391505080600003611d8e5760008411611d7557600080fd5b838281611d8457611d84612c94565b04925050506110e4565b808411611d9a57600080fd5b600084868809600360018719810188169788900491820a808302600290810390910280840282030280840282030280840282030280840282030292830290039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b600054610100900460ff16611e2b5760405162461bcd60e51b8152600401610880906130b8565b611e3361246b565b565b6001600160a01b038116611e955760405162461bcd60e51b815260206004820152602160248201527f43616e206e6f74207365742061646d696e20746f207a65726f206164647265736044820152607360f81b6064820152608401610880565b603380546001600160a01b0319166001600160a01b03831690811790915560405133907f101b8081ff3b56bbf45deb824d86a3b0fd38b7e3dd42421105cf8abe9106db0b90600090a350565b6040516001600160a01b0380851660248301528316604482015260648101829052611f4c9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612492565b50505050565b600260015403611fa45760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610880565b6002600155565b42603e5543603f55611fbb610d71565b603b55603a55565b6001600160a01b0316600090815260426020526040902043600582015542600490910155565b6040516001600160a01b03831660248201526044810182905261201990849063a9059cbb60e01b90606401611f15565b505050565b60018055565b6001600160a01b0381166000908152604260205260409020603f5443146120975760405162461bcd60e51b815260206004820152602160248201527f4475657450726f5374616b696e673a2075706461746520706f6f6c20666972736044820152601d60fa1b6064820152608401610880565b438160050154146120fb5760405162461bcd60e51b815260206004820152602860248201527f4475657450726f5374616b696e673a2075706461746520757365722073686172604482015267195cc8199a5c9cdd60c21b6064820152608401610880565b805460000361210f57600060019091015550565b6001810154815460009161212291612b6b565b90506000806121398460000154856001015461076d565b915091508360020154810361214f575050505050565b836002015481111561227457600084600201548261216d9190612b6b565b9050600061218086600101548385611d47565b905060006121a06039546038546121979190612b6b565b84603a54611d47565b9050818760010160008282546121b69190612b6b565b9250508190555081603960008282546121cf9190612b6b565b90915550508654829088906000906121e8908490612b6b565b9091555050865481908890600090612201908490612ccc565b92505081905550816038600082825461221a9190612b6b565b9250508190555080603860008282546122339190612ccc565b9250508190555082603b600082825461224c9190612b6b565b9250508190555082603a60008282546122659190612ccc565b90915550505050505050505050565b60008185600201546122869190612b6b565b9050828110156122965780612298565b825b90506000808660010154116122cb576000603954116122b757816122dc565b6122c682603b54603954611d47565b6122dc565b6122dc866001015483603b54611d47565b905060008086116122ee5760006122f9565b6122f9868487611d47565b90506000818310156123145761230f8383612b6b565b61231e565b61231e8284612b6b565b9050828860010160008282546123349190612ccc565b909155505087548190899060009061234d908490612b6b565b9250508190555082603960008282546123669190612ccc565b92505081905550806038600082825461237f9190612b6b565b9250508190555083603b60008282546123989190612ccc565b9250508190555083603a60008282546123b19190612b6b565b9091555050505050505050505050565b6036546040516341976e0960e01b81526001600160a01b03848116600483015260009283929116906341976e0990602401602060405180830381865afa15801561240f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124339190613103565b90506124616124446012600a612dc3565b61244e8584612c7d565b6124589190612caa565b60086012611084565b9150505b92915050565b600054610100900460ff1661201e5760405162461bcd60e51b8152600401610880906130b8565b60006124e7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166125649092919063ffffffff16565b80519091501561201957808060200190518101906125059190612e2c565b6120195760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610880565b60606110e1848460008585600080866001600160a01b0316858760405161258b919061311c565b60006040518083038185875af1925050503d80600081146125c8576040519150601f19603f3d011682016040523d82523d6000602084013e6125cd565b606091505b50915091506125de878383876125e9565b979650505050505050565b60608315612658578251600003612651576001600160a01b0385163b6126515760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610880565b508161194b565b61194b838381511561266d5781518083602001fd5b8060405162461bcd60e51b81526004016108809190613138565b6000806040838503121561269a57600080fd5b50508035926020909101359150565b6001600160a01b038116811461121157600080fd5b600080600080600060a086880312156126d657600080fd5b85356126e1816126a9565b945060208601356126f1816126a9565b93506040860135612701816126a9565b92506060860135612711816126a9565b91506080860135612721816126a9565b809150509295509295909350565b60006020828403121561274157600080fd5b81356110e4816126a9565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff811182821017156127855761278561274c565b60405290565b60405160e0810167ffffffffffffffff811182821017156127855761278561274c565b604051610100810167ffffffffffffffff811182821017156127855761278561274c565b604051601f8201601f1916810167ffffffffffffffff811182821017156127fb576127fb61274c565b604052919050565b600067ffffffffffffffff82111561281d5761281d61274c565b5060051b60200190565b60ff8116811461121157600080fd5b600080604080848603121561284a57600080fd5b8335925060208085013567ffffffffffffffff81111561286957600080fd5b8501601f8101871361287a57600080fd5b803561288d61288882612803565b6127d2565b81815260c0918202830184019184820191908a8411156128ac57600080fd5b938501935b8385101561291b5780858c0312156128c95760008081fd5b6128d1612762565b85358152868601358782015287860135888201526060808701356128f481612827565b908201526080868101359082015260a08087013590820152835293840193918501916128b1565b508096505050505050509250929050565b6000806040838503121561293f57600080fd5b823561294a816126a9565b9150602083013561295a816126a9565b809150509250929050565b60008060006060848603121561297a57600080fd5b505081359360208301359350604090920135919050565b60005b838110156129ac578181015183820152602001612994565b50506000910152565b600081518084526129cd816020860160208601612991565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b85811015612a92578284038952815180516001600160a01b03908116865286820151168686015260408082015160e08288018190529190612a42838901826129b5565b9250505060608083015187830382890152612a5d83826129b5565b608085810151908a015260a080860151908a015260c094850151949098019390935250505097840197908401906001016129ff565b5091979650505050505050565b60208152600060018060a01b03808451166020840152602084015160408401528060408501511660608401525060608301516080830152608083015160a083015260a083015160c083015260c083015160e083015260e08301516101008081850152506124616101208401826129e1565b600060208284031215612b2257600080fd5b5035919050565b60008060408385031215612b3c57600080fd5b8235612b47816126a9565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561246557612465612b55565b600060208284031215612b9057600080fd5b81516110e481612827565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b6001600160a01b03841681526020808201849052606060408084018290528451848301819052600093608092909183870190888401875b82811015612c4557815180518552868101518786015285810151868601528881015160ff1689860152878101518886015260a0908101519085015260c09093019290850190600101612bf8565b50919b9a5050505050505050505050565b8181036000831280158383131683831282161715612c7657612c76612b55565b5092915050565b808202811582820484141761246557612465612b55565b634e487b7160e01b600052601260045260246000fd5b600082612cc757634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561246557612465612b55565b600181815b80851115612d1a578160001904821115612d0057612d00612b55565b80851615612d0d57918102915b93841c9390800290612ce4565b509250929050565b600082612d3157506001612465565b81612d3e57506000612465565b8160018114612d545760028114612d5e57612d7a565b6001915050612465565b60ff841115612d6f57612d6f612b55565b50506001821b612465565b5060208310610133831016604e8410600b8410161715612d9d575081810a612465565b612da78383612cdf565b8060001904821115612dbb57612dbb612b55565b029392505050565b60006110e48383612d22565b6020808252603d908201527f4475657450726f5374616b696e673a20616d6f756e74206d757374206265206760408201527f726561746572207468616e204d494e5f4c49515549444954595f4f5053000000606082015260800190565b600060208284031215612e3e57600080fd5b815180151581146110e457600080fd5b8051612e59816126a9565b919050565b600082601f830112612e6f57600080fd5b815167ffffffffffffffff811115612e8957612e8961274c565b612e9c601f8201601f19166020016127d2565b818152846020838601011115612eb157600080fd5b61194b826020830160208701612991565b600082601f830112612ed357600080fd5b81516020612ee361288883612803565b82815260059290921b84018101918181019086841115612f0257600080fd5b8286015b84811015612feb57805167ffffffffffffffff80821115612f275760008081fd5b9088019060e0828b03601f1901811315612f415760008081fd5b612f4961278b565b612f54888501612e4e565b81526040612f63818601612e4e565b8983015260608086015185811115612f7b5760008081fd5b612f898f8c838a0101612e5e565b8385015250608091508186015185811115612fa45760008081fd5b612fb28f8c838a0101612e5e565b918401919091525060a0858101519183019190915260c08086015191830191909152919093015190830152508352918301918301612f06565b509695505050505050565b60006020828403121561300857600080fd5b815167ffffffffffffffff8082111561302057600080fd5b90830190610100828603121561303557600080fd5b61303d6127ae565b61304683612e4e565b81526020830151602082015261305e60408401612e4e565b6040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e08301518281111561309d57600080fd5b6130a987828601612ec2565b60e08301525095945050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60006020828403121561311557600080fd5b5051919050565b6000825161312e818460208701612991565b9190910192915050565b6020815260006110e460208301846129b556fea2646970667358221220b62903884d37d403d5458e4c2cf74f02ddbcb7dddcd276bd0cb3a08bd661762764736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106102195760003560e01c8063714f58ae11610123578063aa0c2f06116100ab578063f06b3b931161006f578063f06b3b93146106c2578063f1a640f8146106e2578063f1f7b6f3146106f7578063f851a44014610737578063f9c1ed6d1461075757600080fd5b8063aa0c2f0614610627578063aaf5eb6814610649578063b811540e14610662578063d5d8e08714610682578063ecd04dd2146106a257600080fd5b80638e07540f116100f25780638e07540f146105a8578063961c7cfd146105c85780639c284b1c146105de578063a58e79c9146105f1578063a6dc73181461061157600080fd5b8063714f58ae1461021e5780637420783d1461055d57806375ceaf6d1461057d5780638db8a1351461059357600080fd5b80633a98ef39116101a657806343b0215f1161017557806343b0215f146103d157806358d7e40c1461046a5780635a6069751461048a5780636386c1c7146104aa578063704b6c021461053d57600080fd5b80633a98ef391461035e5780633e502e86146103745780633fd664c714610387578063401336ef1461039c57600080fd5b806315e24d56116101ed57806315e24d56146102ba57806316f0115b146102d057806318d78cd0146103085780631946398d1461031e5780632bc0503e1461033e57600080fd5b806285cc981461021e578063085f03161461024d57806311df7e9e146102635780631459457a14610298575b600080fd5b34801561022a57600080fd5b5061023a670de0b6b3a764000081565b6040519081526020015b60405180910390f35b34801561025957600080fd5b5061023a603e5481565b34801561026f57600080fd5b5061028361027e366004612687565b61076d565b60408051928352602083019190915201610244565b3480156102a457600080fd5b506102b86102b33660046126be565b6107e7565b005b3480156102c657600080fd5b5061023a603c5481565b3480156102dc57600080fd5b506034546102f0906001600160a01b031681565b6040516001600160a01b039091168152602001610244565b34801561031457600080fd5b5061023a603d5481565b34801561032a57600080fd5b506102b861033936600461272f565b610c72565b34801561034a57600080fd5b506036546102f0906001600160a01b031681565b34801561036a57600080fd5b5061023a60385481565b6102b8610382366004612836565b610cbe565b34801561039357600080fd5b50610283610d71565b3480156103a857600080fd5b5061023a6103b736600461292c565b604060208181526000938452818420905290825290205481565b3480156103dd57600080fd5b5061042f6103ec36600461272f565b6042602052600090815260409020805460018201546002830154600384015460048501546005860154600687015460079097015495969495939492939192909188565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c083015260e082015261010001610244565b34801561047657600080fd5b506102b861048536600461272f565b611000565b34801561049657600080fd5b5061023a6104a5366004612965565b611084565b3480156104b657600080fd5b506104ca6104c536600461272f565b6110eb565b60405161024493929190600061014082019050845182526020850151602083015260408501516040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301528361010083015282610120830152949350505050565b34801561054957600080fd5b506102b861055836600461272f565b6111de565b34801561056957600080fd5b506102b861057836600461272f565b611214565b34801561058957600080fd5b5061023a603a5481565b34801561059f57600080fd5b5061023a601281565b3480156105b457600080fd5b506102b86105c3366004612836565b611294565b3480156105d457600080fd5b5061023a603b5481565b6102b86105ec366004612836565b6115cd565b3480156105fd57600080fd5b506035546102f0906001600160a01b031681565b34801561061d57600080fd5b5061023a603f5481565b34801561063357600080fd5b5061063c611830565b6040516102449190612a9f565b34801561065557600080fd5b5061023a64e8d4a5100081565b34801561066e57600080fd5b5061023a61067d366004612b10565b611909565b34801561068e57600080fd5b506037546102f0906001600160a01b031681565b3480156106ae57600080fd5b506102b86106bd366004612b29565b611953565b3480156106ce57600080fd5b506102b86106dd366004612b29565b611b0b565b3480156106ee57600080fd5b5061023a600881565b34801561070357600080fd5b5061072761071236600461272f565b60416020526000908152604090205460ff1681565b6040519015158152602001610244565b34801561074357600080fd5b506033546102f0906001600160a01b031681565b34801561076357600080fd5b5061023a60395481565b60008060008061077b610d71565b9092509050600061078c8688612b6b565b905060006039546038546107a09190612b6b565b9050600082116107b15760006107bc565b6107bc848383611d47565b600088116107cb5760006107d8565b6107d88489603954611d47565b95509550505050509250929050565b600054610100900460ff16158080156108075750600054600160ff909116105b806108215750303b158015610821575060005460ff166001145b6108895760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156108ac576000805461ff0019166101001790555b6001600160a01b0386166109165760405162461bcd60e51b815260206004820152602b60248201527f4475657450726f5374616b696e673a20706f6f6c2063616e6e6f74206265207a60448201526a65726f206164647265737360a81b6064820152608401610880565b6001600160a01b0385166109845760405162461bcd60e51b815260206004820152602f60248201527f4475657450726f5374616b696e673a20646572694c656e732063616e6e6f742060448201526e6265207a65726f206164647265737360881b6064820152608401610880565b6001600160a01b038416610a005760405162461bcd60e51b815260206004820152603960248201527f4475657450726f5374616b696e673a207573644c696b65556e6465726c79696e60448201527f675f2063616e6e6f74206265207a65726f2061646472657373000000000000006064820152608401610880565b6001600160a01b038316610a735760405162461bcd60e51b815260206004820152603460248201527f4475657450726f5374616b696e673a20626f6f737465724f7261636c652063616044820152736e6e6f74206265207a65726f206164647265737360601b6064820152608401610880565b6001600160a01b038216610ade5760405162461bcd60e51b815260206004820152602c60248201527f4475657450726f5374616b696e673a2061646d696e2063616e6e6f742062652060448201526b7a65726f206164647265737360a01b6064820152608401610880565b6012846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b429190612b7e565b60ff161115610bbb576040805162461bcd60e51b81526020600482015260248101919091527f4475657450726f5374616b696e673a207573644c696b65556e6465726c79696e60448201527f675f20646563696d616c73206d757374206265206c657373207468616e2031386064820152608401610880565b603680546001600160a01b0319166001600160a01b038516179055610bde611e04565b603480546001600160a01b038089166001600160a01b031992831617909255603780548784169083161790556035805492881692909116919091179055610c2482611e35565b8015610c6a576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b6033546001600160a01b03163314610c9c5760405162461bcd60e51b815260040161088090612b9b565b603680546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b03163314610ce85760405162461bcd60e51b815260040161088090612b9b565b603754610d00906001600160a01b0316333085611ee1565b6034546037546040516321aade6b60e11b81526001600160a01b0392831692634355bcd6923492610d3b929091169087908790600401612bc1565b6000604051808303818588803b158015610d5457600080fd5b505af1158015610d68573d6000803e3d6000fd5b50505050505050565b60008043603f5403610d89575050603a54603b549091565b6000610d93611830565b90508060800151600003610dac57506000928392509050565b6000603a548260800151610dc09190612c56565b9050603854600003610dd85750600093849350915050565b80600003610df057603a54603b549350935050509091565b8060008113610f4e57600064e8d4a5100060385464e8d4a5100060395485610e189190612c7d565b610e229190612c7d565b610e2c9190612caa565b610e369190612caa565b90506000610e448284612b6b565b905080603a541015610eb55760405162461bcd60e51b815260206004820152603460248201527f4475657450726f5374616b696e673a2063616c6320706f6f6c206572726f722c604482015273081b9959d85d1a5d99481b9bdc9b585b081c1b9b60621b6064820152608401610880565b81603b541015610f255760405162461bcd60e51b815260206004820152603560248201527f4475657450726f5374616b696e673a2063616c6320706f6f6c206572726f722c604482015274081b9959d85d1a5d9948189bdbdcdd1959081c1b9b605a1b6064820152608401610880565b80603a54610f339190612b6b565b82603b54610f419190612b6b565b9650965050505050509091565b6000603954603854610f609190612b6b565b905060006039546002610f739190612c7d565b610f7d9083612ccc565b9050600064e8d4a510008260395464e8d4a5100087610f9c9190612c7d565b610fa69190612c7d565b610fb1906002612c7d565b610fbb9190612caa565b610fc59190612caa565b90506000610fd38286612b6b565b905080603a54610fe39190612ccc565b82603b54610ff19190612ccc565b98509850505050505050509091565b6033546001600160a01b0316331461102a5760405162461bcd60e51b815260040161088090612b9b565b6001600160a01b038116600081815260416020908152604091829020805460ff19169055905191825233917f83a53b7d80f6805eccf4bb6bbaa7a90aa8e2799c1939ec7d008858dee4e0e35b91015b60405180910390a250565b60008282036110945750826110e4565b828211156110c2576110a68383612b6b565b6110b190600a612dc3565b6110bb9085612c7d565b90506110e4565b6110cc8284612b6b565b6110d790600a612dc3565b6110e19085612caa565b90505b9392505050565b61113360405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6001600160a01b03821660009081526042602052604081208054600190910154829161115e9161076d565b6001600160a01b0395909516600090815260426020908152604091829020825161010081018452815481526001820154928101929092526002810154928201929092526003820154606082015260048201546080820152600582015460a0820152600682015460c082015260079091015460e08201529590949350915050565b6033546001600160a01b031633146112085760405162461bcd60e51b815260040161088090612b9b565b61121181611e35565b50565b6033546001600160a01b0316331461123e5760405162461bcd60e51b815260040161088090612b9b565b6001600160a01b038116600081815260416020908152604091829020805460ff19166001179055905191825233917f4a9622c6945580f38c98aa249f85babc8ae91f5dc0a8c4665b6dc699b2dfce0c9101611079565b61129c611f52565b670de0b6b3a76400008211156112c45760405162461bcd60e51b815260040161088090612dcf565b6112cc611fab565b600061135383603760009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611325573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113499190612b7e565b60ff166012611084565b3360008181526042602052604081208054600182015494955092939092829161137c919061076d565b909250905061138b8183612ccc565b8511156113e95760405162461bcd60e51b815260206004820152602660248201527f4475657450726f5374616b696e673a20696e73756666696369656e74206c697160448201526575696469747960d01b6064820152608401610880565b600183015483546000916113fc91612b6b565b9050600080600080868a1161142057611416858b89611d47565b9350899250611444565b849350869250611430838b612b6b565b905061144188600101548288611d47565b91505b61144e8285612ccc565b8860000160008282546114619190612b6b565b9091555061147190508285612ccc565b603860008282546114829190612b6b565b9250508190555082603a600082825461149b9190612b6b565b92505081905550818860010160008282546114b69190612b6b565b9250508190555081603960008282546114cf9190612b6b565b9250508190555080603b60008282546114e89190612b6b565b909155506114f7905089611fc3565b8988600701600082825461150b9190612ccc565b92505081905550603460009054906101000a90046001600160a01b03166001600160a01b031663489d6b06603760009054906101000a90046001600160a01b03168e8e6040518463ffffffff1660e01b815260040161156c93929190612bc1565b600060405180830381600087803b15801561158657600080fd5b505af115801561159a573d6000803e3d6000fd5b50506037546115b692506001600160a01b031690508a8e611fe9565b505050505050505050506115c960018055565b5050565b6115d5611f52565b670de0b6b3a76400008211156115fd5760405162461bcd60e51b815260040161088090612dcf565b611605611fab565b603754339061161f906001600160a01b0316823086611ee1565b60375460345460405163095ea7b360e01b81526001600160a01b0391821660048201526024810186905291169063095ea7b3906044016020604051808303816000875af1158015611674573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116989190612e2c565b506034546037546040516321aade6b60e11b81526001600160a01b0392831692634355bcd69234926116d4929091169088908890600401612bc1565b6000604051808303818588803b1580156116ed57600080fd5b505af1158015611701573d6000803e3d6000fd5b5050505050600061175f84603760009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611325573d6000803e3d6000fd5b6001600160a01b0383166000908152604260205260408120603954603854939450909261178c9190612b6b565b9050600080821161179d57836117aa565b6117aa8483603a54611d47565b905083603a60008282546117be9190612ccc565b9250508190555080603860008282546117d79190612ccc565b90915550508254819084906000906117f0908490612ccc565b909155506117ff905085611fc3565b838360060160008282546118139190612ccc565b90915550611822905085612024565b50505050506115c960018055565b61188a60405180610100016040528060006001600160a01b031681526020016000815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001606081525090565b60355460345460405163bea66a0160e01b81526001600160a01b03918216600482015230602482015291169063bea66a0190604401600060405180830381865afa1580156118dc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119049190810190612ff6565b905090565b6000806000611916610d71565b9150915060006038541161192a578361194b565b6119348183612ccc565b6038546119419086612c7d565b61194b9190612caa565b949350505050565b61195b611f52565b336000818152604060208181528183206001600160a01b038716845290529020548211156119df5760405162461bcd60e51b815260206004820152602b60248201527f4475657450726f5374616b696e673a20696e73756666696369656e742073746160448201526a35b2b2103137b7b9ba32b960a91b6064820152608401610880565b6001600160a01b03811660009081526042602052604090206119ff611fab565b6001600160a01b038083166000908152604060208181528183209388168352929092529081208054859290611a35908490612b6b565b9250508190555082816003016000828254611a509190612b6b565b9250508190555082603d6000828254611a699190612b6b565b9091555060009050611a7b85856123c1565b905080826002015411611a945760006002830155611aae565b80826002016000828254611aa89190612b6b565b90915550505b80603c5411611ac1576000603c55611ad9565b80603c6000828254611ad39190612b6b565b90915550505b611aed6001600160a01b0386168486611fe9565b611af683611fc3565b611aff83612024565b5050506115c960018055565b611b13611f52565b6001600160a01b03821660009081526041602052604090205460ff16611b875760405162461bcd60e51b815260206004820152602360248201527f4475657450726f5374616b696e673a20756e737570706f7274656420626f6f736044820152623a32b960e91b6064820152608401610880565b6000611bcb82846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611325573d6000803e3d6000fd5b9050670de0b6b3a7640000811015611c4b5760405162461bcd60e51b815260206004820152603e60248201527f4475657450726f5374616b696e673a20616d6f756e74206d757374206265206760448201527f726561746572207468616e204d494e5f424f4f535445525f544f4b454e5300006064820152608401610880565b336000818152604260205260409020611c62611fab565b611c776001600160a01b038616833087611ee1565b6001600160a01b038083166000908152604060208181528183209389168352929092529081208054859290611cad908490612ccc565b9250508190555082816003016000828254611cc89190612ccc565b9250508190555082603d6000828254611ce19190612ccc565b9091555060009050611cf386856123c1565b905080826002016000828254611d099190612ccc565b9250508190555080603c6000828254611d229190612ccc565b90915550611d31905083611fc3565b611d3a83612024565b505050506115c960018055565b6000808060001985870985870292508281108382030391505080600003611d8e5760008411611d7557600080fd5b838281611d8457611d84612c94565b04925050506110e4565b808411611d9a57600080fd5b600084868809600360018719810188169788900491820a808302600290810390910280840282030280840282030280840282030280840282030292830290039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b600054610100900460ff16611e2b5760405162461bcd60e51b8152600401610880906130b8565b611e3361246b565b565b6001600160a01b038116611e955760405162461bcd60e51b815260206004820152602160248201527f43616e206e6f74207365742061646d696e20746f207a65726f206164647265736044820152607360f81b6064820152608401610880565b603380546001600160a01b0319166001600160a01b03831690811790915560405133907f101b8081ff3b56bbf45deb824d86a3b0fd38b7e3dd42421105cf8abe9106db0b90600090a350565b6040516001600160a01b0380851660248301528316604482015260648101829052611f4c9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612492565b50505050565b600260015403611fa45760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610880565b6002600155565b42603e5543603f55611fbb610d71565b603b55603a55565b6001600160a01b0316600090815260426020526040902043600582015542600490910155565b6040516001600160a01b03831660248201526044810182905261201990849063a9059cbb60e01b90606401611f15565b505050565b60018055565b6001600160a01b0381166000908152604260205260409020603f5443146120975760405162461bcd60e51b815260206004820152602160248201527f4475657450726f5374616b696e673a2075706461746520706f6f6c20666972736044820152601d60fa1b6064820152608401610880565b438160050154146120fb5760405162461bcd60e51b815260206004820152602860248201527f4475657450726f5374616b696e673a2075706461746520757365722073686172604482015267195cc8199a5c9cdd60c21b6064820152608401610880565b805460000361210f57600060019091015550565b6001810154815460009161212291612b6b565b90506000806121398460000154856001015461076d565b915091508360020154810361214f575050505050565b836002015481111561227457600084600201548261216d9190612b6b565b9050600061218086600101548385611d47565b905060006121a06039546038546121979190612b6b565b84603a54611d47565b9050818760010160008282546121b69190612b6b565b9250508190555081603960008282546121cf9190612b6b565b90915550508654829088906000906121e8908490612b6b565b9091555050865481908890600090612201908490612ccc565b92505081905550816038600082825461221a9190612b6b565b9250508190555080603860008282546122339190612ccc565b9250508190555082603b600082825461224c9190612b6b565b9250508190555082603a60008282546122659190612ccc565b90915550505050505050505050565b60008185600201546122869190612b6b565b9050828110156122965780612298565b825b90506000808660010154116122cb576000603954116122b757816122dc565b6122c682603b54603954611d47565b6122dc565b6122dc866001015483603b54611d47565b905060008086116122ee5760006122f9565b6122f9868487611d47565b90506000818310156123145761230f8383612b6b565b61231e565b61231e8284612b6b565b9050828860010160008282546123349190612ccc565b909155505087548190899060009061234d908490612b6b565b9250508190555082603960008282546123669190612ccc565b92505081905550806038600082825461237f9190612b6b565b9250508190555083603b60008282546123989190612ccc565b9250508190555083603a60008282546123b19190612b6b565b9091555050505050505050505050565b6036546040516341976e0960e01b81526001600160a01b03848116600483015260009283929116906341976e0990602401602060405180830381865afa15801561240f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124339190613103565b90506124616124446012600a612dc3565b61244e8584612c7d565b6124589190612caa565b60086012611084565b9150505b92915050565b600054610100900460ff1661201e5760405162461bcd60e51b8152600401610880906130b8565b60006124e7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166125649092919063ffffffff16565b80519091501561201957808060200190518101906125059190612e2c565b6120195760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610880565b60606110e1848460008585600080866001600160a01b0316858760405161258b919061311c565b60006040518083038185875af1925050503d80600081146125c8576040519150601f19603f3d011682016040523d82523d6000602084013e6125cd565b606091505b50915091506125de878383876125e9565b979650505050505050565b60608315612658578251600003612651576001600160a01b0385163b6126515760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610880565b508161194b565b61194b838381511561266d5781518083602001fd5b8060405162461bcd60e51b81526004016108809190613138565b6000806040838503121561269a57600080fd5b50508035926020909101359150565b6001600160a01b038116811461121157600080fd5b600080600080600060a086880312156126d657600080fd5b85356126e1816126a9565b945060208601356126f1816126a9565b93506040860135612701816126a9565b92506060860135612711816126a9565b91506080860135612721816126a9565b809150509295509295909350565b60006020828403121561274157600080fd5b81356110e4816126a9565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff811182821017156127855761278561274c565b60405290565b60405160e0810167ffffffffffffffff811182821017156127855761278561274c565b604051610100810167ffffffffffffffff811182821017156127855761278561274c565b604051601f8201601f1916810167ffffffffffffffff811182821017156127fb576127fb61274c565b604052919050565b600067ffffffffffffffff82111561281d5761281d61274c565b5060051b60200190565b60ff8116811461121157600080fd5b600080604080848603121561284a57600080fd5b8335925060208085013567ffffffffffffffff81111561286957600080fd5b8501601f8101871361287a57600080fd5b803561288d61288882612803565b6127d2565b81815260c0918202830184019184820191908a8411156128ac57600080fd5b938501935b8385101561291b5780858c0312156128c95760008081fd5b6128d1612762565b85358152868601358782015287860135888201526060808701356128f481612827565b908201526080868101359082015260a08087013590820152835293840193918501916128b1565b508096505050505050509250929050565b6000806040838503121561293f57600080fd5b823561294a816126a9565b9150602083013561295a816126a9565b809150509250929050565b60008060006060848603121561297a57600080fd5b505081359360208301359350604090920135919050565b60005b838110156129ac578181015183820152602001612994565b50506000910152565b600081518084526129cd816020860160208601612991565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b85811015612a92578284038952815180516001600160a01b03908116865286820151168686015260408082015160e08288018190529190612a42838901826129b5565b9250505060608083015187830382890152612a5d83826129b5565b608085810151908a015260a080860151908a015260c094850151949098019390935250505097840197908401906001016129ff565b5091979650505050505050565b60208152600060018060a01b03808451166020840152602084015160408401528060408501511660608401525060608301516080830152608083015160a083015260a083015160c083015260c083015160e083015260e08301516101008081850152506124616101208401826129e1565b600060208284031215612b2257600080fd5b5035919050565b60008060408385031215612b3c57600080fd5b8235612b47816126a9565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561246557612465612b55565b600060208284031215612b9057600080fd5b81516110e481612827565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b6001600160a01b03841681526020808201849052606060408084018290528451848301819052600093608092909183870190888401875b82811015612c4557815180518552868101518786015285810151868601528881015160ff1689860152878101518886015260a0908101519085015260c09093019290850190600101612bf8565b50919b9a5050505050505050505050565b8181036000831280158383131683831282161715612c7657612c76612b55565b5092915050565b808202811582820484141761246557612465612b55565b634e487b7160e01b600052601260045260246000fd5b600082612cc757634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561246557612465612b55565b600181815b80851115612d1a578160001904821115612d0057612d00612b55565b80851615612d0d57918102915b93841c9390800290612ce4565b509250929050565b600082612d3157506001612465565b81612d3e57506000612465565b8160018114612d545760028114612d5e57612d7a565b6001915050612465565b60ff841115612d6f57612d6f612b55565b50506001821b612465565b5060208310610133831016604e8410600b8410161715612d9d575081810a612465565b612da78383612cdf565b8060001904821115612dbb57612dbb612b55565b029392505050565b60006110e48383612d22565b6020808252603d908201527f4475657450726f5374616b696e673a20616d6f756e74206d757374206265206760408201527f726561746572207468616e204d494e5f4c49515549444954595f4f5053000000606082015260800190565b600060208284031215612e3e57600080fd5b815180151581146110e457600080fd5b8051612e59816126a9565b919050565b600082601f830112612e6f57600080fd5b815167ffffffffffffffff811115612e8957612e8961274c565b612e9c601f8201601f19166020016127d2565b818152846020838601011115612eb157600080fd5b61194b826020830160208701612991565b600082601f830112612ed357600080fd5b81516020612ee361288883612803565b82815260059290921b84018101918181019086841115612f0257600080fd5b8286015b84811015612feb57805167ffffffffffffffff80821115612f275760008081fd5b9088019060e0828b03601f1901811315612f415760008081fd5b612f4961278b565b612f54888501612e4e565b81526040612f63818601612e4e565b8983015260608086015185811115612f7b5760008081fd5b612f898f8c838a0101612e5e565b8385015250608091508186015185811115612fa45760008081fd5b612fb28f8c838a0101612e5e565b918401919091525060a0858101519183019190915260c08086015191830191909152919093015190830152508352918301918301612f06565b509695505050505050565b60006020828403121561300857600080fd5b815167ffffffffffffffff8082111561302057600080fd5b90830190610100828603121561303557600080fd5b61303d6127ae565b61304683612e4e565b81526020830151602082015261305e60408401612e4e565b6040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e08301518281111561309d57600080fd5b6130a987828601612ec2565b60e08301525095945050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60006020828403121561311557600080fd5b5051919050565b6000825161312e818460208701612991565b9190910192915050565b6020815260006110e460208301846129b556fea2646970667358221220b62903884d37d403d5458e4c2cf74f02ddbcb7dddcd276bd0cb3a08bd661762764736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/DuetProStaking.sol:DuetProStaking",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/DuetProStaking.sol:DuetProStaking",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 309,
        "contract": "contracts/DuetProStaking.sol:DuetProStaking",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 367,
        "contract": "contracts/DuetProStaking.sol:DuetProStaking",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1124,
        "contract": "contracts/DuetProStaking.sol:DuetProStaking",
        "label": "admin",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 1401,
        "contract": "contracts/DuetProStaking.sol:DuetProStaking",
        "label": "pool",
        "offset": 0,
        "slot": "52",
        "type": "t_contract(IPool)3408"
      },
      {
        "astId": 1404,
        "contract": "contracts/DuetProStaking.sol:DuetProStaking",
        "label": "deriLens",
        "offset": 0,
        "slot": "53",
        "type": "t_contract(IDeriLens)3251"
      },
      {
        "astId": 1407,
        "contract": "contracts/DuetProStaking.sol:DuetProStaking",
        "label": "boosterOracle",
        "offset": 0,
        "slot": "54",
        "type": "t_contract(IBoosterOracle)2952"
      },
      {
        "astId": 1410,
        "contract": "contracts/DuetProStaking.sol:DuetProStaking",
        "label": "usdLikeUnderlying",
        "offset": 0,
        "slot": "55",
        "type": "t_contract(IERC20MetadataUpgradeable)471"
      },
      {
        "astId": 1412,
        "contract": "contracts/DuetProStaking.sol:DuetProStaking",
        "label": "totalShares",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 1414,
        "contract": "contracts/DuetProStaking.sol:DuetProStaking",
        "label": "totalBoostedShares",
        "offset": 0,
        "slot": "57",
        "type": "t_uint256"
      },
      {
        "astId": 1416,
        "contract": "contracts/DuetProStaking.sol:DuetProStaking",
        "label": "lastNormalLiquidity",
        "offset": 0,
        "slot": "58",
        "type": "t_uint256"
      },
      {
        "astId": 1418,
        "contract": "contracts/DuetProStaking.sol:DuetProStaking",
        "label": "lastBoostedLiquidity",
        "offset": 0,
        "slot": "59",
        "type": "t_uint256"
      },
      {
        "astId": 1420,
        "contract": "contracts/DuetProStaking.sol:DuetProStaking",
        "label": "totalStakedBoosterValue",
        "offset": 0,
        "slot": "60",
        "type": "t_uint256"
      },
      {
        "astId": 1422,
        "contract": "contracts/DuetProStaking.sol:DuetProStaking",
        "label": "totalStakedBoosterAmount",
        "offset": 0,
        "slot": "61",
        "type": "t_uint256"
      },
      {
        "astId": 1424,
        "contract": "contracts/DuetProStaking.sol:DuetProStaking",
        "label": "lastActionTime",
        "offset": 0,
        "slot": "62",
        "type": "t_uint256"
      },
      {
        "astId": 1426,
        "contract": "contracts/DuetProStaking.sol:DuetProStaking",
        "label": "lastActionBlock",
        "offset": 0,
        "slot": "63",
        "type": "t_uint256"
      },
      {
        "astId": 1432,
        "contract": "contracts/DuetProStaking.sol:DuetProStaking",
        "label": "userStakedBooster",
        "offset": 0,
        "slot": "64",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1436,
        "contract": "contracts/DuetProStaking.sol:DuetProStaking",
        "label": "supportedBoosterTokens",
        "offset": 0,
        "slot": "65",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1441,
        "contract": "contracts/DuetProStaking.sol:DuetProStaking",
        "label": "userInfos",
        "offset": 0,
        "slot": "66",
        "type": "t_mapping(t_address,t_struct(UserInfo)1458_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBoosterOracle)2952": {
        "encoding": "inplace",
        "label": "contract IBoosterOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IDeriLens)3251": {
        "encoding": "inplace",
        "label": "contract IDeriLens",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20MetadataUpgradeable)471": {
        "encoding": "inplace",
        "label": "contract IERC20MetadataUpgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(IPool)3408": {
        "encoding": "inplace",
        "label": "contract IPool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(UserInfo)1458_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DuetProStaking.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)1458_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(UserInfo)1458_storage": {
        "encoding": "inplace",
        "label": "struct DuetProStaking.UserInfo",
        "members": [
          {
            "astId": 1443,
            "contract": "contracts/DuetProStaking.sol:DuetProStaking",
            "label": "shares",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1445,
            "contract": "contracts/DuetProStaking.sol:DuetProStaking",
            "label": "boostedShares",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1447,
            "contract": "contracts/DuetProStaking.sol:DuetProStaking",
            "label": "stakedBoosterValue",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1449,
            "contract": "contracts/DuetProStaking.sol:DuetProStaking",
            "label": "stakedBoosterAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1451,
            "contract": "contracts/DuetProStaking.sol:DuetProStaking",
            "label": "lastActionTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1453,
            "contract": "contracts/DuetProStaking.sol:DuetProStaking",
            "label": "lastActionBlock",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1455,
            "contract": "contracts/DuetProStaking.sol:DuetProStaking",
            "label": "accAddedLiquidity",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1457,
            "contract": "contracts/DuetProStaking.sol:DuetProStaking",
            "label": "accRemovedLiquidity",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}