{
  "address": "0x6B24ca7CF0d4005b9D8cc4bDD2560c7Cf7240072",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "increaseShares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalShares",
          "type": "uint256"
        }
      ],
      "name": "BuyShares",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decreaseShares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalShares",
          "type": "uint256"
        }
      ],
      "name": "SellShares",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_BASE_TOKEN_",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_DPP_ADDRESS_",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_DPP_ADMIN_ADDRESS_",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_I_",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_K_",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_LP_FEE_RATE_",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_QUOTE_TOKEN_",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_WETH_",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "baseInAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quoteInAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseMinAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quoteMinAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "flag",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "deadLine",
          "type": "uint256"
        }
      ],
      "name": "addDuetDppLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseAdjustedInAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quoteAdjustedInAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "addressToShortString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newBaseR_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newQuoteR_",
          "type": "uint256"
        }
      ],
      "name": "changeMinRes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "changeOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newI",
          "type": "uint256"
        }
      ],
      "name": "disableOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dppAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dppAdminAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "weth",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shareAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseMinAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quoteMinAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "flag",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "deadLine",
          "type": "uint256"
        }
      ],
      "name": "removeDuetDppLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseOutAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quoteOutAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newLpFeeRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newI",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newK",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minBaseReserve_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minQuoteReserve_",
          "type": "uint256"
        }
      ],
      "name": "tuneParameters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newI",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minBaseReserve_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minQuoteReserve_",
          "type": "uint256"
        }
      ],
      "name": "tunePrice",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8f34b308bc2f7ad576c3e2179296f041afe2adb0d91b7cbaef7d5a68561318f7",
  "receipt": {
    "to": null,
    "from": "0xe7a2b8C8feD53713F69227e6c3d2384E80CF88a6",
    "contractAddress": "0x6B24ca7CF0d4005b9D8cc4bDD2560c7Cf7240072",
    "transactionIndex": 17,
    "gasUsed": "2993016",
    "logsBloom": "0x
    "blockHash": "0xa98832c27987fe7fdcf98e453c264a933ba630875132a9b0aa12d6f77b0da198",
    "transactionHash": "0x8f34b308bc2f7ad576c3e2179296f041afe2adb0d91b7cbaef7d5a68561318f7",
    "logs": [],
    "blockNumber": 22240269,
    "cumulativeGasUsed": "5997409",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4c79fe16aaf1bed84cf3db391f24b3d1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"increaseShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"}],\"name\":\"BuyShares\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decreaseShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"}],\"name\":\"SellShares\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_BASE_TOKEN_\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DPP_ADDRESS_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DPP_ADMIN_ADDRESS_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_I_\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_K_\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_LP_FEE_RATE_\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_QUOTE_TOKEN_\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_WETH_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseInAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteInAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseMinAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteMinAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"deadLine\",\"type\":\"uint256\"}],\"name\":\"addDuetDppLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseAdjustedInAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteAdjustedInAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addressToShortString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBaseR_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newQuoteR_\",\"type\":\"uint256\"}],\"name\":\"changeMinRes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"changeOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newI\",\"type\":\"uint256\"}],\"name\":\"disableOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dppAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dppAdminAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shareAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseMinAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteMinAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"deadLine\",\"type\":\"uint256\"}],\"name\":\"removeDuetDppLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseOutAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteOutAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLpFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newI\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newK\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBaseReserve_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minQuoteReserve_\",\"type\":\"uint256\"}],\"name\":\"tuneParameters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newI\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBaseReserve_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minQuoteReserve_\",\"type\":\"uint256\"}],\"name\":\"tunePrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens that an owner _ALLOWED_ to a spender.\",\"params\":{\"owner\":\"address The address which owns the funds.\",\"spender\":\"address The address which will spend the funds.\"},\"returns\":{\"_0\":\"A uint256 specifying the amount of tokens still available for the spender.\"}},\"approve(address,uint256)\":{\"details\":\"Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\",\"params\":{\"amount\":\"The amount of tokens to be spent.\",\"spender\":\"The address which will spend the funds.\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"owner\":\"The address to query the the balance of.\"},\"returns\":{\"balance\":\"An uint256 representing the amount owned by the passed address.\"}},\"transfer(address,uint256)\":{\"details\":\"transfer token for a specified address\",\"params\":{\"amount\":\"The amount to be transferred.\",\"to\":\"The address to transfer to.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfer tokens from one address to another\",\"params\":{\"amount\":\"uint256 the amount of tokens to be transferred\",\"from\":\"address The address which you want to send tokens from\",\"to\":\"address The address which you want to transfer to\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DuetDPPController.sol\":\"DuetDppController\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/DuetDPPController.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport { UniversalERC20 } from \\\"./lib/UniversalERC20.sol\\\";\\nimport { SafeERC20 } from \\\"./lib/SafeERC20.sol\\\";\\nimport { DecimalMath } from \\\"./lib/DecimalMath.sol\\\";\\nimport { ReentrancyGuard } from \\\"./lib/ReentrancyGuard.sol\\\";\\nimport { SafeMath } from \\\"./lib/SafeMath.sol\\\";\\nimport { IDODOV2 } from \\\"./interfaces/IDODOV2.sol\\\";\\nimport { IDPPOracleAdmin } from \\\"./interfaces/IDPPOracleAdmin.sol\\\";\\nimport { IERC20 } from \\\"./interfaces/IERC20.sol\\\";\\nimport { IWETH } from \\\"./interfaces/IWETH.sol\\\";\\nimport { Adminable } from \\\"./lib/Adminable.sol\\\";\\nimport { DuetDppLpFunding } from \\\"./DuetDppLpFunding.sol\\\";\\n\\ncontract DuetDppController is Adminable, DuetDppLpFunding {\\n    using SafeMath for uint256;\\n    using UniversalERC20 for IERC20;\\n    using SafeERC20 for IERC20;\\n\\n    address public _WETH_;\\n    bool flagInit = false;\\n\\n    /** \\u4e3b\\u8981\\u7528\\u4e8efrontrun\\u4fdd\\u62a4\\uff0c\\u5f53\\u9879\\u76ee\\u65b9\\u53d1\\u8d77\\u4ea4\\u6613\\uff0c\\u4fee\\u6539\\u6c60\\u5b50\\u53c2\\u6570\\u65f6\\uff0c\\u53ef\\u80fd\\u4f1a\\u9020\\u6210\\u6c60\\u5b50\\u7684\\u4ef7\\u683c\\u6539\\u53d8\\uff0c\\n     * \\u8fd9\\u65f6\\u5019\\u673a\\u5668\\u4eba\\u53ef\\u80fd\\u4f1afrontrun\\u5957\\u5229\\uff0c\\u56e0\\u6b64\\u8fd9\\u4e24\\u4e2a\\u53c2\\u6570\\u8bbe\\u5b9a\\u540e\\uff0c\\n     * \\u5f53\\u6267\\u884c\\u65f6\\u6c60\\u5b50\\u73b0\\u5b58\\u7684base\\uff0cquote\\u7684\\u6570\\u91cf\\u5c0f\\u4e8e\\u4f20\\u5165\\u7684\\u503c\\uff0creset\\u4ea4\\u6613\\u4f1arevert\\uff0c\\u9632\\u6b62\\u88ab\\u5957\\u5229 **/\\n    uint256 minBaseReserve = 0;\\n    uint256 minQuoteReserve = 0;\\n\\n    modifier judgeExpired(uint256 deadLine) {\\n        require(deadLine >= block.timestamp, \\\"DODOV2Proxy02: EXPIRED\\\");\\n        _;\\n    }\\n\\n    modifier notInitialized() {\\n        require(flagInit == false, \\\"have been initialized\\\");\\n        flagInit = true;\\n        _;\\n    }\\n\\n    fallback() external payable {}\\n\\n    receive() external payable {}\\n\\n    function init(\\n        address admin,\\n        address dppAddress,\\n        address dppAdminAddress,\\n        address weth\\n    ) external notInitialized {\\n        // \\u6539init\\n        _WETH_ = weth;\\n        _DPP_ADDRESS_ = dppAddress;\\n        _DPP_ADMIN_ADDRESS_ = dppAdminAddress;\\n        _setAdmin(admin);\\n\\n        // load pool info\\n        _BASE_TOKEN_ = IERC20(IDODOV2(_DPP_ADDRESS_)._BASE_TOKEN_());\\n        _QUOTE_TOKEN_ = IERC20(IDODOV2(_DPP_ADDRESS_)._QUOTE_TOKEN_());\\n        _updateDppInfo();\\n\\n        string memory connect = \\\"_\\\";\\n        string memory suffix = \\\"Duet\\\";\\n\\n        name = string(abi.encodePacked(suffix, connect, addressToShortString(address(this))));\\n        symbol = \\\"Duet_LP\\\";\\n        decimals = _BASE_TOKEN_.decimals();\\n\\n        // ============================== Permit ====================================\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                // keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\n                0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f,\\n                keccak256(bytes(name)),\\n                keccak256(bytes(\\\"1\\\")),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n        // ==========================================================================\\n    }\\n\\n    // ========= change DPP Oracle and Parameters , onlyAdmin ==========\\n    function tunePrice(\\n        uint256 newI,\\n        uint256 minBaseReserve_,\\n        uint256 minQuoteReserve_\\n    ) external onlyAdmin returns (bool) {\\n        IDPPOracleAdmin(_DPP_ADMIN_ADDRESS_).tunePrice(newI, minBaseReserve_, minQuoteReserve_);\\n        _updateDppInfo();\\n        return true;\\n    }\\n\\n    function tuneParameters(\\n        uint256 newLpFeeRate,\\n        uint256 newI,\\n        uint256 newK,\\n        uint256 minBaseReserve_,\\n        uint256 minQuoteReserve_\\n    ) external onlyAdmin returns (bool) {\\n        IDPPOracleAdmin(_DPP_ADMIN_ADDRESS_).tuneParameters(\\n            newLpFeeRate,\\n            newI,\\n            newK,\\n            minBaseReserve_,\\n            minQuoteReserve_\\n        );\\n        _updateDppInfo();\\n        return true;\\n    }\\n\\n    function changeOracle(address newOracle) external onlyAdmin {\\n        IDPPOracleAdmin(_DPP_ADMIN_ADDRESS_).changeOracle(newOracle);\\n    }\\n\\n    function enableOracle() external onlyAdmin {\\n        IDPPOracleAdmin(_DPP_ADMIN_ADDRESS_).enableOracle();\\n    }\\n\\n    function disableOracle(uint256 newI) external onlyAdmin {\\n        IDPPOracleAdmin(_DPP_ADMIN_ADDRESS_).disableOracle(newI);\\n    }\\n\\n    function changeMinRes(uint256 newBaseR_, uint256 newQuoteR_) external onlyAdmin {\\n        minBaseReserve = newBaseR_;\\n        minQuoteReserve = newQuoteR_;\\n    }\\n\\n    // =========== deal with LP ===============\\n\\n    function addDuetDppLiquidity(\\n        uint256 baseInAmount,\\n        uint256 quoteInAmount,\\n        uint256 baseMinAmount,\\n        uint256 quoteMinAmount,\\n        uint8 flag, // 0 - ERC20, 1 - baseInETH, 2 - quoteInETH\\n        uint256 deadLine\\n    )\\n        external\\n        payable\\n        preventReentrant\\n        judgeExpired(deadLine)\\n        returns (\\n            uint256 shares,\\n            uint256 baseAdjustedInAmount,\\n            uint256 quoteAdjustedInAmount\\n        )\\n    {\\n        (baseAdjustedInAmount, quoteAdjustedInAmount) = _adjustedAddLiquidityInAmount(baseInAmount, quoteInAmount);\\n        require(\\n            baseAdjustedInAmount >= baseMinAmount && quoteAdjustedInAmount >= quoteMinAmount,\\n            \\\"Duet Dpp Controller: deposit amount is not enough\\\"\\n        );\\n\\n        _deposit(msg.sender, _DPP_ADDRESS_, IDODOV2(_DPP_ADDRESS_)._BASE_TOKEN_(), baseAdjustedInAmount, flag == 1);\\n        _deposit(msg.sender, _DPP_ADDRESS_, IDODOV2(_DPP_ADDRESS_)._QUOTE_TOKEN_(), quoteAdjustedInAmount, flag == 2);\\n\\n        //mint lp tokens to users\\n\\n        (shares, , ) = _buyShares(msg.sender);\\n        // reset dpp pool\\n        require(\\n            IDODOV2(IDODOV2(_DPP_ADDRESS_)._OWNER_()).reset(\\n                address(this),\\n                _LP_FEE_RATE_,\\n                _I_,\\n                _K_,\\n                0,\\n                0,\\n                minBaseReserve, // minBaseReserve\\n                minQuoteReserve // minQuoteReserve\\n            ),\\n            \\\"Reset Failed\\\"\\n        );\\n\\n        // refund dust eth\\n        if (flag == 1 && msg.value > baseAdjustedInAmount) {\\n            payable(msg.sender).transfer(msg.value - baseAdjustedInAmount);\\n        }\\n        if (flag == 2 && msg.value > quoteAdjustedInAmount) {\\n            payable(msg.sender).transfer(msg.value - quoteAdjustedInAmount);\\n        }\\n    }\\n\\n    function removeDuetDppLiquidity(\\n        uint256 shareAmount,\\n        uint256 baseMinAmount,\\n        uint256 quoteMinAmount,\\n        uint8 flag, // 0 - ERC20, 1 - baseInETH, 2 - quoteInETH, 3 - baseOutETH, 4 - quoteOutETH\\n        uint256 deadLine\\n    )\\n        external\\n        preventReentrant\\n        judgeExpired(deadLine)\\n        returns (\\n            uint256 shares,\\n            uint256 baseOutAmount,\\n            uint256 quoteOutAmount\\n        )\\n    {\\n        //mint lp tokens to users\\n        (baseOutAmount, quoteOutAmount) = _sellShares(shareAmount, msg.sender, baseMinAmount, quoteMinAmount);\\n        // reset dpp pool\\n        require(\\n            IDODOV2(IDODOV2(_DPP_ADDRESS_)._OWNER_()).reset(\\n                address(this),\\n                _LP_FEE_RATE_,\\n                _I_,\\n                _K_,\\n                baseOutAmount,\\n                quoteOutAmount,\\n                minBaseReserve, //minBaseReserve,\\n                minQuoteReserve //minQuoteReserve\\n            ),\\n            \\\"Reset Failed\\\"\\n        );\\n\\n        _withdraw(payable(msg.sender), IDODOV2(_DPP_ADDRESS_)._BASE_TOKEN_(), baseOutAmount, flag == 3);\\n        _withdraw(payable(msg.sender), IDODOV2(_DPP_ADDRESS_)._QUOTE_TOKEN_(), quoteOutAmount, flag == 4);\\n        shares = shareAmount;\\n    }\\n\\n    function _adjustedAddLiquidityInAmount(uint256 baseInAmount, uint256 quoteInAmount)\\n        internal\\n        view\\n        returns (uint256 baseAdjustedInAmount, uint256 quoteAdjustedInAmount)\\n    {\\n        (uint256 baseReserve, uint256 quoteReserve) = IDODOV2(_DPP_ADDRESS_).getVaultReserve();\\n        if (quoteReserve == 0 && baseReserve == 0) {\\n            require(msg.sender == admin, \\\"Must initialized by admin\\\");\\n            // Must initialized by admin\\n            baseAdjustedInAmount = baseInAmount;\\n            quoteAdjustedInAmount = quoteInAmount;\\n        }\\n        if (quoteReserve == 0 && baseReserve > 0) {\\n            baseAdjustedInAmount = baseInAmount;\\n            quoteAdjustedInAmount = 0;\\n        }\\n        if (quoteReserve > 0 && baseReserve > 0) {\\n            uint256 baseIncreaseRatio = DecimalMath.divFloor(baseInAmount, baseReserve);\\n            uint256 quoteIncreaseRatio = DecimalMath.divFloor(quoteInAmount, quoteReserve);\\n            if (baseIncreaseRatio <= quoteIncreaseRatio) {\\n                baseAdjustedInAmount = baseInAmount;\\n                quoteAdjustedInAmount = DecimalMath.mulFloor(quoteReserve, baseIncreaseRatio);\\n            } else {\\n                quoteAdjustedInAmount = quoteInAmount;\\n                baseAdjustedInAmount = DecimalMath.mulFloor(baseReserve, quoteIncreaseRatio);\\n            }\\n        }\\n    }\\n\\n    // ================= internal ====================\\n\\n    function _updateDppInfo() internal {\\n        _LP_FEE_RATE_ = IDODOV2(_DPP_ADDRESS_)._LP_FEE_RATE_();\\n        _K_ = IDODOV2(_DPP_ADDRESS_)._K_();\\n        _I_ = IDODOV2(_DPP_ADDRESS_)._I_();\\n    }\\n\\n    function _deposit(\\n        address from,\\n        address to,\\n        address token,\\n        uint256 amount,\\n        bool isETH\\n    ) internal {\\n        if (isETH) {\\n            if (amount > 0) {\\n                require(msg.value >= amount, \\\"ETH_VALUE_WRONG\\\");\\n                // case:msg.value > adjustAmount\\n                IWETH(_WETH_).deposit{ value: amount }();\\n                if (to != address(this)) SafeERC20.safeTransfer(IERC20(_WETH_), to, amount);\\n            }\\n        } else {\\n            if (amount > 0) {\\n                IERC20(token).safeTransferFrom(from, to, amount);\\n            }\\n        }\\n    }\\n\\n    function _withdraw(\\n        address payable to,\\n        address token,\\n        uint256 amount,\\n        bool isETH\\n    ) internal {\\n        if (isETH) {\\n            if (amount > 0) {\\n                IWETH(_WETH_).withdraw(amount);\\n                to.transfer(amount);\\n            }\\n        } else {\\n            if (amount > 0) {\\n                SafeERC20.safeTransfer(IERC20(token), to, amount);\\n            }\\n        }\\n    }\\n\\n    // =================================================\\n\\n    function addressToShortString(address _addr) public pure returns (string memory) {\\n        bytes32 value = bytes32(uint256(uint160(_addr)));\\n        bytes memory alphabet = \\\"0123456789abcdef\\\";\\n\\n        bytes memory str = new bytes(8);\\n        for (uint256 i = 0; i < 4; i++) {\\n            str[i * 2] = alphabet[uint8(value[i + 12] >> 4)];\\n            str[1 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];\\n        }\\n        return string(str);\\n    }\\n}\\n\",\"keccak256\":\"0xf255b3bb2748be238260cc9e9d74931327145fe4b0429a9765ef1f52770765b2\",\"license\":\"GPL-3.0\"},\"contracts/DuetDppLp.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport { IERC20 } from \\\"./interfaces/IERC20.sol\\\";\\nimport { SafeMath } from \\\"./lib/SafeMath.sol\\\";\\nimport { DecimalMath } from \\\"./lib/DecimalMath.sol\\\";\\nimport { SafeERC20 } from \\\"./lib/SafeERC20.sol\\\";\\nimport { DuetDppStorage } from \\\"./DuetDppStorage.sol\\\";\\n\\ncontract DuetDppLp is DuetDppStorage {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // ============ Events ============\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    event Mint(address indexed user, uint256 value);\\n\\n    event Burn(address indexed user, uint256 value);\\n\\n    // ============ Shares (ERC20) ============\\n\\n    /**\\n     * @dev transfer token for a specified address\\n     * @param to The address to transfer to.\\n     * @param amount The amount to be transferred.\\n     */\\n    function transfer(address to, uint256 amount) public returns (bool) {\\n        require(amount <= _SHARES_[msg.sender], \\\"BALANCE_NOT_ENOUGH\\\");\\n\\n        _SHARES_[msg.sender] = _SHARES_[msg.sender].sub(amount);\\n        _SHARES_[to] = _SHARES_[to].add(amount);\\n        emit Transfer(msg.sender, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Gets the balance of the specified address.\\n     * @param owner The address to query the the balance of.\\n     * @return balance An uint256 representing the amount owned by the passed address.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance) {\\n        return _SHARES_[owner];\\n    }\\n\\n    /**\\n     * @dev Transfer tokens from one address to another\\n     * @param from address The address which you want to send tokens from\\n     * @param to address The address which you want to transfer to\\n     * @param amount uint256 the amount of tokens to be transferred\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public returns (bool) {\\n        require(amount <= _SHARES_[from], \\\"BALANCE_NOT_ENOUGH\\\");\\n        require(amount <= _ALLOWED_[from][msg.sender], \\\"ALLOWANCE_NOT_ENOUGH\\\");\\n\\n        _SHARES_[from] = _SHARES_[from].sub(amount);\\n        _SHARES_[to] = _SHARES_[to].add(amount);\\n        _ALLOWED_[from][msg.sender] = _ALLOWED_[from][msg.sender].sub(amount);\\n        emit Transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n     * @param spender The address which will spend the funds.\\n     * @param amount The amount of tokens to be spent.\\n     */\\n    function approve(address spender, uint256 amount) public returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) private {\\n        _ALLOWED_[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Function to check the amount of tokens that an owner _ALLOWED_ to a spender.\\n     * @param owner address The address which owns the funds.\\n     * @param spender address The address which will spend the funds.\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\n     */\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n        return _ALLOWED_[owner][spender];\\n    }\\n\\n    function _mint(address user, uint256 value) internal {\\n        require(value > 1000, \\\"MINT_INVALID\\\");\\n        _SHARES_[user] = _SHARES_[user].add(value);\\n        totalSupply = totalSupply.add(value);\\n        emit Mint(user, value);\\n        emit Transfer(address(0), user, value);\\n    }\\n\\n    function _burn(address user, uint256 value) internal {\\n        _SHARES_[user] = _SHARES_[user].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Burn(user, value);\\n        emit Transfer(user, address(0), value);\\n    }\\n\\n    // ============================ Permit ======================================\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"DODO_DVM_LP: EXPIRED\\\");\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"DODO_DVM_LP: INVALID_SIGNATURE\\\");\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0x6e36107f710a74762322a1090236daefeb87d7a1167085e8c4080cf2e12f217e\",\"license\":\"GPL-3.0\"},\"contracts/DuetDppLpFunding.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport { DecimalMath } from \\\"./lib/DecimalMath.sol\\\";\\nimport { ReentrancyGuard } from \\\"./lib/ReentrancyGuard.sol\\\";\\nimport { SafeMath } from \\\"./lib/SafeMath.sol\\\";\\nimport { IDODOV2 } from \\\"./interfaces/IDODOV2.sol\\\";\\nimport { DuetDppLp } from \\\"./DuetDppLp.sol\\\";\\n\\ncontract DuetDppLpFunding is DuetDppLp, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    // ============ Events ============\\n\\n    event BuyShares(address to, uint256 increaseShares, uint256 totalShares);\\n\\n    event SellShares(address payer, address to, uint256 decreaseShares, uint256 totalShares);\\n\\n    // ============ Buy & Sell Shares ============\\n\\n    // buy shares [round down]\\n    function _buyShares(address to)\\n        internal\\n        returns (\\n            uint256 shares,\\n            uint256 baseInput,\\n            uint256 quoteInput\\n        )\\n    {\\n        uint256 baseBalance = _BASE_TOKEN_.balanceOf(_DPP_ADDRESS_);\\n        uint256 quoteBalance = _QUOTE_TOKEN_.balanceOf(_DPP_ADDRESS_);\\n        (uint256 baseReserve, uint256 quoteReserve) = IDODOV2(_DPP_ADDRESS_).getVaultReserve();\\n\\n        baseInput = baseBalance.sub(baseReserve);\\n        quoteInput = quoteBalance.sub(quoteReserve);\\n        require(baseInput > 0, \\\"NO_BASE_INPUT\\\");\\n\\n        // Round down when withdrawing. Therefore, never be a situation occuring balance is 0 but totalsupply is not 0\\n        // But May Happen\\uff0creserve >0 But totalSupply = 0\\n        if (totalSupply == 0) {\\n            // case 1. initial supply\\n            require(baseBalance >= 10**3, \\\"INSUFFICIENT_LIQUIDITY_MINED\\\");\\n            shares = baseBalance; // \\u4ee5\\u514d\\u51fa\\u73b0balance\\u5f88\\u5927\\u4f46shares\\u5f88\\u5c0f\\u7684\\u60c5\\u51b5\\n        } else if (baseReserve > 0 && quoteReserve == 0) {\\n            // case 2. supply when quote reserve is 0\\n            shares = baseInput.mul(totalSupply).div(baseReserve);\\n        } else if (baseReserve > 0 && quoteReserve > 0) {\\n            // case 3. normal case\\n            uint256 baseInputRatio = DecimalMath.divFloor(baseInput, baseReserve);\\n            uint256 quoteInputRatio = DecimalMath.divFloor(quoteInput, quoteReserve);\\n            uint256 mintRatio = quoteInputRatio < baseInputRatio ? quoteInputRatio : baseInputRatio;\\n            shares = DecimalMath.mulFloor(totalSupply, mintRatio);\\n        }\\n        _mint(to, shares);\\n        emit BuyShares(to, shares, _SHARES_[to]);\\n    }\\n\\n    // sell shares [round down]\\n    function _sellShares(\\n        uint256 shareAmount,\\n        address to,\\n        uint256 baseMinAmount,\\n        uint256 quoteMinAmount\\n    ) internal returns (uint256 baseAmount, uint256 quoteAmount) {\\n        require(shareAmount <= _SHARES_[to], \\\"DLP_NOT_ENOUGH\\\");\\n        (uint256 baseBalance, uint256 quoteBalance) = IDODOV2(_DPP_ADDRESS_).getVaultReserve();\\n        uint256 totalShares = totalSupply;\\n\\n        baseAmount = baseBalance.mul(shareAmount).div(totalShares);\\n        quoteAmount = quoteBalance.mul(shareAmount).div(totalShares);\\n\\n        require(baseAmount >= baseMinAmount && quoteAmount >= quoteMinAmount, \\\"WITHDRAW_NOT_ENOUGH\\\");\\n\\n        _burn(to, shareAmount);\\n\\n        emit SellShares(to, to, shareAmount, _SHARES_[to]);\\n    }\\n}\\n\",\"keccak256\":\"0x6b85048f33e75974c36ed8585d0d805916e0180ccdf0c1415036c8ef4b5b9a85\",\"license\":\"GPL-3.0\"},\"contracts/DuetDppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport { IERC20 } from \\\"./interfaces/IERC20.sol\\\";\\n\\ncontract DuetDppStorage {\\n    // ============ pool info ===============\\n    address public _DPP_ADDRESS_;\\n    address public _DPP_ADMIN_ADDRESS_;\\n    IERC20 public _BASE_TOKEN_;\\n    IERC20 public _QUOTE_TOKEN_;\\n    uint64 public _LP_FEE_RATE_;\\n    uint128 public _I_;\\n    uint64 public _K_;\\n\\n    // ============ Shares (ERC20) ============\\n\\n    string public symbol;\\n    uint8 public decimals;\\n    string public name;\\n\\n    uint256 public totalSupply;\\n    mapping(address => uint256) internal _SHARES_;\\n    mapping(address => mapping(address => uint256)) internal _ALLOWED_;\\n\\n    // ================= Permit ======================\\n\\n    bytes32 public DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint256) public nonces;\\n}\\n\",\"keccak256\":\"0x42c1f766c0a1160fa498b9d331ce3d108fe34db11a0a80b427a11bb784c85a72\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IDODOV2.sol\":{\"content\":\"/*\\n\\n    Copyright 2020 DODO ZOO.\\n    SPDX-License-Identifier: Apache-2.0\\n\\n*/\\n\\npragma solidity 0.8.9;\\npragma experimental ABIEncoderV2;\\n\\ninterface IDODOV2 {\\n    //========== Common ==================\\n\\n    function sellBase(address to) external returns (uint256 receiveQuoteAmount);\\n\\n    function sellQuote(address to) external returns (uint256 receiveBaseAmount);\\n\\n    function getVaultReserve() external view returns (uint256 baseReserve, uint256 quoteReserve);\\n\\n    function _BASE_TOKEN_() external view returns (address);\\n\\n    function _QUOTE_TOKEN_() external view returns (address);\\n\\n    function getPMMStateForCall()\\n        external\\n        view\\n        returns (\\n            uint256 i,\\n            uint256 K,\\n            uint256 B,\\n            uint256 Q,\\n            uint256 B0,\\n            uint256 Q0,\\n            uint256 R\\n        );\\n\\n    function getUserFeeRate(address user) external view returns (uint256 lpFeeRate, uint256 mtFeeRate);\\n\\n    function getDODOPoolBidirection(address token0, address token1)\\n        external\\n        view\\n        returns (address[] memory, address[] memory);\\n\\n    //========== DODOVendingMachine ========\\n\\n    function createDODOVendingMachine(\\n        address baseToken,\\n        address quoteToken,\\n        uint256 lpFeeRate,\\n        uint256 i,\\n        uint256 k,\\n        bool isOpenTWAP\\n    ) external returns (address newVendingMachine);\\n\\n    function buyShares(address to)\\n        external\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    //========== DODOPrivatePool ===========\\n\\n    function createDODOPrivatePool() external returns (address newPrivatePool);\\n\\n    function initDODOPrivatePool(\\n        address dppAddress,\\n        address creator,\\n        address baseToken,\\n        address quoteToken,\\n        uint256 lpFeeRate,\\n        uint256 k,\\n        uint256 i,\\n        bool isOpenTwap\\n    ) external;\\n\\n    function reset(\\n        address operator,\\n        uint256 newLpFeeRate,\\n        uint256 newI,\\n        uint256 newK,\\n        uint256 baseOutAmount,\\n        uint256 quoteOutAmount,\\n        uint256 minBaseReserve,\\n        uint256 minQuoteReserve\\n    ) external returns (bool);\\n\\n    function _OWNER_() external returns (address);\\n\\n    function _LP_FEE_RATE_() external returns (uint64);\\n\\n    function _K_() external returns (uint64);\\n\\n    function _I_() external returns (uint128);\\n\\n    //========== CrowdPooling ===========\\n\\n    function createCrowdPooling() external returns (address payable newCrowdPooling);\\n\\n    function initCrowdPooling(\\n        address cpAddress,\\n        address creator,\\n        address[] memory tokens,\\n        uint256[] memory timeLine,\\n        uint256[] memory valueList,\\n        bool[] memory switches,\\n        int256 globalQuota\\n    ) external;\\n\\n    function bid(address to) external;\\n}\\n\",\"keccak256\":\"0xc62fe03a867914cf47cfecebe11825b8140ae3a057e57c673393781a040e22fe\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IDPPOracleAdmin.sol\":{\"content\":\"pragma solidity 0.8.9;\\npragma experimental ABIEncoderV2;\\n\\ninterface IDPPOracleAdmin {\\n    function init(\\n        address owner,\\n        address dpp,\\n        address operator,\\n        address dodoApproveProxy\\n    ) external;\\n\\n    //=========== admin ==========\\n    function ratioSync() external;\\n\\n    function retrieve(\\n        address payable to,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    function reset(\\n        address assetTo,\\n        uint256 newLpFeeRate,\\n        uint256 newI,\\n        uint256 newK,\\n        uint256 baseOutAmount,\\n        uint256 quoteOutAmount,\\n        uint256 minBaseReserve,\\n        uint256 minQuoteReserve\\n    ) external returns (bool);\\n\\n    function tuneParameters(\\n        uint256 newLpFeeRate,\\n        uint256 newI,\\n        uint256 newK,\\n        uint256 minBaseReserve,\\n        uint256 minQuoteReserve\\n    ) external returns (bool);\\n\\n    function tunePrice(\\n        uint256 newI,\\n        uint256 minBaseReserve,\\n        uint256 minQuoteReserve\\n    ) external returns (bool);\\n\\n    function changeOracle(address newOracle) external;\\n\\n    function enableOracle() external;\\n\\n    function disableOracle(uint256 newI) external;\\n}\\n\",\"keccak256\":\"0xb5bcc4cf7cc6d444903a5f9ea90825c7a49d301323d0d4abd1c4186cfd0fa943\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// This is a file copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x455776c152947bd6c46d0bf6210e82fcdf5f781f876b632185749b87f73b8819\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"/*\\n\\n    Copyright 2020 DODO ZOO.\\n    SPDX-License-Identifier: Apache-2.0\\n\\n*/\\n\\npragma solidity 0.8.9;\\npragma experimental ABIEncoderV2;\\n\\ninterface IWETH {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 wad\\n    ) external returns (bool);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0xae737715962c73688e011e27e2f63b0076e1c7afef7f5a0b09cb357ea2bf73ad\",\"license\":\"Apache-2.0\"},\"contracts/lib/Adminable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nabstract contract Adminable {\\n    event AdminUpdated(address indexed user, address indexed newAdmin);\\n\\n    address public admin;\\n\\n    modifier onlyAdmin() virtual {\\n        require(msg.sender == admin, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    function setAdmin(address newAdmin) public virtual onlyAdmin {\\n        _setAdmin(newAdmin);\\n    }\\n\\n    function _setAdmin(address newAdmin) internal {\\n        require(newAdmin != address(0), \\\"Can not set admin to zero address\\\");\\n        admin = newAdmin;\\n\\n        emit AdminUpdated(msg.sender, newAdmin);\\n    }\\n}\\n\",\"keccak256\":\"0xe47c97c0e3edad2d1df3e664376a7bb46e1aaf51b4c4acc73c4a2cfdc747185f\",\"license\":\"GPL-3.0\"},\"contracts/lib/DecimalMath.sol\":{\"content\":\"pragma solidity 0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @title DecimalMath\\n * @author DODO Breeder\\n *\\n * @notice Functions for fixed point number with 18 decimals\\n */\\nlibrary DecimalMath {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant ONE = 10**18;\\n    uint256 internal constant ONE2 = 10**36;\\n\\n    function mulFloor(uint256 target, uint256 d) internal pure returns (uint256) {\\n        return target.mul(d) / (10**18);\\n    }\\n\\n    function mulCeil(uint256 target, uint256 d) internal pure returns (uint256) {\\n        return target.mul(d).divCeil(10**18);\\n    }\\n\\n    function divFloor(uint256 target, uint256 d) internal pure returns (uint256) {\\n        return target.mul(10**18).div(d);\\n    }\\n\\n    function divCeil(uint256 target, uint256 d) internal pure returns (uint256) {\\n        return target.mul(10**18).divCeil(d);\\n    }\\n\\n    function reciprocalFloor(uint256 target) internal pure returns (uint256) {\\n        return uint256(10**36).div(target);\\n    }\\n\\n    function reciprocalCeil(uint256 target) internal pure returns (uint256) {\\n        return uint256(10**36).divCeil(target);\\n    }\\n\\n    function powFloor(uint256 target, uint256 e) internal pure returns (uint256) {\\n        if (e == 0) {\\n            return 10**18;\\n        } else if (e == 1) {\\n            return target;\\n        } else {\\n            uint256 p = powFloor(target, e.div(2));\\n            p = p.mul(p) / (10**18);\\n            if (e % 2 == 1) {\\n                p = p.mul(target) / (10**18);\\n            }\\n            return p;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x848d9447ff70f3b754cdf9a0eb5650ca3e5c4c249d4b65f4b721317be42ce7ba\"},\"contracts/lib/ReentrancyGuard.sol\":{\"content\":\"/*\\n\\n    Copyright 2020 DODO ZOO.\\n    SPDX-License-Identifier: Apache-2.0\\n\\n*/\\n\\npragma solidity 0.8.9;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title ReentrancyGuard\\n * @author DODO Breeder\\n *\\n * @notice Protect functions from Reentrancy Attack\\n */\\ncontract ReentrancyGuard {\\n    // https://solidity.readthedocs.io/en/latest/control-structures.html?highlight=zero-state#scoping-and-declarations\\n    // zero-state of _ENTERED_ is false\\n    bool private _ENTERED_;\\n\\n    modifier preventReentrant() {\\n        require(!_ENTERED_, \\\"REENTRANT\\\");\\n        _ENTERED_ = true;\\n        _;\\n        _ENTERED_ = false;\\n    }\\n}\\n\",\"keccak256\":\"0xe069a822724f7f9bd568500a703fb6cf315b6af4d458b2c3458fd1145b07a63d\",\"license\":\"Apache-2.0\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"/*\\n\\n    Copyright 2020 DODO ZOO.\\n    SPDX-License-Identifier: Apache-2.0\\n    This is a simplified version of OpenZepplin's SafeERC20 library\\n\\n*/\\n\\npragma solidity 0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport { IERC20 } from \\\"../interfaces/IERC20.sol\\\";\\nimport { SafeMath } from \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9069af1d7a5c22a8f044e0c12f30944967fbe8cfa0e8af7a52edf5492af572e7\",\"license\":\"Apache-2.0\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"/*\\n\\n    Copyright 2020 DODO ZOO.\\n    SPDX-License-Identifier: Apache-2.0\\n\\n*/\\n\\npragma solidity 0.8.9;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title SafeMath\\n * @author DODO Breeder\\n *\\n * @notice Math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"MUL_ERROR\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"DIVIDING_ERROR\\\");\\n        return a / b;\\n    }\\n\\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 quotient = div(a, b);\\n        uint256 remainder = a - quotient * b;\\n        if (remainder > 0) {\\n            return quotient + 1;\\n        } else {\\n            return quotient;\\n        }\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SUB_ERROR\\\");\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"ADD_ERROR\\\");\\n        return c;\\n    }\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\\n        uint256 z = x / 2 + 1;\\n        y = x;\\n        while (z < y) {\\n            y = z;\\n            z = (x / z + z) / 2;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe7d538fa206c53181864afaaee0168cf8d3ad2bced6547ce58ed00cccb1097d7\",\"license\":\"Apache-2.0\"},\"contracts/lib/UniversalERC20.sol\":{\"content\":\"pragma solidity 0.8.9;\\n\\nimport { SafeMath } from \\\"./SafeMath.sol\\\";\\nimport { IERC20 } from \\\"../interfaces/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"./SafeERC20.sol\\\";\\n\\nlibrary UniversalERC20 {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 private constant ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    function universalTransfer(\\n        IERC20 token,\\n        address payable to,\\n        uint256 amount\\n    ) internal {\\n        if (amount > 0) {\\n            if (isETH(token)) {\\n                to.transfer(amount);\\n            } else {\\n                token.safeTransfer(to, amount);\\n            }\\n        }\\n    }\\n\\n    function universalApproveMax(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        uint256 allowance = token.allowance(address(this), to);\\n        if (allowance < amount) {\\n            if (allowance > 0) {\\n                token.safeApprove(to, 0);\\n            }\\n            token.safeApprove(to, type(uint256).max);\\n        }\\n    }\\n\\n    function universalBalanceOf(IERC20 token, address who) internal view returns (uint256) {\\n        if (isETH(token)) {\\n            return who.balance;\\n        } else {\\n            return token.balanceOf(who);\\n        }\\n    }\\n\\n    function tokenBalanceOf(IERC20 token, address who) internal view returns (uint256) {\\n        return token.balanceOf(who);\\n    }\\n\\n    function isETH(IERC20 token) internal pure returns (bool) {\\n        return token == ETH_ADDRESS;\\n    }\\n}\\n\",\"keccak256\":\"0x42ceb86934ecc8e15980bcf0f35ed6234caf7581964fa7d4050e5b650aa4d475\"}},\"version\":1}",
  "bytecode": "0x6080604052600e805460ff60a81b191690556000600f81905560105534801561002757600080fd5b5061351f806100376000396000f3fe6080604052600436106101da5760003560e01c8063704b6c0211610101578063ab44a7a31161009a578063dd62ed3e1161006c578063dd62ed3e146105f1578063e7bd25fa14610637578063ec2fd46d14610657578063f811d6921461067f578063f851a440146106b757005b8063ab44a7a314610550578063cf877e7b14610591578063d4b97046146105b1578063d505accf146105d157005b80637ecebe00116100d35780637ecebe00146104ce57806395d89b41146104fb5780639c6cb68214610510578063a9059cbb1461053057005b8063704b6c021461042a57806370a082311461044a5780637a06ab3e146104805780637d1b5d9c146104ae57005b806323b872dd116101735780633644e515116101455780633644e515146103b45780633b20884a146103ca57806347c421b5146103ea5780634a248d2a1461040a57005b806323b872dd1461031f578063292c914a1461033f57806330adf81f14610354578063313ce5671461038857005b80630d4eec8f116101ac5780630d4eec8f1461027e57806310d76460146102bb57806317101940146102db57806318160ddd146102fb57005b806306552ff3146101e357806306fdde0314610203578063095ea7b31461022e5780630a9539241461025e57005b366101e157005b005b3480156101ef57600080fd5b506101e16101fe366004612e32565b6106d7565b34801561020f57600080fd5b50610218610ac4565b6040516102259190612eba565b60405180910390f35b34801561023a57600080fd5b5061024e610249366004612eed565b610b52565b6040519015158152602001610225565b34801561026a57600080fd5b506101e1610279366004612f19565b610b69565b34801561028a57600080fd5b50600e546102a39061010090046001600160a01b031681565b6040516001600160a01b039091168152602001610225565b3480156102c757600080fd5b5061024e6102d6366004612f3b565b610b9e565b3480156102e757600080fd5b506102186102f6366004612f67565b610c67565b34801561030757600080fd5b5061031160095481565b604051908152602001610225565b34801561032b57600080fd5b5061024e61033a366004612f84565b610dea565b34801561034b57600080fd5b506101e1610f97565b34801561036057600080fd5b506103117f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b34801561039457600080fd5b506007546103a29060ff1681565b60405160ff9091168152602001610225565b3480156103c057600080fd5b50610311600c5481565b3480156103d657600080fd5b5061024e6103e5366004612fc5565b61102b565b3480156103f657600080fd5b506101e1610405366004612f67565b611105565b34801561041657600080fd5b506003546102a3906001600160a01b031681565b34801561043657600080fd5b506101e1610445366004612f67565b611192565b34801561045657600080fd5b50610311610465366004612f67565b6001600160a01b03166000908152600a602052604090205490565b61049361048e36600461300f565b6111c8565b60408051938452602084019290925290820152606001610225565b3480156104ba57600080fd5b506101e16104c9366004613064565b611649565b3480156104da57600080fd5b506103116104e9366004612f67565b600d6020526000908152604090205481565b34801561050757600080fd5b506102186116a4565b34801561051c57600080fd5b506002546102a3906001600160a01b031681565b34801561053c57600080fd5b5061024e61054b366004612eed565b6116b1565b34801561055c57600080fd5b5060045461057890600160a01b900467ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610225565b34801561059d57600080fd5b506001546102a3906001600160a01b031681565b3480156105bd57600080fd5b506004546102a3906001600160a01b031681565b3480156105dd57600080fd5b506101e16105ec36600461307d565b61179b565b3480156105fd57600080fd5b5061031161060c3660046130ee565b6001600160a01b039182166000908152600b6020908152604080832093909416825291909152205490565b34801561064357600080fd5b50610493610652366004613127565b6119b1565b34801561066357600080fd5b5060055461057890600160801b900467ffffffffffffffff1681565b34801561068b57600080fd5b5060055461069f906001600160801b031681565b6040516001600160801b039091168152602001610225565b3480156106c357600080fd5b506000546102a3906001600160a01b031681565b600e54600160a81b900460ff161561072e5760405162461bcd60e51b81526020600482015260156024820152741a185d99481899595b881a5b9a5d1a585b1a5e9959605a1b60448201526064015b60405180910390fd5b600e80546001600160a01b0380841661010002610100600160b01b031990921691909117600160a81b17909155600180548583166001600160a01b031991821617909155600280549285169290911691909117905561078c84611d1a565b600160009054906101000a90046001600160a01b03166001600160a01b0316634a248d2a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107da57600080fd5b505afa1580156107ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108129190613170565b600380546001600160a01b0319166001600160a01b0392831617905560015460408051636a5cb82360e11b81529051919092169163d4b97046916004808301926020929190829003018186803b15801561086b57600080fd5b505afa15801561087f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a39190613170565b600480546001600160a01b0319166001600160a01b03929092169190911790556108cb611dc5565b60408051808201825260018152605f60f81b60208083019190915282518084019093526004835263111d595d60e21b9083015290808261090a30610c67565b60405160200161091c9392919061318d565b60405160208183030381529060405260089080519060200190610940929190612d84565b50604080518082019091526007808252660447565745f4c560cc1b602090920191825261096f91600691612d84565b50600360009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156109be57600080fd5b505afa1580156109d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f691906131d0565b6007805460ff191660ff9290921691909117905560405146907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90610a3d90600890613228565b60408051918290038220828201825260018352603160f81b6020938401528151928301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66060820152608081018290523060a082015260c00160408051601f198184030181529190528051602090910120600c5550505050505050565b60088054610ad1906131ed565b80601f0160208091040260200160405190810160405280929190818152602001828054610afd906131ed565b8015610b4a5780601f10610b1f57610100808354040283529160200191610b4a565b820191906000526020600020905b815481529060010190602001808311610b2d57829003601f168201915b505050505081565b6000610b5f338484611fd0565b5060015b92915050565b6000546001600160a01b03163314610b935760405162461bcd60e51b8152600401610725906132c4565b600f91909155601055565b600080546001600160a01b03163314610bc95760405162461bcd60e51b8152600401610725906132c4565b6002546040516286bb2360e51b81526004810186905260248101859052604481018490526001600160a01b03909116906310d7646090606401602060405180830381600087803b158015610c1c57600080fd5b505af1158015610c30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5491906132ea565b50610c5d611dc5565b5060019392505050565b604080518082018252601081526f181899199a1a9b1b9c1cb0b131b232b360811b6020820152815160088082528184019093526060926001600160a01b038516929160009160208201818036833701905050905060005b6004811015610de15782600485610cd684600c613322565b60208110610ce657610ce661333a565b1a60f81b6001600160f81b031916901c60f81c60ff1681518110610d0c57610d0c61333a565b01602001516001600160f81b03191682610d27836002613350565b81518110610d3757610d3761333a565b60200101906001600160f81b031916908160001a9053508284610d5b83600c613322565b60208110610d6b57610d6b61333a565b825191901a600f16908110610d8257610d8261333a565b01602001516001600160f81b03191682610d9d836002613350565b610da8906001613322565b81518110610db857610db861333a565b60200101906001600160f81b031916908160001a90535080610dd98161336f565b915050610cbe565b50949350505050565b6001600160a01b0383166000908152600a6020526040812054821115610e475760405162461bcd60e51b81526020600482015260126024820152710848298829c868abe9c9ea8be8a9c9eaa8e960731b6044820152606401610725565b6001600160a01b0384166000908152600b60209081526040808320338452909152902054821115610eb15760405162461bcd60e51b815260206004820152601460248201527308298989eae829c868abe9c9ea8be8a9c9eaa8e960631b6044820152606401610725565b6001600160a01b0384166000908152600a6020526040902054610ed49083612031565b6001600160a01b038086166000908152600a60205260408082209390935590851681522054610f039083612080565b6001600160a01b038085166000908152600a60209081526040808320949094559187168152600b82528281203382529091522054610f419083612031565b6001600160a01b038581166000818152600b6020908152604080832033845282529182902094909455518581529186169290916000805160206134ca833981519152910160405180910390a35060019392505050565b6000546001600160a01b03163314610fc15760405162461bcd60e51b8152600401610725906132c4565b600260009054906101000a90046001600160a01b03166001600160a01b031663292c914a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561101157600080fd5b505af1158015611025573d6000803e3d6000fd5b50505050565b600080546001600160a01b031633146110565760405162461bcd60e51b8152600401610725906132c4565b600254604051631d90442560e11b815260048101889052602481018790526044810186905260648101859052608481018490526001600160a01b0390911690633b20884a9060a401602060405180830381600087803b1580156110b857600080fd5b505af11580156110cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f091906132ea565b506110f9611dc5565b50600195945050505050565b6000546001600160a01b0316331461112f5760405162461bcd60e51b8152600401610725906132c4565b6002546040516347c421b560e01b81526001600160a01b038381166004830152909116906347c421b5906024015b600060405180830381600087803b15801561117757600080fd5b505af115801561118b573d6000803e3d6000fd5b5050505050565b6000546001600160a01b031633146111bc5760405162461bcd60e51b8152600401610725906132c4565b6111c581611d1a565b50565b600e546000908190819060ff161561120e5760405162461bcd60e51b815260206004820152600960248201526814915153951490539560ba1b6044820152606401610725565b600e805460ff1916600117905583428110156112655760405162461bcd60e51b81526020600482015260166024820152751113d113d58c941c9bde1e4c0c8e881156141254915160521b6044820152606401610725565b61126f8a8a6120cb565b90935091508783108015906112845750868210155b6112ea5760405162461bcd60e51b815260206004820152603160248201527f447565742044707020436f6e74726f6c6c65723a206465706f73697420616d6f6044820152700eadce840d2e640dcdee840cadcdeeaced607b1b6064820152608401610725565b60015460408051632512469560e11b8152905161137b9233926001600160a01b03909116918291634a248d2a916004808301926020929190829003018186803b15801561133657600080fd5b505afa15801561134a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061136e9190613170565b868a60ff16600114612251565b60015460408051636a5cb82360e11b8152905161140c9233926001600160a01b0390911691829163d4b97046916004808301926020929190829003018186803b1580156113c757600080fd5b505afa1580156113db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ff9190613170565b858a60ff16600214612251565b61141533612355565b50506001546040805163058122f160e21b815290519296506001600160a01b03909116916316048bc4916004808201926020929091908290030181600087803b15801561146157600080fd5b505af1158015611475573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114999190613170565b60048054600554600f546010546040516323fce4a360e21b81526001600160a01b039690961695638ff3928c9561150495309567ffffffffffffffff600160a01b9092048216956001600160801b03821695600160801b90920490921693600093849392910161338a565b602060405180830381600087803b15801561151e57600080fd5b505af1158015611532573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155691906132ea565b6115915760405162461bcd60e51b815260206004820152600c60248201526b14995cd95d0811985a5b195960a21b6044820152606401610725565b8560ff1660011480156115a357508234115b156115e057336108fc6115b685346133e4565b6040518115909202916000818181858888f193505050501580156115de573d6000803e3d6000fd5b505b8560ff1660021480156115f257508134115b1561162f57336108fc61160584346133e4565b6040518115909202916000818181858888f1935050505015801561162d573d6000803e3d6000fd5b505b50600e805460ff1916905591989097509095509350505050565b6000546001600160a01b031633146116735760405162461bcd60e51b8152600401610725906132c4565b600254604051631f46d76760e21b8152600481018390526001600160a01b0390911690637d1b5d9c9060240161115d565b60068054610ad1906131ed565b336000908152600a60205260408120548211156117055760405162461bcd60e51b81526020600482015260126024820152710848298829c868abe9c9ea8be8a9c9eaa8e960731b6044820152606401610725565b336000908152600a602052604090205461171f9083612031565b336000908152600a6020526040808220929092556001600160a01b0385168152205461174b9083612080565b6001600160a01b0384166000818152600a60205260409081902092909255905133906000805160206134ca8339815191529061178a9086815260200190565b60405180910390a350600192915050565b428410156117e25760405162461bcd60e51b81526020600482015260146024820152731113d113d7d1159357d3140e881156141254915160621b6044820152606401610725565b600c546001600160a01b0388166000908152600d6020526040812080549192917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b9190876118358361336f565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e001604051602081830303815290604052805190602001206040516020016118ae92919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015611919573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381161580159061194f5750886001600160a01b0316816001600160a01b0316145b61199b5760405162461bcd60e51b815260206004820152601e60248201527f444f444f5f44564d5f4c503a20494e56414c49445f5349474e415455524500006044820152606401610725565b6119a6898989611fd0565b505050505050505050565b600e546000908190819060ff16156119f75760405162461bcd60e51b815260206004820152600960248201526814915153951490539560ba1b6044820152606401610725565b600e805460ff191660011790558342811015611a4e5760405162461bcd60e51b81526020600482015260166024820152751113d113d58c941c9bde1e4c0c8e881156141254915160521b6044820152606401610725565b611a5a89338a8a61269d565b6001546040805163058122f160e21b815290519396509194506001600160a01b0316916316048bc4916004808201926020929091908290030181600087803b158015611aa557600080fd5b505af1158015611ab9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611add9190613170565b60048054600554600f546010546040516323fce4a360e21b81526001600160a01b039690961695638ff3928c95611b4795309567ffffffffffffffff600160a01b9092048216956001600160801b03821695600160801b909204909216938d938d9392910161338a565b602060405180830381600087803b158015611b6157600080fd5b505af1158015611b75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9991906132ea565b611bd45760405162461bcd60e51b815260206004820152600c60248201526b14995cd95d0811985a5b195960a21b6044820152606401610725565b611c6b33600160009054906101000a90046001600160a01b03166001600160a01b0316634a248d2a6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c2657600080fd5b505afa158015611c3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5e9190613170565b858960ff16600314612867565b611d0233600160009054906101000a90046001600160a01b03166001600160a01b031663d4b970466040518163ffffffff1660e01b815260040160206040518083038186803b158015611cbd57600080fd5b505afa158015611cd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf59190613170565b848960ff16600414612867565b50600e805460ff191690559697909695509350505050565b6001600160a01b038116611d7a5760405162461bcd60e51b815260206004820152602160248201527f43616e206e6f74207365742061646d696e20746f207a65726f206164647265736044820152607360f81b6064820152608401610725565b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f101b8081ff3b56bbf45deb824d86a3b0fd38b7e3dd42421105cf8abe9106db0b9190a350565b600160009054906101000a90046001600160a01b03166001600160a01b031663ab44a7a36040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611e1557600080fd5b505af1158015611e29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4d91906133fb565b6004805467ffffffffffffffff92909216600160a01b0267ffffffffffffffff60a01b199092169190911781556001546040805163ec2fd46d60e01b815290516001600160a01b039092169263ec2fd46d9282820192602092908290030181600087803b158015611ebd57600080fd5b505af1158015611ed1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef591906133fb565b600560106101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550600160009054906101000a90046001600160a01b03166001600160a01b031663f811d6926040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611f6d57600080fd5b505af1158015611f81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa59190613425565b600580546fffffffffffffffffffffffffffffffff19166001600160801b0392909216919091179055565b6001600160a01b038381166000818152600b602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60008282111561206f5760405162461bcd60e51b815260206004820152600960248201526829aaa12fa2a92927a960b91b6044820152606401610725565b61207982846133e4565b9392505050565b60008061208d8385613322565b9050838110156120795760405162461bcd60e51b815260206004820152600960248201526820a2222fa2a92927a960b91b6044820152606401610725565b600080600080600160009054906101000a90046001600160a01b03166001600160a01b03166336223ce96040518163ffffffff1660e01b8152600401604080518083038186803b15801561211e57600080fd5b505afa158015612132573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612156919061344e565b91509150806000148015612168575081155b156121ce576000546001600160a01b031633146121c75760405162461bcd60e51b815260206004820152601960248201527f4d75737420696e697469616c697a65642062792061646d696e000000000000006044820152606401610725565b8593508492505b801580156121dc5750600082115b156121e957859350600092505b6000811180156121f95750600082115b1561224857600061220a8784612923565b905060006122188784612923565b90508082116122355787955061222e838361293b565b9450612245565b869450612242848261293b565b95505b50505b50509250929050565b801561233a578115612335578134101561229f5760405162461bcd60e51b815260206004820152600f60248201526e4554485f56414c55455f57524f4e4760881b6044820152606401610725565b600e60019054906101000a90046001600160a01b03166001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b1580156122ef57600080fd5b505af1158015612303573d6000803e3d6000fd5b505050506001600160a01b0385163014905061233557600e546123359061010090046001600160a01b0316858461295a565b61118b565b811561118b5761118b6001600160a01b0384168686856129c2565b6003546001546040516370a0823160e01b81526001600160a01b03918216600482015260009283928392839291909116906370a082319060240160206040518083038186803b1580156123a757600080fd5b505afa1580156123bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123df9190613472565b600480546001546040516370a0823160e01b81526001600160a01b039182169381019390935292935060009216906370a082319060240160206040518083038186803b15801561242e57600080fd5b505afa158015612442573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124669190613472565b600154604080516336223ce960e01b8152815193945060009384936001600160a01b0316926336223ce99260048082019391829003018186803b1580156124ac57600080fd5b505afa1580156124c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124e4919061344e565b90925090506124f38483612031565b95506124ff8382612031565b9450600086116125415760405162461bcd60e51b815260206004820152600d60248201526c1393d7d09054d157d253941555609a1b6044820152606401610725565b6009546125a2576103e884101561259a5760405162461bcd60e51b815260206004820152601c60248201527f494e53554646494349454e545f4c49515549444954595f4d494e4544000000006044820152606401610725565b839650612631565b6000821180156125b0575080155b156125db576125d4826125ce600954896129fa90919063ffffffff16565b90612a5b565b9650612631565b6000821180156125eb5750600081115b156126315760006125fc8784612923565b9050600061260a8784612923565b9050600082821061261b578261261d565b815b905061262b6009548261293b565b99505050505b61263b8888612aa7565b6001600160a01b0388166000818152600a60209081526040918290205482519384529083018a905282820152517f1c172440bdebb59cd92a7f08f4227903a3305ab6f880cb25f93eddb66843a1029181900360600190a1505050509193909250565b6001600160a01b0383166000908152600a602052604081205481908611156126f85760405162461bcd60e51b815260206004820152600e60248201526d08898a0be9c9ea8be8a9c9eaa8e960931b6044820152606401610725565b600154604080516336223ce960e01b8152815160009384936001600160a01b03909116926336223ce99260048083019392829003018186803b15801561273d57600080fd5b505afa158015612751573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612775919061344e565b600954919350915061278b816125ce858c6129fa565b945061279b816125ce848c6129fa565b93508685101580156127ad5750858410155b6127ef5760405162461bcd60e51b81526020600482015260136024820152720ae92a89088a482aebe9c9ea8be8a9c9eaa8e9606b1b6044820152606401610725565b6127f9888a612ba5565b6001600160a01b0388166000818152600a6020908152604091829020548251848152918201939093528082018c90526060810192909252517f55caccde83781f39bfc1296eff45655b6496729443a7d48958b18b3b685600a59181900360800190a150505094509492505050565b801561291257811561290d57600e54604051632e1a7d4d60e01b8152600481018490526101009091046001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156128bd57600080fd5b505af11580156128d1573d6000803e3d6000fd5b50506040516001600160a01b038716925084156108fc02915084906000818181858888f1935050505015801561290b573d6000803e3d6000fd5b505b611025565b81156110255761102583858461295a565b6000612079826125ce85670de0b6b3a76400006129fa565b6000670de0b6b3a764000061295084846129fa565b612079919061348b565b6040516001600160a01b0383166024820152604481018290526129bd90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612c5b565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526110259085906323b872dd60e01b90608401612986565b600082612a0957506000610b63565b6000612a158385613350565b905082612a22858361348b565b146120795760405162461bcd60e51b815260206004820152600960248201526826aaa62fa2a92927a960b91b6044820152606401610725565b6000808211612a9d5760405162461bcd60e51b815260206004820152600e60248201526d2224ab24a224a723afa2a92927a960911b6044820152606401610725565b612079828461348b565b6103e88111612ae75760405162461bcd60e51b815260206004820152600c60248201526b1352539517d253959053125160a21b6044820152606401610725565b6001600160a01b0382166000908152600a6020526040902054612b0a9082612080565b6001600160a01b0383166000908152600a6020526040902055600954612b309082612080565b6009556040518181526001600160a01b038316907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859060200160405180910390a26040518181526001600160a01b038316906000906000805160206134ca833981519152906020015b60405180910390a35050565b6001600160a01b0382166000908152600a6020526040902054612bc89082612031565b6001600160a01b0383166000908152600a6020526040902055600954612bee9082612031565b6009556040518181526001600160a01b038316907fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59060200160405180910390a26040518181526000906001600160a01b038416906000805160206134ca83398151915290602001612b99565b600080836001600160a01b031683604051612c7691906134ad565b6000604051808303816000865af19150503d8060008114612cb3576040519150601f19603f3d011682016040523d82523d6000602084013e612cb8565b606091505b509150915081612d0a5760405162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646044820152606401610725565b8051156110255780806020019051810190612d2591906132ea565b6110255760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610725565b828054612d90906131ed565b90600052602060002090601f016020900481019282612db25760008555612df8565b82601f10612dcb57805160ff1916838001178555612df8565b82800160010185558215612df8579182015b82811115612df8578251825591602001919060010190612ddd565b50612e04929150612e08565b5090565b5b80821115612e045760008155600101612e09565b6001600160a01b03811681146111c557600080fd5b60008060008060808587031215612e4857600080fd5b8435612e5381612e1d565b93506020850135612e6381612e1d565b92506040850135612e7381612e1d565b91506060850135612e8381612e1d565b939692955090935050565b60005b83811015612ea9578181015183820152602001612e91565b838111156110255750506000910152565b6020815260008251806020840152612ed9816040850160208701612e8e565b601f01601f19169190910160400192915050565b60008060408385031215612f0057600080fd5b8235612f0b81612e1d565b946020939093013593505050565b60008060408385031215612f2c57600080fd5b50508035926020909101359150565b600080600060608486031215612f5057600080fd5b505081359360208301359350604090920135919050565b600060208284031215612f7957600080fd5b813561207981612e1d565b600080600060608486031215612f9957600080fd5b8335612fa481612e1d565b92506020840135612fb481612e1d565b929592945050506040919091013590565b600080600080600060a08688031215612fdd57600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b60ff811681146111c557600080fd5b60008060008060008060c0878903121561302857600080fd5b86359550602087013594506040870135935060608701359250608087013561304f81613000565b8092505060a087013590509295509295509295565b60006020828403121561307657600080fd5b5035919050565b600080600080600080600060e0888a03121561309857600080fd5b87356130a381612e1d565b965060208801356130b381612e1d565b9550604088013594506060880135935060808801356130d181613000565b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561310157600080fd5b823561310c81612e1d565b9150602083013561311c81612e1d565b809150509250929050565b600080600080600060a0868803121561313f57600080fd5b853594506020860135935060408601359250606086013561315f81613000565b949793965091946080013592915050565b60006020828403121561318257600080fd5b815161207981612e1d565b6000845161319f818460208901612e8e565b8451908301906131b3818360208901612e8e565b84519101906131c6818360208801612e8e565b0195945050505050565b6000602082840312156131e257600080fd5b815161207981613000565b600181811c9082168061320157607f821691505b6020821081141561322257634e487b7160e01b600052602260045260246000fd5b50919050565b600080835481600182811c91508083168061324457607f831692505b602080841082141561326457634e487b7160e01b86526022600452602486fd5b8180156132785760018114613289576132b6565b60ff198616895284890196506132b6565b60008a81526020902060005b868110156132ae5781548b820152908501908301613295565b505084890196505b509498975050505050505050565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b6000602082840312156132fc57600080fd5b8151801515811461207957600080fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156133355761333561330c565b500190565b634e487b7160e01b600052603260045260246000fd5b600081600019048311821515161561336a5761336a61330c565b500290565b60006000198214156133835761338361330c565b5060010190565b6001600160a01b0398909816885267ffffffffffffffff96871660208901526001600160801b03959095166040880152929094166060860152608085015260a084019290925260c083019190915260e08201526101000190565b6000828210156133f6576133f661330c565b500390565b60006020828403121561340d57600080fd5b815167ffffffffffffffff8116811461207957600080fd5b60006020828403121561343757600080fd5b81516001600160801b038116811461207957600080fd5b6000806040838503121561346157600080fd5b505080516020909101519092909150565b60006020828403121561348457600080fd5b5051919050565b6000826134a857634e487b7160e01b600052601260045260246000fd5b500490565b600082516134bf818460208701612e8e565b919091019291505056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220c7570850e46abdf5b470ca874ce69edc842f632f2e41ae58c9370bd013ff265e64736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106101da5760003560e01c8063704b6c0211610101578063ab44a7a31161009a578063dd62ed3e1161006c578063dd62ed3e146105f1578063e7bd25fa14610637578063ec2fd46d14610657578063f811d6921461067f578063f851a440146106b757005b8063ab44a7a314610550578063cf877e7b14610591578063d4b97046146105b1578063d505accf146105d157005b80637ecebe00116100d35780637ecebe00146104ce57806395d89b41146104fb5780639c6cb68214610510578063a9059cbb1461053057005b8063704b6c021461042a57806370a082311461044a5780637a06ab3e146104805780637d1b5d9c146104ae57005b806323b872dd116101735780633644e515116101455780633644e515146103b45780633b20884a146103ca57806347c421b5146103ea5780634a248d2a1461040a57005b806323b872dd1461031f578063292c914a1461033f57806330adf81f14610354578063313ce5671461038857005b80630d4eec8f116101ac5780630d4eec8f1461027e57806310d76460146102bb57806317101940146102db57806318160ddd146102fb57005b806306552ff3146101e357806306fdde0314610203578063095ea7b31461022e5780630a9539241461025e57005b366101e157005b005b3480156101ef57600080fd5b506101e16101fe366004612e32565b6106d7565b34801561020f57600080fd5b50610218610ac4565b6040516102259190612eba565b60405180910390f35b34801561023a57600080fd5b5061024e610249366004612eed565b610b52565b6040519015158152602001610225565b34801561026a57600080fd5b506101e1610279366004612f19565b610b69565b34801561028a57600080fd5b50600e546102a39061010090046001600160a01b031681565b6040516001600160a01b039091168152602001610225565b3480156102c757600080fd5b5061024e6102d6366004612f3b565b610b9e565b3480156102e757600080fd5b506102186102f6366004612f67565b610c67565b34801561030757600080fd5b5061031160095481565b604051908152602001610225565b34801561032b57600080fd5b5061024e61033a366004612f84565b610dea565b34801561034b57600080fd5b506101e1610f97565b34801561036057600080fd5b506103117f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b34801561039457600080fd5b506007546103a29060ff1681565b60405160ff9091168152602001610225565b3480156103c057600080fd5b50610311600c5481565b3480156103d657600080fd5b5061024e6103e5366004612fc5565b61102b565b3480156103f657600080fd5b506101e1610405366004612f67565b611105565b34801561041657600080fd5b506003546102a3906001600160a01b031681565b34801561043657600080fd5b506101e1610445366004612f67565b611192565b34801561045657600080fd5b50610311610465366004612f67565b6001600160a01b03166000908152600a602052604090205490565b61049361048e36600461300f565b6111c8565b60408051938452602084019290925290820152606001610225565b3480156104ba57600080fd5b506101e16104c9366004613064565b611649565b3480156104da57600080fd5b506103116104e9366004612f67565b600d6020526000908152604090205481565b34801561050757600080fd5b506102186116a4565b34801561051c57600080fd5b506002546102a3906001600160a01b031681565b34801561053c57600080fd5b5061024e61054b366004612eed565b6116b1565b34801561055c57600080fd5b5060045461057890600160a01b900467ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610225565b34801561059d57600080fd5b506001546102a3906001600160a01b031681565b3480156105bd57600080fd5b506004546102a3906001600160a01b031681565b3480156105dd57600080fd5b506101e16105ec36600461307d565b61179b565b3480156105fd57600080fd5b5061031161060c3660046130ee565b6001600160a01b039182166000908152600b6020908152604080832093909416825291909152205490565b34801561064357600080fd5b50610493610652366004613127565b6119b1565b34801561066357600080fd5b5060055461057890600160801b900467ffffffffffffffff1681565b34801561068b57600080fd5b5060055461069f906001600160801b031681565b6040516001600160801b039091168152602001610225565b3480156106c357600080fd5b506000546102a3906001600160a01b031681565b600e54600160a81b900460ff161561072e5760405162461bcd60e51b81526020600482015260156024820152741a185d99481899595b881a5b9a5d1a585b1a5e9959605a1b60448201526064015b60405180910390fd5b600e80546001600160a01b0380841661010002610100600160b01b031990921691909117600160a81b17909155600180548583166001600160a01b031991821617909155600280549285169290911691909117905561078c84611d1a565b600160009054906101000a90046001600160a01b03166001600160a01b0316634a248d2a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107da57600080fd5b505afa1580156107ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108129190613170565b600380546001600160a01b0319166001600160a01b0392831617905560015460408051636a5cb82360e11b81529051919092169163d4b97046916004808301926020929190829003018186803b15801561086b57600080fd5b505afa15801561087f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a39190613170565b600480546001600160a01b0319166001600160a01b03929092169190911790556108cb611dc5565b60408051808201825260018152605f60f81b60208083019190915282518084019093526004835263111d595d60e21b9083015290808261090a30610c67565b60405160200161091c9392919061318d565b60405160208183030381529060405260089080519060200190610940929190612d84565b50604080518082019091526007808252660447565745f4c560cc1b602090920191825261096f91600691612d84565b50600360009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156109be57600080fd5b505afa1580156109d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f691906131d0565b6007805460ff191660ff9290921691909117905560405146907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90610a3d90600890613228565b60408051918290038220828201825260018352603160f81b6020938401528151928301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66060820152608081018290523060a082015260c00160408051601f198184030181529190528051602090910120600c5550505050505050565b60088054610ad1906131ed565b80601f0160208091040260200160405190810160405280929190818152602001828054610afd906131ed565b8015610b4a5780601f10610b1f57610100808354040283529160200191610b4a565b820191906000526020600020905b815481529060010190602001808311610b2d57829003601f168201915b505050505081565b6000610b5f338484611fd0565b5060015b92915050565b6000546001600160a01b03163314610b935760405162461bcd60e51b8152600401610725906132c4565b600f91909155601055565b600080546001600160a01b03163314610bc95760405162461bcd60e51b8152600401610725906132c4565b6002546040516286bb2360e51b81526004810186905260248101859052604481018490526001600160a01b03909116906310d7646090606401602060405180830381600087803b158015610c1c57600080fd5b505af1158015610c30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5491906132ea565b50610c5d611dc5565b5060019392505050565b604080518082018252601081526f181899199a1a9b1b9c1cb0b131b232b360811b6020820152815160088082528184019093526060926001600160a01b038516929160009160208201818036833701905050905060005b6004811015610de15782600485610cd684600c613322565b60208110610ce657610ce661333a565b1a60f81b6001600160f81b031916901c60f81c60ff1681518110610d0c57610d0c61333a565b01602001516001600160f81b03191682610d27836002613350565b81518110610d3757610d3761333a565b60200101906001600160f81b031916908160001a9053508284610d5b83600c613322565b60208110610d6b57610d6b61333a565b825191901a600f16908110610d8257610d8261333a565b01602001516001600160f81b03191682610d9d836002613350565b610da8906001613322565b81518110610db857610db861333a565b60200101906001600160f81b031916908160001a90535080610dd98161336f565b915050610cbe565b50949350505050565b6001600160a01b0383166000908152600a6020526040812054821115610e475760405162461bcd60e51b81526020600482015260126024820152710848298829c868abe9c9ea8be8a9c9eaa8e960731b6044820152606401610725565b6001600160a01b0384166000908152600b60209081526040808320338452909152902054821115610eb15760405162461bcd60e51b815260206004820152601460248201527308298989eae829c868abe9c9ea8be8a9c9eaa8e960631b6044820152606401610725565b6001600160a01b0384166000908152600a6020526040902054610ed49083612031565b6001600160a01b038086166000908152600a60205260408082209390935590851681522054610f039083612080565b6001600160a01b038085166000908152600a60209081526040808320949094559187168152600b82528281203382529091522054610f419083612031565b6001600160a01b038581166000818152600b6020908152604080832033845282529182902094909455518581529186169290916000805160206134ca833981519152910160405180910390a35060019392505050565b6000546001600160a01b03163314610fc15760405162461bcd60e51b8152600401610725906132c4565b600260009054906101000a90046001600160a01b03166001600160a01b031663292c914a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561101157600080fd5b505af1158015611025573d6000803e3d6000fd5b50505050565b600080546001600160a01b031633146110565760405162461bcd60e51b8152600401610725906132c4565b600254604051631d90442560e11b815260048101889052602481018790526044810186905260648101859052608481018490526001600160a01b0390911690633b20884a9060a401602060405180830381600087803b1580156110b857600080fd5b505af11580156110cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f091906132ea565b506110f9611dc5565b50600195945050505050565b6000546001600160a01b0316331461112f5760405162461bcd60e51b8152600401610725906132c4565b6002546040516347c421b560e01b81526001600160a01b038381166004830152909116906347c421b5906024015b600060405180830381600087803b15801561117757600080fd5b505af115801561118b573d6000803e3d6000fd5b5050505050565b6000546001600160a01b031633146111bc5760405162461bcd60e51b8152600401610725906132c4565b6111c581611d1a565b50565b600e546000908190819060ff161561120e5760405162461bcd60e51b815260206004820152600960248201526814915153951490539560ba1b6044820152606401610725565b600e805460ff1916600117905583428110156112655760405162461bcd60e51b81526020600482015260166024820152751113d113d58c941c9bde1e4c0c8e881156141254915160521b6044820152606401610725565b61126f8a8a6120cb565b90935091508783108015906112845750868210155b6112ea5760405162461bcd60e51b815260206004820152603160248201527f447565742044707020436f6e74726f6c6c65723a206465706f73697420616d6f6044820152700eadce840d2e640dcdee840cadcdeeaced607b1b6064820152608401610725565b60015460408051632512469560e11b8152905161137b9233926001600160a01b03909116918291634a248d2a916004808301926020929190829003018186803b15801561133657600080fd5b505afa15801561134a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061136e9190613170565b868a60ff16600114612251565b60015460408051636a5cb82360e11b8152905161140c9233926001600160a01b0390911691829163d4b97046916004808301926020929190829003018186803b1580156113c757600080fd5b505afa1580156113db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ff9190613170565b858a60ff16600214612251565b61141533612355565b50506001546040805163058122f160e21b815290519296506001600160a01b03909116916316048bc4916004808201926020929091908290030181600087803b15801561146157600080fd5b505af1158015611475573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114999190613170565b60048054600554600f546010546040516323fce4a360e21b81526001600160a01b039690961695638ff3928c9561150495309567ffffffffffffffff600160a01b9092048216956001600160801b03821695600160801b90920490921693600093849392910161338a565b602060405180830381600087803b15801561151e57600080fd5b505af1158015611532573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155691906132ea565b6115915760405162461bcd60e51b815260206004820152600c60248201526b14995cd95d0811985a5b195960a21b6044820152606401610725565b8560ff1660011480156115a357508234115b156115e057336108fc6115b685346133e4565b6040518115909202916000818181858888f193505050501580156115de573d6000803e3d6000fd5b505b8560ff1660021480156115f257508134115b1561162f57336108fc61160584346133e4565b6040518115909202916000818181858888f1935050505015801561162d573d6000803e3d6000fd5b505b50600e805460ff1916905591989097509095509350505050565b6000546001600160a01b031633146116735760405162461bcd60e51b8152600401610725906132c4565b600254604051631f46d76760e21b8152600481018390526001600160a01b0390911690637d1b5d9c9060240161115d565b60068054610ad1906131ed565b336000908152600a60205260408120548211156117055760405162461bcd60e51b81526020600482015260126024820152710848298829c868abe9c9ea8be8a9c9eaa8e960731b6044820152606401610725565b336000908152600a602052604090205461171f9083612031565b336000908152600a6020526040808220929092556001600160a01b0385168152205461174b9083612080565b6001600160a01b0384166000818152600a60205260409081902092909255905133906000805160206134ca8339815191529061178a9086815260200190565b60405180910390a350600192915050565b428410156117e25760405162461bcd60e51b81526020600482015260146024820152731113d113d7d1159357d3140e881156141254915160621b6044820152606401610725565b600c546001600160a01b0388166000908152600d6020526040812080549192917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b9190876118358361336f565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e001604051602081830303815290604052805190602001206040516020016118ae92919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015611919573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381161580159061194f5750886001600160a01b0316816001600160a01b0316145b61199b5760405162461bcd60e51b815260206004820152601e60248201527f444f444f5f44564d5f4c503a20494e56414c49445f5349474e415455524500006044820152606401610725565b6119a6898989611fd0565b505050505050505050565b600e546000908190819060ff16156119f75760405162461bcd60e51b815260206004820152600960248201526814915153951490539560ba1b6044820152606401610725565b600e805460ff191660011790558342811015611a4e5760405162461bcd60e51b81526020600482015260166024820152751113d113d58c941c9bde1e4c0c8e881156141254915160521b6044820152606401610725565b611a5a89338a8a61269d565b6001546040805163058122f160e21b815290519396509194506001600160a01b0316916316048bc4916004808201926020929091908290030181600087803b158015611aa557600080fd5b505af1158015611ab9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611add9190613170565b60048054600554600f546010546040516323fce4a360e21b81526001600160a01b039690961695638ff3928c95611b4795309567ffffffffffffffff600160a01b9092048216956001600160801b03821695600160801b909204909216938d938d9392910161338a565b602060405180830381600087803b158015611b6157600080fd5b505af1158015611b75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9991906132ea565b611bd45760405162461bcd60e51b815260206004820152600c60248201526b14995cd95d0811985a5b195960a21b6044820152606401610725565b611c6b33600160009054906101000a90046001600160a01b03166001600160a01b0316634a248d2a6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c2657600080fd5b505afa158015611c3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5e9190613170565b858960ff16600314612867565b611d0233600160009054906101000a90046001600160a01b03166001600160a01b031663d4b970466040518163ffffffff1660e01b815260040160206040518083038186803b158015611cbd57600080fd5b505afa158015611cd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf59190613170565b848960ff16600414612867565b50600e805460ff191690559697909695509350505050565b6001600160a01b038116611d7a5760405162461bcd60e51b815260206004820152602160248201527f43616e206e6f74207365742061646d696e20746f207a65726f206164647265736044820152607360f81b6064820152608401610725565b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f101b8081ff3b56bbf45deb824d86a3b0fd38b7e3dd42421105cf8abe9106db0b9190a350565b600160009054906101000a90046001600160a01b03166001600160a01b031663ab44a7a36040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611e1557600080fd5b505af1158015611e29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4d91906133fb565b6004805467ffffffffffffffff92909216600160a01b0267ffffffffffffffff60a01b199092169190911781556001546040805163ec2fd46d60e01b815290516001600160a01b039092169263ec2fd46d9282820192602092908290030181600087803b158015611ebd57600080fd5b505af1158015611ed1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef591906133fb565b600560106101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550600160009054906101000a90046001600160a01b03166001600160a01b031663f811d6926040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611f6d57600080fd5b505af1158015611f81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa59190613425565b600580546fffffffffffffffffffffffffffffffff19166001600160801b0392909216919091179055565b6001600160a01b038381166000818152600b602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60008282111561206f5760405162461bcd60e51b815260206004820152600960248201526829aaa12fa2a92927a960b91b6044820152606401610725565b61207982846133e4565b9392505050565b60008061208d8385613322565b9050838110156120795760405162461bcd60e51b815260206004820152600960248201526820a2222fa2a92927a960b91b6044820152606401610725565b600080600080600160009054906101000a90046001600160a01b03166001600160a01b03166336223ce96040518163ffffffff1660e01b8152600401604080518083038186803b15801561211e57600080fd5b505afa158015612132573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612156919061344e565b91509150806000148015612168575081155b156121ce576000546001600160a01b031633146121c75760405162461bcd60e51b815260206004820152601960248201527f4d75737420696e697469616c697a65642062792061646d696e000000000000006044820152606401610725565b8593508492505b801580156121dc5750600082115b156121e957859350600092505b6000811180156121f95750600082115b1561224857600061220a8784612923565b905060006122188784612923565b90508082116122355787955061222e838361293b565b9450612245565b869450612242848261293b565b95505b50505b50509250929050565b801561233a578115612335578134101561229f5760405162461bcd60e51b815260206004820152600f60248201526e4554485f56414c55455f57524f4e4760881b6044820152606401610725565b600e60019054906101000a90046001600160a01b03166001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b1580156122ef57600080fd5b505af1158015612303573d6000803e3d6000fd5b505050506001600160a01b0385163014905061233557600e546123359061010090046001600160a01b0316858461295a565b61118b565b811561118b5761118b6001600160a01b0384168686856129c2565b6003546001546040516370a0823160e01b81526001600160a01b03918216600482015260009283928392839291909116906370a082319060240160206040518083038186803b1580156123a757600080fd5b505afa1580156123bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123df9190613472565b600480546001546040516370a0823160e01b81526001600160a01b039182169381019390935292935060009216906370a082319060240160206040518083038186803b15801561242e57600080fd5b505afa158015612442573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124669190613472565b600154604080516336223ce960e01b8152815193945060009384936001600160a01b0316926336223ce99260048082019391829003018186803b1580156124ac57600080fd5b505afa1580156124c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124e4919061344e565b90925090506124f38483612031565b95506124ff8382612031565b9450600086116125415760405162461bcd60e51b815260206004820152600d60248201526c1393d7d09054d157d253941555609a1b6044820152606401610725565b6009546125a2576103e884101561259a5760405162461bcd60e51b815260206004820152601c60248201527f494e53554646494349454e545f4c49515549444954595f4d494e4544000000006044820152606401610725565b839650612631565b6000821180156125b0575080155b156125db576125d4826125ce600954896129fa90919063ffffffff16565b90612a5b565b9650612631565b6000821180156125eb5750600081115b156126315760006125fc8784612923565b9050600061260a8784612923565b9050600082821061261b578261261d565b815b905061262b6009548261293b565b99505050505b61263b8888612aa7565b6001600160a01b0388166000818152600a60209081526040918290205482519384529083018a905282820152517f1c172440bdebb59cd92a7f08f4227903a3305ab6f880cb25f93eddb66843a1029181900360600190a1505050509193909250565b6001600160a01b0383166000908152600a602052604081205481908611156126f85760405162461bcd60e51b815260206004820152600e60248201526d08898a0be9c9ea8be8a9c9eaa8e960931b6044820152606401610725565b600154604080516336223ce960e01b8152815160009384936001600160a01b03909116926336223ce99260048083019392829003018186803b15801561273d57600080fd5b505afa158015612751573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612775919061344e565b600954919350915061278b816125ce858c6129fa565b945061279b816125ce848c6129fa565b93508685101580156127ad5750858410155b6127ef5760405162461bcd60e51b81526020600482015260136024820152720ae92a89088a482aebe9c9ea8be8a9c9eaa8e9606b1b6044820152606401610725565b6127f9888a612ba5565b6001600160a01b0388166000818152600a6020908152604091829020548251848152918201939093528082018c90526060810192909252517f55caccde83781f39bfc1296eff45655b6496729443a7d48958b18b3b685600a59181900360800190a150505094509492505050565b801561291257811561290d57600e54604051632e1a7d4d60e01b8152600481018490526101009091046001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156128bd57600080fd5b505af11580156128d1573d6000803e3d6000fd5b50506040516001600160a01b038716925084156108fc02915084906000818181858888f1935050505015801561290b573d6000803e3d6000fd5b505b611025565b81156110255761102583858461295a565b6000612079826125ce85670de0b6b3a76400006129fa565b6000670de0b6b3a764000061295084846129fa565b612079919061348b565b6040516001600160a01b0383166024820152604481018290526129bd90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612c5b565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526110259085906323b872dd60e01b90608401612986565b600082612a0957506000610b63565b6000612a158385613350565b905082612a22858361348b565b146120795760405162461bcd60e51b815260206004820152600960248201526826aaa62fa2a92927a960b91b6044820152606401610725565b6000808211612a9d5760405162461bcd60e51b815260206004820152600e60248201526d2224ab24a224a723afa2a92927a960911b6044820152606401610725565b612079828461348b565b6103e88111612ae75760405162461bcd60e51b815260206004820152600c60248201526b1352539517d253959053125160a21b6044820152606401610725565b6001600160a01b0382166000908152600a6020526040902054612b0a9082612080565b6001600160a01b0383166000908152600a6020526040902055600954612b309082612080565b6009556040518181526001600160a01b038316907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859060200160405180910390a26040518181526001600160a01b038316906000906000805160206134ca833981519152906020015b60405180910390a35050565b6001600160a01b0382166000908152600a6020526040902054612bc89082612031565b6001600160a01b0383166000908152600a6020526040902055600954612bee9082612031565b6009556040518181526001600160a01b038316907fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59060200160405180910390a26040518181526000906001600160a01b038416906000805160206134ca83398151915290602001612b99565b600080836001600160a01b031683604051612c7691906134ad565b6000604051808303816000865af19150503d8060008114612cb3576040519150601f19603f3d011682016040523d82523d6000602084013e612cb8565b606091505b509150915081612d0a5760405162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646044820152606401610725565b8051156110255780806020019051810190612d2591906132ea565b6110255760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610725565b828054612d90906131ed565b90600052602060002090601f016020900481019282612db25760008555612df8565b82601f10612dcb57805160ff1916838001178555612df8565b82800160010185558215612df8579182015b82811115612df8578251825591602001919060010190612ddd565b50612e04929150612e08565b5090565b5b80821115612e045760008155600101612e09565b6001600160a01b03811681146111c557600080fd5b60008060008060808587031215612e4857600080fd5b8435612e5381612e1d565b93506020850135612e6381612e1d565b92506040850135612e7381612e1d565b91506060850135612e8381612e1d565b939692955090935050565b60005b83811015612ea9578181015183820152602001612e91565b838111156110255750506000910152565b6020815260008251806020840152612ed9816040850160208701612e8e565b601f01601f19169190910160400192915050565b60008060408385031215612f0057600080fd5b8235612f0b81612e1d565b946020939093013593505050565b60008060408385031215612f2c57600080fd5b50508035926020909101359150565b600080600060608486031215612f5057600080fd5b505081359360208301359350604090920135919050565b600060208284031215612f7957600080fd5b813561207981612e1d565b600080600060608486031215612f9957600080fd5b8335612fa481612e1d565b92506020840135612fb481612e1d565b929592945050506040919091013590565b600080600080600060a08688031215612fdd57600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b60ff811681146111c557600080fd5b60008060008060008060c0878903121561302857600080fd5b86359550602087013594506040870135935060608701359250608087013561304f81613000565b8092505060a087013590509295509295509295565b60006020828403121561307657600080fd5b5035919050565b600080600080600080600060e0888a03121561309857600080fd5b87356130a381612e1d565b965060208801356130b381612e1d565b9550604088013594506060880135935060808801356130d181613000565b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561310157600080fd5b823561310c81612e1d565b9150602083013561311c81612e1d565b809150509250929050565b600080600080600060a0868803121561313f57600080fd5b853594506020860135935060408601359250606086013561315f81613000565b949793965091946080013592915050565b60006020828403121561318257600080fd5b815161207981612e1d565b6000845161319f818460208901612e8e565b8451908301906131b3818360208901612e8e565b84519101906131c6818360208801612e8e565b0195945050505050565b6000602082840312156131e257600080fd5b815161207981613000565b600181811c9082168061320157607f821691505b6020821081141561322257634e487b7160e01b600052602260045260246000fd5b50919050565b600080835481600182811c91508083168061324457607f831692505b602080841082141561326457634e487b7160e01b86526022600452602486fd5b8180156132785760018114613289576132b6565b60ff198616895284890196506132b6565b60008a81526020902060005b868110156132ae5781548b820152908501908301613295565b505084890196505b509498975050505050505050565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b6000602082840312156132fc57600080fd5b8151801515811461207957600080fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156133355761333561330c565b500190565b634e487b7160e01b600052603260045260246000fd5b600081600019048311821515161561336a5761336a61330c565b500290565b60006000198214156133835761338361330c565b5060010190565b6001600160a01b0398909816885267ffffffffffffffff96871660208901526001600160801b03959095166040880152929094166060860152608085015260a084019290925260c083019190915260e08201526101000190565b6000828210156133f6576133f661330c565b500390565b60006020828403121561340d57600080fd5b815167ffffffffffffffff8116811461207957600080fd5b60006020828403121561343757600080fd5b81516001600160801b038116811461207957600080fd5b6000806040838503121561346157600080fd5b505080516020909101519092909150565b60006020828403121561348457600080fd5b5051919050565b6000826134a857634e487b7160e01b600052601260045260246000fd5b500490565b600082516134bf818460208701612e8e565b919091019291505056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220c7570850e46abdf5b470ca874ce69edc842f632f2e41ae58c9370bd013ff265e64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "Function to check the amount of tokens that an owner _ALLOWED_ to a spender.",
        "params": {
          "owner": "address The address which owns the funds.",
          "spender": "address The address which will spend the funds."
        },
        "returns": {
          "_0": "A uint256 specifying the amount of tokens still available for the spender."
        }
      },
      "approve(address,uint256)": {
        "details": "Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.",
        "params": {
          "amount": "The amount of tokens to be spent.",
          "spender": "The address which will spend the funds."
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address.",
        "params": {
          "owner": "The address to query the the balance of."
        },
        "returns": {
          "balance": "An uint256 representing the amount owned by the passed address."
        }
      },
      "transfer(address,uint256)": {
        "details": "transfer token for a specified address",
        "params": {
          "amount": "The amount to be transferred.",
          "to": "The address to transfer to."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfer tokens from one address to another",
        "params": {
          "amount": "uint256 the amount of tokens to be transferred",
          "from": "address The address which you want to send tokens from",
          "to": "address The address which you want to transfer to"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6812,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2024,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "_DPP_ADDRESS_",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2026,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "_DPP_ADMIN_ADDRESS_",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2029,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "_BASE_TOKEN_",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)6740"
      },
      {
        "astId": 2032,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "_QUOTE_TOKEN_",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20)6740"
      },
      {
        "astId": 2034,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "_LP_FEE_RATE_",
        "offset": 20,
        "slot": "4",
        "type": "t_uint64"
      },
      {
        "astId": 2036,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "_I_",
        "offset": 0,
        "slot": "5",
        "type": "t_uint128"
      },
      {
        "astId": 2038,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "_K_",
        "offset": 16,
        "slot": "5",
        "type": "t_uint64"
      },
      {
        "astId": 2040,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "symbol",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 2042,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "decimals",
        "offset": 0,
        "slot": "7",
        "type": "t_uint8"
      },
      {
        "astId": 2044,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "name",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 2046,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "totalSupply",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2050,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "_SHARES_",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2056,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "_ALLOWED_",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2058,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "12",
        "type": "t_bytes32"
      },
      {
        "astId": 2065,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "nonces",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7214,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "_ENTERED_",
        "offset": 0,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 425,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "_WETH_",
        "offset": 1,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 428,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "flagInit",
        "offset": 21,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 432,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "minBaseReserve",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 435,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "minQuoteReserve",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)6740": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}