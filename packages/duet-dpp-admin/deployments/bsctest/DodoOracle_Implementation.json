{
  "address": "0x471440CAdCcF6fBC305b46ad383Fd9F739325bA5",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "duetOracleMapping",
      "outputs": [
        {
          "internalType": "contract IDuetOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fallbackDuetOracle",
      "outputs": [
        {
          "internalType": "contract IDuetOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "base_",
          "type": "address"
        }
      ],
      "name": "prices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "contract IDuetOracle",
          "name": "duetOracle_",
          "type": "address"
        }
      ],
      "name": "setDuetOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDuetOracle",
          "name": "fallbackDuetOracle_",
          "type": "address"
        }
      ],
      "name": "setFallbackDuetOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8ee1f84d3817578b17d5572862d9075bec8dee2b31cb56d787460b068046e9f9",
  "receipt": {
    "to": null,
    "from": "0xe7a2b8C8feD53713F69227e6c3d2384E80CF88a6",
    "contractAddress": "0x471440CAdCcF6fBC305b46ad383Fd9F739325bA5",
    "transactionIndex": 5,
    "gasUsed": "556475",
    "logsBloom": "0x
    "blockHash": "0x49752a7b6c0a1568602c579df36c7558af6fbe216b525d7a3445fbe67c749c0c",
    "transactionHash": "0x8ee1f84d3817578b17d5572862d9075bec8dee2b31cb56d787460b068046e9f9",
    "logs": [],
    "blockNumber": 22658529,
    "cumulativeGasUsed": "1514358",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ea61f39cb2fc560e123acc8a19afc85d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"duetOracleMapping\",\"outputs\":[{\"internalType\":\"contract IDuetOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fallbackDuetOracle\",\"outputs\":[{\"internalType\":\"contract IDuetOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"base_\",\"type\":\"address\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"contract IDuetOracle\",\"name\":\"duetOracle_\",\"type\":\"address\"}],\"name\":\"setDuetOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDuetOracle\",\"name\":\"fallbackDuetOracle_\",\"type\":\"address\"}],\"name\":\"setFallbackDuetOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fallbackDuetOracle()\":{\"notice\":\"fallback oracle for tokens which no oracle in duetOracleMapping\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DodoOracle.sol\":\"DodoOracle\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"contracts/DodoOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./interfaces/IDuetOracle.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./lib/Adminable.sol\\\";\\n\\ncontract DodoOracle is Adminable, Initializable {\\n    // token address => duet oracle\\n    mapping(address => IDuetOracle) public duetOracleMapping;\\n    /**\\n     * fallback oracle for tokens which no oracle in duetOracleMapping\\n     */\\n    IDuetOracle public fallbackDuetOracle;\\n\\n    function initialize(address admin_) external initializer {\\n        _setAdmin(admin_);\\n    }\\n\\n    function setFallbackDuetOracle(IDuetOracle fallbackDuetOracle_) external onlyAdmin {\\n        fallbackDuetOracle = fallbackDuetOracle_;\\n    }\\n\\n    function setDuetOracle(address token_, IDuetOracle duetOracle_) external onlyAdmin {\\n        duetOracleMapping[token_] = duetOracle_;\\n    }\\n\\n    function prices(address base_) external view returns (uint256 price) {\\n        if (address(duetOracleMapping[base_]) == address(0)) {\\n            price = fallbackDuetOracle.getPrice(base_);\\n        } else {\\n            price = duetOracleMapping[base_].getPrice(base_);\\n        }\\n        require(price > 0, \\\"Invalid price from oracle\\\");\\n\\n        uint256 baseTokenDecimals = IERC20(base_).decimals();\\n        // decimals for Dodo is `18 - quote + base`\\n        // quote token is always BUSD, so use base decimals as dodo oracle decimals.\\n        // duet oracle returns 1e8 value\\n        if (baseTokenDecimals == 8) {\\n            return price;\\n        }\\n        if (baseTokenDecimals > 8) {\\n            return price * 10**(baseTokenDecimals - 8);\\n        }\\n        return price / (10**(8 - baseTokenDecimals));\\n    }\\n}\\n\",\"keccak256\":\"0xcfa978f4d2164cec1f43a5a1c18c2affe3c53cb143e3d012d2cd1dd238e590ea\",\"license\":\"MIT\"},\"contracts/interfaces/IDuetOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IDuetOracle {\\n    // Must 8 dec, same as chainlink decimals.\\n    function getPrice(address token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9ea9e7cefe2c30b9e36338d4225c0fdb7eacdb16db3b845954cdbe2d881073ac\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// This is a file copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x455776c152947bd6c46d0bf6210e82fcdf5f781f876b632185749b87f73b8819\",\"license\":\"MIT\"},\"contracts/lib/Adminable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nabstract contract Adminable {\\n    event AdminUpdated(address indexed user, address indexed newAdmin);\\n\\n    address public admin;\\n\\n    modifier onlyAdmin() virtual {\\n        require(msg.sender == admin, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    function setAdmin(address newAdmin) public virtual onlyAdmin {\\n        _setAdmin(newAdmin);\\n    }\\n\\n    function _setAdmin(address newAdmin) internal {\\n        require(newAdmin != address(0), \\\"Can not set admin to zero address\\\");\\n        admin = newAdmin;\\n\\n        emit AdminUpdated(msg.sender, newAdmin);\\n    }\\n}\\n\",\"keccak256\":\"0xe47c97c0e3edad2d1df3e664376a7bb46e1aaf51b4c4acc73c4a2cfdc747185f\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061091b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063c4d66de81161005b578063c4d66de81461010e578063cdbe75fe14610121578063cfed246b14610134578063f851a4401461015557600080fd5b8063149423501461008d578063704b6c02146100d357806396c914ff146100e85780639d85084f146100fb575b600080fd5b6100b661009b36600461067f565b6001602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100e66100e136600461067f565b610168565b005b6002546100b6906001600160a01b031681565b6100e661010936600461069c565b6101a7565b6100e661011c36600461067f565b6101ff565b6100e661012f36600461067f565b61027c565b61014761014236600461067f565b6102c8565b6040519081526020016100ca565b6000546100b6906001600160a01b031681565b6000546001600160a01b0316331461019b5760405162461bcd60e51b8152600401610192906106d5565b60405180910390fd5b6101a481610524565b50565b6000546001600160a01b031633146101d15760405162461bcd60e51b8152600401610192906106d5565b6001600160a01b03918216600090815260016020526040902080546001600160a01b03191691909216179055565b600061020b60016105cf565b90508015610227576000805460ff60a81b1916600160a81b1790555b61023082610524565b8015610278576000805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6000546001600160a01b031633146102a65760405162461bcd60e51b8152600401610192906106d5565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381811660009081526001602052604081205490911661036d576002546040516341976e0960e01b81526001600160a01b038481166004830152909116906341976e099060240160206040518083038186803b15801561032e57600080fd5b505afa158015610342573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036691906106fb565b90506103fd565b6001600160a01b03828116600081815260016020526040908190205490516341976e0960e01b81526004810192909252909116906341976e099060240160206040518083038186803b1580156103c257600080fd5b505afa1580156103d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fa91906106fb565b90505b6000811161044d5760405162461bcd60e51b815260206004820152601960248201527f496e76616c69642070726963652066726f6d206f7261636c65000000000000006044820152606401610192565b6000826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561048857600080fd5b505afa15801561049c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c09190610714565b60ff16905080600814156104d45750919050565b6008811115610504576104e860088261074d565b6104f390600a61084a565b6104fd9083610856565b9392505050565b61050f81600861074d565b61051a90600a61084a565b6104fd9083610875565b6001600160a01b0381166105845760405162461bcd60e51b815260206004820152602160248201527f43616e206e6f74207365742061646d696e20746f207a65726f206164647265736044820152607360f81b6064820152608401610192565b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f101b8081ff3b56bbf45deb824d86a3b0fd38b7e3dd42421105cf8abe9106db0b9190a350565b60008054600160a81b900460ff1615610618578160ff1660011480156105f45750303b155b6106105760405162461bcd60e51b815260040161019290610897565b506000919050565b60005460ff808416600160a01b90920416106106465760405162461bcd60e51b815260040161019290610897565b506000805460ff909216600160a01b0260ff60a01b19909216919091179055600190565b6001600160a01b03811681146101a457600080fd5b60006020828403121561069157600080fd5b81356104fd8161066a565b600080604083850312156106af57600080fd5b82356106ba8161066a565b915060208301356106ca8161066a565b809150509250929050565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b60006020828403121561070d57600080fd5b5051919050565b60006020828403121561072657600080fd5b815160ff811681146104fd57600080fd5b634e487b7160e01b600052601160045260246000fd5b60008282101561075f5761075f610737565b500390565b600181815b8085111561079f57816000190482111561078557610785610737565b8085161561079257918102915b93841c9390800290610769565b509250929050565b6000826107b657506001610844565b816107c357506000610844565b81600181146107d957600281146107e3576107ff565b6001915050610844565b60ff8411156107f4576107f4610737565b50506001821b610844565b5060208310610133831016604e8410600b8410161715610822575081810a610844565b61082c8383610764565b806000190482111561084057610840610737565b0290505b92915050565b60006104fd83836107a7565b600081600019048311821515161561087057610870610737565b500290565b60008261089257634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b60608201526080019056fea2646970667358221220e6ef2e70ec65c434b41bc2275ff44ead4edf7b37bc296723f3836a8d29d96ad164736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063c4d66de81161005b578063c4d66de81461010e578063cdbe75fe14610121578063cfed246b14610134578063f851a4401461015557600080fd5b8063149423501461008d578063704b6c02146100d357806396c914ff146100e85780639d85084f146100fb575b600080fd5b6100b661009b36600461067f565b6001602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100e66100e136600461067f565b610168565b005b6002546100b6906001600160a01b031681565b6100e661010936600461069c565b6101a7565b6100e661011c36600461067f565b6101ff565b6100e661012f36600461067f565b61027c565b61014761014236600461067f565b6102c8565b6040519081526020016100ca565b6000546100b6906001600160a01b031681565b6000546001600160a01b0316331461019b5760405162461bcd60e51b8152600401610192906106d5565b60405180910390fd5b6101a481610524565b50565b6000546001600160a01b031633146101d15760405162461bcd60e51b8152600401610192906106d5565b6001600160a01b03918216600090815260016020526040902080546001600160a01b03191691909216179055565b600061020b60016105cf565b90508015610227576000805460ff60a81b1916600160a81b1790555b61023082610524565b8015610278576000805460ff60a81b19169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6000546001600160a01b031633146102a65760405162461bcd60e51b8152600401610192906106d5565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381811660009081526001602052604081205490911661036d576002546040516341976e0960e01b81526001600160a01b038481166004830152909116906341976e099060240160206040518083038186803b15801561032e57600080fd5b505afa158015610342573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036691906106fb565b90506103fd565b6001600160a01b03828116600081815260016020526040908190205490516341976e0960e01b81526004810192909252909116906341976e099060240160206040518083038186803b1580156103c257600080fd5b505afa1580156103d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fa91906106fb565b90505b6000811161044d5760405162461bcd60e51b815260206004820152601960248201527f496e76616c69642070726963652066726f6d206f7261636c65000000000000006044820152606401610192565b6000826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561048857600080fd5b505afa15801561049c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c09190610714565b60ff16905080600814156104d45750919050565b6008811115610504576104e860088261074d565b6104f390600a61084a565b6104fd9083610856565b9392505050565b61050f81600861074d565b61051a90600a61084a565b6104fd9083610875565b6001600160a01b0381166105845760405162461bcd60e51b815260206004820152602160248201527f43616e206e6f74207365742061646d696e20746f207a65726f206164647265736044820152607360f81b6064820152608401610192565b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f101b8081ff3b56bbf45deb824d86a3b0fd38b7e3dd42421105cf8abe9106db0b9190a350565b60008054600160a81b900460ff1615610618578160ff1660011480156105f45750303b155b6106105760405162461bcd60e51b815260040161019290610897565b506000919050565b60005460ff808416600160a01b90920416106106465760405162461bcd60e51b815260040161019290610897565b506000805460ff909216600160a01b0260ff60a01b19909216919091179055600190565b6001600160a01b03811681146101a457600080fd5b60006020828403121561069157600080fd5b81356104fd8161066a565b600080604083850312156106af57600080fd5b82356106ba8161066a565b915060208301356106ca8161066a565b809150509250929050565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b60006020828403121561070d57600080fd5b5051919050565b60006020828403121561072657600080fd5b815160ff811681146104fd57600080fd5b634e487b7160e01b600052601160045260246000fd5b60008282101561075f5761075f610737565b500390565b600181815b8085111561079f57816000190482111561078557610785610737565b8085161561079257918102915b93841c9390800290610769565b509250929050565b6000826107b657506001610844565b816107c357506000610844565b81600181146107d957600281146107e3576107ff565b6001915050610844565b60ff8411156107f4576107f4610737565b50506001821b610844565b5060208310610133831016604e8410600b8410161715610822575081810a610844565b61082c8383610764565b806000190482111561084057610840610737565b0290505b92915050565b60006104fd83836107a7565b600081600019048311821515161561087057610870610737565b500290565b60008261089257634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b60608201526080019056fea2646970667358221220e6ef2e70ec65c434b41bc2275ff44ead4edf7b37bc296723f3836a8d29d96ad164736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fallbackDuetOracle()": {
        "notice": "fallback oracle for tokens which no oracle in duetOracleMapping"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9202,
        "contract": "contracts/DodoOracle.sol:DodoOracle",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6,
        "contract": "contracts/DodoOracle.sol:DodoOracle",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/DodoOracle.sol:DodoOracle",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2388,
        "contract": "contracts/DodoOracle.sol:DodoOracle",
        "label": "duetOracleMapping",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_contract(IDuetOracle)9054)"
      },
      {
        "astId": 2392,
        "contract": "contracts/DodoOracle.sol:DodoOracle",
        "label": "fallbackDuetOracle",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IDuetOracle)9054"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IDuetOracle)9054": {
        "encoding": "inplace",
        "label": "contract IDuetOracle",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_contract(IDuetOracle)9054)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract IDuetOracle)",
        "numberOfBytes": "32",
        "value": "t_contract(IDuetOracle)9054"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}