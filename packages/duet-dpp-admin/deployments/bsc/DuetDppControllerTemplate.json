{
  "address": "0x7E19936ef9Dee072897974e69783a9708Bd24a67",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "increaseShares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalShares",
          "type": "uint256"
        }
      ],
      "name": "BuyShares",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decreaseShares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalShares",
          "type": "uint256"
        }
      ],
      "name": "SellShares",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINIMUM_SUPPLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_BASE_TOKEN_",
      "outputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_CACHED_CHAIN_ID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_CACHED_DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_CACHED_THIS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_DPP_ADDRESS_",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_DPP_ADMIN_ADDRESS_",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_I_",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_K_",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_LP_FEE_RATE_",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_QUOTE_TOKEN_",
      "outputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_WETH_",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "baseInAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quoteInAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseMinAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quoteMinAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "flag",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "deadLine",
          "type": "uint256"
        }
      ],
      "name": "addDuetDppLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseAdjustedInAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quoteAdjustedInAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "addressToShortString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newBaseR_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newQuoteR_",
          "type": "uint256"
        }
      ],
      "name": "changeMinRes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "changeOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newI",
          "type": "uint256"
        }
      ],
      "name": "disableOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dppAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dppAdminAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "weth",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minBaseReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minQuoteReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shareAmount_",
          "type": "uint256"
        }
      ],
      "name": "recommendBaseAndQuote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "baseAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quoteAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quoteInAmount_",
          "type": "uint256"
        }
      ],
      "name": "recommendBaseInAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "baseAdjustedInAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quoteAdjustedInAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "baseInAmount_",
          "type": "uint256"
        }
      ],
      "name": "recommendQuoteInAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "baseAdjustedInAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quoteAdjustedInAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shareAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseMinAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quoteMinAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "flag",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "deadLine",
          "type": "uint256"
        }
      ],
      "name": "removeDuetDppLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseOutAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quoteOutAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp_",
          "type": "uint256"
        }
      ],
      "name": "setFreezeTimestamp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newLpFeeRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newI",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newK",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minBaseReserve_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minQuoteReserve_",
          "type": "uint256"
        }
      ],
      "name": "tuneParameters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newI",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minBaseReserve_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minQuoteReserve_",
          "type": "uint256"
        }
      ],
      "name": "tunePrice",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xcf69c5ff9b7026e969979bb02441c4acc95c31db5d682de37802798266401b6a",
  "receipt": {
    "to": null,
    "from": "0x00d7A6a2F161d3f4971a3d1B071Ef55b284FD3Bf",
    "contractAddress": "0x7E19936ef9Dee072897974e69783a9708Bd24a67",
    "transactionIndex": 108,
    "gasUsed": "3730356",
    "logsBloom": "0x
    "blockHash": "0x16dd14da20ee7e92557cdc47557ec9e24c524704a463577ca7119cbb06ef8027",
    "transactionHash": "0xcf69c5ff9b7026e969979bb02441c4acc95c31db5d682de37802798266401b6a",
    "logs": [],
    "blockNumber": 22364399,
    "cumulativeGasUsed": "11805196",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "010d19d2824a92bd25be986df93e8d50",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"increaseShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"}],\"name\":\"BuyShares\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decreaseShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"}],\"name\":\"SellShares\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_BASE_TOKEN_\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_CACHED_CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_CACHED_DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_CACHED_THIS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DPP_ADDRESS_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_DPP_ADMIN_ADDRESS_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_I_\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_K_\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_LP_FEE_RATE_\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_QUOTE_TOKEN_\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_WETH_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseInAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteInAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseMinAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteMinAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"deadLine\",\"type\":\"uint256\"}],\"name\":\"addDuetDppLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseAdjustedInAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteAdjustedInAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addressToShortString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBaseR_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newQuoteR_\",\"type\":\"uint256\"}],\"name\":\"changeMinRes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"changeOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newI\",\"type\":\"uint256\"}],\"name\":\"disableOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dppAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dppAdminAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBaseReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minQuoteReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shareAmount_\",\"type\":\"uint256\"}],\"name\":\"recommendBaseAndQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quoteInAmount_\",\"type\":\"uint256\"}],\"name\":\"recommendBaseInAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseAdjustedInAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteAdjustedInAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseInAmount_\",\"type\":\"uint256\"}],\"name\":\"recommendQuoteInAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseAdjustedInAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteAdjustedInAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shareAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseMinAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteMinAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"deadLine\",\"type\":\"uint256\"}],\"name\":\"removeDuetDppLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseOutAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteOutAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp_\",\"type\":\"uint256\"}],\"name\":\"setFreezeTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLpFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newI\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newK\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBaseReserve_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minQuoteReserve_\",\"type\":\"uint256\"}],\"name\":\"tuneParameters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newI\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBaseReserve_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minQuoteReserve_\",\"type\":\"uint256\"}],\"name\":\"tunePrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"So. Lu\",\"kind\":\"dev\",\"methods\":{\"addDuetDppLiquidity(uint256,uint256,uint256,uint256,uint8,uint256)\":{\"params\":{\"baseInAmount\":\"users declare adding base amount\",\"baseMinAmount\":\"slippage protection, baseInAmount *(1 - slippage)\",\"deadLine\":\"time limit\",\"flag\":\"describe token type, 0 - ERC20, 1 - baseInETH, 2 - quoteInETH\",\"quoteInAmount\":\"users declare adding quote amount\",\"quoteMinAmount\":\"slippage protection, quoteInAmount *(1 - slippage)\"}},\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens that an owner _ALLOWED_ to a spender.\",\"params\":{\"owner\":\"address The address which owns the funds.\",\"spender\":\"address The address which will spend the funds.\"},\"returns\":{\"_0\":\"A uint256 specifying the amount of tokens still available for the spender.\"}},\"approve(address,uint256)\":{\"details\":\"Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\",\"params\":{\"amount\":\"The amount of tokens to be spent.\",\"spender\":\"The address which will spend the funds.\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"owner\":\"The address to query the the balance of.\"},\"returns\":{\"balance\":\"An uint256 representing the amount owned by the passed address.\"}},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"removeDuetDppLiquidity(uint256,uint256,uint256,uint8,uint256)\":{\"params\":{\"baseMinAmount\":\"slippage protection, baseOutAmount *(1 - slippage)\",\"deadLine\":\"time limit\",\"flag\":\"describe token type, 0 - ERC20, 3 - baseOutETH, 4 - quoteOutETH\",\"quoteMinAmount\":\"slippage protection, quoteOutAmount *(1 - slippage)\",\"shareAmount\":\"users withdraw lp amount\"}},\"transfer(address,uint256)\":{\"details\":\"transfer token for a specified address\",\"params\":{\"amount\":\"The amount to be transferred.\",\"to\":\"The address to transfer to.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfer tokens from one address to another\",\"params\":{\"amount\":\"uint256 the amount of tokens to be transferred\",\"from\":\"address The address which you want to send tokens from\",\"to\":\"address The address which you want to transfer to\"}},\"tuneParameters(uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"minBaseReserve_\":\"for frontrun protection,\",\"minQuoteReserve_\":\"for frontrun protection\",\"newI\":\"new price I of dpp pool, unit is 10 ** [18+ quote - base]\",\"newK\":\"a param for swap curve, limit in [0\\uff0c10**18], unit is  10**18\\uff0c0 is stable price curve\\uff0c10**18 is bonding curve like uni\",\"newLpFeeRate\":\"lp fee rate for dpp pool, unit is 10**18, range in [0, 10**18],eg 3,00000,00000,00000 = 0.003 = 0.3%\"}},\"tunePrice(uint256,uint256,uint256)\":{\"params\":{\"minBaseReserve_\":\"for frontrun protection,\",\"minQuoteReserve_\":\"for frontrun protection\",\"newI\":\"new price I of dpp pool, unit is 10 ** [18+ quote - base]\"}}},\"title\":\"DppController\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addDuetDppLiquidity(uint256,uint256,uint256,uint256,uint8,uint256)\":{\"notice\":\"add dpp liquidity\"},\"changeMinRes(uint256,uint256)\":{\"notice\":\"change default minBaseReserve and minQuoteReserve\"},\"changeOracle(address)\":{\"notice\":\"change oracle address\"},\"disableOracle(uint256)\":{\"notice\":\"disable oracle and set new I\"},\"minBaseReserve()\":{\"notice\":\"minBaseReserve for frontrun protection, reset function default param, no use minQuoteReserve for frontrun protection, reset function default param, no use\"},\"recommendBaseAndQuote(uint256)\":{\"notice\":\"enter lp amount  cal baseAmount and quoteAmount\"},\"recommendBaseInAmount(uint256)\":{\"notice\":\"enter quoteInAmount cal outBaseAmount, when initialize, this function will return 0, just support recommendQuoteInAmount\"},\"recommendQuoteInAmount(uint256)\":{\"notice\":\"enter baseInAmount cal outAmount, when initialize, just support query quoteInAmount\"},\"removeDuetDppLiquidity(uint256,uint256,uint256,uint8,uint256)\":{\"notice\":\"remove dpp liquidity\"},\"setFreezeTimestamp(uint256)\":{\"notice\":\"use for freeze dppAdmin to change params, while swap is normal\"},\"tuneParameters(uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"change params for dpp pool\"},\"tunePrice(uint256,uint256,uint256)\":{\"notice\":\"change price I\"}},\"notice\":\"Use this contract to control dpp state(onlyAdmin), withdraw and deposit lps\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DuetDPPController.sol\":\"DuetDppController\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/DuetDPPController.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { UniversalERC20 } from \\\"./lib/UniversalERC20.sol\\\";\\nimport { DecimalMath } from \\\"./lib/DecimalMath.sol\\\";\\n\\nimport { Adminable } from \\\"./lib/Adminable.sol\\\";\\nimport { IDODOV2 } from \\\"./interfaces/IDODOV2.sol\\\";\\nimport { IDPPOracleAdmin } from \\\"./interfaces/IDPPOracleAdmin.sol\\\";\\nimport { IDPPOracle } from \\\"./interfaces/IDPPOracle.sol\\\";\\nimport { IWETH } from \\\"./interfaces/IWETH.sol\\\";\\nimport { IOracle } from \\\"./external/interfaces/IOracle.sol\\\";\\n\\nimport { DuetDppLpFunding } from \\\"./DuetDppLpFunding.sol\\\";\\n\\n/// @title DppController\\n/// @author So. Lu\\n/// @notice Use this contract to control dpp state(onlyAdmin), withdraw and deposit lps\\ncontract DuetDppController is Adminable, DuetDppLpFunding {\\n    using SafeMath for uint256;\\n    using UniversalERC20 for IERC20Metadata;\\n    using SafeERC20 for IERC20Metadata;\\n\\n    address public _WETH_;\\n    bool flagInit = false;\\n\\n    /// minBaseReserve for frontrun protection, reset function default param, no use\\n    /// minQuoteReserve for frontrun protection, reset function default param, no use\\n    uint256 public minBaseReserve = 0;\\n    uint256 public minQuoteReserve = 0;\\n\\n    modifier judgeExpired(uint256 deadLine) {\\n        require(deadLine >= block.timestamp, \\\"Duet Dpp Controller: EXPIRED\\\");\\n        _;\\n    }\\n\\n    modifier notInitialized() {\\n        require(flagInit == false, \\\"have been initialized\\\");\\n        flagInit = true;\\n        _;\\n    }\\n\\n    fallback() external payable {}\\n\\n    receive() external payable {}\\n\\n    function init(\\n        address admin,\\n        address dppAddress,\\n        address dppAdminAddress,\\n        address weth\\n    ) external notInitialized {\\n        // \\u6539init\\n        _WETH_ = weth;\\n        _DPP_ADDRESS_ = dppAddress;\\n        _DPP_ADMIN_ADDRESS_ = dppAdminAddress;\\n        _setAdmin(admin);\\n\\n        // load pool info\\n        _BASE_TOKEN_ = IERC20Metadata(IDODOV2(_DPP_ADDRESS_)._BASE_TOKEN_());\\n        _QUOTE_TOKEN_ = IERC20Metadata(IDODOV2(_DPP_ADDRESS_)._QUOTE_TOKEN_());\\n        _updateDppInfo();\\n\\n        string memory connect = \\\"-\\\";\\n        string memory suffix = \\\"DuetLP\\\";\\n\\n        name = string(abi.encodePacked(suffix, _BASE_TOKEN_.symbol(), connect, _QUOTE_TOKEN_.symbol()));\\n        symbol = \\\"Duet-LP\\\";\\n        decimals = _BASE_TOKEN_.decimals();\\n\\n        // ============================== Permit ====================================\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_THIS = address(this);\\n\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        bytes32 _DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                // keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\n                0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f,\\n                keccak256(bytes(name)),\\n                keccak256(bytes(\\\"1\\\")),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n        _CACHED_DOMAIN_SEPARATOR = _DOMAIN_SEPARATOR;\\n        // ==========================================================================\\n    }\\n\\n    // ========= change DPP Oracle and Parameters , onlyAdmin ==========\\n\\n    /// @notice change price I\\n    /// @param newI new price I of dpp pool, unit is 10 ** [18+ quote - base]\\n    /// @param minBaseReserve_ for frontrun protection,\\n    /// @param minQuoteReserve_ for frontrun protection\\n    function tunePrice(\\n        uint256 newI,\\n        uint256 minBaseReserve_,\\n        uint256 minQuoteReserve_\\n    ) external onlyAdmin returns (bool) {\\n        IDPPOracleAdmin(_DPP_ADMIN_ADDRESS_).tunePrice(newI, minBaseReserve_, minQuoteReserve_);\\n        _updateDppInfo();\\n        return true;\\n    }\\n\\n    /// @notice change params for dpp pool\\n    /// @param newLpFeeRate lp fee rate for dpp pool, unit is 10**18, range in [0, 10**18],eg 3,00000,00000,00000 = 0.003 = 0.3%\\n    /// @param newI new price I of dpp pool, unit is 10 ** [18+ quote - base]\\n    /// @param newK a param for swap curve, limit in [0\\uff0c10**18], unit is  10**18\\uff0c0 is stable price curve\\uff0c10**18 is bonding curve like uni\\n    /// @param minBaseReserve_ for frontrun protection,\\n    /// @param minQuoteReserve_ for frontrun protection\\n    function tuneParameters(\\n        uint256 newLpFeeRate,\\n        uint256 newI,\\n        uint256 newK,\\n        uint256 minBaseReserve_,\\n        uint256 minQuoteReserve_\\n    ) external onlyAdmin returns (bool) {\\n        IDPPOracleAdmin(_DPP_ADMIN_ADDRESS_).tuneParameters(\\n            newLpFeeRate,\\n            newI,\\n            newK,\\n            minBaseReserve_,\\n            minQuoteReserve_\\n        );\\n        _updateDppInfo();\\n        return true;\\n    }\\n\\n    /// @notice change oracle address\\n    function changeOracle(address newOracle) external onlyAdmin {\\n        require(IOracle(newOracle).prices(address(_BASE_TOKEN_)) > 0, \\\"Duet Dpp Controller: invalid oracle price\\\");\\n        IDPPOracleAdmin(_DPP_ADMIN_ADDRESS_).changeOracle(newOracle);\\n    }\\n\\n    function enableOracle() external onlyAdmin {\\n        address _O_ = IDPPOracle(_DPP_ADDRESS_)._O_();\\n        require(IOracle(_O_).prices(address(_BASE_TOKEN_)) > 0, \\\"Duet Dpp Controller: invalid oracle price\\\");\\n        IDPPOracleAdmin(_DPP_ADMIN_ADDRESS_).enableOracle();\\n    }\\n\\n    /// @notice disable oracle and set new I\\n    function disableOracle(uint256 newI) external onlyAdmin {\\n        require(newI > 0, \\\"Duet Dpp Controller: invaild new I\\\");\\n        IDPPOracleAdmin(_DPP_ADMIN_ADDRESS_).disableOracle(newI);\\n    }\\n\\n    /// @notice use for freeze dppAdmin to change params, while swap is normal\\n    function setFreezeTimestamp(uint256 timestamp_) external onlyAdmin {\\n        IDPPOracleAdmin(_DPP_ADMIN_ADDRESS_).setFreezeTimestamp(timestamp_);\\n    }\\n\\n    /// @notice change default minBaseReserve and minQuoteReserve\\n    function changeMinRes(uint256 newBaseR_, uint256 newQuoteR_) external onlyAdmin {\\n        minBaseReserve = newBaseR_;\\n        minQuoteReserve = newQuoteR_;\\n    }\\n\\n    // =========== deal with LP ===============\\n\\n    /// @notice add dpp liquidity\\n    /// @param baseInAmount users declare adding base amount\\n    /// @param quoteInAmount users declare adding quote amount\\n    /// @param baseMinAmount slippage protection, baseInAmount *(1 - slippage)\\n    /// @param quoteMinAmount slippage protection, quoteInAmount *(1 - slippage)\\n    /// @param flag describe token type, 0 - ERC20, 1 - baseInETH, 2 - quoteInETH\\n    /// @param deadLine time limit\\n    function addDuetDppLiquidity(\\n        uint256 baseInAmount,\\n        uint256 quoteInAmount,\\n        uint256 baseMinAmount,\\n        uint256 quoteMinAmount,\\n        uint8 flag,\\n        uint256 deadLine\\n    )\\n        external\\n        payable\\n        nonReentrant\\n        judgeExpired(deadLine)\\n        returns (\\n            uint256 shares,\\n            uint256 baseAdjustedInAmount,\\n            uint256 quoteAdjustedInAmount\\n        )\\n    {\\n        // oracle check\\n        address _O_ = IDPPOracle(_DPP_ADDRESS_)._O_();\\n        require(IOracle(_O_).prices(address(_BASE_TOKEN_)) > 0, \\\"Duet Dpp Controller: invalid oracle price\\\");\\n        require(IDPPOracle(_DPP_ADDRESS_)._IS_ORACLE_ENABLED(), \\\"Duet Dpp Controller: oracle dpp disabled\\\");\\n\\n        (baseAdjustedInAmount, quoteAdjustedInAmount) = _adjustedAddLiquidityInAmount(baseInAmount, quoteInAmount, 3);\\n        require(\\n            baseAdjustedInAmount >= baseMinAmount && quoteAdjustedInAmount >= quoteMinAmount,\\n            \\\"Duet Dpp Controller: deposit amount is not enough\\\"\\n        );\\n\\n        _deposit(msg.sender, _DPP_ADDRESS_, address(_BASE_TOKEN_), baseAdjustedInAmount, flag == 1);\\n        _deposit(msg.sender, _DPP_ADDRESS_, address(_QUOTE_TOKEN_), quoteAdjustedInAmount, flag == 2);\\n\\n        //mint lp tokens to users\\n\\n        (shares, , ) = _buyShares(msg.sender);\\n        // reset dpp pool\\n        require(\\n            IDODOV2(IDODOV2(_DPP_ADDRESS_)._OWNER_()).reset(\\n                address(this),\\n                _LP_FEE_RATE_,\\n                _I_,\\n                _K_,\\n                0, //baseOutAmount, add liquidity so outAmount is 0\\n                0, //quoteOutAmount, add liquidity so outAmount is 0\\n                minBaseReserve, // minBaseReserve\\n                minQuoteReserve // minQuoteReserve\\n            ),\\n            \\\"Duet Dpp Controller: Reset Failed\\\"\\n        );\\n\\n        // refund dust eth\\n        if (flag == 1 && msg.value > baseAdjustedInAmount) {\\n            payable(msg.sender).transfer(msg.value - baseAdjustedInAmount);\\n        }\\n        if (flag == 2 && msg.value > quoteAdjustedInAmount) {\\n            payable(msg.sender).transfer(msg.value - quoteAdjustedInAmount);\\n        }\\n    }\\n\\n    /// @notice remove dpp liquidity\\n    /// @param shareAmount users withdraw lp amount\\n    /// @param baseMinAmount slippage protection, baseOutAmount *(1 - slippage)\\n    /// @param quoteMinAmount slippage protection, quoteOutAmount *(1 - slippage)\\n    /// @param flag describe token type, 0 - ERC20, 3 - baseOutETH, 4 - quoteOutETH\\n    /// @param deadLine time limit\\n    function removeDuetDppLiquidity(\\n        uint256 shareAmount,\\n        uint256 baseMinAmount,\\n        uint256 quoteMinAmount,\\n        uint8 flag,\\n        uint256 deadLine\\n    )\\n        external\\n        nonReentrant\\n        judgeExpired(deadLine)\\n        returns (\\n            uint256 shares,\\n            uint256 baseOutAmount,\\n            uint256 quoteOutAmount\\n        )\\n    {\\n        // oracle check\\n        address _O_ = IDPPOracle(_DPP_ADDRESS_)._O_();\\n        require(IOracle(_O_).prices(address(_BASE_TOKEN_)) > 0, \\\"Duet Dpp Controller: invalid oracle price\\\");\\n        require(IDPPOracle(_DPP_ADDRESS_)._IS_ORACLE_ENABLED(), \\\"Duet Dpp Controller: oracle dpp disabled\\\");\\n\\n        //mint lp tokens to users\\n        (baseOutAmount, quoteOutAmount) = _sellShares(shareAmount, msg.sender, baseMinAmount, quoteMinAmount);\\n        // reset dpp pool\\n        require(\\n            IDODOV2(IDODOV2(_DPP_ADDRESS_)._OWNER_()).reset(\\n                address(this),\\n                _LP_FEE_RATE_,\\n                _I_,\\n                _K_,\\n                baseOutAmount,\\n                quoteOutAmount,\\n                minBaseReserve,\\n                minQuoteReserve\\n            ),\\n            \\\"Duet Dpp Controller: Reset Failed\\\"\\n        );\\n\\n        _withdraw(payable(msg.sender), address(_BASE_TOKEN_), baseOutAmount, flag == 3);\\n        _withdraw(payable(msg.sender), address(_QUOTE_TOKEN_), quoteOutAmount, flag == 4);\\n        shares = shareAmount;\\n    }\\n\\n    function _adjustedAddLiquidityInAmount(\\n        uint256 baseInAmount,\\n        uint256 quoteInAmount,\\n        uint8 flag // flag=0 is baseIn fixed, flag=1 is quoteIn fixed\\uff0c flag = 3 is naturally compare\\n    ) internal view returns (uint256 baseAdjustedInAmount, uint256 quoteAdjustedInAmount) {\\n        (uint256 baseReserve, uint256 quoteReserve) = IDODOV2(_DPP_ADDRESS_).getVaultReserve();\\n        if (quoteReserve == 0 && baseReserve == 0) {\\n            // when initialize, just support query quoteInAmount\\n            require(msg.sender == admin, \\\"Duet Dpp Controller: Must initialized by admin\\\");\\n            // Must initialized by admin\\n            baseAdjustedInAmount = baseInAmount;\\n            if (flag != 3) {\\n                (uint256 i, , , , , , ) = IDODOV2(_DPP_ADDRESS_).getPMMStateForCall();\\n                quoteAdjustedInAmount = DecimalMath.mulFloor(baseInAmount, i);\\n            } else {\\n                quoteAdjustedInAmount = quoteInAmount;\\n            }\\n        }\\n        if (quoteReserve == 0 && baseReserve > 0) {\\n            baseAdjustedInAmount = baseInAmount;\\n            quoteAdjustedInAmount = 0;\\n        }\\n        if (quoteReserve > 0 && baseReserve > 0) {\\n            uint256 baseInFix = (quoteInAmount * baseReserve) / quoteReserve;\\n            uint256 quoteInFix = (baseInAmount * quoteReserve) / baseReserve;\\n            if ((flag == 3 && quoteInFix <= quoteInAmount) || flag == 0) {\\n                baseAdjustedInAmount = baseInAmount;\\n                quoteAdjustedInAmount = quoteInFix;\\n            } else {\\n                quoteAdjustedInAmount = quoteInAmount;\\n                baseAdjustedInAmount = baseInFix;\\n            }\\n        }\\n    }\\n\\n    /// @notice enter baseInAmount cal outAmount, when initialize, just support query quoteInAmount\\n    function recommendQuoteInAmount(uint256 baseInAmount_)\\n        external\\n        view\\n        returns (uint256 baseAdjustedInAmount, uint256 quoteAdjustedInAmount)\\n    {\\n        return _adjustedAddLiquidityInAmount(baseInAmount_, 0, 0);\\n    }\\n\\n    /// @notice enter quoteInAmount cal outBaseAmount, when initialize, this function will return 0, just support recommendQuoteInAmount\\n    function recommendBaseInAmount(uint256 quoteInAmount_)\\n        external\\n        view\\n        returns (uint256 baseAdjustedInAmount, uint256 quoteAdjustedInAmount)\\n    {\\n        return _adjustedAddLiquidityInAmount(0, quoteInAmount_, 1);\\n    }\\n\\n    /// @notice enter lp amount  cal baseAmount and quoteAmount\\n    function recommendBaseAndQuote(uint256 shareAmount_)\\n        external\\n        view\\n        returns (uint256 baseAmount, uint256 quoteAmount)\\n    {\\n        (uint256 baseBalance, uint256 quoteBalance) = IDODOV2(_DPP_ADDRESS_).getVaultReserve();\\n        uint256 totalShares = totalSupply;\\n\\n        baseAmount = baseBalance.mul(shareAmount_).div(totalShares);\\n        quoteAmount = quoteBalance.mul(shareAmount_).div(totalShares);\\n    }\\n\\n    // ================= internal ====================\\n\\n    function _updateDppInfo() internal {\\n        _LP_FEE_RATE_ = IDODOV2(_DPP_ADDRESS_)._LP_FEE_RATE_();\\n        _K_ = IDODOV2(_DPP_ADDRESS_)._K_();\\n        _I_ = IDODOV2(_DPP_ADDRESS_)._I_();\\n    }\\n\\n    function _deposit(\\n        address from,\\n        address to,\\n        address token,\\n        uint256 amount,\\n        bool isETH\\n    ) internal {\\n        if (isETH) {\\n            if (amount > 0) {\\n                require(msg.value >= amount, \\\"ETH_VALUE_WRONG\\\");\\n                // case:msg.value > adjustAmount\\n                IWETH(_WETH_).deposit{ value: amount }();\\n                if (to != address(this)) SafeERC20.safeTransfer(IERC20Metadata(_WETH_), to, amount);\\n            }\\n        } else {\\n            if (amount > 0) {\\n                IERC20Metadata(token).safeTransferFrom(from, to, amount);\\n            }\\n        }\\n    }\\n\\n    function _withdraw(\\n        address payable to,\\n        address token,\\n        uint256 amount,\\n        bool isETH\\n    ) internal {\\n        if (isETH) {\\n            if (amount > 0) {\\n                IWETH(_WETH_).withdraw(amount);\\n                to.transfer(amount);\\n            }\\n        } else {\\n            if (amount > 0) {\\n                IERC20Metadata(token).safeTransfer(to, amount);\\n            }\\n        }\\n    }\\n\\n    // =================================================\\n\\n    function addressToShortString(address _addr) public pure returns (string memory) {\\n        bytes32 value = bytes32(uint256(uint160(_addr)));\\n        bytes memory alphabet = \\\"0123456789abcdef\\\";\\n\\n        bytes memory str = new bytes(8);\\n        for (uint256 i = 0; i < 4; i++) {\\n            str[i * 2] = alphabet[uint8(value[i + 12] >> 4)];\\n            str[1 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];\\n        }\\n        return string(str);\\n    }\\n}\\n\",\"keccak256\":\"0x568cfc9c4f1a7afb85f3cb4f22513f9a2bd23c4972579fb43d0919777029a9d7\",\"license\":\"GPL-3.0\"},\"contracts/DuetDppERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { DecimalMath } from \\\"./lib/DecimalMath.sol\\\";\\nimport { DuetDppStorage } from \\\"./DuetDppStorage.sol\\\";\\n\\n/// @title DppLp\\n/// @author So. Lu\\n/// @notice lp token's method, the same with erc20 tokens\\ncontract DuetDppERC20 is DuetDppStorage {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // ============ Events ============\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    event Mint(address indexed user, uint256 value);\\n\\n    event Burn(address indexed user, uint256 value);\\n\\n    // ============ Shares (ERC20) ============\\n\\n    /**\\n     * @dev transfer token for a specified address\\n     * @param to The address to transfer to.\\n     * @param amount The amount to be transferred.\\n     */\\n    function transfer(address to, uint256 amount) public returns (bool) {\\n        require(amount <= _SHARES_[msg.sender], \\\"BALANCE_NOT_ENOUGH\\\");\\n\\n        _SHARES_[msg.sender] = _SHARES_[msg.sender].sub(amount);\\n        _SHARES_[to] = _SHARES_[to].add(amount);\\n        emit Transfer(msg.sender, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Gets the balance of the specified address.\\n     * @param owner The address to query the the balance of.\\n     * @return balance An uint256 representing the amount owned by the passed address.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance) {\\n        return _SHARES_[owner];\\n    }\\n\\n    /**\\n     * @dev Transfer tokens from one address to another\\n     * @param from address The address which you want to send tokens from\\n     * @param to address The address which you want to transfer to\\n     * @param amount uint256 the amount of tokens to be transferred\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public returns (bool) {\\n        require(amount <= _SHARES_[from], \\\"BALANCE_NOT_ENOUGH\\\");\\n        require(amount <= _ALLOWED_[from][msg.sender], \\\"ALLOWANCE_NOT_ENOUGH\\\");\\n\\n        _SHARES_[from] = _SHARES_[from].sub(amount);\\n        _SHARES_[to] = _SHARES_[to].add(amount);\\n        _ALLOWED_[from][msg.sender] = _ALLOWED_[from][msg.sender].sub(amount);\\n        emit Transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n     * @param spender The address which will spend the funds.\\n     * @param amount The amount of tokens to be spent.\\n     */\\n    function approve(address spender, uint256 amount) public returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        address owner = msg.sender;\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        address owner = msg.sender;\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"Duet_ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) private {\\n        _ALLOWED_[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Function to check the amount of tokens that an owner _ALLOWED_ to a spender.\\n     * @param owner address The address which owns the funds.\\n     * @param spender address The address which will spend the funds.\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\n     */\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n        return _ALLOWED_[owner][spender];\\n    }\\n\\n    function _mint(address user, uint256 value) internal {\\n        require(value > 1000, \\\"MINT_INVALID\\\");\\n        _SHARES_[user] = _SHARES_[user].add(value);\\n        totalSupply = totalSupply.add(value);\\n        emit Mint(user, value);\\n        emit Transfer(address(0), user, value);\\n    }\\n\\n    function _burn(address user, uint256 value) internal {\\n        _SHARES_[user] = _SHARES_[user].sub(value);\\n        totalSupply = totalSupply.sub(value);\\n        emit Burn(user, value);\\n        emit Transfer(user, address(0), value);\\n    }\\n\\n    // ============================ Permit ======================================\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"Duet_LP: EXPIRED\\\");\\n        bytes32 _DOMAIN_SEPARATOR = _domainSeparatorV4();\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                _DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"Duet_LP: INVALID_SIGNATURE\\\");\\n        _approve(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            bytes32 _DOMAIN_SEPARATOR = keccak256(\\n                abi.encode(\\n                    // keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\n                    0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f,\\n                    keccak256(bytes(name)),\\n                    keccak256(bytes(\\\"1\\\")),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n            return _DOMAIN_SEPARATOR;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2977fbccacb99fc5239ea0510cf716f24f56a1a6f1cc4253c9023630d541c110\",\"license\":\"GPL-3.0\"},\"contracts/DuetDppLpFunding.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport { DecimalMath } from \\\"./lib/DecimalMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { IDODOV2 } from \\\"./interfaces/IDODOV2.sol\\\";\\nimport { DuetDppERC20 } from \\\"./DuetDppERC20.sol\\\";\\n\\n/// @title DppLpFunding\\n/// @author So. Lu\\n/// @notice For buy lps and sell lps\\ncontract DuetDppLpFunding is DuetDppERC20, ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    uint256 public constant MINIMUM_SUPPLY = 10**3 + 1;\\n    // ============ Events ============\\n\\n    event BuyShares(address to, uint256 increaseShares, uint256 totalShares);\\n\\n    event SellShares(address payer, address to, uint256 decreaseShares, uint256 totalShares);\\n\\n    // ============ Buy & Sell Shares ============\\n\\n    // buy shares [round down]\\n    function _buyShares(address to)\\n        internal\\n        returns (\\n            uint256 shares,\\n            uint256 baseInput,\\n            uint256 quoteInput\\n        )\\n    {\\n        uint256 baseBalance = _BASE_TOKEN_.balanceOf(_DPP_ADDRESS_);\\n        uint256 quoteBalance = _QUOTE_TOKEN_.balanceOf(_DPP_ADDRESS_);\\n        (uint256 baseReserve, uint256 quoteReserve) = IDODOV2(_DPP_ADDRESS_).getVaultReserve();\\n\\n        baseInput = baseBalance.sub(baseReserve);\\n        quoteInput = quoteBalance.sub(quoteReserve);\\n        require(baseInput > 0, \\\"NO_BASE_INPUT\\\");\\n\\n        // Round down when withdrawing. Therefore, never be a situation occuring balance is 0 but totalsupply is not 0\\n        // But May Happen\\uff0creserve >0 But totalSupply = 0\\n        if (totalSupply == 0) {\\n            // case 1. initial supply\\n            require(baseBalance >= 10**3, \\\"INSUFFICIENT_LIQUIDITY_MINED\\\");\\n            _mint(address(0), MINIMUM_SUPPLY);\\n            shares = baseBalance.sub(MINIMUM_SUPPLY); // \\u4ee5\\u514d\\u51fa\\u73b0balance\\u5f88\\u5927\\u4f46shares\\u5f88\\u5c0f\\u7684\\u60c5\\u51b5\\n        } else if (baseReserve > 0 && quoteReserve == 0) {\\n            // case 2. supply when quote reserve is 0\\n            shares = baseInput.mul(totalSupply).div(baseReserve);\\n        } else if (baseReserve > 0 && quoteReserve > 0) {\\n            // case 3. normal case\\n            uint256 baseInputShare = (baseInput * totalSupply) / baseReserve;\\n            uint256 quoteInputShare = (quoteInput * totalSupply) / quoteReserve;\\n            shares = baseInputShare < quoteInputShare ? baseInputShare : quoteInputShare;\\n        }\\n        _mint(to, shares);\\n        emit BuyShares(to, shares, _SHARES_[to]);\\n    }\\n\\n    // sell shares [round down]\\n    function _sellShares(\\n        uint256 shareAmount,\\n        address to,\\n        uint256 baseMinAmount,\\n        uint256 quoteMinAmount\\n    ) internal returns (uint256 baseAmount, uint256 quoteAmount) {\\n        require(shareAmount <= _SHARES_[to], \\\"Duet_LP_NOT_ENOUGH\\\");\\n        (uint256 baseBalance, uint256 quoteBalance) = IDODOV2(_DPP_ADDRESS_).getVaultReserve();\\n        uint256 totalShares = totalSupply;\\n\\n        baseAmount = baseBalance.mul(shareAmount).div(totalShares);\\n        quoteAmount = quoteBalance.mul(shareAmount).div(totalShares);\\n\\n        require(\\n            baseAmount >= baseMinAmount && quoteAmount >= quoteMinAmount,\\n            \\\"Duet Dpp Controller: WITHDRAW_NOT_ENOUGH\\\"\\n        );\\n\\n        _burn(to, shareAmount);\\n\\n        emit SellShares(to, to, shareAmount, _SHARES_[to]);\\n    }\\n}\\n\",\"keccak256\":\"0xbaed9fdfe15c6375a6a7147675fe3d56d5d4671264703b5fc6ef39db58230f19\",\"license\":\"GPL-3.0\"},\"contracts/DuetDppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/// @title DppStorage\\n/// @author So. Lu\\n/// @notice record dpp state\\ncontract DuetDppStorage {\\n    // ============ pool info ===============\\n    address public _DPP_ADDRESS_;\\n    address public _DPP_ADMIN_ADDRESS_;\\n    IERC20Metadata public _BASE_TOKEN_;\\n    IERC20Metadata public _QUOTE_TOKEN_;\\n    uint64 public _LP_FEE_RATE_; // lp fee rate for dpp pool, unit is 10**18, range in [0, 10**18],eg 3,00000,00000,00000 = 0.003 = 0.3%\\n    uint128 public _I_; // base to quote price, decimals 18 - baseTokenDecimals+ quoteTokenDecimals. If use oracle, i set here wouldn't be used.\\n    uint64 public _K_; // a param for swap curve, limit in [0\\uff0c10**18], unit is  10**18\\uff0c0 is stable price curve\\uff0c10**18 is bonding curve like uni\\n\\n    // ============ Shares (ERC20) ============\\n\\n    string public symbol;\\n    uint8 public decimals;\\n    string public name;\\n\\n    uint256 public totalSupply;\\n    mapping(address => uint256) internal _SHARES_;\\n    mapping(address => mapping(address => uint256)) internal _ALLOWED_;\\n\\n    // ================= Permit ======================\\n\\n    uint256 public _CACHED_CHAIN_ID;\\n    bytes32 public _CACHED_DOMAIN_SEPARATOR;\\n    address public _CACHED_THIS;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint256) public nonces;\\n}\\n\",\"keccak256\":\"0x0a4db96d618c7ece2173f3ba5292e8f8bcf30cde37a1dabbb8946d9210c92948\",\"license\":\"GPL-3.0\"},\"contracts/external/interfaces/IOracle.sol\":{\"content\":\"/*\\n\\n    Copyright 2021 DODO ZOO.\\n    SPDX-License-Identifier: Apache-2.0\\n\\n*/\\n\\npragma solidity 0.8.9;\\n\\ninterface IOracle {\\n    function getPrice(address base)\\n        external\\n        view\\n        returns (\\n            uint256 latestPrice,\\n            bool isValid,\\n            bool isStale,\\n            uint256 timestamp\\n        );\\n\\n    function prices(address base) external view returns (uint256);\\n\\n    function isFeasible(address base) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe2a09f323818e02ff9a8580469a66149c7201a123aede39c3d9cc804384a5d89\",\"license\":\"Apache-2.0\"},\"contracts/external/lib/DODOMath.sol\":{\"content\":\"/*\\n\\n    Copyright 2020 DODO ZOO.\\n    SPDX-License-Identifier: Apache-2.0\\n\\n*/\\n\\npragma solidity 0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"../../lib/SafeMath.sol\\\";\\nimport { DecimalMath } from \\\"../../lib/DecimalMath.sol\\\";\\n\\n/**\\n * @title DODOMath\\n * @author DODO Breeder\\n *\\n * @notice Functions for complex calculating. Including ONE Integration and TWO Quadratic solutions\\n */\\nlibrary DODOMath {\\n    using SafeMath for uint256;\\n\\n    /*\\n        Integrate dodo curve from V1 to V2\\n        require V0>=V1>=V2>0\\n        res = (1-k)i(V1-V2)+ikV0*V0(1/V2-1/V1)\\n        let V1-V2=delta\\n        res = i*delta*(1-k+k(V0^2/V1/V2))\\n\\n        i is the price of V-res trading pair\\n\\n        support k=1 & k=0 case\\n\\n        [round down]\\n    */\\n    function _GeneralIntegrate(\\n        uint256 V0,\\n        uint256 V1,\\n        uint256 V2,\\n        uint256 i,\\n        uint256 k\\n    ) internal pure returns (uint256) {\\n        require(V0 > 0, \\\"TARGET_IS_ZERO\\\");\\n        uint256 fairAmount = i.mul(V1.sub(V2)); // i*delta\\n        if (k == 0) {\\n            return fairAmount.div(DecimalMath.ONE);\\n        }\\n        uint256 V0V0V1V2 = DecimalMath.divFloor(V0.mul(V0).div(V1), V2);\\n        uint256 penalty = DecimalMath.mulFloor(k, V0V0V1V2); // k(V0^2/V1/V2)\\n        return DecimalMath.ONE.sub(k).add(penalty).mul(fairAmount).div(DecimalMath.ONE2);\\n    }\\n\\n    /*\\n        Follow the integration function above\\n        i*deltaB = (Q2-Q1)*(1-k+kQ0^2/Q1/Q2)\\n        Assume Q2=Q0, Given Q1 and deltaB, solve Q0\\n\\n        i is the price of delta-V trading pair\\n        give out target of V\\n\\n        support k=1 & k=0 case\\n\\n        [round down]\\n    */\\n    function _SolveQuadraticFunctionForTarget(\\n        uint256 V1,\\n        uint256 delta,\\n        uint256 i,\\n        uint256 k\\n    ) internal pure returns (uint256) {\\n        if (k == 0) {\\n            return V1.add(DecimalMath.mulFloor(i, delta));\\n        }\\n        // V0 = V1*(1+(sqrt-1)/2k)\\n        // sqrt = \\u221a(1+4kidelta/V1)\\n        // premium = 1+(sqrt-1)/2k\\n        // uint256 sqrt = (4 * k).mul(i).mul(delta).div(V1).add(DecimalMath.ONE2).sqrt();\\n\\n        if (V1 == 0) {\\n            return 0;\\n        }\\n        uint256 sqrt;\\n        uint256 ki = (4 * k).mul(i);\\n        if (ki == 0) {\\n            sqrt = DecimalMath.ONE;\\n        } else if ((ki * delta) / ki == delta) {\\n            sqrt = (ki * delta).div(V1).add(DecimalMath.ONE2).sqrt();\\n        } else {\\n            sqrt = ki.div(V1).mul(delta).add(DecimalMath.ONE2).sqrt();\\n        }\\n        uint256 premium = DecimalMath.divFloor(sqrt.sub(DecimalMath.ONE), k * 2).add(DecimalMath.ONE);\\n        // V0 is greater than or equal to V1 according to the solution\\n        return DecimalMath.mulFloor(V1, premium);\\n    }\\n\\n    /*\\n        Follow the integration expression above, we have:\\n        i*deltaB = (Q2-Q1)*(1-k+kQ0^2/Q1/Q2)\\n        Given Q1 and deltaB, solve Q2\\n        This is a quadratic function and the standard version is\\n        aQ2^2 + bQ2 + c = 0, where\\n        a=1-k\\n        -b=(1-k)Q1-kQ0^2/Q1+i*deltaB\\n        c=-kQ0^2\\n        and Q2=(-b+sqrt(b^2+4(1-k)kQ0^2))/2(1-k)\\n        note: another root is negative, abondan\\n\\n        if deltaBSig=true, then Q2>Q1, user sell Q and receive B\\n        if deltaBSig=false, then Q2<Q1, user sell B and receive Q\\n        return |Q1-Q2|\\n\\n        as we only support sell amount as delta, the deltaB is always negative\\n        the input ideltaB is actually -ideltaB in the equation\\n\\n        i is the price of delta-V trading pair\\n\\n        support k=1 & k=0 case\\n\\n        [round down]\\n    */\\n    function _SolveQuadraticFunctionForTrade(\\n        uint256 V0,\\n        uint256 V1,\\n        uint256 delta,\\n        uint256 i,\\n        uint256 k\\n    ) internal pure returns (uint256) {\\n        require(V0 > 0, \\\"TARGET_IS_ZERO\\\");\\n        if (delta == 0) {\\n            return 0;\\n        }\\n\\n        if (k == 0) {\\n            return DecimalMath.mulFloor(i, delta) > V1 ? V1 : DecimalMath.mulFloor(i, delta);\\n        }\\n\\n        if (k == DecimalMath.ONE) {\\n            // if k==1\\n            // Q2=Q1/(1+ideltaBQ1/Q0/Q0)\\n            // temp = ideltaBQ1/Q0/Q0\\n            // Q2 = Q1/(1+temp)\\n            // Q1-Q2 = Q1*(1-1/(1+temp)) = Q1*(temp/(1+temp))\\n            // uint256 temp = i.mul(delta).mul(V1).div(V0.mul(V0));\\n            uint256 temp;\\n            uint256 idelta = i.mul(delta);\\n            if (idelta == 0) {\\n                temp = 0;\\n            } else if ((idelta * V1) / idelta == V1) {\\n                temp = (idelta * V1).div(V0.mul(V0));\\n            } else {\\n                temp = delta.mul(V1).div(V0).mul(i).div(V0);\\n            }\\n            return V1.mul(temp).div(temp.add(DecimalMath.ONE));\\n        }\\n\\n        // calculate -b value and sig\\n        // b = kQ0^2/Q1-i*deltaB-(1-k)Q1\\n        // part1 = (1-k)Q1 >=0\\n        // part2 = kQ0^2/Q1-i*deltaB >=0\\n        // bAbs = abs(part1-part2)\\n        // if part1>part2 => b is negative => bSig is false\\n        // if part2>part1 => b is positive => bSig is true\\n        uint256 part2 = k.mul(V0).div(V1).mul(V0).add(i.mul(delta)); // kQ0^2/Q1-i*deltaB\\n        uint256 bAbs = DecimalMath.ONE.sub(k).mul(V1); // (1-k)Q1\\n\\n        bool bSig;\\n        if (bAbs >= part2) {\\n            bAbs = bAbs - part2;\\n            bSig = false;\\n        } else {\\n            bAbs = part2 - bAbs;\\n            bSig = true;\\n        }\\n        bAbs = bAbs.div(DecimalMath.ONE);\\n\\n        // calculate sqrt\\n        uint256 squareRoot = DecimalMath.mulFloor(DecimalMath.ONE.sub(k).mul(4), DecimalMath.mulFloor(k, V0).mul(V0)); // 4(1-k)kQ0^2\\n        squareRoot = bAbs.mul(bAbs).add(squareRoot).sqrt(); // sqrt(b*b+4(1-k)kQ0*Q0)\\n\\n        // final res\\n        uint256 denominator = DecimalMath.ONE.sub(k).mul(2); // 2(1-k)\\n        uint256 numerator;\\n        if (bSig) {\\n            numerator = squareRoot.sub(bAbs);\\n        } else {\\n            numerator = bAbs.add(squareRoot);\\n        }\\n\\n        uint256 V2 = DecimalMath.divCeil(numerator, denominator);\\n        if (V2 > V1) {\\n            return 0;\\n        } else {\\n            return V1 - V2;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdefe8f6823f8ae2705952354cb6cbe319ad9ba1e3249db91bdc5b77b6761db09\",\"license\":\"Apache-2.0\"},\"contracts/external/lib/PMMPricing.sol\":{\"content\":\"/*\\n\\n    Copyright 2020 DODO ZOO.\\n    SPDX-License-Identifier: Apache-2.0\\n\\n*/\\n\\npragma solidity 0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"../../lib/SafeMath.sol\\\";\\nimport { DecimalMath } from \\\"../../lib/DecimalMath.sol\\\";\\nimport { DODOMath } from \\\"./DODOMath.sol\\\";\\n\\n/**\\n * @title Pricing\\n * @author DODO Breeder\\n *\\n * @notice DODO Pricing model\\n */\\n\\nlibrary PMMPricing {\\n    using SafeMath for uint256;\\n\\n    enum RState {\\n        ONE,\\n        ABOVE_ONE,\\n        BELOW_ONE\\n    }\\n\\n    struct PMMState {\\n        uint256 i;\\n        uint256 K;\\n        uint256 B;\\n        uint256 Q;\\n        uint256 B0;\\n        uint256 Q0;\\n        RState R;\\n    }\\n\\n    // ============ buy & sell ============\\n\\n    function sellBaseToken(PMMState memory state, uint256 payBaseAmount)\\n        internal\\n        pure\\n        returns (uint256 receiveQuoteAmount, RState newR)\\n    {\\n        if (state.R == RState.ONE) {\\n            // case 1: R=1\\n            // R falls below one\\n            receiveQuoteAmount = _ROneSellBaseToken(state, payBaseAmount);\\n            newR = RState.BELOW_ONE;\\n        } else if (state.R == RState.ABOVE_ONE) {\\n            uint256 backToOnePayBase = state.B0.sub(state.B);\\n            uint256 backToOneReceiveQuote = state.Q.sub(state.Q0);\\n            // case 2: R>1\\n            // complex case, R status depends on trading amount\\n            if (payBaseAmount < backToOnePayBase) {\\n                // case 2.1: R status do not change\\n                receiveQuoteAmount = _RAboveSellBaseToken(state, payBaseAmount);\\n                newR = RState.ABOVE_ONE;\\n                if (receiveQuoteAmount > backToOneReceiveQuote) {\\n                    // [Important corner case!] may enter this branch when some precision problem happens. And consequently contribute to negative spare quote amount\\n                    // to make sure spare quote>=0, mannually set receiveQuote=backToOneReceiveQuote\\n                    receiveQuoteAmount = backToOneReceiveQuote;\\n                }\\n            } else if (payBaseAmount == backToOnePayBase) {\\n                // case 2.2: R status changes to ONE\\n                receiveQuoteAmount = backToOneReceiveQuote;\\n                newR = RState.ONE;\\n            } else {\\n                // case 2.3: R status changes to BELOW_ONE\\n                receiveQuoteAmount = backToOneReceiveQuote.add(\\n                    _ROneSellBaseToken(state, payBaseAmount.sub(backToOnePayBase))\\n                );\\n                newR = RState.BELOW_ONE;\\n            }\\n        } else {\\n            // state.R == RState.BELOW_ONE\\n            // case 3: R<1\\n            receiveQuoteAmount = _RBelowSellBaseToken(state, payBaseAmount);\\n            newR = RState.BELOW_ONE;\\n        }\\n    }\\n\\n    function sellQuoteToken(PMMState memory state, uint256 payQuoteAmount)\\n        internal\\n        pure\\n        returns (uint256 receiveBaseAmount, RState newR)\\n    {\\n        if (state.R == RState.ONE) {\\n            receiveBaseAmount = _ROneSellQuoteToken(state, payQuoteAmount);\\n            newR = RState.ABOVE_ONE;\\n        } else if (state.R == RState.ABOVE_ONE) {\\n            receiveBaseAmount = _RAboveSellQuoteToken(state, payQuoteAmount);\\n            newR = RState.ABOVE_ONE;\\n        } else {\\n            uint256 backToOnePayQuote = state.Q0.sub(state.Q);\\n            uint256 backToOneReceiveBase = state.B.sub(state.B0);\\n            if (payQuoteAmount < backToOnePayQuote) {\\n                receiveBaseAmount = _RBelowSellQuoteToken(state, payQuoteAmount);\\n                newR = RState.BELOW_ONE;\\n                if (receiveBaseAmount > backToOneReceiveBase) {\\n                    receiveBaseAmount = backToOneReceiveBase;\\n                }\\n            } else if (payQuoteAmount == backToOnePayQuote) {\\n                receiveBaseAmount = backToOneReceiveBase;\\n                newR = RState.ONE;\\n            } else {\\n                receiveBaseAmount = backToOneReceiveBase.add(\\n                    _ROneSellQuoteToken(state, payQuoteAmount.sub(backToOnePayQuote))\\n                );\\n                newR = RState.ABOVE_ONE;\\n            }\\n        }\\n    }\\n\\n    // ============ R = 1 cases ============\\n\\n    function _ROneSellBaseToken(PMMState memory state, uint256 payBaseAmount)\\n        internal\\n        pure\\n        returns (\\n            uint256 // receiveQuoteToken\\n        )\\n    {\\n        // in theory Q2 <= targetQuoteTokenAmount\\n        // however when amount is close to 0, precision problems may cause Q2 > targetQuoteTokenAmount\\n        return DODOMath._SolveQuadraticFunctionForTrade(state.Q0, state.Q0, payBaseAmount, state.i, state.K);\\n    }\\n\\n    function _ROneSellQuoteToken(PMMState memory state, uint256 payQuoteAmount)\\n        internal\\n        pure\\n        returns (\\n            uint256 // receiveBaseToken\\n        )\\n    {\\n        return\\n            DODOMath._SolveQuadraticFunctionForTrade(\\n                state.B0,\\n                state.B0,\\n                payQuoteAmount,\\n                DecimalMath.reciprocalFloor(state.i),\\n                state.K\\n            );\\n    }\\n\\n    // ============ R < 1 cases ============\\n\\n    function _RBelowSellQuoteToken(PMMState memory state, uint256 payQuoteAmount)\\n        internal\\n        pure\\n        returns (\\n            uint256 // receiveBaseToken\\n        )\\n    {\\n        return\\n            DODOMath._GeneralIntegrate(\\n                state.Q0,\\n                state.Q.add(payQuoteAmount),\\n                state.Q,\\n                DecimalMath.reciprocalFloor(state.i),\\n                state.K\\n            );\\n    }\\n\\n    function _RBelowSellBaseToken(PMMState memory state, uint256 payBaseAmount)\\n        internal\\n        pure\\n        returns (\\n            uint256 // receiveQuoteToken\\n        )\\n    {\\n        return DODOMath._SolveQuadraticFunctionForTrade(state.Q0, state.Q, payBaseAmount, state.i, state.K);\\n    }\\n\\n    // ============ R > 1 cases ============\\n\\n    function _RAboveSellBaseToken(PMMState memory state, uint256 payBaseAmount)\\n        internal\\n        pure\\n        returns (\\n            uint256 // receiveQuoteToken\\n        )\\n    {\\n        return DODOMath._GeneralIntegrate(state.B0, state.B.add(payBaseAmount), state.B, state.i, state.K);\\n    }\\n\\n    function _RAboveSellQuoteToken(PMMState memory state, uint256 payQuoteAmount)\\n        internal\\n        pure\\n        returns (\\n            uint256 // receiveBaseToken\\n        )\\n    {\\n        return\\n            DODOMath._SolveQuadraticFunctionForTrade(\\n                state.B0,\\n                state.B,\\n                payQuoteAmount,\\n                DecimalMath.reciprocalFloor(state.i),\\n                state.K\\n            );\\n    }\\n\\n    // ============ Helper functions ============\\n\\n    function adjustedTarget(PMMState memory state) internal pure {\\n        if (state.R == RState.BELOW_ONE) {\\n            state.Q0 = DODOMath._SolveQuadraticFunctionForTarget(state.Q, state.B.sub(state.B0), state.i, state.K);\\n        } else if (state.R == RState.ABOVE_ONE) {\\n            state.B0 = DODOMath._SolveQuadraticFunctionForTarget(\\n                state.B,\\n                state.Q.sub(state.Q0),\\n                DecimalMath.reciprocalFloor(state.i),\\n                state.K\\n            );\\n        }\\n    }\\n\\n    function getMidPrice(PMMState memory state) internal pure returns (uint256) {\\n        if (state.R == RState.BELOW_ONE) {\\n            uint256 R = DecimalMath.divFloor(state.Q0.mul(state.Q0).div(state.Q), state.Q);\\n            R = DecimalMath.ONE.sub(state.K).add(DecimalMath.mulFloor(state.K, R));\\n            return DecimalMath.divFloor(state.i, R);\\n        } else {\\n            uint256 R = DecimalMath.divFloor(state.B0.mul(state.B0).div(state.B), state.B);\\n            R = DecimalMath.ONE.sub(state.K).add(DecimalMath.mulFloor(state.K, R));\\n            return DecimalMath.mulFloor(state.i, R);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xccbe3ff08cf06a0f160e5eb077650499fce88c082e58bf367c5d2ae4536def57\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IDODOV2.sol\":{\"content\":\"/*\\n\\n    Copyright 2020 DODO ZOO.\\n    SPDX-License-Identifier: Apache-2.0\\n\\n*/\\n\\npragma solidity 0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../external/lib/PMMPricing.sol\\\";\\n\\ninterface IDODOV2 {\\n    //========== Common ==================\\n\\n    function sellBase(address to) external returns (uint256 receiveQuoteAmount);\\n\\n    function sellQuote(address to) external returns (uint256 receiveBaseAmount);\\n\\n    function getVaultReserve() external view returns (uint256 baseReserve, uint256 quoteReserve);\\n\\n    function querySellQuote(address trader, uint256 payQuoteAmount)\\n        external\\n        view\\n        returns (\\n            uint256 receiveBaseAmount,\\n            uint256 mtFee,\\n            PMMPricing.RState newRState,\\n            uint256 newQuoteTarget\\n        );\\n\\n    function querySellBase(address trader, uint256 payBaseAmount)\\n        external\\n        view\\n        returns (\\n            uint256 receiveQuoteAmount,\\n            uint256 mtFee,\\n            PMMPricing.RState newRState,\\n            uint256 newBaseTarget\\n        );\\n\\n    function _BASE_TOKEN_() external view returns (address);\\n\\n    function _QUOTE_TOKEN_() external view returns (address);\\n\\n    function getPMMStateForCall()\\n        external\\n        view\\n        returns (\\n            uint256 i,\\n            uint256 K,\\n            uint256 B,\\n            uint256 Q,\\n            uint256 B0,\\n            uint256 Q0,\\n            uint256 R\\n        );\\n\\n    function getUserFeeRate(address user) external view returns (uint256 lpFeeRate, uint256 mtFeeRate);\\n\\n    function getDODOPoolBidirection(address token0, address token1)\\n        external\\n        view\\n        returns (address[] memory, address[] memory);\\n\\n    //========== DODOVendingMachine ========\\n\\n    function createDODOVendingMachine(\\n        address baseToken,\\n        address quoteToken,\\n        uint256 lpFeeRate,\\n        uint256 i,\\n        uint256 k,\\n        bool isOpenTWAP\\n    ) external returns (address newVendingMachine);\\n\\n    function buyShares(address to)\\n        external\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    //========== DODOPrivatePool ===========\\n\\n    function createDODOPrivatePool() external returns (address newPrivatePool);\\n\\n    function initDODOPrivatePool(\\n        address dppAddress,\\n        address creator,\\n        address baseToken,\\n        address quoteToken,\\n        uint256 lpFeeRate,\\n        uint256 k,\\n        uint256 i,\\n        bool isOpenTwap\\n    ) external;\\n\\n    function reset(\\n        address operator,\\n        uint256 newLpFeeRate,\\n        uint256 newI,\\n        uint256 newK,\\n        uint256 baseOutAmount,\\n        uint256 quoteOutAmount,\\n        uint256 minBaseReserve,\\n        uint256 minQuoteReserve\\n    ) external returns (bool);\\n\\n    function _OWNER_() external returns (address);\\n\\n    function _LP_FEE_RATE_() external returns (uint64);\\n\\n    function _K_() external returns (uint64);\\n\\n    function _I_() external returns (uint128);\\n\\n    //========== CrowdPooling ===========\\n\\n    function createCrowdPooling() external returns (address payable newCrowdPooling);\\n\\n    function initCrowdPooling(\\n        address cpAddress,\\n        address creator,\\n        address[] memory tokens,\\n        uint256[] memory timeLine,\\n        uint256[] memory valueList,\\n        bool[] memory switches,\\n        int256 globalQuota\\n    ) external;\\n\\n    function bid(address to) external;\\n}\\n\",\"keccak256\":\"0x1bd560b6778ec3d582ffd48f6ae1a96fe0200584a8ecf56c5cdaaf6580d996df\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IDPPOracle.sol\":{\"content\":\"pragma solidity 0.8.9;\\npragma experimental ABIEncoderV2;\\n\\ninterface IDPPOracle {\\n    function init(\\n        address owner,\\n        address maintainer,\\n        address baseTokenAddress,\\n        address quoteTokenAddress,\\n        uint256 lpFeeRate,\\n        address mtFeeRateModel,\\n        uint256 k,\\n        uint256 i,\\n        address o,\\n        bool isOpenTWAP,\\n        bool isOracleEnabled\\n    ) external;\\n\\n    function _MT_FEE_RATE_MODEL_() external returns (address);\\n\\n    function _O_() external returns (address);\\n\\n    function _IS_ORACLE_ENABLED() external returns (bool);\\n}\\n\",\"keccak256\":\"0x8e54211c9e652572ff0d9649f56678b24365b5b02c3b4bcd0d92e53a94dcbb40\"},\"contracts/interfaces/IDPPOracleAdmin.sol\":{\"content\":\"pragma solidity 0.8.9;\\npragma experimental ABIEncoderV2;\\n\\ninterface IDPPOracleAdmin {\\n    function init(\\n        address owner,\\n        address dpp,\\n        address operator,\\n        address dodoApproveProxy\\n    ) external;\\n\\n    //=========== admin ==========\\n    function ratioSync() external;\\n\\n    function retrieve(\\n        address payable to,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    function reset(\\n        address assetTo,\\n        uint256 newLpFeeRate,\\n        uint256 newI,\\n        uint256 newK,\\n        uint256 baseOutAmount,\\n        uint256 quoteOutAmount,\\n        uint256 minBaseReserve,\\n        uint256 minQuoteReserve\\n    ) external returns (bool);\\n\\n    function tuneParameters(\\n        uint256 newLpFeeRate,\\n        uint256 newI,\\n        uint256 newK,\\n        uint256 minBaseReserve,\\n        uint256 minQuoteReserve\\n    ) external returns (bool);\\n\\n    function tunePrice(\\n        uint256 newI,\\n        uint256 minBaseReserve,\\n        uint256 minQuoteReserve\\n    ) external returns (bool);\\n\\n    function changeOracle(address newOracle) external;\\n\\n    function enableOracle() external;\\n\\n    function disableOracle(uint256 newI) external;\\n\\n    function setFreezeTimestamp(uint256 timestamp) external;\\n}\\n\",\"keccak256\":\"0xc3db242d7e6163994b451b783c1baf01053c9d28e8562f699764ef44da5fe79b\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"/*\\n\\n    Copyright 2020 DODO ZOO.\\n    SPDX-License-Identifier: Apache-2.0\\n\\n*/\\n\\npragma solidity 0.8.9;\\npragma experimental ABIEncoderV2;\\n\\ninterface IWETH {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 wad\\n    ) external returns (bool);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0xae737715962c73688e011e27e2f63b0076e1c7afef7f5a0b09cb357ea2bf73ad\",\"license\":\"Apache-2.0\"},\"contracts/lib/Adminable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nabstract contract Adminable {\\n    event AdminUpdated(address indexed user, address indexed newAdmin);\\n\\n    address public admin;\\n\\n    modifier onlyAdmin() virtual {\\n        require(msg.sender == admin, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    function setAdmin(address newAdmin) public virtual onlyAdmin {\\n        _setAdmin(newAdmin);\\n    }\\n\\n    function _setAdmin(address newAdmin) internal {\\n        require(newAdmin != address(0), \\\"Can not set admin to zero address\\\");\\n        admin = newAdmin;\\n\\n        emit AdminUpdated(msg.sender, newAdmin);\\n    }\\n}\\n\",\"keccak256\":\"0xe47c97c0e3edad2d1df3e664376a7bb46e1aaf51b4c4acc73c4a2cfdc747185f\",\"license\":\"GPL-3.0\"},\"contracts/lib/DecimalMath.sol\":{\"content\":\"pragma solidity 0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @title DecimalMath\\n * @author DODO Breeder\\n *\\n * @notice Functions for fixed point number with 18 decimals\\n */\\nlibrary DecimalMath {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant ONE = 10**18;\\n    uint256 internal constant ONE2 = 10**36;\\n\\n    function mulFloor(uint256 target, uint256 d) internal pure returns (uint256) {\\n        return target.mul(d) / (10**18);\\n    }\\n\\n    function mulCeil(uint256 target, uint256 d) internal pure returns (uint256) {\\n        return target.mul(d).divCeil(10**18);\\n    }\\n\\n    function divFloor(uint256 target, uint256 d) internal pure returns (uint256) {\\n        return target.mul(10**18).div(d);\\n    }\\n\\n    function divCeil(uint256 target, uint256 d) internal pure returns (uint256) {\\n        return target.mul(10**18).divCeil(d);\\n    }\\n\\n    function reciprocalFloor(uint256 target) internal pure returns (uint256) {\\n        return uint256(10**36).div(target);\\n    }\\n\\n    function reciprocalCeil(uint256 target) internal pure returns (uint256) {\\n        return uint256(10**36).divCeil(target);\\n    }\\n\\n    function powFloor(uint256 target, uint256 e) internal pure returns (uint256) {\\n        if (e == 0) {\\n            return 10**18;\\n        } else if (e == 1) {\\n            return target;\\n        } else {\\n            uint256 p = powFloor(target, e.div(2));\\n            p = p.mul(p) / (10**18);\\n            if (e % 2 == 1) {\\n                p = p.mul(target) / (10**18);\\n            }\\n            return p;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x848d9447ff70f3b754cdf9a0eb5650ca3e5c4c249d4b65f4b721317be42ce7ba\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"/*\\n\\n    Copyright 2020 DODO ZOO.\\n    SPDX-License-Identifier: Apache-2.0\\n\\n*/\\n\\npragma solidity 0.8.9;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title SafeMath\\n * @author DODO Breeder\\n *\\n * @notice Math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"MUL_ERROR\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"DIVIDING_ERROR\\\");\\n        return a / b;\\n    }\\n\\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 quotient = div(a, b);\\n        uint256 remainder = a - quotient * b;\\n        if (remainder > 0) {\\n            return quotient + 1;\\n        } else {\\n            return quotient;\\n        }\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SUB_ERROR\\\");\\n        return a - b;\\n    }\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"ADD_ERROR\\\");\\n        return c;\\n    }\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\\n        uint256 z = x / 2 + 1;\\n        y = x;\\n        while (z < y) {\\n            y = z;\\n            z = (x / z + z) / 2;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe7d538fa206c53181864afaaee0168cf8d3ad2bced6547ce58ed00cccb1097d7\",\"license\":\"Apache-2.0\"},\"contracts/lib/UniversalERC20.sol\":{\"content\":\"pragma solidity 0.8.9;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nlibrary UniversalERC20 {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 private constant ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    function universalTransfer(\\n        IERC20 token,\\n        address payable to,\\n        uint256 amount\\n    ) internal {\\n        if (amount > 0) {\\n            if (isETH(token)) {\\n                to.transfer(amount);\\n            } else {\\n                token.safeTransfer(to, amount);\\n            }\\n        }\\n    }\\n\\n    function universalApproveMax(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        uint256 allowance = token.allowance(address(this), to);\\n        if (allowance < amount) {\\n            if (allowance > 0) {\\n                token.safeApprove(to, 0);\\n            }\\n            token.safeApprove(to, type(uint256).max);\\n        }\\n    }\\n\\n    function universalBalanceOf(IERC20 token, address who) internal view returns (uint256) {\\n        if (isETH(token)) {\\n            return who.balance;\\n        } else {\\n            return token.balanceOf(who);\\n        }\\n    }\\n\\n    function tokenBalanceOf(IERC20 token, address who) internal view returns (uint256) {\\n        return token.balanceOf(who);\\n    }\\n\\n    function isETH(IERC20 token) internal pure returns (bool) {\\n        return token == ETH_ADDRESS;\\n    }\\n}\\n\",\"keccak256\":\"0xd2e125538969df30c2f85ab4c44c3e793cd93213ed71cca653019705dd09df64\"}},\"version\":1}",
  "bytecode": "0x60806040526011805460ff60a01b191690556000601281905560135534801561002757600080fd5b5060016010556142198061003c6000396000f3fe60806040526004361061025e5760003560e01c8063704b6c0211610143578063ab44a7a3116100bb578063dd62ed3e11610077578063dd62ed3e146107bc578063dee62417146107dc578063e7bd25fa146107f2578063ec2fd46d14610812578063f811d6921461083a578063f851a4401461087257005b8063ab44a7a3146106db578063c9775a441461071c578063cf877e7b1461073c578063d4b970461461075c578063d505accf1461077c578063da28b5271461079c57005b806395d89b411161010a57806395d89b411461063a5780639a3ce49b1461064f5780639c6cb68214610665578063a457c2d714610685578063a9059cbb146106a5578063a9e91e54146106c557005b8063704b6c021461056957806370a08231146105895780637a06ab3e146105bf5780637d1b5d9c146105ed5780637ecebe001461060d57005b80632bb42fb8116101d65780633b20884a1161019d5780633b20884a1461049e57806347c421b5146104be578063491f088f146104de5780634a248d2a146105135780636a56e046146105335780636e7343061461054957005b80632bb42fb8146103e957806330adf81f14610409578063313ce5671461043d5780633644e51514610469578063395093511461047e57005b806310d764601161022557806310d764601461033a578063171019401461035a57806318160ddd1461037a57806323b872dd1461039e578063292c914a146103be5780632b437d48146103d357005b806306552ff31461026757806306fdde0314610287578063095ea7b3146102b25780630a953924146102e25780630d4eec8f1461030257005b3661026557005b005b34801561027357600080fd5b5061026561028236600461393a565b610892565b34801561029357600080fd5b5061029c610daf565b6040516102a991906139c2565b60405180910390f35b3480156102be57600080fd5b506102d26102cd3660046139f5565b610e3d565b60405190151581526020016102a9565b3480156102ee57600080fd5b506102656102fd366004613a21565b610e54565b34801561030e57600080fd5b50601154610322906001600160a01b031681565b6040516001600160a01b0390911681526020016102a9565b34801561034657600080fd5b506102d2610355366004613a43565b610e89565b34801561036657600080fd5b5061029c610375366004613a6f565b610f53565b34801561038657600080fd5b5061039060095481565b6040519081526020016102a9565b3480156103aa57600080fd5b506102d26103b9366004613a8c565b6110d6565b3480156103ca57600080fd5b50610265611283565b3480156103df57600080fd5b50610390600c5481565b3480156103f557600080fd5b50610265610404366004613acd565b611436565b34801561041557600080fd5b506103907f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b34801561044957600080fd5b506007546104579060ff1681565b60405160ff90911681526020016102a9565b34801561047557600080fd5b506103906114a7565b34801561048a57600080fd5b506102d26104993660046139f5565b6114b6565b3480156104aa57600080fd5b506102d26104b9366004613ae6565b6114d8565b3480156104ca57600080fd5b506102656104d9366004613a6f565b6115b2565b3480156104ea57600080fd5b506104fe6104f9366004613acd565b6116aa565b604080519283526020830191909152016102a9565b34801561051f57600080fd5b50600354610322906001600160a01b031681565b34801561053f57600080fd5b506103906103e981565b34801561055557600080fd5b506104fe610564366004613acd565b61176b565b34801561057557600080fd5b50610265610584366004613a6f565b611784565b34801561059557600080fd5b506103906105a4366004613a6f565b6001600160a01b03166000908152600a602052604090205490565b6105d26105cd366004613b30565b6117ba565b604080519384526020840192909252908201526060016102a9565b3480156105f957600080fd5b50610265610608366004613acd565b611d18565b34801561061957600080fd5b50610390610628366004613a6f565b600f6020526000908152604090205481565b34801561064657600080fd5b5061029c611dce565b34801561065b57600080fd5b5061039060135481565b34801561067157600080fd5b50600254610322906001600160a01b031681565b34801561069157600080fd5b506102d26106a03660046139f5565b611ddb565b3480156106b157600080fd5b506102d26106c03660046139f5565b611e66565b3480156106d157600080fd5b50610390600d5481565b3480156106e757600080fd5b5060045461070390600160a01b900467ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016102a9565b34801561072857600080fd5b506104fe610737366004613acd565b611f50565b34801561074857600080fd5b50600154610322906001600160a01b031681565b34801561076857600080fd5b50600454610322906001600160a01b031681565b34801561078857600080fd5b50610265610797366004613b85565b611f5f565b3480156107a857600080fd5b50600e54610322906001600160a01b031681565b3480156107c857600080fd5b506103906107d7366004613bf6565b61217c565b3480156107e857600080fd5b5061039060125481565b3480156107fe57600080fd5b506105d261080d366004613c2f565b6121a7565b34801561081e57600080fd5b5060055461070390600160801b900467ffffffffffffffff1681565b34801561084657600080fd5b5060055461085a906001600160801b031681565b6040516001600160801b0390911681526020016102a9565b34801561087e57600080fd5b50600054610322906001600160a01b031681565b601154600160a01b900460ff16156108e95760405162461bcd60e51b81526020600482015260156024820152741a185d99481899595b881a5b9a5d1a585b1a5e9959605a1b60448201526064015b60405180910390fd5b601180546001600160a01b038084166001600160a81b031990921691909117600160a01b17909155600180548583166001600160a01b0319918216179091556002805492851692909116919091179055610942846125d2565b600160009054906101000a90046001600160a01b03166001600160a01b0316634a248d2a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561099057600080fd5b505afa1580156109a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c89190613c78565b600380546001600160a01b0319166001600160a01b0392831617905560015460408051636a5cb82360e11b81529051919092169163d4b97046916004808301926020929190829003018186803b158015610a2157600080fd5b505afa158015610a35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a599190613c78565b600480546001600160a01b0319166001600160a01b0392909216919091179055610a8161267d565b6000604051806040016040528060018152602001602d60f81b81525090506000604051806040016040528060068152602001650447565744c560d41b815250905080600360009054906101000a90046001600160a01b03166001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015610b1157600080fd5b505afa158015610b25573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b4d9190810190613cab565b83600460009054906101000a90046001600160a01b03166001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015610b9c57600080fd5b505afa158015610bb0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bd89190810190613cab565b604051602001610beb9493929190613d4d565b60405160208183030381529060405260089080519060200190610c0f92919061388c565b50604080518082019091526007808252660447565742d4c560cc1b6020909201918252610c3e9160069161388c565b50600360009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610c8d57600080fd5b505afa158015610ca1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc59190613da4565b6007805460ff9290921660ff1990921691909117905546600c819055600e80546001600160a01b031916301790556040516000907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90610d2790600890613dfc565b60408051918290038220828201825260018352603160f81b6020938401528151928301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc66060820152608081018390523060a082015260c00160408051601f198184030181529190528051602090910120600d555050505050505050565b60088054610dbc90613dc1565b80601f0160208091040260200160405190810160405280929190818152602001828054610de890613dc1565b8015610e355780601f10610e0a57610100808354040283529160200191610e35565b820191906000526020600020905b815481529060010190602001808311610e1857829003601f168201915b505050505081565b6000610e4a338484612888565b5060015b92915050565b6000546001600160a01b03163314610e7e5760405162461bcd60e51b81526004016108e090613e98565b601291909155601355565b600080546001600160a01b03163314610eb45760405162461bcd60e51b81526004016108e090613e98565b6002546040516286bb2360e51b81526004810186905260248101859052604481018490526001600160a01b03909116906310d7646090606401602060405180830381600087803b158015610f0757600080fd5b505af1158015610f1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3f9190613ebe565b50610f4861267d565b5060015b9392505050565b604080518082018252601081526f181899199a1a9b1b9c1cb0b131b232b360811b6020820152815160088082528184019093526060926001600160a01b038516929160009160208201818036833701905050905060005b60048110156110cd5782600485610fc284600c613ef6565b60208110610fd257610fd2613f0e565b1a60f81b6001600160f81b031916901c60f81c60ff1681518110610ff857610ff8613f0e565b01602001516001600160f81b03191682611013836002613f24565b8151811061102357611023613f0e565b60200101906001600160f81b031916908160001a905350828461104783600c613ef6565b6020811061105757611057613f0e565b825191901a600f1690811061106e5761106e613f0e565b01602001516001600160f81b03191682611089836002613f24565b611094906001613ef6565b815181106110a4576110a4613f0e565b60200101906001600160f81b031916908160001a905350806110c581613f43565b915050610faa565b50949350505050565b6001600160a01b0383166000908152600a60205260408120548211156111335760405162461bcd60e51b81526020600482015260126024820152710848298829c868abe9c9ea8be8a9c9eaa8e960731b60448201526064016108e0565b6001600160a01b0384166000908152600b6020908152604080832033845290915290205482111561119d5760405162461bcd60e51b815260206004820152601460248201527308298989eae829c868abe9c9ea8be8a9c9eaa8e960631b60448201526064016108e0565b6001600160a01b0384166000908152600a60205260409020546111c090836128e9565b6001600160a01b038086166000908152600a602052604080822093909355908516815220546111ef90836128f5565b6001600160a01b038085166000908152600a60209081526040808320949094559187168152600b8252828120338252909152205461122d90836128e9565b6001600160a01b038581166000818152600b6020908152604080832033845282529182902094909455518581529186169290916000805160206141c4833981519152910160405180910390a35060019392505050565b6000546001600160a01b031633146112ad5760405162461bcd60e51b81526004016108e090613e98565b600154604080516373563cb960e01b815290516000926001600160a01b0316916373563cb991600480830192602092919082900301818787803b1580156112f357600080fd5b505af1158015611307573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132b9190613c78565b60035460405163cfed246b60e01b81526001600160a01b0391821660048201529192506000919083169063cfed246b9060240160206040518083038186803b15801561137657600080fd5b505afa15801561138a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ae9190613f5e565b116113cb5760405162461bcd60e51b81526004016108e090613f77565b600260009054906101000a90046001600160a01b03166001600160a01b031663292c914a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561141b57600080fd5b505af115801561142f573d6000803e3d6000fd5b5050505050565b6000546001600160a01b031633146114605760405162461bcd60e51b81526004016108e090613e98565b60025460405163057685f760e31b8152600481018390526001600160a01b0390911690632bb42fb8906024015b600060405180830381600087803b15801561141b57600080fd5b60006114b1612901565b905090565b600033610f488185856114c9838361217c565b6114d39190613ef6565b612888565b600080546001600160a01b031633146115035760405162461bcd60e51b81526004016108e090613e98565b600254604051631d90442560e11b815260048101889052602481018790526044810186905260648101859052608481018490526001600160a01b0390911690633b20884a9060a401602060405180830381600087803b15801561156557600080fd5b505af1158015611579573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159d9190613ebe565b506115a661267d565b50600195945050505050565b6000546001600160a01b031633146115dc5760405162461bcd60e51b81526004016108e090613e98565b60035460405163cfed246b60e01b81526001600160a01b03918216600482015260009183169063cfed246b9060240160206040518083038186803b15801561162357600080fd5b505afa158015611637573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165b9190613f5e565b116116785760405162461bcd60e51b81526004016108e090613f77565b6002546040516347c421b560e01b81526001600160a01b038381166004830152909116906347c421b59060240161148d565b600080600080600160009054906101000a90046001600160a01b03166001600160a01b03166336223ce96040518163ffffffff1660e01b8152600401604080518083038186803b1580156116fd57600080fd5b505afa158015611711573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117359190613fc0565b60095491935091506117518161174b85896129dd565b906129e9565b94506117618161174b84896129dd565b9350505050915091565b60008061177b60008460016129f5565b91509150915091565b6000546001600160a01b031633146117ae5760405162461bcd60e51b81526004016108e090613e98565b6117b7816125d2565b50565b6000806000600260105414156118125760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108e0565b600260105583428110156118685760405162461bcd60e51b815260206004820152601c60248201527f447565742044707020436f6e74726f6c6c65723a20455850495245440000000060448201526064016108e0565b600154604080516373563cb960e01b815290516000926001600160a01b0316916373563cb991600480830192602092919082900301818787803b1580156118ae57600080fd5b505af11580156118c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e69190613c78565b60035460405163cfed246b60e01b81526001600160a01b0391821660048201529192506000919083169063cfed246b9060240160206040518083038186803b15801561193157600080fd5b505afa158015611945573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119699190613f5e565b116119865760405162461bcd60e51b81526004016108e090613f77565b600160009054906101000a90046001600160a01b03166001600160a01b0316632f4796556040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156119d657600080fd5b505af11580156119ea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0e9190613ebe565b611a2a5760405162461bcd60e51b81526004016108e090613fe4565b611a368b8b60036129f5565b9094509250888410801590611a4b5750878310155b611ab15760405162461bcd60e51b815260206004820152603160248201527f447565742044707020436f6e74726f6c6c65723a206465706f73697420616d6f6044820152700eadce840d2e640dcdee840cadcdeeaced607b1b60648201526084016108e0565b60018054600354611ad89233926001600160a01b03908116921690889060ff8d1614612c56565b600154600454611afe9133916001600160a01b03918216911686600260ff8d1614612c56565b611b0733612d55565b50506001546040805163058122f160e21b815290519297506001600160a01b03909116916316048bc4916004808201926020929091908290030181600087803b158015611b5357600080fd5b505af1158015611b67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8b9190613c78565b600480546005546012546013546040516323fce4a360e21b81526001600160a01b039690961695638ff3928c95611bf695309567ffffffffffffffff600160a01b9092048216956001600160801b03821695600160801b90920490921693600093849392910161402c565b602060405180830381600087803b158015611c1057600080fd5b505af1158015611c24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c489190613ebe565b611c645760405162461bcd60e51b81526004016108e090614086565b8660ff166001148015611c7657508334115b15611cb357336108fc611c8986346140c7565b6040518115909202916000818181858888f19350505050158015611cb1573d6000803e3d6000fd5b505b8660ff166002148015611cc557508234115b15611d0257336108fc611cd885346140c7565b6040518115909202916000818181858888f19350505050158015611d00573d6000803e3d6000fd5b505b5050600160108190555096509650969350505050565b6000546001600160a01b03163314611d425760405162461bcd60e51b81526004016108e090613e98565b60008111611d9d5760405162461bcd60e51b815260206004820152602260248201527f447565742044707020436f6e74726f6c6c65723a20696e7661696c64206e6577604482015261204960f01b60648201526084016108e0565b600254604051631f46d76760e21b8152600481018390526001600160a01b0390911690637d1b5d9c9060240161148d565b60068054610dbc90613dc1565b60003381611de9828661217c565b905083811015611e4e5760405162461bcd60e51b815260206004820152602a60248201527f447565745f45524332303a2064656372656173656420616c6c6f77616e63652060448201526962656c6f77207a65726f60b01b60648201526084016108e0565b611e5b8286868403612888565b506001949350505050565b336000908152600a6020526040812054821115611eba5760405162461bcd60e51b81526020600482015260126024820152710848298829c868abe9c9ea8be8a9c9eaa8e960731b60448201526064016108e0565b336000908152600a6020526040902054611ed490836128e9565b336000908152600a6020526040808220929092556001600160a01b03851681522054611f0090836128f5565b6001600160a01b0384166000818152600a60205260409081902092909255905133906000805160206141c483398151915290611f3f9086815260200190565b60405180910390a350600192915050565b60008061177b836000806129f5565b42841015611fa25760405162461bcd60e51b815260206004820152601060248201526f111d595d17d3140e881156141254915160821b60448201526064016108e0565b6000611fac612901565b6001600160a01b0389166000908152600f602052604081208054929350909183917f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918c918c918c9187611fff83613f43565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810188905260e0016040516020818303038152906040528051906020012060405160200161207892919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff89169284019290925260608301879052608083018690529092509060019060a0016020604051602081039080840390855afa1580156120e3573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906121195750896001600160a01b0316816001600160a01b0316145b6121655760405162461bcd60e51b815260206004820152601a60248201527f447565745f4c503a20494e56414c49445f5349474e415455524500000000000060448201526064016108e0565b6121708a8a8a612888565b50505050505050505050565b6001600160a01b039182166000908152600b6020908152604080832093909416825291909152205490565b6000806000600260105414156121ff5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016108e0565b600260105583428110156122555760405162461bcd60e51b815260206004820152601c60248201527f447565742044707020436f6e74726f6c6c65723a20455850495245440000000060448201526064016108e0565b600154604080516373563cb960e01b815290516000926001600160a01b0316916373563cb991600480830192602092919082900301818787803b15801561229b57600080fd5b505af11580156122af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122d39190613c78565b60035460405163cfed246b60e01b81526001600160a01b0391821660048201529192506000919083169063cfed246b9060240160206040518083038186803b15801561231e57600080fd5b505afa158015612332573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123569190613f5e565b116123735760405162461bcd60e51b81526004016108e090613f77565b600160009054906101000a90046001600160a01b03166001600160a01b0316632f4796556040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156123c357600080fd5b505af11580156123d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123fb9190613ebe565b6124175760405162461bcd60e51b81526004016108e090613fe4565b6124238a338b8b6130b5565b6001546040805163058122f160e21b815290519397509195506001600160a01b0316916316048bc4916004808201926020929091908290030181600087803b15801561246e57600080fd5b505af1158015612482573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124a69190613c78565b600480546005546012546013546040516323fce4a360e21b81526001600160a01b039690961695638ff3928c9561251095309567ffffffffffffffff600160a01b9092048216956001600160801b03821695600160801b909204909216938e938e9392910161402c565b602060405180830381600087803b15801561252a57600080fd5b505af115801561253e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125629190613ebe565b61257e5760405162461bcd60e51b81526004016108e090614086565b6003805461259e9133916001600160a01b031690879060ff8c161461329e565b600480546125be9133916001600160a01b031690869060ff8c161461329e565b505060016010559697909695509350505050565b6001600160a01b0381166126325760405162461bcd60e51b815260206004820152602160248201527f43616e206e6f74207365742061646d696e20746f207a65726f206164647265736044820152607360f81b60648201526084016108e0565b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f101b8081ff3b56bbf45deb824d86a3b0fd38b7e3dd42421105cf8abe9106db0b9190a350565b600160009054906101000a90046001600160a01b03166001600160a01b031663ab44a7a36040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156126cd57600080fd5b505af11580156126e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061270591906140de565b6004805467ffffffffffffffff92909216600160a01b0267ffffffffffffffff60a01b199092169190911781556001546040805163ec2fd46d60e01b815290516001600160a01b039092169263ec2fd46d9282820192602092908290030181600087803b15801561277557600080fd5b505af1158015612789573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ad91906140de565b600560106101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550600160009054906101000a90046001600160a01b03166001600160a01b031663f811d6926040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561282557600080fd5b505af1158015612839573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061285d9190614108565b600580546fffffffffffffffffffffffffffffffff19166001600160801b0392909216919091179055565b6001600160a01b038381166000818152600b602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610f4c82846140c7565b6000610f4c8284613ef6565b600e546000906001600160a01b03163014801561291f5750600c5446145b1561292b5750600d5490565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f600860405161295d9190613dfc565b60408051918290038220828201825260018352603160f81b6020938401528151928301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160408051601f19818403018152919052805160209091012092915050565b6000610f4c8284613f24565b6000610f4c8284614131565b600080600080600160009054906101000a90046001600160a01b03166001600160a01b03166336223ce96040518163ffffffff1660e01b8152600401604080518083038186803b158015612a4857600080fd5b505afa158015612a5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a809190613fc0565b91509150806000148015612a92575081155b15612bb1576000546001600160a01b03163314612b085760405162461bcd60e51b815260206004820152602e60248201527f447565742044707020436f6e74726f6c6c65723a204d75737420696e6974696160448201526d3634bd32b210313c9030b236b4b760911b60648201526084016108e0565b8693508460ff16600314612bad576001546040805163fd1ed7e960e01b815290516000926001600160a01b03169163fd1ed7e99160048083019260e0929190829003018186803b158015612b5b57600080fd5b505afa158015612b6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b939190614153565b5050505050509050612ba58882613365565b935050612bb1565b8592505b80158015612bbf5750600082115b15612bcc57869350600092505b600081118015612bdc5750600082115b15612c4c57600081612bee8489613f24565b612bf89190614131565b9050600083612c07848b613f24565b612c119190614131565b90508660ff166003148015612c265750878111155b80612c32575060ff8716155b15612c4257889550809450612c49565b8794508195505b50505b5050935093915050565b8015612d3a578115612d355781341015612ca45760405162461bcd60e51b815260206004820152600f60248201526e4554485f56414c55455f57524f4e4760881b60448201526064016108e0565b601160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b158015612cf457600080fd5b505af1158015612d08573d6000803e3d6000fd5b505050506001600160a01b03851630149050612d3557601154612d35906001600160a01b03168584613384565b61142f565b811561142f5761142f6001600160a01b0384168686856133ec565b6003546001546040516370a0823160e01b81526001600160a01b03918216600482015260009283928392839291909116906370a082319060240160206040518083038186803b158015612da757600080fd5b505afa158015612dbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ddf9190613f5e565b600480546001546040516370a0823160e01b81526001600160a01b039182169381019390935292935060009216906370a082319060240160206040518083038186803b158015612e2e57600080fd5b505afa158015612e42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e669190613f5e565b600154604080516336223ce960e01b8152815193945060009384936001600160a01b0316926336223ce99260048082019391829003018186803b158015612eac57600080fd5b505afa158015612ec0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ee49190613fc0565b9092509050612ef384836128e9565b9550612eff83826128e9565b945060008611612f415760405162461bcd60e51b815260206004820152600d60248201526c1393d7d09054d157d253941555609a1b60448201526064016108e0565b600954612fba576103e8841015612f9a5760405162461bcd60e51b815260206004820152601c60248201527f494e53554646494349454e545f4c49515549444954595f4d494e45440000000060448201526064016108e0565b612fa760006103e9613424565b612fb3846103e96128e9565b9650613049565b600082118015612fc8575080155b15612fe657612fb38261174b600954896129dd90919063ffffffff16565b600082118015612ff65750600081115b15613049576000826009548861300c9190613f24565b6130169190614131565b9050600082600954886130299190613f24565b6130339190614131565b90508082106130425780613044565b815b985050505b6130538888613424565b6001600160a01b0388166000818152600a60209081526040918290205482519384529083018a905282820152517f1c172440bdebb59cd92a7f08f4227903a3305ab6f880cb25f93eddb66843a1029181900360600190a1505050509193909250565b6001600160a01b0383166000908152600a602052604081205481908611156131145760405162461bcd60e51b8152602060048201526012602482015271088eacae8be98a0be9c9ea8be8a9c9eaa8e960731b60448201526064016108e0565b600154604080516336223ce960e01b8152815160009384936001600160a01b03909116926336223ce99260048083019392829003018186803b15801561315957600080fd5b505afa15801561316d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131919190613fc0565b60095491935091506131a78161174b858c6129dd565b94506131b78161174b848c6129dd565b93508685101580156131c95750858410155b6132265760405162461bcd60e51b815260206004820152602860248201527f447565742044707020436f6e74726f6c6c65723a2057495448445241575f4e4f6044820152670a8be8a9c9eaa8e960c31b60648201526084016108e0565b613230888a613522565b6001600160a01b0388166000818152600a6020908152604091829020548251848152918201939093528082018c90526060810192909252517f55caccde83781f39bfc1296eff45655b6496729443a7d48958b18b3b685600a59181900360800190a150505094509492505050565b801561334557811561334057601154604051632e1a7d4d60e01b8152600481018490526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b1580156132f057600080fd5b505af1158015613304573d6000803e3d6000fd5b50506040516001600160a01b038716925084156108fc02915084906000818181858888f1935050505015801561333e573d6000803e3d6000fd5b505b61335f565b811561335f5761335f6001600160a01b0384168584613384565b50505050565b6000670de0b6b3a764000061337a84846135d8565b610f4c9190614131565b6040516001600160a01b0383166024820152604481018290526133e790849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613639565b505050565b6040516001600160a01b038085166024830152831660448201526064810182905261335f9085906323b872dd60e01b906084016133b0565b6103e881116134645760405162461bcd60e51b815260206004820152600c60248201526b1352539517d253959053125160a21b60448201526064016108e0565b6001600160a01b0382166000908152600a602052604090205461348790826128f5565b6001600160a01b0383166000908152600a60205260409020556009546134ad90826128f5565b6009556040518181526001600160a01b038316907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859060200160405180910390a26040518181526001600160a01b038316906000906000805160206141c4833981519152906020015b60405180910390a35050565b6001600160a01b0382166000908152600a602052604090205461354590826128e9565b6001600160a01b0383166000908152600a602052604090205560095461356b90826128e9565b6009556040518181526001600160a01b038316907fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59060200160405180910390a26040518181526000906001600160a01b038416906000805160206141c483398151915290602001613516565b6000826135e757506000610e4e565b60006135f38385613f24565b9050826136008583614131565b14610f4c5760405162461bcd60e51b815260206004820152600960248201526826aaa62fa2a92927a960b91b60448201526064016108e0565b600061368e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661370b9092919063ffffffff16565b8051909150156133e757808060200190518101906136ac9190613ebe565b6133e75760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108e0565b606061371a8484600085613722565b949350505050565b6060824710156137835760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016108e0565b6001600160a01b0385163b6137da5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108e0565b600080866001600160a01b031685876040516137f691906141a7565b60006040518083038185875af1925050503d8060008114613833576040519150601f19603f3d011682016040523d82523d6000602084013e613838565b606091505b5091509150613848828286613853565b979650505050505050565b60608315613862575081610f4c565b8251156138725782518084602001fd5b8160405162461bcd60e51b81526004016108e091906139c2565b82805461389890613dc1565b90600052602060002090601f0160209004810192826138ba5760008555613900565b82601f106138d357805160ff1916838001178555613900565b82800160010185558215613900579182015b828111156139005782518255916020019190600101906138e5565b5061390c929150613910565b5090565b5b8082111561390c5760008155600101613911565b6001600160a01b03811681146117b757600080fd5b6000806000806080858703121561395057600080fd5b843561395b81613925565b9350602085013561396b81613925565b9250604085013561397b81613925565b9150606085013561398b81613925565b939692955090935050565b60005b838110156139b1578181015183820152602001613999565b8381111561335f5750506000910152565b60208152600082518060208401526139e1816040850160208701613996565b601f01601f19169190910160400192915050565b60008060408385031215613a0857600080fd5b8235613a1381613925565b946020939093013593505050565b60008060408385031215613a3457600080fd5b50508035926020909101359150565b600080600060608486031215613a5857600080fd5b505081359360208301359350604090920135919050565b600060208284031215613a8157600080fd5b8135610f4c81613925565b600080600060608486031215613aa157600080fd5b8335613aac81613925565b92506020840135613abc81613925565b929592945050506040919091013590565b600060208284031215613adf57600080fd5b5035919050565b600080600080600060a08688031215613afe57600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b60ff811681146117b757600080fd5b60008060008060008060c08789031215613b4957600080fd5b863595506020870135945060408701359350606087013592506080870135613b7081613b21565b8092505060a087013590509295509295509295565b600080600080600080600060e0888a031215613ba057600080fd5b8735613bab81613925565b96506020880135613bbb81613925565b955060408801359450606088013593506080880135613bd981613b21565b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215613c0957600080fd5b8235613c1481613925565b91506020830135613c2481613925565b809150509250929050565b600080600080600060a08688031215613c4757600080fd5b8535945060208601359350604086013592506060860135613c6781613b21565b949793965091946080013592915050565b600060208284031215613c8a57600080fd5b8151610f4c81613925565b634e487b7160e01b600052604160045260246000fd5b600060208284031215613cbd57600080fd5b815167ffffffffffffffff80821115613cd557600080fd5b818401915084601f830112613ce957600080fd5b815181811115613cfb57613cfb613c95565b604051601f8201601f19908116603f01168101908382118183101715613d2357613d23613c95565b81604052828152876020848701011115613d3c57600080fd5b613848836020830160208801613996565b60008551613d5f818460208a01613996565b855190830190613d73818360208a01613996565b8551910190613d86818360208901613996565b8451910190613d99818360208801613996565b019695505050505050565b600060208284031215613db657600080fd5b8151610f4c81613b21565b600181811c90821680613dd557607f821691505b60208210811415613df657634e487b7160e01b600052602260045260246000fd5b50919050565b600080835481600182811c915080831680613e1857607f831692505b6020808410821415613e3857634e487b7160e01b86526022600452602486fd5b818015613e4c5760018114613e5d57613e8a565b60ff19861689528489019650613e8a565b60008a81526020902060005b86811015613e825781548b820152908501908301613e69565b505084890196505b509498975050505050505050565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b600060208284031215613ed057600080fd5b81518015158114610f4c57600080fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115613f0957613f09613ee0565b500190565b634e487b7160e01b600052603260045260246000fd5b6000816000190483118215151615613f3e57613f3e613ee0565b500290565b6000600019821415613f5757613f57613ee0565b5060010190565b600060208284031215613f7057600080fd5b5051919050565b60208082526029908201527f447565742044707020436f6e74726f6c6c65723a20696e76616c6964206f7261604082015268636c6520707269636560b81b606082015260800190565b60008060408385031215613fd357600080fd5b505080516020909101519092909150565b60208082526028908201527f447565742044707020436f6e74726f6c6c65723a206f7261636c652064707020604082015267191a5cd8589b195960c21b606082015260800190565b6001600160a01b0398909816885267ffffffffffffffff96871660208901526001600160801b03959095166040880152929094166060860152608085015260a084019290925260c083019190915260e08201526101000190565b60208082526021908201527f447565742044707020436f6e74726f6c6c65723a205265736574204661696c656040820152601960fa1b606082015260800190565b6000828210156140d9576140d9613ee0565b500390565b6000602082840312156140f057600080fd5b815167ffffffffffffffff81168114610f4c57600080fd5b60006020828403121561411a57600080fd5b81516001600160801b0381168114610f4c57600080fd5b60008261414e57634e487b7160e01b600052601260045260246000fd5b500490565b600080600080600080600060e0888a03121561416e57600080fd5b5050855160208701516040880151606089015160808a015160a08b015160c0909b0151949c939b50919990985090965094509092509050565b600082516141b9818460208701613996565b919091019291505056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212205fbafd783c3d26e0bc64dc4a04f365d63f26716977ea02ebb3cfee98f7f96d2d64736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "So. Lu",
    "kind": "dev",
    "methods": {
      "addDuetDppLiquidity(uint256,uint256,uint256,uint256,uint8,uint256)": {
        "params": {
          "baseInAmount": "users declare adding base amount",
          "baseMinAmount": "slippage protection, baseInAmount *(1 - slippage)",
          "deadLine": "time limit",
          "flag": "describe token type, 0 - ERC20, 1 - baseInETH, 2 - quoteInETH",
          "quoteInAmount": "users declare adding quote amount",
          "quoteMinAmount": "slippage protection, quoteInAmount *(1 - slippage)"
        }
      },
      "allowance(address,address)": {
        "details": "Function to check the amount of tokens that an owner _ALLOWED_ to a spender.",
        "params": {
          "owner": "address The address which owns the funds.",
          "spender": "address The address which will spend the funds."
        },
        "returns": {
          "_0": "A uint256 specifying the amount of tokens still available for the spender."
        }
      },
      "approve(address,uint256)": {
        "details": "Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.",
        "params": {
          "amount": "The amount of tokens to be spent.",
          "spender": "The address which will spend the funds."
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address.",
        "params": {
          "owner": "The address to query the the balance of."
        },
        "returns": {
          "balance": "An uint256 representing the amount owned by the passed address."
        }
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "removeDuetDppLiquidity(uint256,uint256,uint256,uint8,uint256)": {
        "params": {
          "baseMinAmount": "slippage protection, baseOutAmount *(1 - slippage)",
          "deadLine": "time limit",
          "flag": "describe token type, 0 - ERC20, 3 - baseOutETH, 4 - quoteOutETH",
          "quoteMinAmount": "slippage protection, quoteOutAmount *(1 - slippage)",
          "shareAmount": "users withdraw lp amount"
        }
      },
      "transfer(address,uint256)": {
        "details": "transfer token for a specified address",
        "params": {
          "amount": "The amount to be transferred.",
          "to": "The address to transfer to."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfer tokens from one address to another",
        "params": {
          "amount": "uint256 the amount of tokens to be transferred",
          "from": "address The address which you want to send tokens from",
          "to": "address The address which you want to transfer to"
        }
      },
      "tuneParameters(uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "minBaseReserve_": "for frontrun protection,",
          "minQuoteReserve_": "for frontrun protection",
          "newI": "new price I of dpp pool, unit is 10 ** [18+ quote - base]",
          "newK": "a param for swap curve, limit in [0，10**18], unit is  10**18，0 is stable price curve，10**18 is bonding curve like uni",
          "newLpFeeRate": "lp fee rate for dpp pool, unit is 10**18, range in [0, 10**18],eg 3,00000,00000,00000 = 0.003 = 0.3%"
        }
      },
      "tunePrice(uint256,uint256,uint256)": {
        "params": {
          "minBaseReserve_": "for frontrun protection,",
          "minQuoteReserve_": "for frontrun protection",
          "newI": "new price I of dpp pool, unit is 10 ** [18+ quote - base]"
        }
      }
    },
    "title": "DppController",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addDuetDppLiquidity(uint256,uint256,uint256,uint256,uint8,uint256)": {
        "notice": "add dpp liquidity"
      },
      "changeMinRes(uint256,uint256)": {
        "notice": "change default minBaseReserve and minQuoteReserve"
      },
      "changeOracle(address)": {
        "notice": "change oracle address"
      },
      "disableOracle(uint256)": {
        "notice": "disable oracle and set new I"
      },
      "minBaseReserve()": {
        "notice": "minBaseReserve for frontrun protection, reset function default param, no use minQuoteReserve for frontrun protection, reset function default param, no use"
      },
      "recommendBaseAndQuote(uint256)": {
        "notice": "enter lp amount  cal baseAmount and quoteAmount"
      },
      "recommendBaseInAmount(uint256)": {
        "notice": "enter quoteInAmount cal outBaseAmount, when initialize, this function will return 0, just support recommendQuoteInAmount"
      },
      "recommendQuoteInAmount(uint256)": {
        "notice": "enter baseInAmount cal outAmount, when initialize, just support query quoteInAmount"
      },
      "removeDuetDppLiquidity(uint256,uint256,uint256,uint8,uint256)": {
        "notice": "remove dpp liquidity"
      },
      "setFreezeTimestamp(uint256)": {
        "notice": "use for freeze dppAdmin to change params, while swap is normal"
      },
      "tuneParameters(uint256,uint256,uint256,uint256,uint256)": {
        "notice": "change params for dpp pool"
      },
      "tunePrice(uint256,uint256,uint256)": {
        "notice": "change price I"
      }
    },
    "notice": "Use this contract to control dpp state(onlyAdmin), withdraw and deposit lps",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10176,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4745,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "_DPP_ADDRESS_",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4747,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "_DPP_ADMIN_ADDRESS_",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 4750,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "_BASE_TOKEN_",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20Metadata)1686"
      },
      {
        "astId": 4753,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "_QUOTE_TOKEN_",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20Metadata)1686"
      },
      {
        "astId": 4755,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "_LP_FEE_RATE_",
        "offset": 20,
        "slot": "4",
        "type": "t_uint64"
      },
      {
        "astId": 4757,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "_I_",
        "offset": 0,
        "slot": "5",
        "type": "t_uint128"
      },
      {
        "astId": 4759,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "_K_",
        "offset": 16,
        "slot": "5",
        "type": "t_uint64"
      },
      {
        "astId": 4761,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "symbol",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 4763,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "decimals",
        "offset": 0,
        "slot": "7",
        "type": "t_uint8"
      },
      {
        "astId": 4765,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "name",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 4767,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "totalSupply",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 4771,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "_SHARES_",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4777,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "_ALLOWED_",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 4779,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "_CACHED_CHAIN_ID",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 4781,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "_CACHED_DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "13",
        "type": "t_bytes32"
      },
      {
        "astId": 4783,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "_CACHED_THIS",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 4790,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "nonces",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 968,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "_status",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 2749,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "_WETH_",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 2752,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "flagInit",
        "offset": 20,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 2756,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "minBaseReserve",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 2759,
        "contract": "contracts/DuetDPPController.sol:DuetDppController",
        "label": "minQuoteReserve",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20Metadata)1686": {
        "encoding": "inplace",
        "label": "contract IERC20Metadata",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}