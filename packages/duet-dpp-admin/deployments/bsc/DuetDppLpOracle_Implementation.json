{
  "address": "0x0E24dFb6C8CA1557922642eb58D7Ee9648eE0832",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sourceDecimal_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetDecimal_",
          "type": "uint256"
        }
      ],
      "name": "convertDecimal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dodoOracle",
      "outputs": [
        {
          "internalType": "contract IDodoOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controllerToken_",
          "type": "address"
        }
      ],
      "name": "getCtrlInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IDPPController",
              "name": "controller",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "baseToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "quoteToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "baseTokenDecimals",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quoteTokenDecimals",
              "type": "uint256"
            }
          ],
          "internalType": "struct DuetDppLpOracle.CtrlInfo",
          "name": "ctrlInfo",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controllerToken_",
          "type": "address"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "usdLikeToken_",
          "type": "address"
        },
        {
          "internalType": "contract IDodoOracle",
          "name": "dodoOracle_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDodoOracle",
          "name": "dodoOracle_",
          "type": "address"
        }
      ],
      "name": "setDodoOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "usdLikeToken_",
          "type": "address"
        }
      ],
      "name": "setUsdLikeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdLikeToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xed674449dd3df8093722497a5a0f7fc8cc59cd4e9aaff672baae71031b6a7872",
  "receipt": {
    "to": null,
    "from": "0x00d7A6a2F161d3f4971a3d1B071Ef55b284FD3Bf",
    "contractAddress": "0x0E24dFb6C8CA1557922642eb58D7Ee9648eE0832",
    "transactionIndex": 56,
    "gasUsed": "838353",
    "logsBloom": "0x
    "blockHash": "0xd90ab630068c99b6fa3640ddb315ec1eb768050ee670558c9103801afe1b8c4a",
    "transactionHash": "0xed674449dd3df8093722497a5a0f7fc8cc59cd4e9aaff672baae71031b6a7872",
    "logs": [
      {
        "transactionIndex": 56,
        "blockNumber": 22447377,
        "transactionHash": "0xed674449dd3df8093722497a5a0f7fc8cc59cd4e9aaff672baae71031b6a7872",
        "address": "0x0E24dFb6C8CA1557922642eb58D7Ee9648eE0832",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 127,
        "blockHash": "0xd90ab630068c99b6fa3640ddb315ec1eb768050ee670558c9103801afe1b8c4a"
      }
    ],
    "blockNumber": 22447377,
    "cumulativeGasUsed": "5823157",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "2ca820f0d7828adb270f9c677d7b6736",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceDecimal_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetDecimal_\",\"type\":\"uint256\"}],\"name\":\"convertDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dodoOracle\",\"outputs\":[{\"internalType\":\"contract IDodoOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controllerToken_\",\"type\":\"address\"}],\"name\":\"getCtrlInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IDPPController\",\"name\":\"controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseTokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteTokenDecimals\",\"type\":\"uint256\"}],\"internalType\":\"struct DuetDppLpOracle.CtrlInfo\",\"name\":\"ctrlInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controllerToken_\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdLikeToken_\",\"type\":\"address\"},{\"internalType\":\"contract IDodoOracle\",\"name\":\"dodoOracle_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDodoOracle\",\"name\":\"dodoOracle_\",\"type\":\"address\"}],\"name\":\"setDodoOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usdLikeToken_\",\"type\":\"address\"}],\"name\":\"setUsdLikeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdLikeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"convertDecimal(uint256,uint256,uint256)\":{\"details\":\"convert a value from sourceDecimal to targetDecimal\"},\"getPrice(address)\":{\"details\":\"This oracle can only be used for display purposes and cannot be used as any actual value judgment basis.\",\"returns\":{\"_0\":\"Unsafe USD value with precision of 8\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getPrice(address)\":{\"notice\":\"!!! UNSAFE !!! !!! FOR DISPLAY ONLY !!!\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/appendix/DuetDppLpOracle.sol\":\"DuetDppLpOracle\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"contracts/appendix/DuetDppLpOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"../interfaces/IUSDOracle.sol\\\";\\nimport \\\"../interfaces/IDPPController.sol\\\";\\nimport \\\"../chainlink/AggregatorV3Interface.sol\\\";\\nimport \\\"../interfaces/IDodoOracle.sol\\\";\\nimport \\\"../lib/Adminable.sol\\\";\\n\\ncontract DuetDppLpOracle is IUSDOracle, Initializable, Adminable {\\n    address public usdLikeToken;\\n    IDodoOracle public dodoOracle;\\n    uint256 public constant decimals = 8;\\n\\n    struct CtrlInfo {\\n        IDPPController controller;\\n        address baseToken;\\n        address quoteToken;\\n        uint256 baseTokenDecimals;\\n        uint256 quoteTokenDecimals;\\n    }\\n\\n    constructor() initializer {}\\n\\n    function initialize(\\n        address admin_,\\n        address usdLikeToken_,\\n        IDodoOracle dodoOracle_\\n    ) external initializer {\\n        _setAdmin(admin_);\\n        usdLikeToken = usdLikeToken_;\\n        dodoOracle = dodoOracle_;\\n    }\\n\\n    function setUsdLikeToken(address usdLikeToken_) external onlyAdmin {\\n        usdLikeToken = usdLikeToken_;\\n    }\\n\\n    function setDodoOracle(IDodoOracle dodoOracle_) external onlyAdmin {\\n        dodoOracle = dodoOracle_;\\n    }\\n\\n    /**\\n     * !!! UNSAFE !!!\\n     * !!! FOR DISPLAY ONLY !!!\\n     * @dev This oracle can only be used for display purposes and cannot be used as any actual value judgment basis.\\n     * @return Unsafe USD value with precision of 8\\n     */\\n    function getPrice(address controllerToken_) external view override returns (uint256) {\\n        CtrlInfo memory curCtrl = getCtrlInfo(controllerToken_);\\n        require(curCtrl.quoteToken == usdLikeToken, \\\"DuetDppLpOracle: Invalid LP Token\\\");\\n\\n        (uint256 baseTokenAmount, uint256 quoteTokenAmount) = curCtrl.controller.recommendBaseAndQuote(\\n            10**IERC20Metadata(address(curCtrl.controller)).decimals()\\n        );\\n\\n        // 1e18\\n        uint256 baseTokenPrice = dodoOracle.prices(curCtrl.baseToken);\\n        require(baseTokenPrice > 0, \\\"DuetDppLpOracle: Invalid base token price\\\");\\n\\n        // 1e8\\n        uint256 baseTokenValue = convertDecimal(\\n            (baseTokenAmount * baseTokenPrice) / 1e18,\\n            curCtrl.baseTokenDecimals,\\n            decimals\\n        );\\n\\n        // 1e8\\n        uint256 quoteValue = convertDecimal(quoteTokenAmount, curCtrl.quoteTokenDecimals, decimals);\\n        return baseTokenValue + quoteValue;\\n    }\\n\\n    function getCtrlInfo(address controllerToken_) public view returns (CtrlInfo memory ctrlInfo) {\\n        ctrlInfo.controller = IDPPController(controllerToken_);\\n\\n        ctrlInfo.baseToken = IDPPController(controllerToken_)._BASE_TOKEN_();\\n        ctrlInfo.quoteToken = IDPPController(controllerToken_)._QUOTE_TOKEN_();\\n        ctrlInfo.baseTokenDecimals = IERC20Metadata(ctrlInfo.baseToken).decimals();\\n        ctrlInfo.quoteTokenDecimals = IERC20Metadata(ctrlInfo.quoteToken).decimals();\\n    }\\n\\n    /**\\n     * @dev convert a value from sourceDecimal to targetDecimal\\n     */\\n    function convertDecimal(\\n        uint256 value_,\\n        uint256 sourceDecimal_,\\n        uint256 targetDecimal_\\n    ) public pure returns (uint256) {\\n        if (sourceDecimal_ > targetDecimal_) {\\n            return value_ / (10**(sourceDecimal_ - targetDecimal_));\\n        }\\n\\n        if (sourceDecimal_ < targetDecimal_) {\\n            return value_ * (10**(targetDecimal_ - sourceDecimal_));\\n        }\\n        return value_;\\n    }\\n}\\n\",\"keccak256\":\"0xae7a785864d513d5485345b0257e6468cb1981f3bdbcce7781fd07e4834b86e7\",\"license\":\"MIT\"},\"contracts/chainlink/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x373aaafde4a21e52013ec20f173fb8e369b8cdca4cb2f46235c8386669bdf68c\",\"license\":\"MIT\"},\"contracts/interfaces/IDPPController.sol\":{\"content\":\"pragma solidity 0.8.9;\\npragma experimental ABIEncoderV2;\\n\\ninterface IDPPController {\\n    function init(\\n        address admin,\\n        address dppAddress,\\n        address dppAdminAddress,\\n        address weth\\n    ) external;\\n\\n    function _BASE_TOKEN_() external view returns (address base);\\n\\n    function _QUOTE_TOKEN_() external view returns (address quote);\\n\\n    function recommendBaseAndQuote(uint256 shareAmount_)\\n        external\\n        view\\n        returns (uint256 baseAmount, uint256 quoteAmount);\\n}\\n\",\"keccak256\":\"0x327daa05bf09d08f07ebf59d17af55e52a0e24697cd688c59b57aff3d5893ad4\"},\"contracts/interfaces/IDodoOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ninterface IDodoOracle {\\n    // Must return 1e18 value\\n    function prices(address base_) external view returns (uint256 price);\\n}\\n\",\"keccak256\":\"0x2d9e5e55be57453df0a97226bc315efd796c4c59d00b857e8e4864500d717858\",\"license\":\"MIT\"},\"contracts/interfaces/IUSDOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\ninterface IUSDOracle {\\n    // Must 8 dec, same as chainlink decimals.\\n    function getPrice(address token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa35072c6709db1d7a566f91c9072e9575893ebd47b3b7aa55bd7f3666d2deae1\",\"license\":\"MIT\"},\"contracts/lib/Adminable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nabstract contract Adminable {\\n    event AdminUpdated(address indexed user, address indexed newAdmin);\\n\\n    address public admin;\\n\\n    modifier onlyAdmin() virtual {\\n        require(msg.sender == admin, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    function setAdmin(address newAdmin) public virtual onlyAdmin {\\n        _setAdmin(newAdmin);\\n    }\\n\\n    function _setAdmin(address newAdmin) internal {\\n        require(newAdmin != address(0), \\\"Can not set admin to zero address\\\");\\n        admin = newAdmin;\\n\\n        emit AdminUpdated(msg.sender, newAdmin);\\n    }\\n}\\n\",\"keccak256\":\"0xe47c97c0e3edad2d1df3e664376a7bb46e1aaf51b4c4acc73c4a2cfdc747185f\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600061001d6001610081565b90508015610035576000805461ff0019166101001790555b801561007b576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50610198565b60008054610100900460ff1615610113578160ff1660011480156100b557506100b33061018960201b6108f71760201c565b155b61010b5760405162461bcd60e51b815260206004820152602e6024820152600080516020610f4183398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b506000919050565b60005460ff80841691161061016f5760405162461bcd60e51b815260206004820152602e6024820152600080516020610f4183398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610102565b506000805460ff191660ff92909216919091179055600190565b6001600160a01b03163b151590565b610d9a806101a76000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063704b6c0211610071578063704b6c021461012d578063bf61b2de14610142578063c0c53b8b14610155578063d518a49014610168578063eb059dd51461017b578063f851a440146101d857600080fd5b8063313ce567146100ae57806341976e09146100c95780635cdeea08146100dc5780636081057a146101075780636f00788a1461011a575b600080fd5b6100b6600881565b6040519081526020015b60405180910390f35b6100b66100d7366004610a58565b6101f1565b6001546100ef906001600160a01b031681565b6040516001600160a01b0390911681526020016100c0565b6002546100ef906001600160a01b031681565b6100b6610128366004610a75565b6104bc565b61014061013b366004610a58565b61051d565b005b610140610150366004610a58565b610559565b610140610163366004610aa1565b6105ab565b610140610176366004610a58565b610654565b61018e610189366004610a58565b6106a6565b6040805182516001600160a01b039081168252602080850151821690830152838301511691810191909152606080830151908201526080918201519181019190915260a0016100c0565b6000546100ef906201000090046001600160a01b031681565b6000806101fd836106a6565b60015460408201519192506001600160a01b039182169116146102715760405162461bcd60e51b815260206004820152602160248201527f447565744470704c704f7261636c653a20496e76616c6964204c5020546f6b656044820152603760f91b60648201526084015b60405180910390fd5b60008082600001516001600160a01b031663491f088f84600001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156102c457600080fd5b505afa1580156102d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fc9190610aec565b61030790600a610c0b565b6040518263ffffffff1660e01b815260040161032591815260200190565b604080518083038186803b15801561033c57600080fd5b505afa158015610350573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103749190610c1a565b600254602086015160405163cfed246b60e01b81526001600160a01b03918216600482015293955091935060009291169063cfed246b9060240160206040518083038186803b1580156103c657600080fd5b505afa1580156103da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fe9190610c3e565b9050600081116104625760405162461bcd60e51b815260206004820152602960248201527f447565744470704c704f7261636c653a20496e76616c6964206261736520746f6044820152686b656e20707269636560b81b6064820152608401610268565b6000610490670de0b6b3a764000061047a8487610c57565b6104849190610c76565b866060015160086104bc565b905060006104a484876080015160086104bc565b90506104b08183610c98565b98975050505050505050565b6000818311156104ec576104d08284610cb0565b6104db90600a610cc7565b6104e59085610c76565b9050610516565b81831015610513576104fe8383610cb0565b61050990600a610cc7565b6104e59085610c57565b50825b9392505050565b6000546201000090046001600160a01b0316331461054d5760405162461bcd60e51b815260040161026890610cd3565b61055681610906565b50565b6000546201000090046001600160a01b031633146105895760405162461bcd60e51b815260040161026890610cd3565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60006105b760016109bb565b905080156105cf576000805461ff0019166101001790555b6105d884610906565b600180546001600160a01b038086166001600160a01b0319928316179092556002805492851692909116919091179055801561064e576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6000546201000090046001600160a01b031633146106845760405162461bcd60e51b815260040161026890610cd3565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6040805160a081018252600060208083018290528284018290526060830182905260808301919091526001600160a01b0384168083528351632512469560e11b8152935192939092634a248d2a92600480840193919291829003018186803b15801561071157600080fd5b505afa158015610725573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107499190610cf9565b81602001906001600160a01b031690816001600160a01b031681525050816001600160a01b031663d4b970466040518163ffffffff1660e01b815260040160206040518083038186803b15801561079f57600080fd5b505afa1580156107b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d79190610cf9565b81604001906001600160a01b031690816001600160a01b03168152505080602001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561083157600080fd5b505afa158015610845573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108699190610aec565b60ff1681606001818152505080604001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156108b257600080fd5b505afa1580156108c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ea9190610aec565b60ff166080820152919050565b6001600160a01b03163b151590565b6001600160a01b0381166109665760405162461bcd60e51b815260206004820152602160248201527f43616e206e6f74207365742061646d696e20746f207a65726f206164647265736044820152607360f81b6064820152608401610268565b6000805462010000600160b01b031916620100006001600160a01b038416908102919091178255604051909133917f101b8081ff3b56bbf45deb824d86a3b0fd38b7e3dd42421105cf8abe9106db0b9190a350565b60008054610100900460ff1615610a02578160ff1660011480156109de5750303b155b6109fa5760405162461bcd60e51b815260040161026890610d16565b506000919050565b60005460ff808416911610610a295760405162461bcd60e51b815260040161026890610d16565b506000805460ff191660ff92909216919091179055600190565b6001600160a01b038116811461055657600080fd5b600060208284031215610a6a57600080fd5b813561051681610a43565b600080600060608486031215610a8a57600080fd5b505081359360208301359350604090920135919050565b600080600060608486031215610ab657600080fd5b8335610ac181610a43565b92506020840135610ad181610a43565b91506040840135610ae181610a43565b809150509250925092565b600060208284031215610afe57600080fd5b815160ff8116811461051657600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b80851115610b60578160001904821115610b4657610b46610b0f565b80851615610b5357918102915b93841c9390800290610b2a565b509250929050565b600082610b7757506001610c05565b81610b8457506000610c05565b8160018114610b9a5760028114610ba457610bc0565b6001915050610c05565b60ff841115610bb557610bb5610b0f565b50506001821b610c05565b5060208310610133831016604e8410600b8410161715610be3575081810a610c05565b610bed8383610b25565b8060001904821115610c0157610c01610b0f565b0290505b92915050565b600061051660ff841683610b68565b60008060408385031215610c2d57600080fd5b505080516020909101519092909150565b600060208284031215610c5057600080fd5b5051919050565b6000816000190483118215151615610c7157610c71610b0f565b500290565b600082610c9357634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115610cab57610cab610b0f565b500190565b600082821015610cc257610cc2610b0f565b500390565b60006105168383610b68565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b600060208284031215610d0b57600080fd5b815161051681610a43565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b60608201526080019056fea26469706673582212203ab1c84fa68206cf0dd421eba9f0e398a5611c6dec70de48c1de7718991b6d0b64736f6c63430008090033496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c8063704b6c0211610071578063704b6c021461012d578063bf61b2de14610142578063c0c53b8b14610155578063d518a49014610168578063eb059dd51461017b578063f851a440146101d857600080fd5b8063313ce567146100ae57806341976e09146100c95780635cdeea08146100dc5780636081057a146101075780636f00788a1461011a575b600080fd5b6100b6600881565b6040519081526020015b60405180910390f35b6100b66100d7366004610a58565b6101f1565b6001546100ef906001600160a01b031681565b6040516001600160a01b0390911681526020016100c0565b6002546100ef906001600160a01b031681565b6100b6610128366004610a75565b6104bc565b61014061013b366004610a58565b61051d565b005b610140610150366004610a58565b610559565b610140610163366004610aa1565b6105ab565b610140610176366004610a58565b610654565b61018e610189366004610a58565b6106a6565b6040805182516001600160a01b039081168252602080850151821690830152838301511691810191909152606080830151908201526080918201519181019190915260a0016100c0565b6000546100ef906201000090046001600160a01b031681565b6000806101fd836106a6565b60015460408201519192506001600160a01b039182169116146102715760405162461bcd60e51b815260206004820152602160248201527f447565744470704c704f7261636c653a20496e76616c6964204c5020546f6b656044820152603760f91b60648201526084015b60405180910390fd5b60008082600001516001600160a01b031663491f088f84600001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156102c457600080fd5b505afa1580156102d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fc9190610aec565b61030790600a610c0b565b6040518263ffffffff1660e01b815260040161032591815260200190565b604080518083038186803b15801561033c57600080fd5b505afa158015610350573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103749190610c1a565b600254602086015160405163cfed246b60e01b81526001600160a01b03918216600482015293955091935060009291169063cfed246b9060240160206040518083038186803b1580156103c657600080fd5b505afa1580156103da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fe9190610c3e565b9050600081116104625760405162461bcd60e51b815260206004820152602960248201527f447565744470704c704f7261636c653a20496e76616c6964206261736520746f6044820152686b656e20707269636560b81b6064820152608401610268565b6000610490670de0b6b3a764000061047a8487610c57565b6104849190610c76565b866060015160086104bc565b905060006104a484876080015160086104bc565b90506104b08183610c98565b98975050505050505050565b6000818311156104ec576104d08284610cb0565b6104db90600a610cc7565b6104e59085610c76565b9050610516565b81831015610513576104fe8383610cb0565b61050990600a610cc7565b6104e59085610c57565b50825b9392505050565b6000546201000090046001600160a01b0316331461054d5760405162461bcd60e51b815260040161026890610cd3565b61055681610906565b50565b6000546201000090046001600160a01b031633146105895760405162461bcd60e51b815260040161026890610cd3565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60006105b760016109bb565b905080156105cf576000805461ff0019166101001790555b6105d884610906565b600180546001600160a01b038086166001600160a01b0319928316179092556002805492851692909116919091179055801561064e576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b6000546201000090046001600160a01b031633146106845760405162461bcd60e51b815260040161026890610cd3565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6040805160a081018252600060208083018290528284018290526060830182905260808301919091526001600160a01b0384168083528351632512469560e11b8152935192939092634a248d2a92600480840193919291829003018186803b15801561071157600080fd5b505afa158015610725573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107499190610cf9565b81602001906001600160a01b031690816001600160a01b031681525050816001600160a01b031663d4b970466040518163ffffffff1660e01b815260040160206040518083038186803b15801561079f57600080fd5b505afa1580156107b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d79190610cf9565b81604001906001600160a01b031690816001600160a01b03168152505080602001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561083157600080fd5b505afa158015610845573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108699190610aec565b60ff1681606001818152505080604001516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156108b257600080fd5b505afa1580156108c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ea9190610aec565b60ff166080820152919050565b6001600160a01b03163b151590565b6001600160a01b0381166109665760405162461bcd60e51b815260206004820152602160248201527f43616e206e6f74207365742061646d696e20746f207a65726f206164647265736044820152607360f81b6064820152608401610268565b6000805462010000600160b01b031916620100006001600160a01b038416908102919091178255604051909133917f101b8081ff3b56bbf45deb824d86a3b0fd38b7e3dd42421105cf8abe9106db0b9190a350565b60008054610100900460ff1615610a02578160ff1660011480156109de5750303b155b6109fa5760405162461bcd60e51b815260040161026890610d16565b506000919050565b60005460ff808416911610610a295760405162461bcd60e51b815260040161026890610d16565b506000805460ff191660ff92909216919091179055600190565b6001600160a01b038116811461055657600080fd5b600060208284031215610a6a57600080fd5b813561051681610a43565b600080600060608486031215610a8a57600080fd5b505081359360208301359350604090920135919050565b600080600060608486031215610ab657600080fd5b8335610ac181610a43565b92506020840135610ad181610a43565b91506040840135610ae181610a43565b809150509250925092565b600060208284031215610afe57600080fd5b815160ff8116811461051657600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b80851115610b60578160001904821115610b4657610b46610b0f565b80851615610b5357918102915b93841c9390800290610b2a565b509250929050565b600082610b7757506001610c05565b81610b8457506000610c05565b8160018114610b9a5760028114610ba457610bc0565b6001915050610c05565b60ff841115610bb557610bb5610b0f565b50506001821b610c05565b5060208310610133831016604e8410600b8410161715610be3575081810a610c05565b610bed8383610b25565b8060001904821115610c0157610c01610b0f565b0290505b92915050565b600061051660ff841683610b68565b60008060408385031215610c2d57600080fd5b505080516020909101519092909150565b600060208284031215610c5057600080fd5b5051919050565b6000816000190483118215151615610c7157610c71610b0f565b500290565b600082610c9357634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115610cab57610cab610b0f565b500190565b600082821015610cc257610cc2610b0f565b500390565b60006105168383610b68565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b600060208284031215610d0b57600080fd5b815161051681610a43565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b60608201526080019056fea26469706673582212203ab1c84fa68206cf0dd421eba9f0e398a5611c6dec70de48c1de7718991b6d0b64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "convertDecimal(uint256,uint256,uint256)": {
        "details": "convert a value from sourceDecimal to targetDecimal"
      },
      "getPrice(address)": {
        "details": "This oracle can only be used for display purposes and cannot be used as any actual value judgment basis.",
        "returns": {
          "_0": "Unsafe USD value with precision of 8"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getPrice(address)": {
        "notice": "!!! UNSAFE !!! !!! FOR DISPLAY ONLY !!!"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/appendix/DuetDppLpOracle.sol:DuetDppLpOracle",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/appendix/DuetDppLpOracle.sol:DuetDppLpOracle",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5415,
        "contract": "contracts/appendix/DuetDppLpOracle.sol:DuetDppLpOracle",
        "label": "admin",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3461,
        "contract": "contracts/appendix/DuetDppLpOracle.sol:DuetDppLpOracle",
        "label": "usdLikeToken",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3464,
        "contract": "contracts/appendix/DuetDppLpOracle.sol:DuetDppLpOracle",
        "label": "dodoOracle",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IDodoOracle)5333"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IDodoOracle)5333": {
        "encoding": "inplace",
        "label": "contract IDodoOracle",
        "numberOfBytes": "20"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}