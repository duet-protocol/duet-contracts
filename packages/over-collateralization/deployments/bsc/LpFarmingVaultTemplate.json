{
  "address": "0xF9fF91A06F12d6e788B1fdBbCCA427A0E1FdBec7",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "ControllerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "supplyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "farm",
          "type": "address"
        }
      ],
      "name": "FarmChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeconf",
          "type": "address"
        }
      ],
      "name": "FeeConfChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "supplies",
          "type": "uint256"
        }
      ],
      "name": "Liquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dtoken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dtoken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "deposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "farm",
      "outputs": [
        {
          "internalType": "contract IVaultFarm",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeConf",
      "outputs": [
        {
          "internalType": "contract IFeeConf",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeConf",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isDuetVault",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "amount",
          "type": "int256"
        }
      ],
      "name": "pendingValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "setAppController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeConf",
          "type": "address"
        }
      ],
      "name": "setFeeConf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_farm",
          "type": "address"
        }
      ],
      "name": "setVaultFarm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dtoken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "syncDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token0",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlying",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "dp",
          "type": "bool"
        }
      ],
      "name": "underlyingAmountValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "dp",
          "type": "bool"
        }
      ],
      "name": "userValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "unpack",
          "type": "bool"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "unpack",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "withdrawCall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "unpack",
          "type": "bool"
        }
      ],
      "name": "withdrawTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x24e16f59ff3dd6453d4ba951cf1fb9ef3a12907779e5a7b2bb8de58f005c3499",
  "receipt": {
    "to": null,
    "from": "0x00d7A6a2F161d3f4971a3d1B071Ef55b284FD3Bf",
    "contractAddress": "0xF9fF91A06F12d6e788B1fdBbCCA427A0E1FdBec7",
    "transactionIndex": 91,
    "gasUsed": "2305378",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000020000000000000000000000000000000000000080000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x634d134169f3be7b0046cebfa8c1b7df05e0818ae71dd31a275ccb73ebee32f4",
    "transactionHash": "0x24e16f59ff3dd6453d4ba951cf1fb9ef3a12907779e5a7b2bb8de58f005c3499",
    "logs": [
      {
        "transactionIndex": 91,
        "blockNumber": 22366704,
        "transactionHash": "0x24e16f59ff3dd6453d4ba951cf1fb9ef3a12907779e5a7b2bb8de58f005c3499",
        "address": "0xF9fF91A06F12d6e788B1fdBbCCA427A0E1FdBec7",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 254,
        "blockHash": "0x634d134169f3be7b0046cebfa8c1b7df05e0818ae71dd31a275ccb73ebee32f4"
      }
    ],
    "blockNumber": 22366704,
    "cumulativeGasUsed": "12692033",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "59311a7eb745f9de896053573ab57b20",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"ControllerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supplyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"farm\",\"type\":\"address\"}],\"name\":\"FarmChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeconf\",\"type\":\"address\"}],\"name\":\"FeeConfChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supplies\",\"type\":\"uint256\"}],\"name\":\"Liquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dtoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dtoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farm\",\"outputs\":[{\"internalType\":\"contract IVaultFarm\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeConf\",\"outputs\":[{\"internalType\":\"contract IFeeConf\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeConf\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDuetVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"pendingValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setAppController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeConf\",\"type\":\"address\"}],\"name\":\"setFeeConf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_farm\",\"type\":\"address\"}],\"name\":\"setVaultFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dtoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"syncDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"dp\",\"type\":\"bool\"}],\"name\":\"underlyingAmountValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"dp\",\"type\":\"bool\"}],\"name\":\"userValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unpack\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unpack\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"withdrawCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unpack\",\"type\":\"bool\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"userValue(address,bool)\":{\"params\":{\"dp\":\"Discount \\u6216 Premium\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Deposit(address,uint256)\":{\"notice\":\"\\u5b58\\u6b3e\\u4e8b\\u4ef6\"},\"Liquidated(address,address,uint256)\":{\"notice\":\"\\u501f\\u6b3e\\u4eba\\u62b5\\u62bc\\u54c1\\u88ab\\u6e05\\u7b97\\u4e8b\\u4ef6\"},\"Withdraw(address,uint256)\":{\"notice\":\"\\u53d6\\u6b3e\\u4e8b\\u4ef6\"}},\"kind\":\"user\",\"methods\":{\"userValue(address,bool)\":{\"notice\":\"\\u7528\\u6237 Vault \\u4ef7\\u503c\\u4f30\\u503c\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vault/LpFarmingVault.sol\":\"LpFarmingVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"contracts/Constants.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ncontract Constants {\\n    uint256 internal constant PercentBase = 10000;\\n}\\n\",\"keccak256\":\"0xcb3094791fe70bdefa92f22834a8dea8384cd0cc0ee36fc2270804a9e43403fc\",\"license\":\"MIT\"},\"contracts/interfaces/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IController {\\n    // manage Vault state for risk control\\n    struct VaultState {\\n        bool enabled;\\n        bool enableDeposit;\\n        bool enableWithdraw;\\n        bool enableBorrow;\\n        bool enableRepay;\\n        bool enableLiquidate;\\n    }\\n\\n    function dyTokens(address) external view returns (address);\\n\\n    function getValueConf(address _underlying)\\n        external\\n        view\\n        returns (\\n            address oracle,\\n            uint16 dr,\\n            uint16 pr\\n        );\\n\\n    function getValueConfs(address token0, address token1)\\n        external\\n        view\\n        returns (\\n            address oracle0,\\n            uint16 dr0,\\n            uint16 pr0,\\n            address oracle1,\\n            uint16 dr1,\\n            uint16 pr1\\n        );\\n\\n    function strategies(address) external view returns (address);\\n\\n    function dyTokenVaults(address) external view returns (address);\\n\\n    function beforeDeposit(\\n        address,\\n        address _vault,\\n        uint256\\n    ) external view;\\n\\n    function beforeBorrow(\\n        address _borrower,\\n        address _vault,\\n        uint256 _amount\\n    ) external view;\\n\\n    function beforeWithdraw(\\n        address _redeemer,\\n        address _vault,\\n        uint256 _amount\\n    ) external view;\\n\\n    function beforeRepay(\\n        address _repayer,\\n        address _vault,\\n        uint256 _amount\\n    ) external view;\\n\\n    function joinVault(address _user, bool isDeposit) external;\\n\\n    function exitVault(address _user, bool isDeposit) external;\\n\\n    function userValues(address _user, bool _dp)\\n        external\\n        view\\n        returns (uint256 totalDepositValue, uint256 totalBorrowValue);\\n\\n    function userTotalValues(address _user, bool _dp)\\n        external\\n        view\\n        returns (uint256 totalDepositValue, uint256 totalBorrowValue);\\n\\n    function liquidate(address _borrower, bytes calldata data) external;\\n\\n    // ValidVault 0: uninitialized, default value\\n    // ValidVault 1: No, vault can not be collateralized\\n    // ValidVault 2: Yes, vault can be collateralized\\n    enum ValidVault {\\n        UnInit,\\n        No,\\n        Yes\\n    }\\n\\n    function initValidVault(address[] memory _vault, ValidVault[] memory _state) external;\\n\\n    function validVaults(address _vault) external view returns (ValidVault);\\n\\n    function validVaultsOfUser(address _vault, address _user) external view returns (ValidVault);\\n\\n    function setDYToken(address _underlying, address _dToken) external;\\n\\n    function setVault(\\n        address _dyToken,\\n        address _vault,\\n        uint256 vtype\\n    ) external;\\n\\n    function setOracles(\\n        address _underlying,\\n        address _oracle,\\n        uint16 _discount,\\n        uint16 _premium\\n    ) external;\\n\\n    function setVaultStates(address _vault, VaultState memory _state) external;\\n}\\n\",\"keccak256\":\"0xc2b2a6726add8f879ee37f0fdc40c5c252b6dfc6bebc04e5e3849fb2613b325b\",\"license\":\"MIT\"},\"contracts/interfaces/IDYToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\ninterface IDYToken {\\n    function deposit(uint256 _amount, address _toVault) external;\\n\\n    function depositTo(\\n        address _to,\\n        uint256 _amount,\\n        address _toVault\\n    ) external;\\n\\n    function depositCoin(address to, address _toVault) external payable;\\n\\n    function withdraw(\\n        address _to,\\n        uint256 _shares,\\n        bool needWETH\\n    ) external;\\n\\n    function underlyingTotal() external view returns (uint256);\\n\\n    function underlying() external view returns (address);\\n\\n    function balanceOfUnderlying(address _user) external view returns (uint256);\\n\\n    function underlyingAmount(uint256 amount) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x66c358cf367dd1d3aea6fa11e0f6b01789fe0f96006ec63585a2c8db3e2c091b\",\"license\":\"MIT\"},\"contracts/interfaces/IDepositVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IDepositVault {\\n    function deposits(address user) external view returns (uint256 amount);\\n\\n    function deposit(address dtoken, uint256 amount) external;\\n\\n    function depositTo(\\n        address dtoken,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function syncDeposit(\\n        address dtoken,\\n        uint256 amount,\\n        address user\\n    ) external;\\n\\n    function withdraw(uint256 amount, bool unpack) external;\\n\\n    function withdrawTo(\\n        address to,\\n        uint256 amount,\\n        bool unpack\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa560fa48e86685a5ba07da53a2fef51169beffd46faa478b1117d400eef35165\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeConf.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IFeeConf {\\n    function getConfig(bytes32 _key) external view returns (address, uint256);\\n}\\n\",\"keccak256\":\"0x2837ca85965d2042670e264d113960404f236d6285f8f95aef82bff78fa6acc8\",\"license\":\"MIT\"},\"contracts/interfaces/ILiquidateCallee.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface ILiquidateCallee {\\n    function liquidateDeposit(\\n        address borrower,\\n        address underlying,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function liquidateBorrow(\\n        address borrower,\\n        address underlying,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x346aa383c5c6f7ff7467f1529f779e838464692ab478e6ce8f7f5e7581685cac\",\"license\":\"MIT\"},\"contracts/interfaces/IPair.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\n// for PancakePair or UniswapPair\\ninterface IPair {\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4fcf0ae1e1c48bf0468310c0e67ef4dd38ba20d50d2f0e8f249d065c7e9dfc47\",\"license\":\"MIT\"},\"contracts/interfaces/IUSDOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\ninterface IUSDOracle {\\n    // Must 8 dec, same as chainlink decimals.\\n    function getPrice(address token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa35072c6709db1d7a566f91c9072e9575893ebd47b3b7aa55bd7f3666d2deae1\",\"license\":\"MIT\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IVault {\\n    // call from controller must impl.\\n    function underlying() external view returns (address);\\n\\n    function isDuetVault() external view returns (bool);\\n\\n    function liquidate(\\n        address liquidator,\\n        address borrower,\\n        bytes calldata data\\n    ) external;\\n\\n    function userValue(address user, bool dp) external view returns (uint256);\\n\\n    function pendingValue(address user, int256 pending) external view returns (uint256);\\n\\n    function underlyingAmountValue(uint256 amount, bool dp) external view returns (uint256 value);\\n}\\n\",\"keccak256\":\"0xf480a9d8974571f58e36781ac0120630d638b26ff9dfa58bf546b7984e7f59e9\",\"license\":\"MIT\"},\"contracts/interfaces/IVaultFarm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IVaultFarm {\\n    function syncDeposit(\\n        address _user,\\n        uint256 _amount,\\n        address asset\\n    ) external;\\n\\n    function syncWithdraw(\\n        address _user,\\n        uint256 _amount,\\n        address asset\\n    ) external;\\n\\n    function syncLiquidate(address _user, address asset) external;\\n}\\n\",\"keccak256\":\"0xa06afa521569c5ead354e7dea37446a127b05a33c2da3419842c368528c4159e\",\"license\":\"MIT\"},\"contracts/interfaces/IWithdrawCallee.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IWithdrawCallee {\\n    function execCallback(\\n        address sender,\\n        address asset,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6876c6368f698f58eda7570a3301b1206115b7f0638da16fda1c044db8f5877b\",\"license\":\"MIT\"},\"contracts/interfaces/IZap.sol\":{\"content\":\"pragma solidity >=0.8.0;\\n\\ninterface IZap {\\n    function lpToToken(\\n        address _lp,\\n        uint256 _amount,\\n        address _token,\\n        address _toUser,\\n        uint256 minAmout\\n    ) external returns (uint256 amount);\\n\\n    function tokenToLpbyPath(\\n        address _token,\\n        uint256 amount,\\n        address _lp,\\n        bool needDeposit,\\n        address[] memory pathArr0,\\n        address[] memory pathArr1\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7575ea97a2cf040260fa201c3ca75551c3ffb0334deb6a75602bf8a92bf5c0b1\"},\"contracts/libs/HomoraMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nlibrary HomoraMath {\\n    function divCeil(uint256 lhs, uint256 rhs) internal pure returns (uint256) {\\n        return (lhs + rhs - 1) / rhs;\\n    }\\n\\n    function fmul(uint256 lhs, uint256 rhs) internal pure returns (uint256) {\\n        return (lhs * rhs) / (2**112);\\n    }\\n\\n    function fdiv(uint256 lhs, uint256 rhs) internal pure returns (uint256) {\\n        return (lhs * (2**112)) / rhs;\\n    }\\n\\n    // implementation from https://github.com/Uniswap/uniswap-lib/commit/99f3f28770640ba1bb1ff460ac7c5292fb8291a0\\n    // original implementation: https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n        uint256 xx = x;\\n        uint256 r = 1;\\n\\n        if (xx >= 0x100000000000000000000000000000000) {\\n            xx >>= 128;\\n            r <<= 64;\\n        }\\n\\n        if (xx >= 0x10000000000000000) {\\n            xx >>= 64;\\n            r <<= 32;\\n        }\\n        if (xx >= 0x100000000) {\\n            xx >>= 32;\\n            r <<= 16;\\n        }\\n        if (xx >= 0x10000) {\\n            xx >>= 16;\\n            r <<= 8;\\n        }\\n        if (xx >= 0x100) {\\n            xx >>= 8;\\n            r <<= 4;\\n        }\\n        if (xx >= 0x10) {\\n            xx >>= 4;\\n            r <<= 2;\\n        }\\n        if (xx >= 0x8) {\\n            r <<= 1;\\n        }\\n\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return (r < r1 ? r : r1);\\n    }\\n}\\n\",\"keccak256\":\"0x5f8be3451ea8193d7fd5392b7818b7c0db55d891f094bc36b5de7215795be7d3\",\"license\":\"MIT\"},\"contracts/vault/DepositVaultBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"../interfaces/IDYToken.sol\\\";\\nimport \\\"../interfaces/IVault.sol\\\";\\nimport \\\"../interfaces/IDepositVault.sol\\\";\\nimport \\\"../interfaces/IController.sol\\\";\\nimport \\\"../interfaces/IUSDOracle.sol\\\";\\nimport \\\"../interfaces/IFeeConf.sol\\\";\\nimport \\\"../interfaces/IVaultFarm.sol\\\";\\nimport \\\"../interfaces/ILiquidateCallee.sol\\\";\\nimport \\\"../Constants.sol\\\";\\n\\nabstract contract DepositVaultBase is Constants, IVault, IDepositVault, OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n    address public override underlying;\\n    address public controller;\\n    IFeeConf public feeConf;\\n    IVaultFarm public farm;\\n\\n    // \\u7528\\u6237\\u5b58\\u6b3e\\n    mapping(address => uint256) public deposits;\\n\\n    /**\\n    * @notice \\u5b58\\u6b3e\\u4e8b\\u4ef6\\n      @param supplyer \\u5b58\\u6b3e\\u4eba\\uff08\\u5151\\u6362\\u4eba\\uff09\\n    */\\n    event Deposit(address indexed supplyer, uint256 amount);\\n\\n    /**\\n    * @notice \\u53d6\\u6b3e\\u4e8b\\u4ef6\\n      @param redeemer \\u53d6\\u6b3e\\u4eba\\uff08\\u5151\\u6362\\u4eba\\uff09\\n    */\\n    event Withdraw(address indexed redeemer, uint256 amount);\\n\\n    /**\\n    @notice \\u501f\\u6b3e\\u4eba\\u62b5\\u62bc\\u54c1\\u88ab\\u6e05\\u7b97\\u4e8b\\u4ef6\\n    @param liquidator \\u6e05\\u7b97\\u4eba\\n    @param borrower \\u501f\\u6b3e\\u4eba\\n    @param supplies  \\u5b58\\u6b3e\\n    */\\n    event Liquidated(address indexed liquidator, address indexed borrower, uint256 supplies);\\n\\n    event FeeConfChanged(address feeconf);\\n    event ControllerChanged(address controller);\\n    event FarmChanged(address farm);\\n\\n    /**\\n     * @notice \\u521d\\u59cb\\u5316\\n     * @dev  \\u5728Vault\\u521d\\u59cb\\u5316\\u65f6\\u8bbe\\u7f6e\\u8d27\\u5e01\\u57fa\\u7840\\u4fe1\\u606f\\n     */\\n    function init(\\n        address _controller,\\n        address _feeConf,\\n        address _underlying\\n    ) internal {\\n        OwnableUpgradeable.__Ownable_init();\\n        controller = _controller;\\n        feeConf = IFeeConf(_feeConf);\\n        underlying = _underlying;\\n    }\\n\\n    function isDuetVault() external view override returns (bool) {\\n        return true;\\n    }\\n\\n    function underlyingTransferIn(address sender, uint256 amount) internal virtual;\\n\\n    function underlyingTransferOut(\\n        address receipt,\\n        uint256 amount,\\n        bool giveWETH\\n    ) internal virtual;\\n\\n    function setFeeConf(address _feeConf) external onlyOwner {\\n        require(_feeConf != address(0), \\\"INVALID_FEECONF\\\");\\n        feeConf = IFeeConf(_feeConf);\\n        emit FeeConfChanged(_feeConf);\\n    }\\n\\n    function setAppController(address _controller) external onlyOwner {\\n        require(_controller != address(0), \\\"INVALID_CONTROLLER\\\");\\n        controller = _controller;\\n        emit ControllerChanged(_controller);\\n    }\\n\\n    function setVaultFarm(address _farm) external onlyOwner {\\n        require(_farm != address(0), \\\"INVALID_FARM\\\");\\n        farm = IVaultFarm(_farm);\\n        emit FarmChanged(_farm);\\n    }\\n\\n    function _deposit(address supplyer, uint256 amount) internal virtual nonReentrant {\\n        require(amount > 0, \\\"DEPOSITE_IS_ZERO\\\");\\n        IController(controller).beforeDeposit(supplyer, address(this), amount);\\n\\n        (address receiver, uint256 dFee) = feeConf.getConfig(\\\"deposit_fee\\\");\\n        uint256 actualAmount = amount;\\n        if (dFee > 0) {\\n            uint256 fee = (amount * dFee) / PercentBase;\\n            actualAmount = amount - fee;\\n            underlyingTransferOut(receiver, fee, false);\\n        }\\n\\n        deposits[supplyer] += actualAmount;\\n        emit Deposit(supplyer, actualAmount);\\n        _updateJoinStatus(supplyer);\\n\\n        if (address(farm) != address(0)) {\\n            farm.syncDeposit(supplyer, actualAmount, underlying);\\n        }\\n    }\\n\\n    /**\\n    @notice \\u53d6\\u6b3e\\n    @dev \\u63d0\\u73b0\\u8f6c\\u7ed9\\u6307\\u5b9a\\u7684\\u63a5\\u53d7\\u8005 to \\n    @param amount \\u63d0\\u53d6\\u6570\\u91cf\\n    @param unpack \\u662f\\u5426\\u89e3\\u5305underlying\\n    */\\n    function _withdraw(\\n        address to,\\n        uint256 amount,\\n        bool unpack\\n    ) internal virtual nonReentrant returns (uint256 actualAmount) {\\n        address redeemer = msg.sender;\\n        require(deposits[redeemer] >= amount, \\\"INSUFFICIENT_DEPOSIT\\\");\\n        IController(controller).beforeWithdraw(redeemer, address(this), amount);\\n\\n        deposits[redeemer] -= amount;\\n        emit Withdraw(redeemer, amount);\\n        _updateJoinStatus(redeemer);\\n\\n        if (address(farm) != address(0)) {\\n            farm.syncWithdraw(redeemer, amount, underlying);\\n        }\\n\\n        (address receiver, uint256 dFee) = feeConf.getConfig(\\\"withdraw_fee\\\");\\n        actualAmount = amount;\\n        if (dFee > 0) {\\n            uint256 fee = (amount * dFee) / PercentBase;\\n            actualAmount = amount - fee;\\n            underlyingTransferOut(receiver, fee, false);\\n        }\\n\\n        if (unpack) {\\n            IDYToken(underlying).withdraw(to, actualAmount, true);\\n        } else {\\n            underlyingTransferOut(to, actualAmount, false);\\n        }\\n    }\\n\\n    /**\\n     * @notice \\u6e05\\u7b97\\u8d26\\u6237\\u8d44\\u4ea7\\n     * @param liquidator \\u6e05\\u7b97\\u4eba\\n     * @param borrower \\u501f\\u6b3e\\u4eba\\n     */\\n    function _liquidate(\\n        address liquidator,\\n        address borrower,\\n        bytes calldata data\\n    ) internal virtual nonReentrant {\\n        require(msg.sender == controller, \\\"LIQUIDATE_INVALID_CALLER\\\");\\n        require(liquidator != borrower, \\\"LIQUIDATE_DISABLE_YOURSELF\\\");\\n\\n        uint256 supplies = deposits[borrower];\\n\\n        //\\u83b7\\u5f97\\u62b5\\u62bc\\u54c1\\n        if (supplies > 0) {\\n            uint256 toLiquidatorAmount = supplies;\\n            (address liqReceiver, uint256 liqFee) = feeConf.getConfig(\\\"liq_fee\\\");\\n            if (liqFee > 0 && liqReceiver != address(0)) {\\n                uint256 fee = (supplies * liqFee) / PercentBase;\\n                toLiquidatorAmount = toLiquidatorAmount - fee;\\n                underlyingTransferOut(liqReceiver, fee, true);\\n            }\\n\\n            underlyingTransferOut(liquidator, toLiquidatorAmount, true); //\\u5269\\u4f59\\u5f52\\u6e05\\u7b97\\u4eba\\n            if (data.length > 0)\\n                ILiquidateCallee(liquidator).liquidateDeposit(borrower, underlying, toLiquidatorAmount, data);\\n        }\\n\\n        deposits[borrower] = 0;\\n        emit Liquidated(liquidator, borrower, supplies);\\n        _updateJoinStatus(borrower);\\n\\n        if (address(farm) != address(0)) {\\n            farm.syncLiquidate(borrower, underlying);\\n        }\\n    }\\n\\n    function _updateJoinStatus(address _user) internal {\\n        bool isDepositVault = true;\\n        if (deposits[_user] > 0) {\\n            IController(controller).joinVault(_user, isDepositVault);\\n        } else {\\n            IController(controller).exitVault(_user, isDepositVault);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabdda44d17d8c5810e4ba2959cd9d05b4dddda18b33dda83a384496c9d068a9a\",\"license\":\"MIT\"},\"contracts/vault/LpFarmingVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"../interfaces/IController.sol\\\";\\nimport \\\"../interfaces/IDYToken.sol\\\";\\nimport \\\"../interfaces/IPair.sol\\\";\\nimport \\\"../interfaces/IUSDOracle.sol\\\";\\nimport \\\"../interfaces/IZap.sol\\\";\\nimport \\\"../interfaces/IWithdrawCallee.sol\\\";\\n\\nimport \\\"../libs/HomoraMath.sol\\\";\\n\\nimport \\\"./DepositVaultBase.sol\\\";\\n\\n// LpFarmingVault only for deposit\\ncontract LpFarmingVault is DepositVaultBase {\\n    using HomoraMath for uint256;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    address public pair;\\n    address public token0;\\n    uint256 internal decimal0Scale; // no used again\\n    address public token1;\\n    uint256 internal decimal1Scale; // no used again\\n\\n    constructor() initializer {}\\n\\n    function initialize(\\n        address _controller,\\n        address _feeConf,\\n        address _underlying\\n    ) external initializer {\\n        DepositVaultBase.init(_controller, _feeConf, _underlying);\\n        pair = IDYToken(_underlying).underlying();\\n\\n        token0 = IPair(pair).token0();\\n        token1 = IPair(pair).token1();\\n    }\\n\\n    function underlyingTransferIn(address sender, uint256 amount) internal virtual override {\\n        IERC20Upgradeable(underlying).safeTransferFrom(sender, address(this), amount);\\n    }\\n\\n    function underlyingTransferOut(\\n        address receipt,\\n        uint256 amount,\\n        bool\\n    ) internal virtual override {\\n        //  skip transfer to myself\\n        if (receipt == address(this)) {\\n            return;\\n        }\\n\\n        require(receipt != address(0), \\\"receipt is empty\\\");\\n        IERC20Upgradeable(underlying).safeTransfer(receipt, amount);\\n    }\\n\\n    function deposit(address dtoken, uint256 amount) external virtual override {\\n        require(dtoken == address(underlying), \\\"TOKEN_UNMATCH\\\");\\n        underlyingTransferIn(msg.sender, amount);\\n        _deposit(msg.sender, amount);\\n    }\\n\\n    function depositTo(\\n        address dtoken,\\n        address to,\\n        uint256 amount\\n    ) external {\\n        require(dtoken == address(underlying), \\\"TOKEN_UNMATCH\\\");\\n        underlyingTransferIn(msg.sender, amount);\\n        _deposit(to, amount);\\n    }\\n\\n    // call from dToken\\n    function syncDeposit(\\n        address dtoken,\\n        uint256 amount,\\n        address user\\n    ) external virtual override {\\n        address vault = IController(controller).dyTokenVaults(dtoken);\\n        require(msg.sender == underlying && dtoken == address(underlying), \\\"TOKEN_UNMATCH\\\");\\n        require(vault == address(this), \\\"VAULT_UNMATCH\\\");\\n        _deposit(user, amount);\\n    }\\n\\n    function withdraw(uint256 amount, bool unpack) external {\\n        _withdraw(msg.sender, amount, unpack);\\n    }\\n\\n    function withdrawTo(\\n        address to,\\n        uint256 amount,\\n        bool unpack\\n    ) external {\\n        _withdraw(to, amount, unpack);\\n    }\\n\\n    function withdrawCall(\\n        address to,\\n        uint256 amount,\\n        bool unpack,\\n        bytes calldata data\\n    ) external {\\n        uint256 actualAmount = _withdraw(to, amount, unpack);\\n        if (data.length > 0) {\\n            address asset = unpack ? pair : underlying;\\n            IWithdrawCallee(to).execCallback(msg.sender, asset, actualAmount, data);\\n        }\\n    }\\n\\n    function liquidate(\\n        address liquidator,\\n        address borrower,\\n        bytes calldata data\\n    ) external override {\\n        _liquidate(liquidator, borrower, data);\\n    }\\n\\n    function underlyingAmountValue(uint256 _amount, bool dp) public view returns (uint256 value) {\\n        if (_amount == 0) {\\n            return 0;\\n        }\\n        uint256 lpSupply = IERC20(pair).totalSupply();\\n\\n        (uint256 reserve0, uint256 reserve1, ) = IPair(pair).getReserves();\\n        uint256 sqrtK = HomoraMath.sqrt(reserve0 * reserve1).fdiv(lpSupply); // in 2**112\\n\\n        // get lp amount\\n        uint256 amount = IDYToken(underlying).underlyingAmount(_amount);\\n\\n        (address oracle0, uint256 dr0, , address oracle1, uint256 dr1, ) = IController(controller).getValueConfs(\\n            token0,\\n            token1\\n        );\\n\\n        uint256 price0 = IUSDOracle(oracle0).getPrice(token0);\\n        uint256 price1 = IUSDOracle(oracle1).getPrice(token1);\\n\\n        uint256 lp_price = (((sqrtK * 2 * (HomoraMath.sqrt(price0))) / (2**56)) * HomoraMath.sqrt(price1)) / 2**56;\\n\\n        if (dp) {\\n            value = (lp_price * amount * (dr0 + dr1)) / 2 / PercentBase / (10**18);\\n        } else {\\n            value = (lp_price * amount) / (10**18);\\n        }\\n    }\\n\\n    /**\\n    @notice \\u7528\\u6237 Vault \\u4ef7\\u503c\\u4f30\\u503c\\n    @param dp Discount \\u6216 Premium\\n  */\\n    function userValue(address user, bool dp) external view override returns (uint256) {\\n        if (deposits[user] == 0) {\\n            return 0;\\n        }\\n        return underlyingAmountValue(deposits[user], dp);\\n    }\\n\\n    // amount > 0 : deposit\\n    // amount < 0 : withdraw\\n    function pendingValue(address user, int256 amount) external view override returns (uint256) {\\n        if (amount >= 0) {\\n            return underlyingAmountValue(deposits[user] + uint256(amount), true);\\n        } else {\\n            return underlyingAmountValue(deposits[user] - uint256(0 - amount), true);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5506a9cac9d58672f91f15e07e92152e48ae795345c7e867697b4b542898cb00\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600062000020600162000087565b9050801562000039576000805461ff0019166101001790555b801562000080576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50620001a8565b60008054610100900460ff161562000120578160ff166001148015620000c05750620000be306200019960201b6200107e1760201c565b155b620001185760405162461bcd60e51b815260206004820152602e6024820152600080516020620029db83398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b506000919050565b60005460ff8084169116106200017f5760405162461bcd60e51b815260206004820152602e6024820152600080516020620029db83398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016200010f565b506000805460ff191660ff92909216919091179055600190565b6001600160a01b03163b151590565b61282380620001b86000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c8063877c8cd1116100de578063c0c53b8b11610097578063f213159c11610071578063f213159c14610351578063f2fde38b14610364578063f77c479114610377578063fc7e286d1461038a57600080fd5b8063c0c53b8b14610318578063d21220a71461032b578063eb1cc3ba1461033e57600080fd5b8063877c8cd1146102ac5780638da5cb5b146102bf578063a0d9d1d9146102d0578063a8aa1b31146102e3578063ae318c4d146102f6578063ba58591c1461030957600080fd5b806347e7ef241161014b5780636f307dc3116101255780636f307dc31461026b578063715018a61461027e57806373e2290c1461028657806374eb83c11461029957600080fd5b806347e7ef24146102325780635ac28bf9146102455780636695535c1461025857600080fd5b8063035262b9146101935780630dfe1681146101a85780631a6d413e146101d85780631db44b8e146101eb57806336e9332d1461020c57806338d074361461021f575b600080fd5b6101a66101a136600461214d565b6103aa565b005b609d546101bb906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101a66101e63660046121c0565b610457565b6101fe6101f93660046121dd565b610524565b6040519081526020016101cf565b609a546101bb906001600160a01b031681565b6101a661022d3660046121dd565b610979565b6101a661024036600461220d565b610989565b6101fe61025336600461220d565b6109ce565b6101a66102663660046121c0565b610a3e565b6097546101bb906001600160a01b031681565b6101a6610afe565b6101a6610294366004612239565b610b34565b6101a66102a736600461227b565b610b45565b6099546101bb906001600160a01b031681565b6033546001600160a01b03166101bb565b6101a66102de3660046121c0565b610b51565b609c546101bb906001600160a01b031681565b6101fe6103043660046122e0565b610c14565b604051600181526020016101cf565b6101a661032636600461230e565b610c63565b609f546101bb906001600160a01b031681565b6101a661034c36600461234e565b610e8c565b6101a661035f366004612385565b610fa2565b6101a66103723660046121c0565b610fe3565b6098546101bb906001600160a01b031681565b6101fe6103983660046121c0565b609b6020526000908152604090205481565b60006103b786868661108d565b9050811561044f576000846103d7576097546001600160a01b03166103e4565b609c546001600160a01b03165b6040516304dc8c2160e01b81529091506001600160a01b038816906304dc8c219061041b903390859087908a908a906004016123c6565b600060405180830381600087803b15801561043557600080fd5b505af1158015610449573d6000803e3d6000fd5b50505050505b505050505050565b6033546001600160a01b0316331461048a5760405162461bcd60e51b81526004016104819061241a565b60405180910390fd5b6001600160a01b0381166104cf5760405162461bcd60e51b815260206004820152600c60248201526b494e56414c49445f4641524d60a01b6044820152606401610481565b609a80546001600160a01b0319166001600160a01b0383169081179091556040519081527fe8d79c9831b9b25abf1785ab7027993c1cca203c617c418d316776b3c980ec8a906020015b60405180910390a150565b60008261053357506000610973565b609c54604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561057857600080fd5b505afa15801561058c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b0919061244f565b9050600080609c60009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561060357600080fd5b505afa158015610617573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063b919061247f565b506001600160701b039182169350169050600061066a8461066461065f85876124da565b6113d1565b9061154f565b60975460405163f755b39d60e01b8152600481018a90529192506000916001600160a01b039091169063f755b39d9060240160206040518083038186803b1580156106b457600080fd5b505afa1580156106c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ec919061244f565b609854609d54609f54604051633dcecc2f60e01b81526001600160a01b0392831660048201529082166024820152929350600092839283928392911690633dcecc2f9060440160c06040518083038186803b15801561074a57600080fd5b505afa15801561075e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610782919061250b565b50609d546040516341976e0960e01b81526001600160a01b03918216600482015295995061ffff94851698509196509092169350600092918716916341976e09915060240160206040518083038186803b1580156107df57600080fd5b505afa1580156107f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610817919061244f565b609f546040516341976e0960e01b81526001600160a01b039182166004820152919250600091908516906341976e099060240160206040518083038186803b15801561086257600080fd5b505afa158015610876573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089a919061244f565b90506000600160381b6108ac836113d1565b600160381b6108ba866113d1565b6108c58d60026124da565b6108cf91906124da565b6108d99190612583565b6108e391906124da565b6108ed9190612583565b90508d1561094657670de0b6b3a7640000612710600261090d878a6125a5565b6109178c866124da565b61092191906124da565b61092b9190612583565b6109359190612583565b61093f9190612583565b9c50610966565b670de0b6b3a764000061095989836124da565b6109639190612583565b9c505b5050505050505050505050505b92915050565b61098433838361108d565b505050565b6097546001600160a01b038381169116146109b65760405162461bcd60e51b8152600401610481906125bd565b6109c0338261156a565b6109ca3382611582565b5050565b6000808212610a0d576001600160a01b0383166000908152609b6020526040902054610a06906109ff9084906125a5565b6001610524565b9050610973565b610a06610a1b8360006125e4565b6001600160a01b0385166000908152609b60205260409020546109ff9190612623565b6033546001600160a01b03163314610a685760405162461bcd60e51b81526004016104819061241a565b6001600160a01b038116610ab05760405162461bcd60e51b815260206004820152600f60248201526e24a72b20a624a22fa322a2a1a7a72360891b6044820152606401610481565b609980546001600160a01b0319166001600160a01b0383169081179091556040519081527f2f848457f88c295370f87d543957f8cfe46e0759b3a528ae233eb79885a2949d90602001610519565b6033546001600160a01b03163314610b285760405162461bcd60e51b81526004016104819061241a565b610b326000611825565b565b610b3f83838361108d565b50505050565b610b3f84848484611877565b6033546001600160a01b03163314610b7b5760405162461bcd60e51b81526004016104819061241a565b6001600160a01b038116610bc65760405162461bcd60e51b815260206004820152601260248201527124a72b20a624a22fa1a7a72a2927a62622a960711b6044820152606401610481565b609880546001600160a01b0319166001600160a01b0383169081179091556040519081527f027c3e080ed9215f564a9455a666f7e459b3edc0bb6e02a1bf842fde4d0ccfc190602001610519565b6001600160a01b0382166000908152609b6020526040812054610c3957506000610973565b6001600160a01b0383166000908152609b6020526040902054610c5c9083610524565b9392505050565b6000610c6f6001611b8b565b90508015610c87576000805461ff0019166101001790555b610c92848484611c18565b816001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015610ccb57600080fd5b505afa158015610cdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d03919061263a565b609c80546001600160a01b0319166001600160a01b0392909216918217905560408051630dfe168160e01b81529051630dfe168191600480820192602092909190829003018186803b158015610d5857600080fd5b505afa158015610d6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d90919061263a565b609d80546001600160a01b0319166001600160a01b03928316179055609c546040805163d21220a760e01b81529051919092169163d21220a7916004808301926020929190829003018186803b158015610de957600080fd5b505afa158015610dfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e21919061263a565b609f80546001600160a01b0319166001600160a01b03929092169190911790558015610b3f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050565b60985460405163083d576560e41b81526001600160a01b03858116600483015260009216906383d576509060240160206040518083038186803b158015610ed257600080fd5b505afa158015610ee6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0a919061263a565b6097549091506001600160a01b031633148015610f3457506097546001600160a01b038581169116145b610f505760405162461bcd60e51b8152600401610481906125bd565b6001600160a01b0381163014610f985760405162461bcd60e51b815260206004820152600d60248201526c0ac82aa98a8beaa9c9a82a8869609b1b6044820152606401610481565b610b3f8284611582565b6097546001600160a01b03848116911614610fcf5760405162461bcd60e51b8152600401610481906125bd565b610fd9338261156a565b6109848282611582565b6033546001600160a01b0316331461100d5760405162461bcd60e51b81526004016104819061241a565b6001600160a01b0381166110725760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610481565b61107b81611825565b50565b6001600160a01b03163b151590565b6000600260655414156110b25760405162461bcd60e51b815260040161048190612657565b6002606555336000818152609b602052604090205484111561110d5760405162461bcd60e51b8152602060048201526014602482015273125394d551919250d251539517d1115413d4d25560621b6044820152606401610481565b60985460405163015304d160e21b81526001600160a01b038381166004830152306024830152604482018790529091169063054c13449060640160006040518083038186803b15801561115f57600080fd5b505afa158015611173573d6000803e3d6000fd5b505050506001600160a01b0381166000908152609b60205260408120805486929061119f908490612623565b90915550506040518481526001600160a01b038216907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a26111eb81611c5f565b609a546001600160a01b03161561126d57609a5460975460405163a66bd52160e01b81526001600160a01b03848116600483015260248201889052918216604482015291169063a66bd52190606401600060405180830381600087803b15801561125457600080fd5b505af1158015611268573d6000803e3d6000fd5b505050505b609954604051636dd5b69d60e01b81526b77697468647261775f66656560a01b600482015260009182916001600160a01b0390911690636dd5b69d90602401604080518083038186803b1580156112c357600080fd5b505afa1580156112d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fb919061268e565b8795509092509050801561133e57600061271061131883896124da565b6113229190612583565b905061132e8188612623565b945061133c83826000611d1e565b505b84156113b65760975460405163ead5d35960e01b81526001600160a01b03898116600483015260248201879052600160448301529091169063ead5d35990606401600060405180830381600087803b15801561139957600080fd5b505af11580156113ad573d6000803e3d6000fd5b505050506113c2565b6113c287856000611d1e565b50506001606555509392505050565b6000816113e057506000919050565b816001600160801b82106113f95760809190911c9060401b5b6801000000000000000082106114145760409190911c9060201b5b640100000000821061142b5760209190911c9060101b5b6201000082106114405760109190911c9060081b5b61010082106114545760089190911c9060041b5b601082106114675760049190911c9060021b5b600882106114735760011b5b600161147f8286612583565b61148990836125a5565b901c905060016114998286612583565b6114a390836125a5565b901c905060016114b38286612583565b6114bd90836125a5565b901c905060016114cd8286612583565b6114d790836125a5565b901c905060016114e78286612583565b6114f190836125a5565b901c905060016115018286612583565b61150b90836125a5565b901c9050600161151b8286612583565b61152590836125a5565b901c905060006115358286612583565b90508082106115445780611546565b815b95945050505050565b60008161156084600160701b6124da565b610c5c9190612583565b6097546109ca906001600160a01b0316833084611d94565b600260655414156115a55760405162461bcd60e51b815260040161048190612657565b6002606555806115ea5760405162461bcd60e51b815260206004820152601060248201526f4445504f534954455f49535f5a45524f60801b6044820152606401610481565b6098546040516309ba9b4760e01b81526001600160a01b03848116600483015230602483015260448201849052909116906309ba9b479060640160006040518083038186803b15801561163c57600080fd5b505afa158015611650573d6000803e3d6000fd5b5050609954604051636dd5b69d60e01b81526a6465706f7369745f66656560a81b6004820152600093508392506001600160a01b0390911690636dd5b69d90602401604080518083038186803b1580156116a957600080fd5b505afa1580156116bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e1919061268e565b90925090508281156117225760006127106116fc84876124da565b6117069190612583565b90506117128186612623565b915061172084826000611d1e565b505b6001600160a01b0385166000908152609b60205260408120805483929061174a9084906125a5565b90915550506040518181526001600160a01b038616907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a261179685611c5f565b609a546001600160a01b03161561181957609a5460975460405163758e61dd60e11b81526001600160a01b03888116600483015260248201859052918216604482015291169063eb1cc3ba906064015b600060405180830381600087803b15801561180057600080fd5b505af1158015611814573d6000803e3d6000fd5b505050505b50506001606555505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6002606554141561189a5760405162461bcd60e51b815260040161048190612657565b60026065556098546001600160a01b031633146118f95760405162461bcd60e51b815260206004820152601860248201527f4c49515549444154455f494e56414c49445f43414c4c455200000000000000006044820152606401610481565b826001600160a01b0316846001600160a01b0316141561195b5760405162461bcd60e51b815260206004820152601a60248201527f4c49515549444154455f44495341424c455f594f555253454c460000000000006044820152606401610481565b6001600160a01b0383166000908152609b60205260409020548015611ada57609954604051636dd5b69d60e01b8152666c69715f66656560c81b6004820152829160009182916001600160a01b031690636dd5b69d90602401604080518083038186803b1580156119cb57600080fd5b505afa1580156119df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a03919061268e565b91509150600081118015611a1f57506001600160a01b03821615155b15611a59576000612710611a3383876124da565b611a3d9190612583565b9050611a498185612623565b9350611a5783826001611d1e565b505b611a6588846001611d1e565b8415611ad657609754604051631d20dce760e01b81526001600160a01b03808b1692631d20dce792611aa3928c92169088908c908c906004016123c6565b600060405180830381600087803b158015611abd57600080fd5b505af1158015611ad1573d6000803e3d6000fd5b505050505b5050505b6001600160a01b038085166000818152609b6020526040808220919091555190918716907fde0aa27286f5cb3a4ed853dc4823ead62d63e92cdf13de09d6aece56970721a490611b2d9085815260200190565b60405180910390a3611b3e84611c5f565b609a546001600160a01b03161561181957609a546097546040516322211d1160e21b81526001600160a01b03878116600483015291821660248201529116906388847444906044016117e6565b60008054610100900460ff1615611bd2578160ff166001148015611bae5750303b155b611bca5760405162461bcd60e51b8152600401610481906126bc565b506000919050565b60005460ff808416911610611bf95760405162461bcd60e51b8152600401610481906126bc565b506000805460ff191660ff92909216919091179055600190565b919050565b611c20611dff565b609880546001600160a01b039485166001600160a01b031991821617909155609980549385169382169390931790925560978054919093169116179055565b6001600160a01b0381166000908152609b602052604090205460019015611ce45760985460405163c4c0048760e01b81526001600160a01b03848116600483015283151560248301529091169063c4c00487906044015b600060405180830381600087803b158015611cd057600080fd5b505af115801561044f573d6000803e3d6000fd5b6098546040516379bf27b160e01b81526001600160a01b0384811660048301528315156024830152909116906379bf27b190604401611cb6565b6001600160a01b038316301415611d3457505050565b6001600160a01b038316611d7d5760405162461bcd60e51b815260206004820152601060248201526f7265636569707420697320656d70747960801b6044820152606401610481565b609754610984906001600160a01b03168484611e2e565b6040516001600160a01b0380851660248301528316604482015260648101829052610b3f9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611e5e565b600054610100900460ff16611e265760405162461bcd60e51b81526004016104819061270a565b610b32611f30565b6040516001600160a01b03831660248201526044810182905261098490849063a9059cbb60e01b90606401611dc8565b6000611eb3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611f609092919063ffffffff16565b8051909150156109845780806020019051810190611ed19190612755565b6109845760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610481565b600054610100900460ff16611f575760405162461bcd60e51b81526004016104819061270a565b610b3233611825565b6060611f6f8484600085611f77565b949350505050565b606082471015611fd85760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610481565b6001600160a01b0385163b61202f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610481565b600080866001600160a01b0316858760405161204b919061279e565b60006040518083038185875af1925050503d8060008114612088576040519150601f19603f3d011682016040523d82523d6000602084013e61208d565b606091505b509150915061209d8282866120a8565b979650505050505050565b606083156120b7575081610c5c565b8251156120c75782518084602001fd5b8160405162461bcd60e51b815260040161048191906127ba565b6001600160a01b038116811461107b57600080fd5b801515811461107b57600080fd5b60008083601f84011261211657600080fd5b50813567ffffffffffffffff81111561212e57600080fd5b60208301915083602082850101111561214657600080fd5b9250929050565b60008060008060006080868803121561216557600080fd5b8535612170816120e1565b9450602086013593506040860135612187816120f6565b9250606086013567ffffffffffffffff8111156121a357600080fd5b6121af88828901612104565b969995985093965092949392505050565b6000602082840312156121d257600080fd5b8135610c5c816120e1565b600080604083850312156121f057600080fd5b823591506020830135612202816120f6565b809150509250929050565b6000806040838503121561222057600080fd5b823561222b816120e1565b946020939093013593505050565b60008060006060848603121561224e57600080fd5b8335612259816120e1565b9250602084013591506040840135612270816120f6565b809150509250925092565b6000806000806060858703121561229157600080fd5b843561229c816120e1565b935060208501356122ac816120e1565b9250604085013567ffffffffffffffff8111156122c857600080fd5b6122d487828801612104565b95989497509550505050565b600080604083850312156122f357600080fd5b82356122fe816120e1565b91506020830135612202816120f6565b60008060006060848603121561232357600080fd5b833561232e816120e1565b9250602084013561233e816120e1565b91506040840135612270816120e1565b60008060006060848603121561236357600080fd5b833561236e816120e1565b9250602084013591506040840135612270816120e1565b60008060006060848603121561239a57600080fd5b83356123a5816120e1565b925060208401356123b5816120e1565b929592945050506040919091013590565b6001600160a01b038681168252851660208201526040810184905260806060820181905281018290526000828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561246157600080fd5b5051919050565b80516001600160701b0381168114611c1357600080fd5b60008060006060848603121561249457600080fd5b61249d84612468565b92506124ab60208501612468565b9150604084015163ffffffff8116811461227057600080fd5b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156124f4576124f46124c4565b500290565b805161ffff81168114611c1357600080fd5b60008060008060008060c0878903121561252457600080fd5b865161252f816120e1565b955061253d602088016124f9565b945061254b604088016124f9565b9350606087015161255b816120e1565b9250612569608088016124f9565b915061257760a088016124f9565b90509295509295509295565b6000826125a057634e487b7160e01b600052601260045260246000fd5b500490565b600082198211156125b8576125b86124c4565b500190565b6020808252600d908201526c0a89e968a9cbeaa9c9a82a8869609b1b604082015260600190565b60008083128015600160ff1b850184121615612602576126026124c4565b6001600160ff1b038401831381161561261d5761261d6124c4565b50500390565b600082821015612635576126356124c4565b500390565b60006020828403121561264c57600080fd5b8151610c5c816120e1565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600080604083850312156126a157600080fd5b82516126ac816120e1565b6020939093015192949293505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60006020828403121561276757600080fd5b8151610c5c816120f6565b60005b8381101561278d578181015183820152602001612775565b83811115610b3f5750506000910152565b600082516127b0818460208701612772565b9190910192915050565b60208152600082518060208401526127d9816040850160208701612772565b601f01601f1916919091016040019291505056fea26469706673582212204853692aa7e8e9124d794c2640d0e865940168cee5c9083ca5dc4b4b9e758d6864736f6c63430008090033496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c8063877c8cd1116100de578063c0c53b8b11610097578063f213159c11610071578063f213159c14610351578063f2fde38b14610364578063f77c479114610377578063fc7e286d1461038a57600080fd5b8063c0c53b8b14610318578063d21220a71461032b578063eb1cc3ba1461033e57600080fd5b8063877c8cd1146102ac5780638da5cb5b146102bf578063a0d9d1d9146102d0578063a8aa1b31146102e3578063ae318c4d146102f6578063ba58591c1461030957600080fd5b806347e7ef241161014b5780636f307dc3116101255780636f307dc31461026b578063715018a61461027e57806373e2290c1461028657806374eb83c11461029957600080fd5b806347e7ef24146102325780635ac28bf9146102455780636695535c1461025857600080fd5b8063035262b9146101935780630dfe1681146101a85780631a6d413e146101d85780631db44b8e146101eb57806336e9332d1461020c57806338d074361461021f575b600080fd5b6101a66101a136600461214d565b6103aa565b005b609d546101bb906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101a66101e63660046121c0565b610457565b6101fe6101f93660046121dd565b610524565b6040519081526020016101cf565b609a546101bb906001600160a01b031681565b6101a661022d3660046121dd565b610979565b6101a661024036600461220d565b610989565b6101fe61025336600461220d565b6109ce565b6101a66102663660046121c0565b610a3e565b6097546101bb906001600160a01b031681565b6101a6610afe565b6101a6610294366004612239565b610b34565b6101a66102a736600461227b565b610b45565b6099546101bb906001600160a01b031681565b6033546001600160a01b03166101bb565b6101a66102de3660046121c0565b610b51565b609c546101bb906001600160a01b031681565b6101fe6103043660046122e0565b610c14565b604051600181526020016101cf565b6101a661032636600461230e565b610c63565b609f546101bb906001600160a01b031681565b6101a661034c36600461234e565b610e8c565b6101a661035f366004612385565b610fa2565b6101a66103723660046121c0565b610fe3565b6098546101bb906001600160a01b031681565b6101fe6103983660046121c0565b609b6020526000908152604090205481565b60006103b786868661108d565b9050811561044f576000846103d7576097546001600160a01b03166103e4565b609c546001600160a01b03165b6040516304dc8c2160e01b81529091506001600160a01b038816906304dc8c219061041b903390859087908a908a906004016123c6565b600060405180830381600087803b15801561043557600080fd5b505af1158015610449573d6000803e3d6000fd5b50505050505b505050505050565b6033546001600160a01b0316331461048a5760405162461bcd60e51b81526004016104819061241a565b60405180910390fd5b6001600160a01b0381166104cf5760405162461bcd60e51b815260206004820152600c60248201526b494e56414c49445f4641524d60a01b6044820152606401610481565b609a80546001600160a01b0319166001600160a01b0383169081179091556040519081527fe8d79c9831b9b25abf1785ab7027993c1cca203c617c418d316776b3c980ec8a906020015b60405180910390a150565b60008261053357506000610973565b609c54604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561057857600080fd5b505afa15801561058c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b0919061244f565b9050600080609c60009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561060357600080fd5b505afa158015610617573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063b919061247f565b506001600160701b039182169350169050600061066a8461066461065f85876124da565b6113d1565b9061154f565b60975460405163f755b39d60e01b8152600481018a90529192506000916001600160a01b039091169063f755b39d9060240160206040518083038186803b1580156106b457600080fd5b505afa1580156106c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ec919061244f565b609854609d54609f54604051633dcecc2f60e01b81526001600160a01b0392831660048201529082166024820152929350600092839283928392911690633dcecc2f9060440160c06040518083038186803b15801561074a57600080fd5b505afa15801561075e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610782919061250b565b50609d546040516341976e0960e01b81526001600160a01b03918216600482015295995061ffff94851698509196509092169350600092918716916341976e09915060240160206040518083038186803b1580156107df57600080fd5b505afa1580156107f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610817919061244f565b609f546040516341976e0960e01b81526001600160a01b039182166004820152919250600091908516906341976e099060240160206040518083038186803b15801561086257600080fd5b505afa158015610876573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089a919061244f565b90506000600160381b6108ac836113d1565b600160381b6108ba866113d1565b6108c58d60026124da565b6108cf91906124da565b6108d99190612583565b6108e391906124da565b6108ed9190612583565b90508d1561094657670de0b6b3a7640000612710600261090d878a6125a5565b6109178c866124da565b61092191906124da565b61092b9190612583565b6109359190612583565b61093f9190612583565b9c50610966565b670de0b6b3a764000061095989836124da565b6109639190612583565b9c505b5050505050505050505050505b92915050565b61098433838361108d565b505050565b6097546001600160a01b038381169116146109b65760405162461bcd60e51b8152600401610481906125bd565b6109c0338261156a565b6109ca3382611582565b5050565b6000808212610a0d576001600160a01b0383166000908152609b6020526040902054610a06906109ff9084906125a5565b6001610524565b9050610973565b610a06610a1b8360006125e4565b6001600160a01b0385166000908152609b60205260409020546109ff9190612623565b6033546001600160a01b03163314610a685760405162461bcd60e51b81526004016104819061241a565b6001600160a01b038116610ab05760405162461bcd60e51b815260206004820152600f60248201526e24a72b20a624a22fa322a2a1a7a72360891b6044820152606401610481565b609980546001600160a01b0319166001600160a01b0383169081179091556040519081527f2f848457f88c295370f87d543957f8cfe46e0759b3a528ae233eb79885a2949d90602001610519565b6033546001600160a01b03163314610b285760405162461bcd60e51b81526004016104819061241a565b610b326000611825565b565b610b3f83838361108d565b50505050565b610b3f84848484611877565b6033546001600160a01b03163314610b7b5760405162461bcd60e51b81526004016104819061241a565b6001600160a01b038116610bc65760405162461bcd60e51b815260206004820152601260248201527124a72b20a624a22fa1a7a72a2927a62622a960711b6044820152606401610481565b609880546001600160a01b0319166001600160a01b0383169081179091556040519081527f027c3e080ed9215f564a9455a666f7e459b3edc0bb6e02a1bf842fde4d0ccfc190602001610519565b6001600160a01b0382166000908152609b6020526040812054610c3957506000610973565b6001600160a01b0383166000908152609b6020526040902054610c5c9083610524565b9392505050565b6000610c6f6001611b8b565b90508015610c87576000805461ff0019166101001790555b610c92848484611c18565b816001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015610ccb57600080fd5b505afa158015610cdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d03919061263a565b609c80546001600160a01b0319166001600160a01b0392909216918217905560408051630dfe168160e01b81529051630dfe168191600480820192602092909190829003018186803b158015610d5857600080fd5b505afa158015610d6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d90919061263a565b609d80546001600160a01b0319166001600160a01b03928316179055609c546040805163d21220a760e01b81529051919092169163d21220a7916004808301926020929190829003018186803b158015610de957600080fd5b505afa158015610dfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e21919061263a565b609f80546001600160a01b0319166001600160a01b03929092169190911790558015610b3f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050565b60985460405163083d576560e41b81526001600160a01b03858116600483015260009216906383d576509060240160206040518083038186803b158015610ed257600080fd5b505afa158015610ee6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0a919061263a565b6097549091506001600160a01b031633148015610f3457506097546001600160a01b038581169116145b610f505760405162461bcd60e51b8152600401610481906125bd565b6001600160a01b0381163014610f985760405162461bcd60e51b815260206004820152600d60248201526c0ac82aa98a8beaa9c9a82a8869609b1b6044820152606401610481565b610b3f8284611582565b6097546001600160a01b03848116911614610fcf5760405162461bcd60e51b8152600401610481906125bd565b610fd9338261156a565b6109848282611582565b6033546001600160a01b0316331461100d5760405162461bcd60e51b81526004016104819061241a565b6001600160a01b0381166110725760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610481565b61107b81611825565b50565b6001600160a01b03163b151590565b6000600260655414156110b25760405162461bcd60e51b815260040161048190612657565b6002606555336000818152609b602052604090205484111561110d5760405162461bcd60e51b8152602060048201526014602482015273125394d551919250d251539517d1115413d4d25560621b6044820152606401610481565b60985460405163015304d160e21b81526001600160a01b038381166004830152306024830152604482018790529091169063054c13449060640160006040518083038186803b15801561115f57600080fd5b505afa158015611173573d6000803e3d6000fd5b505050506001600160a01b0381166000908152609b60205260408120805486929061119f908490612623565b90915550506040518481526001600160a01b038216907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a26111eb81611c5f565b609a546001600160a01b03161561126d57609a5460975460405163a66bd52160e01b81526001600160a01b03848116600483015260248201889052918216604482015291169063a66bd52190606401600060405180830381600087803b15801561125457600080fd5b505af1158015611268573d6000803e3d6000fd5b505050505b609954604051636dd5b69d60e01b81526b77697468647261775f66656560a01b600482015260009182916001600160a01b0390911690636dd5b69d90602401604080518083038186803b1580156112c357600080fd5b505afa1580156112d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fb919061268e565b8795509092509050801561133e57600061271061131883896124da565b6113229190612583565b905061132e8188612623565b945061133c83826000611d1e565b505b84156113b65760975460405163ead5d35960e01b81526001600160a01b03898116600483015260248201879052600160448301529091169063ead5d35990606401600060405180830381600087803b15801561139957600080fd5b505af11580156113ad573d6000803e3d6000fd5b505050506113c2565b6113c287856000611d1e565b50506001606555509392505050565b6000816113e057506000919050565b816001600160801b82106113f95760809190911c9060401b5b6801000000000000000082106114145760409190911c9060201b5b640100000000821061142b5760209190911c9060101b5b6201000082106114405760109190911c9060081b5b61010082106114545760089190911c9060041b5b601082106114675760049190911c9060021b5b600882106114735760011b5b600161147f8286612583565b61148990836125a5565b901c905060016114998286612583565b6114a390836125a5565b901c905060016114b38286612583565b6114bd90836125a5565b901c905060016114cd8286612583565b6114d790836125a5565b901c905060016114e78286612583565b6114f190836125a5565b901c905060016115018286612583565b61150b90836125a5565b901c9050600161151b8286612583565b61152590836125a5565b901c905060006115358286612583565b90508082106115445780611546565b815b95945050505050565b60008161156084600160701b6124da565b610c5c9190612583565b6097546109ca906001600160a01b0316833084611d94565b600260655414156115a55760405162461bcd60e51b815260040161048190612657565b6002606555806115ea5760405162461bcd60e51b815260206004820152601060248201526f4445504f534954455f49535f5a45524f60801b6044820152606401610481565b6098546040516309ba9b4760e01b81526001600160a01b03848116600483015230602483015260448201849052909116906309ba9b479060640160006040518083038186803b15801561163c57600080fd5b505afa158015611650573d6000803e3d6000fd5b5050609954604051636dd5b69d60e01b81526a6465706f7369745f66656560a81b6004820152600093508392506001600160a01b0390911690636dd5b69d90602401604080518083038186803b1580156116a957600080fd5b505afa1580156116bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e1919061268e565b90925090508281156117225760006127106116fc84876124da565b6117069190612583565b90506117128186612623565b915061172084826000611d1e565b505b6001600160a01b0385166000908152609b60205260408120805483929061174a9084906125a5565b90915550506040518181526001600160a01b038616907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a261179685611c5f565b609a546001600160a01b03161561181957609a5460975460405163758e61dd60e11b81526001600160a01b03888116600483015260248201859052918216604482015291169063eb1cc3ba906064015b600060405180830381600087803b15801561180057600080fd5b505af1158015611814573d6000803e3d6000fd5b505050505b50506001606555505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6002606554141561189a5760405162461bcd60e51b815260040161048190612657565b60026065556098546001600160a01b031633146118f95760405162461bcd60e51b815260206004820152601860248201527f4c49515549444154455f494e56414c49445f43414c4c455200000000000000006044820152606401610481565b826001600160a01b0316846001600160a01b0316141561195b5760405162461bcd60e51b815260206004820152601a60248201527f4c49515549444154455f44495341424c455f594f555253454c460000000000006044820152606401610481565b6001600160a01b0383166000908152609b60205260409020548015611ada57609954604051636dd5b69d60e01b8152666c69715f66656560c81b6004820152829160009182916001600160a01b031690636dd5b69d90602401604080518083038186803b1580156119cb57600080fd5b505afa1580156119df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a03919061268e565b91509150600081118015611a1f57506001600160a01b03821615155b15611a59576000612710611a3383876124da565b611a3d9190612583565b9050611a498185612623565b9350611a5783826001611d1e565b505b611a6588846001611d1e565b8415611ad657609754604051631d20dce760e01b81526001600160a01b03808b1692631d20dce792611aa3928c92169088908c908c906004016123c6565b600060405180830381600087803b158015611abd57600080fd5b505af1158015611ad1573d6000803e3d6000fd5b505050505b5050505b6001600160a01b038085166000818152609b6020526040808220919091555190918716907fde0aa27286f5cb3a4ed853dc4823ead62d63e92cdf13de09d6aece56970721a490611b2d9085815260200190565b60405180910390a3611b3e84611c5f565b609a546001600160a01b03161561181957609a546097546040516322211d1160e21b81526001600160a01b03878116600483015291821660248201529116906388847444906044016117e6565b60008054610100900460ff1615611bd2578160ff166001148015611bae5750303b155b611bca5760405162461bcd60e51b8152600401610481906126bc565b506000919050565b60005460ff808416911610611bf95760405162461bcd60e51b8152600401610481906126bc565b506000805460ff191660ff92909216919091179055600190565b919050565b611c20611dff565b609880546001600160a01b039485166001600160a01b031991821617909155609980549385169382169390931790925560978054919093169116179055565b6001600160a01b0381166000908152609b602052604090205460019015611ce45760985460405163c4c0048760e01b81526001600160a01b03848116600483015283151560248301529091169063c4c00487906044015b600060405180830381600087803b158015611cd057600080fd5b505af115801561044f573d6000803e3d6000fd5b6098546040516379bf27b160e01b81526001600160a01b0384811660048301528315156024830152909116906379bf27b190604401611cb6565b6001600160a01b038316301415611d3457505050565b6001600160a01b038316611d7d5760405162461bcd60e51b815260206004820152601060248201526f7265636569707420697320656d70747960801b6044820152606401610481565b609754610984906001600160a01b03168484611e2e565b6040516001600160a01b0380851660248301528316604482015260648101829052610b3f9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611e5e565b600054610100900460ff16611e265760405162461bcd60e51b81526004016104819061270a565b610b32611f30565b6040516001600160a01b03831660248201526044810182905261098490849063a9059cbb60e01b90606401611dc8565b6000611eb3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611f609092919063ffffffff16565b8051909150156109845780806020019051810190611ed19190612755565b6109845760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610481565b600054610100900460ff16611f575760405162461bcd60e51b81526004016104819061270a565b610b3233611825565b6060611f6f8484600085611f77565b949350505050565b606082471015611fd85760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610481565b6001600160a01b0385163b61202f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610481565b600080866001600160a01b0316858760405161204b919061279e565b60006040518083038185875af1925050503d8060008114612088576040519150601f19603f3d011682016040523d82523d6000602084013e61208d565b606091505b509150915061209d8282866120a8565b979650505050505050565b606083156120b7575081610c5c565b8251156120c75782518084602001fd5b8160405162461bcd60e51b815260040161048191906127ba565b6001600160a01b038116811461107b57600080fd5b801515811461107b57600080fd5b60008083601f84011261211657600080fd5b50813567ffffffffffffffff81111561212e57600080fd5b60208301915083602082850101111561214657600080fd5b9250929050565b60008060008060006080868803121561216557600080fd5b8535612170816120e1565b9450602086013593506040860135612187816120f6565b9250606086013567ffffffffffffffff8111156121a357600080fd5b6121af88828901612104565b969995985093965092949392505050565b6000602082840312156121d257600080fd5b8135610c5c816120e1565b600080604083850312156121f057600080fd5b823591506020830135612202816120f6565b809150509250929050565b6000806040838503121561222057600080fd5b823561222b816120e1565b946020939093013593505050565b60008060006060848603121561224e57600080fd5b8335612259816120e1565b9250602084013591506040840135612270816120f6565b809150509250925092565b6000806000806060858703121561229157600080fd5b843561229c816120e1565b935060208501356122ac816120e1565b9250604085013567ffffffffffffffff8111156122c857600080fd5b6122d487828801612104565b95989497509550505050565b600080604083850312156122f357600080fd5b82356122fe816120e1565b91506020830135612202816120f6565b60008060006060848603121561232357600080fd5b833561232e816120e1565b9250602084013561233e816120e1565b91506040840135612270816120e1565b60008060006060848603121561236357600080fd5b833561236e816120e1565b9250602084013591506040840135612270816120e1565b60008060006060848603121561239a57600080fd5b83356123a5816120e1565b925060208401356123b5816120e1565b929592945050506040919091013590565b6001600160a01b038681168252851660208201526040810184905260806060820181905281018290526000828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561246157600080fd5b5051919050565b80516001600160701b0381168114611c1357600080fd5b60008060006060848603121561249457600080fd5b61249d84612468565b92506124ab60208501612468565b9150604084015163ffffffff8116811461227057600080fd5b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156124f4576124f46124c4565b500290565b805161ffff81168114611c1357600080fd5b60008060008060008060c0878903121561252457600080fd5b865161252f816120e1565b955061253d602088016124f9565b945061254b604088016124f9565b9350606087015161255b816120e1565b9250612569608088016124f9565b915061257760a088016124f9565b90509295509295509295565b6000826125a057634e487b7160e01b600052601260045260246000fd5b500490565b600082198211156125b8576125b86124c4565b500190565b6020808252600d908201526c0a89e968a9cbeaa9c9a82a8869609b1b604082015260600190565b60008083128015600160ff1b850184121615612602576126026124c4565b6001600160ff1b038401831381161561261d5761261d6124c4565b50500390565b600082821015612635576126356124c4565b500390565b60006020828403121561264c57600080fd5b8151610c5c816120e1565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600080604083850312156126a157600080fd5b82516126ac816120e1565b6020939093015192949293505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60006020828403121561276757600080fd5b8151610c5c816120f6565b60005b8381101561278d578181015183820152602001612775565b83811115610b3f5750506000910152565b600082516127b0818460208701612772565b9190910192915050565b60208152600082518060208401526127d9816040850160208701612772565b601f01601f1916919091016040019291505056fea26469706673582212204853692aa7e8e9124d794c2640d0e865940168cee5c9083ca5dc4b4b9e758d6864736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "userValue(address,bool)": {
        "params": {
          "dp": "Discount 或 Premium"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Deposit(address,uint256)": {
        "notice": "存款事件"
      },
      "Liquidated(address,address,uint256)": {
        "notice": "借款人抵押品被清算事件"
      },
      "Withdraw(address,uint256)": {
        "notice": "取款事件"
      }
    },
    "kind": "user",
    "methods": {
      "userValue(address,bool)": {
        "notice": "用户 Vault 价值估值"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 188,
        "contract": "contracts/vault/LpFarmingVault.sol:LpFarmingVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 191,
        "contract": "contracts/vault/LpFarmingVault.sol:LpFarmingVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1640,
        "contract": "contracts/vault/LpFarmingVault.sol:LpFarmingVault",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 68,
        "contract": "contracts/vault/LpFarmingVault.sol:LpFarmingVault",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 180,
        "contract": "contracts/vault/LpFarmingVault.sol:LpFarmingVault",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 337,
        "contract": "contracts/vault/LpFarmingVault.sol:LpFarmingVault",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 381,
        "contract": "contracts/vault/LpFarmingVault.sol:LpFarmingVault",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 26464,
        "contract": "contracts/vault/LpFarmingVault.sol:LpFarmingVault",
        "label": "underlying",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 26466,
        "contract": "contracts/vault/LpFarmingVault.sol:LpFarmingVault",
        "label": "controller",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 26469,
        "contract": "contracts/vault/LpFarmingVault.sol:LpFarmingVault",
        "label": "feeConf",
        "offset": 0,
        "slot": "153",
        "type": "t_contract(IFeeConf)18388"
      },
      {
        "astId": 26472,
        "contract": "contracts/vault/LpFarmingVault.sol:LpFarmingVault",
        "label": "farm",
        "offset": 0,
        "slot": "154",
        "type": "t_contract(IVaultFarm)19191"
      },
      {
        "astId": 26476,
        "contract": "contracts/vault/LpFarmingVault.sol:LpFarmingVault",
        "label": "deposits",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 27087,
        "contract": "contracts/vault/LpFarmingVault.sol:LpFarmingVault",
        "label": "pair",
        "offset": 0,
        "slot": "156",
        "type": "t_address"
      },
      {
        "astId": 27089,
        "contract": "contracts/vault/LpFarmingVault.sol:LpFarmingVault",
        "label": "token0",
        "offset": 0,
        "slot": "157",
        "type": "t_address"
      },
      {
        "astId": 27091,
        "contract": "contracts/vault/LpFarmingVault.sol:LpFarmingVault",
        "label": "decimal0Scale",
        "offset": 0,
        "slot": "158",
        "type": "t_uint256"
      },
      {
        "astId": 27093,
        "contract": "contracts/vault/LpFarmingVault.sol:LpFarmingVault",
        "label": "token1",
        "offset": 0,
        "slot": "159",
        "type": "t_address"
      },
      {
        "astId": 27095,
        "contract": "contracts/vault/LpFarmingVault.sol:LpFarmingVault",
        "label": "decimal1Scale",
        "offset": 0,
        "slot": "160",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IFeeConf)18388": {
        "encoding": "inplace",
        "label": "contract IFeeConf",
        "numberOfBytes": "20"
      },
      "t_contract(IVaultFarm)19191": {
        "encoding": "inplace",
        "label": "contract IVaultFarm",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}