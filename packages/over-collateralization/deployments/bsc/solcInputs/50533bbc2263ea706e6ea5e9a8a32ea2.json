{
  "language": "Solidity",
  "sources": {
    "contracts/AppController.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"./interfaces/IVault.sol\";\nimport \"./interfaces/IDepositVault.sol\";\nimport \"./interfaces/IMintVault.sol\";\nimport \"./interfaces/IController.sol\";\nimport \"./interfaces/IStrategy.sol\";\nimport \"./Constants.sol\";\n\ncontract AppController is Constants, IController, OwnableUpgradeable {\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using SafeERC20 for IERC20;\n\n    uint256 constant JOINED_VAULT_LIMIT = 20;\n\n    // underlying => dToken\n    mapping(address => address) public override dyTokens;\n    // underlying => IStratege\n    mapping(address => address) public strategies;\n\n    struct ValueConf {\n        address oracle;\n        uint16 dr; // discount rate\n        uint16 pr; // premium rate\n    }\n\n    // underlying => orcale\n    mapping(address => ValueConf) internal valueConfs;\n\n    //  dyToken => vault\n    mapping(address => address) public override dyTokenVaults;\n\n    // user => vaults\n    mapping(address => EnumerableSet.AddressSet) internal userJoinedDepositVaults;\n\n    mapping(address => EnumerableSet.AddressSet) internal userJoinedBorrowVaults;\n\n    // Vault => VaultStatus\n    mapping(address => VaultState) public vaultStates;\n\n    // depost value / borrow value >= liquidateRate\n    uint256 public liquidateRate;\n    uint256 public collateralRate;\n\n    // is anyone can call Liquidate.\n    bool public isOpenLiquidate;\n\n    mapping(address => bool) public allowedLiquidator;\n\n    // vault => ValidVault\n    // Initialize once\n    mapping(address => ValidVault) public override validVaults;\n\n    // vault => user => ValidVault\n    // set by user\n    mapping(address => mapping(address => ValidVault)) public override validVaultsOfUser;\n    VaultState public globalState;\n    address public vaultFactory;\n\n    // vault => quota\n    mapping(address => uint256) public vaultsBorrowQuota;\n    // EVENT\n    event UnderlyingDTokenChanged(address indexed underlying, address oldDToken, address newDToken);\n    event UnderlyingStrategyChanged(address indexed underlying, address oldStrage, address newDToken, uint256 stype);\n    event DTokenVaultChanged(address indexed dToken, address oldVault, address newVault, uint256 vtype);\n\n    event ValueConfChanged(address indexed underlying, address oracle, uint256 discount, uint256 premium);\n\n    event LiquidateRateChanged(uint256 liquidateRate);\n    event CollateralRateChanged(uint256 collateralRate);\n\n    event OpenLiquidateChanged(bool open);\n    event AllowedLiquidatorChanged(address liquidator, bool allowed);\n\n    event SetVaultStates(address vault, VaultState state);\n\n    event InitValidVault(address vault, ValidVault state);\n    event SetValidVault(address vault, address user, ValidVault state);\n\n    event MintVaultReleased(address indexed user, address vault, uint256 amount, uint256 usdValue);\n    event DepositVaultReleased(address indexed user, address vault, uint256 amount, uint256 usdValue);\n    event VaultsReleased(address indexed user, uint256 expectedUsdValue, uint256 releasedUsdValue);\n    event DepositVaultSwapped(\n        address indexed user,\n        address sourceVault,\n        uint256 sourceAmount,\n        address targetVault,\n        uint256 targetAmount\n    );\n    event BorrowQuotaChanged(address vault, address operator, uint256 prevQuota, uint256 newQuota);\n\n    event VaultFactoryChanged(address preivousFactory, address newFactory);\n\n    constructor() initializer {}\n\n    function initialize() external initializer {\n        OwnableUpgradeable.__Ownable_init();\n        liquidateRate = 11000;\n        // PercentBase * 1.1;\n        collateralRate = 13000;\n        // PercentBase * 1.3;\n        isOpenLiquidate = true;\n    }\n\n    function setVaultFactory(address vaultFactory_) external onlyOwner {\n        emit VaultFactoryChanged(vaultFactory, vaultFactory_);\n        vaultFactory = vaultFactory_;\n    }\n\n    function setGlobalState(VaultState memory state_) external onlyOwner {\n        globalState = state_;\n    }\n\n    modifier onlyOwnerOrFactory() {\n        require(owner() == _msgSender() || vaultFactory == _msgSender(), \"Ownable: caller is not the owner or factory\");\n        _;\n    }\n\n    // ======  yield =======\n    function setDYToken(address _underlying, address _dToken) external onlyOwnerOrFactory {\n        require(_dToken != address(0), \"INVALID_DTOKEN\");\n        address oldDToken = dyTokens[_underlying];\n        dyTokens[_underlying] = _dToken;\n        emit UnderlyingDTokenChanged(_underlying, oldDToken, _dToken);\n    }\n\n    // set or update strategy\n    // stype: 1: pancakeswap\n    function setStrategy(\n        address _underlying,\n        address _strategy,\n        uint256 stype\n    ) external onlyOwner {\n        require(_strategy != address(0), \"Strategies Disabled\");\n\n        address _current = strategies[_underlying];\n        if (_current != address(0)) {\n            IStrategy(_current).withdrawAll();\n        }\n        strategies[_underlying] = _strategy;\n\n        emit UnderlyingStrategyChanged(_underlying, _current, _strategy, stype);\n    }\n\n    function emergencyWithdrawAll(address _underlying) public onlyOwner {\n        IStrategy(strategies[_underlying]).withdrawAll();\n    }\n\n    // ======  vault  =======\n    function setVaultBorrowQuota(address vault_, uint256 quota_) external onlyOwner {\n        emit BorrowQuotaChanged(vault_, msg.sender, vaultsBorrowQuota[vault_], quota_);\n        vaultsBorrowQuota[vault_] = quota_;\n    }\n\n    function setOpenLiquidate(bool _open) external onlyOwner {\n        isOpenLiquidate = _open;\n        emit OpenLiquidateChanged(_open);\n    }\n\n    function updateAllowedLiquidator(address liquidator, bool allowed) external onlyOwner {\n        allowedLiquidator[liquidator] = allowed;\n        emit AllowedLiquidatorChanged(liquidator, allowed);\n    }\n\n    function setLiquidateRate(uint256 _liquidateRate) external onlyOwner {\n        liquidateRate = _liquidateRate;\n        emit LiquidateRateChanged(liquidateRate);\n    }\n\n    function setCollateralRate(uint256 _collateralRate) external onlyOwner {\n        collateralRate = _collateralRate;\n        emit CollateralRateChanged(collateralRate);\n    }\n\n    // @dev set different oracle„ÄÅ discount rate and premium rate for each underlying asset\n    function setOracles(\n        address _underlying,\n        address _oracle,\n        uint16 _discount,\n        uint16 _premium\n    ) external onlyOwnerOrFactory {\n        require(_oracle != address(0), \"INVALID_ORACLE\");\n        require(_discount <= PercentBase, \"DISCOUT_TOO_BIG\");\n        require(_premium >= PercentBase, \"PREMIUM_TOO_SMALL\");\n\n        ValueConf storage conf = valueConfs[_underlying];\n        conf.oracle = _oracle;\n        conf.dr = _discount;\n        conf.pr = _premium;\n\n        emit ValueConfChanged(_underlying, _oracle, _discount, _premium);\n    }\n\n    function getValueConfs(address token0, address token1)\n        external\n        view\n        returns (\n            address oracle0,\n            uint16 dr0,\n            uint16 pr0,\n            address oracle1,\n            uint16 dr1,\n            uint16 pr1\n        )\n    {\n        (oracle0, dr0, pr0) = getValueConf(token0);\n        (oracle1, dr1, pr1) = getValueConf(token1);\n    }\n\n    // get DiscountRate and PremiumRate\n    function getValueConf(address _underlying)\n        public\n        view\n        returns (\n            address oracle,\n            uint16 dr,\n            uint16 pr\n        )\n    {\n        ValueConf memory conf = valueConfs[_underlying];\n        oracle = conf.oracle;\n        dr = conf.dr;\n        pr = conf.pr;\n    }\n\n    // vtype 1 : for deposit vault 2: for mint vault\n    function setVault(\n        address _dyToken,\n        address _vault,\n        uint256 vtype\n    ) external onlyOwnerOrFactory {\n        require(IVault(_vault).isDuetVault(), \"INVALIE_VALUT\");\n        address old = dyTokenVaults[_dyToken];\n        dyTokenVaults[_dyToken] = _vault;\n        emit DTokenVaultChanged(_dyToken, old, _vault, vtype);\n    }\n\n    function joinVault(address _user, bool isDepositVault) external {\n        address vault = msg.sender;\n        require(vaultStates[vault].enabled || vaultStates[vault].enableLiquidate, \"INVALID_CALLER\");\n\n        EnumerableSet.AddressSet storage set = isDepositVault\n            ? userJoinedDepositVaults[_user]\n            : userJoinedBorrowVaults[_user];\n        require(set.length() < JOINED_VAULT_LIMIT, \"JOIN_TOO_MUCH\");\n        set.add(vault);\n    }\n\n    function exitVault(address _user, bool isDepositVault) external {\n        address vault = msg.sender;\n        require(vaultStates[vault].enabled || vaultStates[vault].enableLiquidate, \"INVALID_CALLER\");\n\n        EnumerableSet.AddressSet storage set = isDepositVault\n            ? userJoinedDepositVaults[_user]\n            : userJoinedBorrowVaults[_user];\n        set.remove(vault);\n    }\n\n    function setVaultStates(address _vault, VaultState memory _state) external onlyOwnerOrFactory {\n        vaultStates[_vault] = _state;\n        emit SetVaultStates(_vault, _state);\n    }\n\n    function initValidVault(address[] memory _vault, ValidVault[] memory _state) external onlyOwnerOrFactory {\n        uint256 len1 = _vault.length;\n        uint256 len2 = _state.length;\n        require(len1 == len2 && len1 != 0, \"INVALID_PARAM\");\n        for (uint256 i = 0; i < len1; i++) {\n            require(validVaults[_vault[i]] == ValidVault.UnInit, \"SET_ONLY_ONCE\");\n            require(_state[i] == ValidVault.Yes || _state[i] == ValidVault.No, \"INVALID_VALUE\");\n            validVaults[_vault[i]] = _state[i];\n            emit InitValidVault(_vault[i], _state[i]);\n        }\n    }\n\n    function setValidVault(address[] memory _vault, ValidVault[] memory _state) external {\n        address user = msg.sender;\n        uint256 len1 = _vault.length;\n        uint256 len2 = _state.length;\n        require(len1 == len2 && len1 != 0, \"INVALID_PARAM\");\n        for (uint256 i = 0; i < len1; i++) {\n            require(_state[i] == ValidVault.Yes || _state[i] == ValidVault.No, \"INVALID_VALUE\");\n            validVaultsOfUser[_vault[i]][user] = _state[i];\n            emit SetValidVault(_vault[i], user, _state[i]);\n        }\n\n        uint256 totalDepositValue = accValidVaultVaule(user, true);\n        uint256 totalBorrowValue = accVaultVaule(user, userJoinedBorrowVaults[user], true);\n        uint256 validValue = (totalDepositValue * PercentBase) / collateralRate;\n        require(totalDepositValue * PercentBase >= totalBorrowValue * collateralRate, \"SETVALIDVAULT: LOW_COLLATERAL\");\n    }\n\n    function userJoinedVaultInfoAt(\n        address _user,\n        bool isDepositVault,\n        uint256 index\n    ) external view returns (address vault, VaultState memory state) {\n        EnumerableSet.AddressSet storage set = isDepositVault\n            ? userJoinedDepositVaults[_user]\n            : userJoinedBorrowVaults[_user];\n        vault = set.at(index);\n        state = vaultStates[vault];\n    }\n\n    function userJoinedVaultCount(address _user, bool isDepositVault) external view returns (uint256) {\n        return isDepositVault ? userJoinedDepositVaults[_user].length() : userJoinedBorrowVaults[_user].length();\n    }\n\n    /**\n     * @notice  maximum that a user can borrow from a Vault\n     */\n    function maxBorrow(address _user, address vault) public view returns (uint256) {\n        uint256 totalDepositValue = accValidVaultVaule(_user, true);\n        uint256 totalBorrowValue = accVaultVaule(_user, userJoinedBorrowVaults[_user], true);\n\n        uint256 validValue = (totalDepositValue * PercentBase) / collateralRate;\n        if (validValue > totalBorrowValue) {\n            uint256 canBorrowValue = validValue - totalBorrowValue;\n            return IMintVault(vault).valueToAmount(canBorrowValue, true);\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * @notice Get user total valid Vault value (i.e., Vault of deposit only counts collateral)\n     * @param  _user depositors\n     * @param _dp  discount or premium\n     */\n    function userValues(address _user, bool _dp)\n        public\n        view\n        override\n        returns (uint256 totalDepositValue, uint256 totalBorrowValue)\n    {\n        totalDepositValue = accValidVaultVaule(_user, _dp);\n        totalBorrowValue = accVaultVaule(_user, userJoinedBorrowVaults[_user], _dp);\n    }\n\n    /**\n     * @notice  Get user total Vault value\n     * @param  _user depositors\n     * @param _dp  discount or premium\n     */\n    function userTotalValues(address _user, bool _dp)\n        public\n        view\n        returns (uint256 totalDepositValue, uint256 totalBorrowValue)\n    {\n        totalDepositValue = accVaultVaule(_user, userJoinedDepositVaults[_user], _dp);\n        totalBorrowValue = accVaultVaule(_user, userJoinedBorrowVaults[_user], _dp);\n    }\n\n    /**\n     * @notice predict total valid vault value after the user operating vault (i.e., Vault of deposit only counts collateral)\n     * @param  _user depositors\n     * @param  _vault target vault\n     * @param  _amount the amount of deposits or withdrawals\n     * @param _dp  discount or premium\n     */\n    function userPendingValues(\n        address _user,\n        IVault _vault,\n        int256 _amount,\n        bool _dp\n    ) public view returns (uint256 pendingDepositValue, uint256 pendingBrorowValue) {\n        pendingDepositValue = accValidPendingValue(_user, _vault, _amount, _dp);\n        pendingBrorowValue = accPendingValue(_user, userJoinedBorrowVaults[_user], _vault, _amount, _dp);\n    }\n\n    /**\n     * @notice  predict total vault value after the user operating Vault\n     * @param  _user depositors\n     * @param  _vault target vault\n     * @param  _amount the amount of deposits or withdrawals\n     * @param _dp  discount or premium\n     */\n    function userTotalPendingValues(\n        address _user,\n        IVault _vault,\n        int256 _amount,\n        bool _dp\n    ) public view returns (uint256 pendingDepositValue, uint256 pendingBrorowValue) {\n        pendingDepositValue = accPendingValue(_user, userJoinedDepositVaults[_user], _vault, _amount, _dp);\n        pendingBrorowValue = accPendingValue(_user, userJoinedBorrowVaults[_user], _vault, _amount, _dp);\n    }\n\n    /**\n     * @notice  determine whether the borrower needs to be liquidated\n     */\n    function isNeedLiquidate(address _borrower) public view returns (bool) {\n        (uint256 totalDepositValue, uint256 totalBorrowValue) = userValues(_borrower, true);\n        return totalDepositValue * PercentBase < totalBorrowValue * liquidateRate;\n    }\n\n    /**\n     * @dev return total value of vault\n     *\n     * @param _user address of user\n     * @param set all address of vault\n     * @param _dp Discount or Premium\n     */\n    function accVaultVaule(\n        address _user,\n        EnumerableSet.AddressSet storage set,\n        bool _dp\n    ) internal view returns (uint256 totalValue) {\n        uint256 len = set.length();\n        for (uint256 i = 0; i < len; i++) {\n            address vault = set.at(i);\n            totalValue += IVault(vault).userValue(_user, _dp);\n        }\n    }\n\n    /**\n     * @dev return total deposit collateral's value of vault\n     *\n     * @param _user address of user\n     * @param _dp Discount or Premium\n     */\n    function accValidVaultVaule(address _user, bool _dp) internal view returns (uint256 totalValue) {\n        EnumerableSet.AddressSet storage set = userJoinedDepositVaults[_user];\n        uint256 len = set.length();\n        for (uint256 i = 0; i < len; i++) {\n            address vault = set.at(i);\n            if (isCollateralizedVault(vault, _user)) {\n                totalValue += IVault(vault).userValue(_user, _dp);\n            }\n        }\n    }\n\n    function accPendingValue(\n        address _user,\n        EnumerableSet.AddressSet storage set,\n        IVault vault,\n        int256 amount,\n        bool _dp\n    ) internal view returns (uint256 totalValue) {\n        uint256 len = set.length();\n        bool existVault = false;\n\n        for (uint256 i = 0; i < len; i++) {\n            IVault _vault = IVault(set.at(i));\n\n            if (vault == _vault) {\n                totalValue += _vault.pendingValue(_user, amount);\n                existVault = true;\n            } else {\n                totalValue += _vault.userValue(_user, _dp);\n            }\n        }\n\n        if (!existVault) {\n            totalValue += vault.pendingValue(_user, amount);\n        }\n    }\n\n    function accValidPendingValue(\n        address _user,\n        IVault vault,\n        int256 amount,\n        bool _dp\n    ) internal view returns (uint256 totalValue) {\n        EnumerableSet.AddressSet storage set = userJoinedDepositVaults[_user];\n        uint256 len = set.length();\n        bool existVault = false;\n\n        for (uint256 i = 0; i < len; i++) {\n            IVault _vault = IVault(set.at(i));\n\n            if (isCollateralizedVault(address(_vault), _user)) {\n                if (vault == _vault) {\n                    totalValue += _vault.pendingValue(_user, amount);\n                    existVault = true;\n                } else {\n                    totalValue += _vault.userValue(_user, _dp);\n                }\n            }\n        }\n\n        if (!existVault && isCollateralizedVault(address(vault), _user)) {\n            totalValue += vault.pendingValue(_user, amount);\n        }\n    }\n\n    /**\n     * @notice return bool, true means the vault is as collateral to user, false is opposite\n     * @param  _vault address of vault\n     * @param _user   address of user\n     */\n    function isCollateralizedVault(address _vault, address _user) internal view returns (bool) {\n        ValidVault _state = validVaultsOfUser[_vault][_user];\n        ValidVault state = _state == ValidVault.UnInit ? validVaults[_vault] : _state;\n        require(state != ValidVault.UnInit, \"VALIDVAULT_UNINIT\");\n\n        if (state == ValidVault.Yes) return true;\n        // vault can be collateralized\n        return false;\n    }\n\n    /**\n     * @notice Risk control check before deposit\n     * param _user depositors\n     * @param _vault address of deposit market\n     * param  _amount deposit amount\n     */\n    function beforeDeposit(\n        address,\n        address _vault,\n        uint256\n    ) external view {\n        VaultState memory state = vaultStates[_vault];\n        require(\n            globalState.enabled && globalState.enableDeposit && state.enabled && state.enableDeposit,\n            \"DEPOSITE_DISABLE\"\n        );\n    }\n\n    /**\n     * @notice Risk control check before borrowing\n     * @param  _user borrower\n     * @param _vault address of loan market\n     * @param  _amount loan amount\n     */\n    function beforeBorrow(\n        address _user,\n        address _vault,\n        uint256 _amount\n    ) external view {\n        VaultState memory state = vaultStates[_vault];\n        require(\n            globalState.enabled && globalState.enableBorrow && state.enabled && state.enableBorrow,\n            \"BORROW_DISABLED\"\n        );\n        uint256 borrowQuota = vaultsBorrowQuota[_vault];\n        uint256 borrowedAmount = IERC20(IVault(_vault).underlying()).totalSupply();\n        require(\n            borrowQuota == 0 || borrowedAmount + _amount <= borrowQuota,\n            \"AppController: amount to borrow exceeds quota\"\n        );\n        uint256 totalDepositValue = accValidVaultVaule(_user, true);\n        uint256 pendingBrorowValue = accPendingValue(\n            _user,\n            userJoinedBorrowVaults[_user],\n            IVault(_vault),\n            int256(_amount),\n            true\n        );\n        require(totalDepositValue * PercentBase >= pendingBrorowValue * collateralRate, \"LOW_COLLATERAL\");\n    }\n\n    function beforeWithdraw(\n        address _user,\n        address _vault,\n        uint256 _amount\n    ) external view {\n        VaultState memory state = vaultStates[_vault];\n        require(\n            globalState.enabled && globalState.enableWithdraw && state.enabled && state.enableWithdraw,\n            \"WITHDRAW_DISABLED\"\n        );\n\n        if (isCollateralizedVault(_vault, _user)) {\n            uint256 pendingDepositValidValue = accValidPendingValue(\n                _user,\n                IVault(_vault),\n                int256(0) - int256(_amount),\n                true\n            );\n            uint256 totalBorrowValue = accVaultVaule(_user, userJoinedBorrowVaults[_user], true);\n            require(pendingDepositValidValue * PercentBase >= totalBorrowValue * collateralRate, \"LOW_COLLATERAL\");\n        }\n    }\n\n    function beforeRepay(\n        address _repayer,\n        address _vault,\n        uint256 _amount\n    ) external view {\n        VaultState memory state = vaultStates[_vault];\n        require(globalState.enabled && globalState.enableRepay && state.enabled && state.enableRepay, \"REPAY_DISABLED\");\n    }\n\n    function liquidate(address _borrower, bytes calldata data) external {\n        address liquidator = msg.sender;\n\n        require(isOpenLiquidate || allowedLiquidator[liquidator], \"INVALID_LIQUIDATOR\");\n        require(isNeedLiquidate(_borrower), \"COLLATERAL_ENOUGH\");\n\n        EnumerableSet.AddressSet storage set = userJoinedDepositVaults[_borrower];\n        uint256 len = set.length();\n\n        for (uint256 i = len; i > 0; i--) {\n            IVault v = IVault(set.at(i - 1));\n            // liquidate valid vault\n            if (isCollateralizedVault(address(v), _borrower)) {\n                beforeLiquidate(_borrower, address(v));\n                v.liquidate(liquidator, _borrower, data);\n            }\n        }\n\n        EnumerableSet.AddressSet storage set2 = userJoinedBorrowVaults[_borrower];\n        uint256 len2 = set2.length();\n\n        for (uint256 i = len2; i > 0; i--) {\n            IVault v = IVault(set2.at(i - 1));\n            beforeLiquidate(_borrower, address(v));\n            v.liquidate(liquidator, _borrower, data);\n        }\n    }\n\n    function releaseMintVaults(\n        address user_,\n        address liquidator_,\n        IVault[] calldata mintVaults_\n    ) external onlyOwner {\n        require(allowedLiquidator[liquidator_], \"Invalid liquidator\");\n\n        EnumerableSet.AddressSet storage depositedVaults = userJoinedDepositVaults[user_];\n\n        uint256 usdValueToRelease = 0;\n        bytes memory liquidateData = abi.encodePacked(uint256(0x1));\n        // release mint vaults\n        for (uint256 i = 0; i < mintVaults_.length; i++) {\n            IVault v = mintVaults_[i];\n            uint256 currentVaultUsdValue = v.userValue(user_, false);\n            uint256 currentVaultAmount = IMintVault(address(v)).borrows(user_);\n            usdValueToRelease += currentVaultUsdValue;\n            v.liquidate(liquidator_, user_, liquidateData);\n            emit MintVaultReleased(user_, address(v), currentVaultAmount, currentVaultUsdValue);\n        }\n\n        // No release required\n        if (usdValueToRelease <= 0) {\n            return;\n        }\n        uint256 releasedUsdValue = 0;\n\n        // release deposit vaults\n        for (uint256 i = depositedVaults.length(); i > 0; i--) {\n            IVault v = IVault(depositedVaults.at(i - 1));\n\n            // invalid vault\n            if (!isCollateralizedVault(address(v), user_) || !vaultStates[address(v)].enableLiquidate) {\n                continue;\n            }\n            uint256 currentVaultUsdValue = v.userValue(user_, false);\n            releasedUsdValue += currentVaultUsdValue;\n            uint256 currentVaultAmount = IDepositVault(address(v)).deposits(user_);\n            v.liquidate(liquidator_, user_, liquidateData);\n            if (releasedUsdValue == usdValueToRelease) {\n                emit DepositVaultReleased(user_, address(v), currentVaultAmount, currentVaultUsdValue);\n                // release done\n                break;\n            }\n            if (releasedUsdValue < usdValueToRelease) {\n                emit DepositVaultReleased(user_, address(v), currentVaultAmount, currentVaultUsdValue);\n                continue;\n            }\n            // over released, returning\n            uint256 usdDelta = releasedUsdValue - usdValueToRelease;\n            // The minimum usd value to return is $1\n            if (usdDelta < 1e8) {\n                emit DepositVaultReleased(user_, address(v), currentVaultAmount, currentVaultUsdValue);\n                break;\n            }\n            uint256 amountToReturn = (currentVaultAmount * usdDelta * 1e12) / currentVaultUsdValue / 1e12;\n            // possible precision issues\n            if (amountToReturn > currentVaultAmount) {\n                amountToReturn = currentVaultAmount;\n            }\n            // return over released tokens\n            IERC20(v.underlying()).safeTransferFrom(liquidator_, address(this), amountToReturn);\n            IERC20(v.underlying()).safeApprove(address(v), amountToReturn);\n            _depositForUser(v, user_, amountToReturn);\n            emit DepositVaultReleased(\n                user_,\n                address(v),\n                currentVaultAmount - amountToReturn,\n                currentVaultUsdValue - usdDelta\n            );\n            releasedUsdValue -= usdDelta;\n            break;\n        }\n\n        emit VaultsReleased(user_, usdValueToRelease, releasedUsdValue);\n    }\n\n    function releaseZeroValueVaults(address user_, address liquidator_) external onlyOwner {\n        require(allowedLiquidator[liquidator_], \"Invalid liquidator\");\n\n        bytes memory liquidateData = abi.encodePacked(uint256(0x1));\n\n        EnumerableSet.AddressSet storage mintVaults = userJoinedBorrowVaults[user_];\n        // release mint vaults with zero usd value\n        for (uint256 i = 0; i < mintVaults.length(); i++) {\n            IVault v = IVault(mintVaults.at(i));\n            uint256 currentVaultUsdValue = v.userValue(user_, false);\n            if (currentVaultUsdValue > 0) {\n                continue;\n            }\n            uint256 currentVaultAmount = IMintVault(address(v)).borrows(user_);\n            v.liquidate(liquidator_, user_, liquidateData);\n            emit MintVaultReleased(user_, address(v), currentVaultAmount, currentVaultUsdValue);\n        }\n\n        EnumerableSet.AddressSet storage depositedVaults = userJoinedDepositVaults[user_];\n        // release deposit vaults with zero usd value\n        for (uint256 i = 0; i < depositedVaults.length(); i++) {\n            IVault v = IVault(depositedVaults.at(i));\n            uint256 currentVaultUsdValue = v.userValue(user_, false);\n            // 0x1E3174C5757cf5457f8A3A8c3E4a35Ed2d138322 is vault of Smart BUSD, force close.\n            if (currentVaultUsdValue > 0 && address(v) != 0x1E3174C5757cf5457f8A3A8c3E4a35Ed2d138322) {\n                continue;\n            }\n            uint256 currentVaultAmount = IDepositVault(address(v)).deposits(user_);\n            v.liquidate(liquidator_, user_, liquidateData);\n            emit DepositVaultReleased(user_, address(v), currentVaultAmount, currentVaultUsdValue);\n        }\n    }\n\n    function swapUserDepositVaults(\n        address user_,\n        address liquidator_,\n        IVault[] calldata sourceVaults_,\n        IVault[] calldata targetVaults_\n    ) external onlyOwner {\n        require(allowedLiquidator[liquidator_], \"Invalid liquidator\");\n\n        require(sourceVaults_.length > 0, \"nothing to swap\");\n        require(\n            sourceVaults_.length == targetVaults_.length,\n            \"length of sourceVaults_ should be equal to targetVaults_'s\"\n        );\n\n        bytes memory liquidateData = abi.encodePacked(uint256(0x1));\n\n        for (uint256 i = 0; i < sourceVaults_.length; i++) {\n            IVault sourceVault = sourceVaults_[i];\n            IVault targetVault = targetVaults_[i];\n            uint256 sourceVaultUsdValue = sourceVault.userValue(user_, false);\n            uint256 sourceVaultAmount = IDepositVault(address(sourceVault)).deposits(user_);\n            sourceVault.liquidate(liquidator_, user_, liquidateData);\n            // set dUSD-DUET LP Price to 0.306\n            if (address(sourceVault) == 0x4527Ba20F16F86525b6D174b6314502ca6D5256E) {\n                // 306e5 = 0.306$\n                sourceVaultUsdValue = sourceVaultAmount * 306e5;\n                // set dUSD-BUSD LP Price to 2.02\n            } else if (address(sourceVault) == 0xC703Fdad6cA5DF56bd729fef24157e196A4810f8) {\n                // 202e6 = 2.02$\n                sourceVaultUsdValue = sourceVaultAmount * 202e6;\n            }\n            if (sourceVaultUsdValue <= 0) {\n                continue;\n            }\n            uint256 targetPrice = targetVault.underlyingAmountValue(1e18, false);\n            uint256 targetVaultAmount = (sourceVaultUsdValue * 1e12) / targetPrice / 1e12;\n            IERC20(targetVault.underlying()).safeTransferFrom(msg.sender, address(this), targetVaultAmount);\n            IERC20(targetVault.underlying()).safeApprove(address(targetVault), targetVaultAmount);\n            _depositForUser(targetVault, user_, targetVaultAmount);\n            emit DepositVaultSwapped(\n                user_,\n                address(sourceVault),\n                sourceVaultAmount,\n                address(targetVault),\n                targetVaultAmount\n            );\n        }\n    }\n\n    function _depositForUser(\n        IVault depositVault_,\n        address user_,\n        uint256 amount_\n    ) internal {\n        IDepositVault(address(depositVault_)).depositTo(depositVault_.underlying(), user_, amount_);\n    }\n\n    function beforeLiquidate(address _borrower, address _vault) internal view {\n        VaultState memory state = vaultStates[_vault];\n        require(\n            globalState.enabled && globalState.enableLiquidate && state.enabled && state.enableLiquidate,\n            \"LIQ_DISABLED\"\n        );\n    }\n    //  ======   vault end =======\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized < version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IVault {\n    // call from controller must impl.\n    function underlying() external view returns (address);\n\n    function isDuetVault() external view returns (bool);\n\n    function liquidate(\n        address liquidator,\n        address borrower,\n        bytes calldata data\n    ) external;\n\n    function userValue(address user, bool dp) external view returns (uint256);\n\n    function pendingValue(address user, int256 pending) external view returns (uint256);\n\n    function underlyingAmountValue(uint256 amount, bool dp) external view returns (uint256 value);\n}\n"
    },
    "contracts/interfaces/IDepositVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IDepositVault {\n    function deposits(address user) external view returns (uint256 amount);\n\n    function deposit(address dtoken, uint256 amount) external;\n\n    function depositTo(\n        address dtoken,\n        address to,\n        uint256 amount\n    ) external;\n\n    function syncDeposit(\n        address dtoken,\n        uint256 amount,\n        address user\n    ) external;\n\n    function withdraw(uint256 amount, bool unpack) external;\n\n    function withdrawTo(\n        address to,\n        uint256 amount,\n        bool unpack\n    ) external;\n}\n"
    },
    "contracts/interfaces/IMintVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IMintVault {\n    function borrows(address user) external view returns (uint256 amount);\n\n    function borrow(uint256 amount) external;\n\n    function repay(uint256 amount) external;\n\n    function repayTo(address to, uint256 amount) external;\n\n    function valueToAmount(uint256 value, bool dp) external view returns (uint256 amount);\n}\n"
    },
    "contracts/interfaces/IController.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IController {\n    // manage Vault state for risk control\n    struct VaultState {\n        bool enabled;\n        bool enableDeposit;\n        bool enableWithdraw;\n        bool enableBorrow;\n        bool enableRepay;\n        bool enableLiquidate;\n    }\n\n    function dyTokens(address) external view returns (address);\n\n    function getValueConf(address _underlying)\n        external\n        view\n        returns (\n            address oracle,\n            uint16 dr,\n            uint16 pr\n        );\n\n    function getValueConfs(address token0, address token1)\n        external\n        view\n        returns (\n            address oracle0,\n            uint16 dr0,\n            uint16 pr0,\n            address oracle1,\n            uint16 dr1,\n            uint16 pr1\n        );\n\n    function strategies(address) external view returns (address);\n\n    function dyTokenVaults(address) external view returns (address);\n\n    function beforeDeposit(\n        address,\n        address _vault,\n        uint256\n    ) external view;\n\n    function beforeBorrow(\n        address _borrower,\n        address _vault,\n        uint256 _amount\n    ) external view;\n\n    function beforeWithdraw(\n        address _redeemer,\n        address _vault,\n        uint256 _amount\n    ) external view;\n\n    function beforeRepay(\n        address _repayer,\n        address _vault,\n        uint256 _amount\n    ) external view;\n\n    function joinVault(address _user, bool isDeposit) external;\n\n    function exitVault(address _user, bool isDeposit) external;\n\n    function userValues(address _user, bool _dp)\n        external\n        view\n        returns (uint256 totalDepositValue, uint256 totalBorrowValue);\n\n    function userTotalValues(address _user, bool _dp)\n        external\n        view\n        returns (uint256 totalDepositValue, uint256 totalBorrowValue);\n\n    function liquidate(address _borrower, bytes calldata data) external;\n\n    // ValidVault 0: uninitialized, default value\n    // ValidVault 1: No, vault can not be collateralized\n    // ValidVault 2: Yes, vault can be collateralized\n    enum ValidVault {\n        UnInit,\n        No,\n        Yes\n    }\n\n    function initValidVault(address[] memory _vault, ValidVault[] memory _state) external;\n\n    function validVaults(address _vault) external view returns (ValidVault);\n\n    function validVaultsOfUser(address _vault, address _user) external view returns (ValidVault);\n\n    function setDYToken(address _underlying, address _dToken) external;\n\n    function setVault(\n        address _dyToken,\n        address _vault,\n        uint256 vtype\n    ) external;\n\n    function setOracles(\n        address _underlying,\n        address _oracle,\n        uint16 _discount,\n        uint16 _premium\n    ) external;\n\n    function setVaultStates(address _vault, VaultState memory _state) external;\n}\n"
    },
    "contracts/interfaces/IStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IStrategy {\n    function controller() external view returns (address);\n\n    function getWant() external view returns (address);\n\n    function deposit() external;\n\n    function harvest() external;\n\n    function withdraw(uint256) external;\n\n    function withdrawAll() external returns (uint256);\n\n    function balanceOf() external view returns (uint256);\n\n    function pendingOutput() external view returns (uint256);\n\n    function minHarvestAmount() external view returns (uint256);\n\n    function output() external view returns (address);\n}\n"
    },
    "contracts/Constants.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ncontract Constants {\n    uint256 internal constant PercentBase = 10000;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/vault/DepositVaultBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\nimport \"../interfaces/IDYToken.sol\";\nimport \"../interfaces/IVault.sol\";\nimport \"../interfaces/IDepositVault.sol\";\nimport \"../interfaces/IController.sol\";\nimport \"../interfaces/IUSDOracle.sol\";\nimport \"../interfaces/IFeeConf.sol\";\nimport \"../interfaces/IVaultFarm.sol\";\nimport \"../interfaces/ILiquidateCallee.sol\";\nimport \"../Constants.sol\";\n\nabstract contract DepositVaultBase is Constants, IVault, IDepositVault, OwnableUpgradeable, ReentrancyGuardUpgradeable {\n    address public override underlying;\n    address public controller;\n    IFeeConf public feeConf;\n    IVaultFarm public farm;\n\n    // Áî®Êà∑Â≠òÊ¨æ\n    mapping(address => uint256) public deposits;\n\n    /**\n    * @notice Â≠òÊ¨æ‰∫ã‰ª∂\n      @param supplyer Â≠òÊ¨æ‰∫∫ÔºàÂÖëÊç¢‰∫∫Ôºâ\n    */\n    event Deposit(address indexed supplyer, uint256 amount);\n\n    /**\n    * @notice ÂèñÊ¨æ‰∫ã‰ª∂\n      @param redeemer ÂèñÊ¨æ‰∫∫ÔºàÂÖëÊç¢‰∫∫Ôºâ\n    */\n    event Withdraw(address indexed redeemer, uint256 amount);\n\n    /**\n    @notice ÂÄüÊ¨æ‰∫∫ÊäµÊäºÂìÅË¢´Ê∏ÖÁÆó‰∫ã‰ª∂\n    @param liquidator Ê∏ÖÁÆó‰∫∫\n    @param borrower ÂÄüÊ¨æ‰∫∫\n    @param supplies  Â≠òÊ¨æ\n    */\n    event Liquidated(address indexed liquidator, address indexed borrower, uint256 supplies);\n\n    event FeeConfChanged(address feeconf);\n    event ControllerChanged(address controller);\n    event FarmChanged(address farm);\n\n    /**\n     * @notice ÂàùÂßãÂåñ\n     * @dev  Âú®VaultÂàùÂßãÂåñÊó∂ËÆæÁΩÆË¥ßÂ∏ÅÂü∫Á°Ä‰ø°ÊÅØ\n     */\n    function init(\n        address _controller,\n        address _feeConf,\n        address _underlying\n    ) internal {\n        OwnableUpgradeable.__Ownable_init();\n        controller = _controller;\n        feeConf = IFeeConf(_feeConf);\n        underlying = _underlying;\n    }\n\n    function isDuetVault() external view override returns (bool) {\n        return true;\n    }\n\n    function underlyingTransferIn(address sender, uint256 amount) internal virtual;\n\n    function underlyingTransferOut(\n        address receipt,\n        uint256 amount,\n        bool giveWETH\n    ) internal virtual;\n\n    function setFeeConf(address _feeConf) external onlyOwner {\n        require(_feeConf != address(0), \"INVALID_FEECONF\");\n        feeConf = IFeeConf(_feeConf);\n        emit FeeConfChanged(_feeConf);\n    }\n\n    function setAppController(address _controller) external onlyOwner {\n        require(_controller != address(0), \"INVALID_CONTROLLER\");\n        controller = _controller;\n        emit ControllerChanged(_controller);\n    }\n\n    function setVaultFarm(address _farm) external onlyOwner {\n        require(_farm != address(0), \"INVALID_FARM\");\n        farm = IVaultFarm(_farm);\n        emit FarmChanged(_farm);\n    }\n\n    function _deposit(address supplyer, uint256 amount) internal virtual nonReentrant {\n        require(amount > 0, \"DEPOSITE_IS_ZERO\");\n        IController(controller).beforeDeposit(supplyer, address(this), amount);\n\n        (address receiver, uint256 dFee) = feeConf.getConfig(\"deposit_fee\");\n        uint256 actualAmount = amount;\n        if (dFee > 0) {\n            uint256 fee = (amount * dFee) / PercentBase;\n            actualAmount = amount - fee;\n            underlyingTransferOut(receiver, fee, false);\n        }\n\n        deposits[supplyer] += actualAmount;\n        emit Deposit(supplyer, actualAmount);\n        _updateJoinStatus(supplyer);\n\n        if (address(farm) != address(0)) {\n            farm.syncDeposit(supplyer, actualAmount, underlying);\n        }\n    }\n\n    /**\n    @notice ÂèñÊ¨æ\n    @dev ÊèêÁé∞ËΩ¨ÁªôÊåáÂÆöÁöÑÊé•ÂèóËÄÖ to \n    @param amount ÊèêÂèñÊï∞Èáè\n    @param unpack ÊòØÂê¶Ëß£ÂåÖunderlying\n    */\n    function _withdraw(\n        address to,\n        uint256 amount,\n        bool unpack\n    ) internal virtual nonReentrant returns (uint256 actualAmount) {\n        address redeemer = msg.sender;\n        require(deposits[redeemer] >= amount, \"INSUFFICIENT_DEPOSIT\");\n        IController(controller).beforeWithdraw(redeemer, address(this), amount);\n\n        deposits[redeemer] -= amount;\n        emit Withdraw(redeemer, amount);\n        _updateJoinStatus(redeemer);\n\n        if (address(farm) != address(0)) {\n            farm.syncWithdraw(redeemer, amount, underlying);\n        }\n\n        (address receiver, uint256 dFee) = feeConf.getConfig(\"withdraw_fee\");\n        actualAmount = amount;\n        if (dFee > 0) {\n            uint256 fee = (amount * dFee) / PercentBase;\n            actualAmount = amount - fee;\n            underlyingTransferOut(receiver, fee, false);\n        }\n\n        if (unpack) {\n            IDYToken(underlying).withdraw(to, actualAmount, true);\n        } else {\n            underlyingTransferOut(to, actualAmount, false);\n        }\n    }\n\n    /**\n     * @notice Ê∏ÖÁÆóË¥¶Êà∑ËµÑ‰∫ß\n     * @param liquidator Ê∏ÖÁÆó‰∫∫\n     * @param borrower ÂÄüÊ¨æ‰∫∫\n     */\n    function _liquidate(\n        address liquidator,\n        address borrower,\n        bytes calldata data\n    ) internal virtual nonReentrant {\n        require(msg.sender == controller, \"LIQUIDATE_INVALID_CALLER\");\n        require(liquidator != borrower, \"LIQUIDATE_DISABLE_YOURSELF\");\n\n        uint256 supplies = deposits[borrower];\n\n        //Ëé∑ÂæóÊäµÊäºÂìÅ\n        if (supplies > 0) {\n            uint256 toLiquidatorAmount = supplies;\n            (address liqReceiver, uint256 liqFee) = feeConf.getConfig(\"liq_fee\");\n            if (liqFee > 0 && liqReceiver != address(0)) {\n                uint256 fee = (supplies * liqFee) / PercentBase;\n                toLiquidatorAmount = toLiquidatorAmount - fee;\n                underlyingTransferOut(liqReceiver, fee, true);\n            }\n\n            underlyingTransferOut(liquidator, toLiquidatorAmount, true); //Ââ©‰ΩôÂΩíÊ∏ÖÁÆó‰∫∫\n            if (data.length > 0)\n                ILiquidateCallee(liquidator).liquidateDeposit(borrower, underlying, toLiquidatorAmount, data);\n        }\n\n        deposits[borrower] = 0;\n        emit Liquidated(liquidator, borrower, supplies);\n        _updateJoinStatus(borrower);\n\n        if (address(farm) != address(0)) {\n            farm.syncLiquidate(borrower, underlying);\n        }\n    }\n\n    function _updateJoinStatus(address _user) internal {\n        bool isDepositVault = true;\n        if (deposits[_user] > 0) {\n            IController(controller).joinVault(_user, isDepositVault);\n        } else {\n            IController(controller).exitVault(_user, isDepositVault);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/interfaces/IDYToken.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\ninterface IDYToken {\n    function deposit(uint256 _amount, address _toVault) external;\n\n    function depositTo(\n        address _to,\n        uint256 _amount,\n        address _toVault\n    ) external;\n\n    function depositCoin(address to, address _toVault) external payable;\n\n    function withdraw(\n        address _to,\n        uint256 _shares,\n        bool needWETH\n    ) external;\n\n    function underlyingTotal() external view returns (uint256);\n\n    function underlying() external view returns (address);\n\n    function balanceOfUnderlying(address _user) external view returns (uint256);\n\n    function underlyingAmount(uint256 amount) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IUSDOracle.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\ninterface IUSDOracle {\n    // Must 8 dec, same as chainlink decimals.\n    function getPrice(address token) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IFeeConf.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\ninterface IFeeConf {\n    function getConfig(bytes32 _key) external view returns (address, uint256);\n}\n"
    },
    "contracts/interfaces/IVaultFarm.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IVaultFarm {\n    function syncDeposit(\n        address _user,\n        uint256 _amount,\n        address asset\n    ) external;\n\n    function syncWithdraw(\n        address _user,\n        uint256 _amount,\n        address asset\n    ) external;\n\n    function syncLiquidate(address _user, address asset) external;\n}\n"
    },
    "contracts/interfaces/ILiquidateCallee.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface ILiquidateCallee {\n    function liquidateDeposit(\n        address borrower,\n        address underlying,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    function liquidateBorrow(\n        address borrower,\n        address underlying,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "contracts/vault/SingleFarmingVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport { IERC20Metadata } from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\nimport { IERC20Upgradeable } from \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\nimport \"../interfaces/IController.sol\";\nimport \"../interfaces/IDYToken.sol\";\nimport \"../interfaces/IPair.sol\";\nimport \"../interfaces/IUSDOracle.sol\";\nimport \"../interfaces/IWithdrawCallee.sol\";\n\nimport \"./DepositVaultBase.sol\";\n\n// SingleFarmingVault only for deposit\ncontract SingleFarmingVault is DepositVaultBase {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    address public underlyingToken;\n    uint256 internal underlyingScale;\n\n    function initialize(\n        address _controller,\n        address _feeConf,\n        address _underlying\n    ) external initializer {\n        DepositVaultBase.init(_controller, _feeConf, _underlying);\n        underlyingToken = IDYToken(_underlying).underlying();\n\n        uint256 decimal = IERC20Metadata(underlyingToken).decimals();\n        underlyingScale = 10**decimal;\n    }\n\n    function underlyingTransferIn(address sender, uint256 amount) internal virtual override {\n        IERC20Upgradeable(underlying).safeTransferFrom(sender, address(this), amount);\n    }\n\n    function underlyingTransferOut(\n        address receipt,\n        uint256 amount,\n        bool\n    ) internal virtual override {\n        //  skip transfer to myself\n        if (receipt == address(this)) {\n            return;\n        }\n\n        require(receipt != address(0), \"receipt is empty\");\n        IERC20Upgradeable(underlying).safeTransfer(receipt, amount);\n    }\n\n    function deposit(address dytoken, uint256 amount) external virtual override {\n        require(dytoken == address(underlying), \"TOKEN_UNMATCH\");\n        underlyingTransferIn(msg.sender, amount);\n        _deposit(msg.sender, amount);\n    }\n\n    function depositTo(\n        address dytoken,\n        address to,\n        uint256 amount\n    ) external {\n        require(dytoken == address(underlying), \"TOKEN_UNMATCH\");\n        underlyingTransferIn(msg.sender, amount);\n        _deposit(to, amount);\n    }\n\n    // call from dToken\n    function syncDeposit(\n        address dytoken,\n        uint256 amount,\n        address user\n    ) external virtual override {\n        address vault = IController(controller).dyTokenVaults(dytoken);\n        require(msg.sender == underlying && dytoken == address(underlying), \"TOKEN_UNMATCH\");\n        require(vault == address(this), \"VAULT_UNMATCH\");\n        _deposit(user, amount);\n    }\n\n    function withdraw(uint256 amount, bool unpack) external {\n        _withdraw(msg.sender, amount, unpack);\n    }\n\n    function withdrawTo(\n        address to,\n        uint256 amount,\n        bool unpack\n    ) external {\n        _withdraw(to, amount, unpack);\n    }\n\n    function withdrawCall(\n        address to,\n        uint256 amount,\n        bool unpack,\n        bytes calldata data\n    ) external {\n        uint256 actualAmount = _withdraw(to, amount, unpack);\n        if (data.length > 0) {\n            address asset = unpack ? underlyingToken : underlying;\n            IWithdrawCallee(to).execCallback(msg.sender, asset, actualAmount, data);\n        }\n    }\n\n    function liquidate(\n        address liquidator,\n        address borrower,\n        bytes calldata data\n    ) external override {\n        _liquidate(liquidator, borrower, data);\n    }\n\n    function underlyingAmountValue(uint256 _amount, bool dp) public view returns (uint256 value) {\n        if (_amount == 0) {\n            return 0;\n        }\n        uint256 amount = IDYToken(underlying).underlyingAmount(_amount);\n\n        (address oracle, uint256 dr, ) = IController(controller).getValueConf(underlyingToken);\n\n        uint256 price = IUSDOracle(oracle).getPrice(underlyingToken);\n\n        if (dp) {\n            value = ((amount * price * dr) / PercentBase / underlyingScale);\n        } else {\n            value = ((amount * price) / underlyingScale);\n        }\n    }\n\n    /**\n    @notice Áî®Êà∑ Vault ‰ª∑ÂÄº‰º∞ÂÄº\n    @param dp Discount Êàñ Premium\n  */\n    function userValue(address user, bool dp) external view override returns (uint256) {\n        if (deposits[user] == 0) {\n            return 0;\n        }\n        return underlyingAmountValue(deposits[user], dp);\n    }\n\n    // amount > 0 : deposit\n    // amount < 0 : withdraw\n    function pendingValue(address user, int256 amount) external view override returns (uint256) {\n        if (amount >= 0) {\n            return underlyingAmountValue(deposits[user] + uint256(amount), true);\n        } else {\n            return underlyingAmountValue(deposits[user] - uint256(0 - amount), true);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IPair.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\n// for PancakePair or UniswapPair\ninterface IPair {\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function balanceOf(address owner) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IWithdrawCallee.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IWithdrawCallee {\n    function execCallback(\n        address sender,\n        address asset,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "contracts/vault/SBUSDFarmingVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport { IERC20Metadata } from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\nimport { IERC20Upgradeable } from \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\nimport \"../interfaces/IController.sol\";\nimport \"../interfaces/IDYSToken.sol\";\nimport \"../interfaces/IPair.sol\";\nimport \"../interfaces/IUSDOracle.sol\";\nimport \"../interfaces/IWithdrawCallee.sol\";\n\nimport \"./DepositVaultBase.sol\";\n\n// SBUSDFarmingVault only for deposit\ncontract SBUSDFarmingVault is DepositVaultBase {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    address public underlyingToken;\n    uint256 internal underlyingScale;\n\n    function initialize(\n        address _controller,\n        address _feeConf,\n        address _underlying\n    ) external initializer {\n        DepositVaultBase.init(_controller, _feeConf, _underlying);\n        underlyingToken = IDYSToken(_underlying).underlying();\n\n        uint256 decimal = IERC20Metadata(underlyingToken).decimals();\n        underlyingScale = 10**decimal;\n    }\n\n    function underlyingTransferIn(address sender, uint256 amount) internal virtual override {}\n\n    function underlyingTransferOut(\n        address receipt,\n        uint256 amount,\n        bool\n    ) internal virtual override {}\n\n    function deposit(address dytoken, uint256 amount) external virtual override {}\n\n    function depositTo(\n        address dytoken,\n        address to,\n        uint256 amount\n    ) external {}\n\n    // call from dToken\n    function syncDeposit(\n        address dytoken,\n        uint256 amount,\n        address user\n    ) external virtual override {\n        address vault = IController(controller).dyTokenVaults(dytoken);\n        require(msg.sender == underlying && dytoken == address(underlying), \"TOKEN_UNMATCH\");\n        require(vault == address(this), \"VAULT_UNMATCH\");\n        _deposit(user, amount);\n    }\n\n    function withdraw(uint256 amount, bool unpack) external {\n        _withdraw(msg.sender, amount, unpack, false);\n    }\n\n    function withdrawOnlyBUSD(\n        uint256 amount,\n        bool unpack,\n        bool onlyBUSD\n    ) external {\n        _withdraw(msg.sender, amount, unpack, onlyBUSD);\n    }\n\n    function withdrawTo(\n        address to,\n        uint256 amount,\n        bool unpack\n    ) external {\n        require(msg.sender == to, \"WITHDRAW_USER_UNMATCH\");\n        _withdraw(to, amount, unpack, false);\n    }\n\n    function withdrawCall(\n        address to,\n        uint256 amount,\n        bool unpack,\n        bytes calldata data\n    ) external {\n        require(msg.sender == to, \"WITHDRAW_USER_UNMATCH\");\n        uint256 actualAmount = _withdraw(to, amount, unpack, false);\n        if (data.length > 0) {\n            address asset = unpack ? underlyingToken : underlying;\n            IWithdrawCallee(to).execCallback(msg.sender, asset, actualAmount, data);\n        }\n    }\n\n    function liquidate(\n        address liquidator,\n        address borrower,\n        bytes calldata data\n    ) external override {\n        _liquidate(liquidator, borrower, data);\n    }\n\n    function underlyingAmountValue(uint256 _amount, bool dp) public view returns (uint256 value) {\n        if (_amount == 0) {\n            return 0;\n        }\n        uint256 amount = IDYSToken(underlying).underlyingAmount(_amount);\n\n        (address oracle, uint256 dr, ) = IController(controller).getValueConf(underlyingToken);\n\n        uint256 price = IUSDOracle(oracle).getPrice(underlyingToken);\n\n        if (dp) {\n            value = ((amount * price * dr) / PercentBase / underlyingScale);\n        } else {\n            value = ((amount * price) / underlyingScale);\n        }\n    }\n\n    /**\n    @notice Áî®Êà∑ Vault ‰ª∑ÂÄº‰º∞ÂÄº\n    @param dp Discount Êàñ Premium\n  */\n    function userValue(address user, bool dp) external view override returns (uint256) {\n        if (deposits[user] == 0) {\n            return 0;\n        }\n        return underlyingAmountValue(deposits[user], dp);\n    }\n\n    // amount > 0 : deposit\n    // amount < 0 : withdraw\n    function pendingValue(address user, int256 amount) external view override returns (uint256) {\n        if (amount >= 0) {\n            return underlyingAmountValue(deposits[user] + uint256(amount), true);\n        } else {\n            return underlyingAmountValue(deposits[user] - uint256(0 - amount), true);\n        }\n    }\n\n    function _deposit(address supplyer, uint256 amount) internal override nonReentrant {\n        require(amount > 0, \"DEPOSITE_IS_ZERO\");\n        IController(controller).beforeDeposit(supplyer, address(this), amount);\n\n        deposits[supplyer] += amount;\n        emit Deposit(supplyer, amount);\n        _updateJoinStatus(supplyer);\n\n        if (address(farm) != address(0)) {\n            farm.syncDeposit(supplyer, amount, underlying);\n        }\n    }\n\n    /**\n    @notice ÂèñÊ¨æ\n    @dev ÊèêÁé∞ËΩ¨ÁªôÊåáÂÆöÁöÑÊé•ÂèóËÄÖ to \n    @param amount ÊèêÂèñÊï∞Èáè\n    @param unpack ÊòØÂê¶Ëß£ÂåÖunderlying\n    @param onlyBUSD Áî®Êà∑withdrawÁöÑËµÑ‰∫ßÊòØÂê¶Âè™Êé•Êî∂BUSD, falseË°®Á§∫ÂÖÅËÆ∏Êé•Êî∂BUSDÂíåDUSD‰∏§Áßç\n    */\n    function _withdraw(\n        address to,\n        uint256 amount,\n        bool unpack,\n        bool onlyBUSD\n    ) internal nonReentrant returns (uint256 actualAmount) {\n        address redeemer = msg.sender;\n        uint256 totalDepositsOfRedeemer = deposits[redeemer];\n        require(totalDepositsOfRedeemer >= amount, \"INSUFFICIENT_DEPOSIT\");\n        IController(controller).beforeWithdraw(redeemer, address(this), amount);\n\n        deposits[redeemer] -= amount;\n        emit Withdraw(redeemer, amount);\n        _updateJoinStatus(redeemer);\n\n        if (address(farm) != address(0)) {\n            farm.syncWithdraw(redeemer, amount, underlying);\n        }\n\n        IDYSToken(underlying).withdrawByVault(to, amount, totalDepositsOfRedeemer, onlyBUSD);\n        return amount;\n    }\n\n    /**\n     * @notice Ê∏ÖÁÆóË¥¶Êà∑ËµÑ‰∫ß\n     * @param liquidator Ê∏ÖÁÆó‰∫∫\n     * @param borrower ÂÄüÊ¨æ‰∫∫\n     */\n    function _liquidate(\n        address liquidator,\n        address borrower,\n        bytes calldata data\n    ) internal override nonReentrant {\n        require(msg.sender == controller, \"LIQUIDATE_INVALID_CALLER\");\n        require(liquidator != borrower, \"LIQUIDATE_DISABLE_YOURSELF\");\n\n        uint256 supplies = deposits[borrower];\n\n        //Ëé∑ÂæóÊäµÊäºÂìÅ\n        if (supplies > 0) {\n            uint256 toLiquidatorAmount = supplies;\n            IDYSToken(underlying).transferByVault(borrower, liquidator, toLiquidatorAmount, supplies);\n            if (data.length > 0)\n                ILiquidateCallee(liquidator).liquidateDeposit(borrower, underlying, toLiquidatorAmount, data);\n        }\n\n        deposits[borrower] = 0;\n        emit Liquidated(liquidator, borrower, supplies);\n        _updateJoinStatus(borrower);\n\n        if (address(farm) != address(0)) {\n            farm.syncLiquidate(borrower, underlying);\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IDYSToken.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\ninterface IDYSToken {\n    function transferByVault(\n        address user,\n        address to,\n        uint256 transferAmount,\n        uint256 totalDepositsOfUser\n    ) external;\n\n    function withdrawByVault(\n        address user,\n        uint256 withdrawAmount,\n        uint256 totalDepositsOfUser,\n        bool onlyBUSD\n    ) external;\n\n    function deposit(uint256 _amount, address _toVault) external;\n\n    function depositTo(\n        address _to,\n        uint256 _amount,\n        address _toVault\n    ) external;\n\n    function depositCoin(address to, address _toVault) external payable;\n\n    function depositAll(address _toVault) external;\n\n    function withdraw(\n        address _to,\n        uint256 _amount,\n        bool onlyBUSD\n    ) external;\n\n    function underlyingTotal() external view returns (uint256);\n\n    function underlying() external view returns (address);\n\n    function balanceOfUnderlying(address _user) external view returns (uint256);\n\n    function underlyingAmount(uint256 amount) external view returns (uint256);\n}\n"
    },
    "contracts/VaultFactory.sol": {
      "content": "import \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\nimport \"./DYTokenERC20.sol\";\nimport \"./interfaces/IUSDOracle.sol\";\nimport \"./interfaces/IDepositVaultInitializer.sol\";\nimport \"./libs/Adminable.sol\";\nimport \"./interfaces/IController.sol\";\n\ncontract VaultFactory is Initializable, Adminable {\n    IController public controller;\n    address public feeConf;\n    address[] public vaults;\n    mapping(string => address) public vaultImplementations;\n    string[] public vaultKinds;\n    address public vaultProxyAdmin;\n\n    event VaultCreated(address indexed vault);\n\n    function initialize(\n        IController controller_,\n        address feeConf_,\n        address admin_,\n        address vaultProxyAdmin_\n    ) external initializer {\n        controller = controller_;\n        feeConf = feeConf_;\n        _setAdmin(admin_);\n        vaultProxyAdmin = vaultProxyAdmin_;\n    }\n\n    function setController(IController controller_) external onlyAdmin {\n        controller = controller_;\n    }\n\n    function setVaultProxyAdmin(address vaultProxyAdmin_) external onlyAdmin {\n        vaultProxyAdmin = vaultProxyAdmin_;\n    }\n\n    function setFeeConf(address feeConf_) external onlyAdmin {\n        feeConf = feeConf_;\n    }\n\n    function setVaultImplementation(string calldata kind_, address impl_) external onlyAdmin {\n        if (vaultImplementations[kind_] == address(0)) {\n            vaultKinds.push(kind_);\n        }\n        vaultImplementations[kind_] = impl_;\n    }\n\n    function createDepositVault(\n        IERC20Metadata underlying_,\n        IUSDOracle oracle_,\n        uint16 discount_,\n        uint16 premium_,\n        string calldata kind_\n    ) external onlyAdmin returns (address vaultAddress) {\n        DYTokenERC20 dyToken = new DYTokenERC20(address(underlying_), underlying_.symbol(), address(controller));\n        address dyTokenAddress = address(dyToken);\n        controller.setDYToken(address(underlying_), dyTokenAddress);\n        address vaultImpl = vaultImplementations[kind_];\n        require(vaultImpl != address(0), \"Invalid vault kind\");\n        bytes memory proxyData;\n        require(vaultProxyAdmin != address(0), \"invalid vault proxy admin\");\n        TransparentUpgradeableProxy proxy = new TransparentUpgradeableProxy(vaultImpl, vaultProxyAdmin, proxyData);\n        vaultAddress = address(proxy);\n        IDepositVaultInitializer vault = IDepositVaultInitializer(vaultAddress);\n        vault.initialize(address(controller), feeConf, dyTokenAddress);\n        controller.setVault(dyTokenAddress, vaultAddress, 1);\n        _initValidVault(vaultAddress);\n        controller.setOracles(address(underlying_), address(oracle_), discount_, premium_);\n        controller.setVaultStates(\n            vaultAddress,\n            IController.VaultState({\n                enabled: true,\n                enableDeposit: true,\n                enableWithdraw: true,\n                enableBorrow: false,\n                enableRepay: false,\n                enableLiquidate: true\n            })\n        );\n        vault.transferOwnership(msg.sender);\n        vaults.push(vaultAddress);\n        emit VaultCreated(vaultAddress);\n    }\n\n    function _initValidVault(address vaultAddress) internal {\n        IController.ValidVault[] memory validVault = new IController.ValidVault[](1);\n        validVault[0] = IController.ValidVault.No;\n        address[] memory validVaultAddress = new address[](1);\n        validVaultAddress[0] = vaultAddress;\n        // can not be collateralized by default, enable manually if needed\n        controller.initValidVault(validVaultAddress, validVault);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967Proxy.sol\";\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(\n        address _logic,\n        address admin_,\n        bytes memory _data\n    ) payable ERC1967Proxy(_logic, _data) {\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1));\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function admin() external ifAdmin returns (address admin_) {\n        admin_ = _getAdmin();\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function implementation() external ifAdmin returns (address implementation_) {\n        implementation_ = _implementation();\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n     */\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\n        _changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n     */\n    function upgradeTo(address newImplementation) external ifAdmin {\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n     */\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\n        _upgradeToAndCall(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\n     */\n    function _beforeFallback() internal virtual override {\n        require(msg.sender != _getAdmin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n        super._beforeFallback();\n    }\n}\n"
    },
    "contracts/DYTokenERC20.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"./DYTokenBase.sol\";\nimport \"./interfaces/IVault.sol\";\nimport \"./interfaces/IDepositVault.sol\";\n\ncontract DYTokenERC20 is DYTokenBase {\n    using SafeERC20 for IERC20;\n\n    constructor(\n        address _underlying,\n        string memory _symbol,\n        address _controller\n    ) DYTokenBase(_underlying, _symbol, _controller) {}\n\n    function depositCoin(address _to, address _toVault) public payable override {\n        revert(\"DO_NOT_DEPOSIT_COIN\");\n    }\n\n    function deposit(uint256 _amount, address _toVault) external override {\n        depositTo(msg.sender, _amount, _toVault);\n    }\n\n    function depositTo(\n        address _to,\n        uint256 _amount,\n        address _toVault\n    ) public override {\n        uint256 total = underlyingTotal();\n        IERC20 underlyingToken = IERC20(underlying);\n\n        uint256 before = underlyingToken.balanceOf(address(this));\n        underlyingToken.safeTransferFrom(msg.sender, address(this), _amount);\n        uint256 realAmount = underlyingToken.balanceOf(address(this)) - before;\n        // Additional check for deflationary tokens\n        require(realAmount >= _amount, \"illegal amount\");\n\n        uint256 shares = 0;\n        if (totalSupply() == 0) {\n            require(_amount >= 10000, \"too small\");\n            // lock the first MINIMUM_SUPPLY tokens to controller\n            _mint(controller, MINIMUM_SUPPLY);\n            shares = _amount;\n        } else {\n            shares = (_amount * totalSupply()) / total;\n        }\n\n        require(shares > 0, \"ZERO_SHARE\");\n        //\n        if (_toVault != address(0)) {\n            require(_toVault == IController(controller).dyTokenVaults(address(this)), \"mismatch dToken vault\");\n            _mint(_toVault, shares);\n            IDepositVault(_toVault).syncDeposit(address(this), shares, _to);\n        } else {\n            _mint(_to, shares);\n        }\n\n        earn();\n    }\n\n    function withdraw(\n        address _to,\n        uint256 _shares,\n        bool\n    ) public override {\n        require(_shares > 0, \"shares need > 0\");\n        require(totalSupply() > 0, \"no deposit\");\n\n        uint256 r = (underlyingTotal() * _shares) / totalSupply();\n        _burn(msg.sender, _shares);\n\n        uint256 b = IERC20(underlying).balanceOf(address(this));\n        // need withdraw from strategy\n        if (b < r) {\n            uint256 withdrawAmount = r - b;\n\n            address strategy = IController(controller).strategies(underlying);\n            if (strategy != address(0)) {\n                IStrategy(strategy).withdraw(withdrawAmount);\n            }\n\n            uint256 withdrawed = IERC20(underlying).balanceOf(address(this)) - b;\n            if (withdrawed < withdrawAmount) {\n                r = b + withdrawed;\n            }\n        }\n\n        IERC20(underlying).safeTransfer(_to, r);\n    }\n\n    function earn() public override {\n        uint256 b = IERC20(underlying).balanceOf(address(this));\n\n        address strategy = IController(controller).strategies(underlying);\n        if (strategy != address(0)) {\n            IERC20(underlying).safeTransfer(strategy, b);\n            IStrategy(strategy).deposit();\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IDepositVaultInitializer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IDepositVaultInitializer {\n    function initialize(\n        address _controller,\n        address _feeConf,\n        address _underlying\n    ) external;\n\n    function transferOwnership(address newOwner) external;\n}\n"
    },
    "contracts/libs/Adminable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\nabstract contract Adminable {\n    event AdminUpdated(address indexed user, address indexed newAdmin);\n\n    address public admin;\n\n    modifier onlyAdmin() virtual {\n        require(msg.sender == admin, \"UNAUTHORIZED\");\n\n        _;\n    }\n\n    function setAdmin(address newAdmin) public virtual onlyAdmin {\n        _setAdmin(newAdmin);\n    }\n\n    function _setAdmin(address newAdmin) internal {\n        require(newAdmin != address(0), \"Can not set admin to zero address\");\n        admin = newAdmin;\n\n        emit AdminUpdated(msg.sender, newAdmin);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            Address.functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _upgradeTo(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "contracts/DYTokenBase.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport { ERC20Permit } from \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\";\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport \"./interfaces/TokenRecipient.sol\";\nimport \"./interfaces/IStrategy.sol\";\nimport \"./interfaces/IDYToken.sol\";\nimport \"./interfaces/IController.sol\";\n\nabstract contract DYTokenBase is IDYToken, ERC20, ERC20Permit, Ownable {\n    uint256 public constant MINIMUM_SUPPLY = 10**3;\n    using Address for address;\n\n    address public immutable override underlying;\n    uint8 internal dec;\n    address public controller;\n\n    event SetController(address controller);\n\n    constructor(\n        address _underlying,\n        string memory _symbol,\n        address _controller\n    ) ERC20(\"DYToken\", string(abi.encodePacked(\"DY-\", _symbol))) ERC20Permit(\"DYToken\") {\n        underlying = _underlying;\n        dec = ERC20(_underlying).decimals();\n\n        controller = _controller;\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {}\n\n    function decimals() public view virtual override returns (uint8) {\n        return dec;\n    }\n\n    function burn(uint256 amount) public {\n        _burn(msg.sender, amount);\n    }\n\n    function send(\n        address recipient,\n        uint256 amount,\n        bytes calldata exData\n    ) external returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n\n        if (recipient.isContract()) {\n            bool rv = TokenRecipient(recipient).tokensReceived(msg.sender, amount, exData);\n            require(rv, \"No tokensReceived\");\n        }\n\n        return true;\n    }\n\n    // ====== Controller ======\n    function setController(address _controller) public onlyOwner {\n        require(_controller != address(0), \"INVALID_CONTROLLER\");\n        controller = _controller;\n        emit SetController(_controller);\n    }\n\n    // ====== yield functions  =====\n\n    // total hold\n    function underlyingTotal() public view virtual returns (uint256) {\n        address strategy = IController(controller).strategies(underlying);\n        if (strategy != address(0)) {\n            return IERC20(underlying).balanceOf(address(this)) + IStrategy(strategy).balanceOf();\n        } else {\n            return IERC20(underlying).balanceOf(address(this));\n        }\n    }\n\n    function underlyingAmount(uint256 amount) public view virtual override returns (uint256) {\n        if (totalSupply() == 0) {\n            return 0;\n        }\n        return (underlyingTotal() * amount) / totalSupply();\n    }\n\n    function balanceOfUnderlying(address _user) public view virtual override returns (uint256) {\n        if (balanceOf(_user) > 0) {\n            return (underlyingTotal() * balanceOf(_user)) / totalSupply();\n        } else {\n            return 0;\n        }\n    }\n\n    // Âçï‰ΩçÂáÄÂÄº\n    function pricePerShare() public view returns (uint256 price) {\n        if (totalSupply() > 0) {\n            return (underlyingTotal() * 1e18) / totalSupply();\n        }\n    }\n\n    function depositTo(\n        address _to,\n        uint256 _amount,\n        address _toVault\n    ) public virtual;\n\n    // for native coin\n    function depositCoin(address _to, address _toVault) public payable virtual {}\n\n    function depositAll(address _toVault) external {\n        address user = msg.sender;\n        depositTo(user, IERC20(underlying).balanceOf(user), _toVault);\n    }\n\n    // withdraw underlying asset, brun dyTokens\n    function withdraw(\n        address _to,\n        uint256 _shares,\n        bool needETH\n    ) public virtual;\n\n    function withdrawAll() external {\n        withdraw(msg.sender, balanceOf(msg.sender), true);\n    }\n\n    // transfer all underlying asset to yield strategy\n    function earn() public virtual;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./draft-IERC20Permit.sol\";\nimport \"../ERC20.sol\";\nimport \"../../../utils/cryptography/draft-EIP712.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\n    using Counters for Counters.Counter;\n\n    mapping(address => Counters.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private immutable _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/interfaces/TokenRecipient.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\ninterface TokenRecipient {\n    // must return ture\n    function tokensReceived(\n        address from,\n        uint256 amount,\n        bytes calldata exData\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n √∑ 2 + 1, and for v in (302): v ‚àà {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/vault/LpFarmingVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport { IERC20Metadata } from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\nimport { IERC20Upgradeable } from \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\nimport \"../interfaces/IController.sol\";\nimport \"../interfaces/IDYToken.sol\";\nimport \"../interfaces/IPair.sol\";\nimport \"../interfaces/IUSDOracle.sol\";\nimport \"../interfaces/IZap.sol\";\nimport \"../interfaces/IWithdrawCallee.sol\";\n\nimport \"../libs/HomoraMath.sol\";\n\nimport \"./DepositVaultBase.sol\";\n\n// LpFarmingVault only for deposit\ncontract LpFarmingVault is DepositVaultBase {\n    using HomoraMath for uint256;\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    address public pair;\n    address public token0;\n    uint256 internal decimal0Scale; // no used again\n    address public token1;\n    uint256 internal decimal1Scale; // no used again\n\n    function initialize(\n        address _controller,\n        address _feeConf,\n        address _underlying\n    ) external initializer {\n        DepositVaultBase.init(_controller, _feeConf, _underlying);\n        pair = IDYToken(_underlying).underlying();\n\n        token0 = IPair(pair).token0();\n        token1 = IPair(pair).token1();\n    }\n\n    function underlyingTransferIn(address sender, uint256 amount) internal virtual override {\n        IERC20Upgradeable(underlying).safeTransferFrom(sender, address(this), amount);\n    }\n\n    function underlyingTransferOut(\n        address receipt,\n        uint256 amount,\n        bool\n    ) internal virtual override {\n        //  skip transfer to myself\n        if (receipt == address(this)) {\n            return;\n        }\n\n        require(receipt != address(0), \"receipt is empty\");\n        IERC20Upgradeable(underlying).safeTransfer(receipt, amount);\n    }\n\n    function deposit(address dtoken, uint256 amount) external virtual override {\n        require(dtoken == address(underlying), \"TOKEN_UNMATCH\");\n        underlyingTransferIn(msg.sender, amount);\n        _deposit(msg.sender, amount);\n    }\n\n    function depositTo(\n        address dtoken,\n        address to,\n        uint256 amount\n    ) external {\n        require(dtoken == address(underlying), \"TOKEN_UNMATCH\");\n        underlyingTransferIn(msg.sender, amount);\n        _deposit(to, amount);\n    }\n\n    // call from dToken\n    function syncDeposit(\n        address dtoken,\n        uint256 amount,\n        address user\n    ) external virtual override {\n        address vault = IController(controller).dyTokenVaults(dtoken);\n        require(msg.sender == underlying && dtoken == address(underlying), \"TOKEN_UNMATCH\");\n        require(vault == address(this), \"VAULT_UNMATCH\");\n        _deposit(user, amount);\n    }\n\n    function withdraw(uint256 amount, bool unpack) external {\n        _withdraw(msg.sender, amount, unpack);\n    }\n\n    function withdrawTo(\n        address to,\n        uint256 amount,\n        bool unpack\n    ) external {\n        _withdraw(to, amount, unpack);\n    }\n\n    function withdrawCall(\n        address to,\n        uint256 amount,\n        bool unpack,\n        bytes calldata data\n    ) external {\n        uint256 actualAmount = _withdraw(to, amount, unpack);\n        if (data.length > 0) {\n            address asset = unpack ? pair : underlying;\n            IWithdrawCallee(to).execCallback(msg.sender, asset, actualAmount, data);\n        }\n    }\n\n    function liquidate(\n        address liquidator,\n        address borrower,\n        bytes calldata data\n    ) external override {\n        _liquidate(liquidator, borrower, data);\n    }\n\n    function underlyingAmountValue(uint256 _amount, bool dp) public view returns (uint256 value) {\n        if (_amount == 0) {\n            return 0;\n        }\n        uint256 lpSupply = IERC20(pair).totalSupply();\n\n        (uint256 reserve0, uint256 reserve1, ) = IPair(pair).getReserves();\n        uint256 sqrtK = HomoraMath.sqrt(reserve0 * reserve1).fdiv(lpSupply); // in 2**112\n\n        // get lp amount\n        uint256 amount = IDYToken(underlying).underlyingAmount(_amount);\n\n        (address oracle0, uint256 dr0, , address oracle1, uint256 dr1, ) = IController(controller).getValueConfs(\n            token0,\n            token1\n        );\n\n        uint256 price0 = IUSDOracle(oracle0).getPrice(token0);\n        uint256 price1 = IUSDOracle(oracle1).getPrice(token1);\n\n        uint256 lp_price = (((sqrtK * 2 * (HomoraMath.sqrt(price0))) / (2**56)) * HomoraMath.sqrt(price1)) / 2**56;\n\n        if (dp) {\n            value = (lp_price * amount * (dr0 + dr1)) / 2 / PercentBase / (10**18);\n        } else {\n            value = (lp_price * amount) / (10**18);\n        }\n    }\n\n    /**\n    @notice Áî®Êà∑ Vault ‰ª∑ÂÄº‰º∞ÂÄº\n    @param dp Discount Êàñ Premium\n  */\n    function userValue(address user, bool dp) external view override returns (uint256) {\n        if (deposits[user] == 0) {\n            return 0;\n        }\n        return underlyingAmountValue(deposits[user], dp);\n    }\n\n    // amount > 0 : deposit\n    // amount < 0 : withdraw\n    function pendingValue(address user, int256 amount) external view override returns (uint256) {\n        if (amount >= 0) {\n            return underlyingAmountValue(deposits[user] + uint256(amount), true);\n        } else {\n            return underlyingAmountValue(deposits[user] - uint256(0 - amount), true);\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IZap.sol": {
      "content": "pragma solidity >=0.8.0;\n\ninterface IZap {\n    function lpToToken(\n        address _lp,\n        uint256 _amount,\n        address _token,\n        address _toUser,\n        uint256 minAmout\n    ) external returns (uint256 amount);\n\n    function tokenToLpbyPath(\n        address _token,\n        uint256 amount,\n        address _lp,\n        bool needDeposit,\n        address[] memory pathArr0,\n        address[] memory pathArr1\n    ) external;\n}\n"
    },
    "contracts/libs/HomoraMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0;\n\nlibrary HomoraMath {\n    function divCeil(uint256 lhs, uint256 rhs) internal pure returns (uint256) {\n        return (lhs + rhs - 1) / rhs;\n    }\n\n    function fmul(uint256 lhs, uint256 rhs) internal pure returns (uint256) {\n        return (lhs * rhs) / (2**112);\n    }\n\n    function fdiv(uint256 lhs, uint256 rhs) internal pure returns (uint256) {\n        return (lhs * (2**112)) / rhs;\n    }\n\n    // implementation from https://github.com/Uniswap/uniswap-lib/commit/99f3f28770640ba1bb1ff460ac7c5292fb8291a0\n    // original implementation: https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\n    function sqrt(uint256 x) internal pure returns (uint256) {\n        if (x == 0) return 0;\n        uint256 xx = x;\n        uint256 r = 1;\n\n        if (xx >= 0x100000000000000000000000000000000) {\n            xx >>= 128;\n            r <<= 64;\n        }\n\n        if (xx >= 0x10000000000000000) {\n            xx >>= 64;\n            r <<= 32;\n        }\n        if (xx >= 0x100000000) {\n            xx >>= 32;\n            r <<= 16;\n        }\n        if (xx >= 0x10000) {\n            xx >>= 16;\n            r <<= 8;\n        }\n        if (xx >= 0x100) {\n            xx >>= 8;\n            r <<= 4;\n        }\n        if (xx >= 0x10) {\n            xx >>= 4;\n            r <<= 2;\n        }\n        if (xx >= 0x8) {\n            r <<= 1;\n        }\n\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1; // Seven iterations should be enough\n        uint256 r1 = x / r;\n        return (r < r1 ? r : r1);\n    }\n}\n"
    },
    "contracts/strategy/StrategyForPancakeLP.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../interfaces/IPair.sol\";\nimport \"../interfaces/IMasterChef.sol\";\nimport \"../interfaces/IRouter02.sol\";\n\nimport \"./BaseStrategy.sol\";\n\n// 1. stake Pancake lp earn cake.\n// 2. cake to lp\ncontract StrategyForPancakeLP is BaseStrategy {\n    using SafeERC20 for IERC20;\n\n    address public immutable router;\n    // bsc: 0x73feaa1ee314f8c655e354234017be2193c9e24e\n    address public immutable masterChef;\n\n    uint256 public immutable pid;\n\n    address public immutable token0;\n    address public immutable token1;\n\n    address[] public outputToToken0Path;\n    address[] public outputToToken1Path;\n\n    constructor(\n        address _controller,\n        address _fee,\n        address _want,\n        address _router,\n        address _master,\n        uint256 _pid\n    ) BaseStrategy(_controller, _fee, _want, IMasterChef(_master).cake()) {\n        router = _router;\n        masterChef = _master;\n        pid = _pid;\n\n        token0 = IPair(_want).token0();\n        token1 = IPair(_want).token1();\n\n        outputToToken0Path = [output, token0];\n        outputToToken1Path = [output, token1];\n\n        doApprove();\n    }\n\n    function doApprove() public {\n        IERC20(token0).safeApprove(router, 0);\n        IERC20(token0).safeApprove(router, type(uint256).max);\n        IERC20(token1).safeApprove(router, 0);\n        IERC20(token1).safeApprove(router, type(uint256).max);\n\n        IERC20(output).safeApprove(router, 0);\n        IERC20(output).safeApprove(router, type(uint256).max);\n        IERC20(want).safeApprove(masterChef, 0);\n        IERC20(want).safeApprove(masterChef, type(uint256).max);\n    }\n\n    function balanceOfPool() public view virtual override returns (uint256) {\n        (uint256 amount, ) = IMasterChef(masterChef).userInfo(pid, address(this));\n        return amount;\n    }\n\n    function pendingOutput() external view virtual override returns (uint256) {\n        return IMasterChef(masterChef).pendingCake(pid, address(this));\n    }\n\n    function deposit() public virtual override {\n        uint256 dAmount = IERC20(want).balanceOf(address(this));\n        if (dAmount > 0) {\n            IMasterChef(masterChef).deposit(pid, dAmount); // receive pending cake.\n            emit Deposit(dAmount);\n        }\n\n        doHarvest();\n    }\n\n    // yield\n    function harvest() public virtual override {\n        IMasterChef(masterChef).deposit(pid, 0);\n        doHarvest();\n    }\n\n    // only call from dToken\n    function withdraw(uint256 _amount) external virtual override {\n        address dToken = IController(controller).dyTokens(want);\n        require(msg.sender == dToken, \"invalid caller\");\n\n        uint256 dAmount = IERC20(want).balanceOf(address(this));\n        if (dAmount < _amount) {\n            IMasterChef(masterChef).withdraw(pid, _amount - dAmount);\n        }\n\n        safeTransfer(want, dToken, _amount); // lp transfer to dToken\n        emit Withdraw(_amount);\n        doHarvest();\n    }\n\n    // should used for reset strategy\n    function withdrawAll() external virtual override returns (uint256 balance) {\n        address dToken = IController(controller).dyTokens(want);\n        require(msg.sender == controller || msg.sender == dToken, \"invalid caller\");\n\n        doHarvest();\n        uint256 b = balanceOfPool();\n        IMasterChef(masterChef).withdraw(pid, b);\n\n        uint256 balance = IERC20(want).balanceOf(address(this));\n        IERC20(want).safeTransfer(dToken, balance);\n        emit Withdraw(balance);\n\n        // May left a little output token, let's send to Yield Fee Receiver.\n        uint256 cakeBalance = IERC20(output).balanceOf(address(this));\n        (address feeReceiver, ) = feeConf.getConfig(\"yield_fee\");\n        IERC20(output).safeTransfer(feeReceiver, cakeBalance);\n    }\n\n    function emergency() external override onlyOwner {\n        IMasterChef(masterChef).emergencyWithdraw(pid);\n\n        uint256 amount = IERC20(want).balanceOf(address(this));\n        address dToken = IController(controller).dyTokens(want);\n\n        if (dToken != address(0)) {\n            IERC20(want).safeTransfer(dToken, amount);\n        } else {\n            IERC20(want).safeTransfer(owner(), amount);\n        }\n        emit Withdraw(amount);\n    }\n\n    function doHarvest() internal virtual {\n        uint256 cakeBalance = IERC20(output).balanceOf(address(this));\n        if (cakeBalance > minHarvestAmount) {\n            IRouter02(router).swapExactTokensForTokens(\n                cakeBalance / 2,\n                0,\n                outputToToken0Path,\n                address(this),\n                block.timestamp\n            );\n            IRouter02(router).swapExactTokensForTokens(\n                cakeBalance / 2,\n                0,\n                outputToToken1Path,\n                address(this),\n                block.timestamp\n            );\n\n            uint256 token0Amount = IERC20(token0).balanceOf(address(this));\n            uint256 token1Amount = IERC20(token1).balanceOf(address(this));\n\n            (, , uint256 liquidity) = IRouter02(router).addLiquidity(\n                token0,\n                token1,\n                token0Amount,\n                token1Amount,\n                0,\n                0,\n                address(this),\n                block.timestamp\n            );\n\n            uint256 fee = sendYieldFee(liquidity);\n            uint256 hAmount = liquidity - fee;\n\n            IMasterChef(masterChef).deposit(pid, hAmount);\n            emit Harvest(hAmount);\n        }\n    }\n\n    function sendYieldFee(uint256 liquidity) internal returns (uint256 fee) {\n        (address feeReceiver, uint256 yieldFee) = feeConf.getConfig(\"yield_fee\");\n\n        fee = (liquidity * yieldFee) / PercentBase;\n        if (fee > 0) {\n            IERC20(want).safeTransfer(feeReceiver, fee);\n        }\n    }\n\n    function setToken0Path(address[] memory _path) public onlyOwner {\n        outputToToken0Path = _path;\n    }\n\n    function setToken1Path(address[] memory _path) public onlyOwner {\n        outputToToken1Path = _path;\n    }\n}\n"
    },
    "contracts/interfaces/IMasterChef.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IMasterChef {\n    function cake() external view returns (address);\n\n    function poolLength() external view returns (uint256);\n\n    function cakePerBlock() external view returns (uint256);\n\n    function totalAllocPoint() external view returns (uint256);\n\n    function poolInfo(uint256 pid)\n        external\n        view\n        returns (\n            address lpToken,\n            uint256 allocPoint,\n            uint256 lastRewardBlock,\n            uint256 accSushiPerShare\n        );\n\n    function userInfo(uint256 pid, address user) external view returns (uint256 amount, uint256 rewardDebt);\n\n    // View function to see pending SUSHIs on frontend.\n    function pendingCake(uint256 _pid, address _user) external view returns (uint256);\n\n    function deposit(uint256 _pid, uint256 _amount) external;\n\n    function withdraw(uint256 _pid, uint256 _amount) external;\n\n    function emergencyWithdraw(uint256 _pid) external;\n\n    function enterStaking(uint256 _amount) external;\n\n    function leaveStaking(uint256 _amount) external;\n}\n"
    },
    "contracts/interfaces/IRouter02.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2;\n\ninterface IRouter02 {\n    function factory() external pure returns (address);\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountETH);\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}\n"
    },
    "contracts/strategy/BaseStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"../Constants.sol\";\nimport \"../interfaces/IStrategy.sol\";\nimport \"../interfaces/IFeeConf.sol\";\nimport \"../interfaces/IController.sol\";\n\n/*\n  if possible, strategies must remain as immutable as possible, instead of updating variables, update the contract by linking it in the controller\n*/\n\nabstract contract BaseStrategy is Constants, IStrategy, Ownable {\n    using SafeERC20 for IERC20;\n\n    address internal want; // such as: pancake lp\n    address public output; // such as: cake\n\n    uint256 public minHarvestAmount;\n    address public override controller;\n    IFeeConf public feeConf;\n\n    event Harvest(uint256 amount);\n    event Deposit(uint256 amount);\n    event Withdraw(uint256 amount);\n\n    event SetController(address controller);\n    event SetFeeConf(address controller);\n    event SetMinHarvestAmount(uint256 harvestAmount);\n\n    constructor(\n        address _controller,\n        address _fee,\n        address _want,\n        address _output\n    ) {\n        controller = _controller;\n        want = _want;\n        output = _output;\n        minHarvestAmount = 1e18;\n\n        feeConf = IFeeConf(_fee);\n    }\n\n    function getWant() external view override returns (address) {\n        return want;\n    }\n\n    function balanceOf() external view virtual returns (uint256) {\n        uint256 b = IERC20(want).balanceOf(address(this));\n        return b + balanceOfPool();\n    }\n\n    function balanceOfPool() public view virtual returns (uint256);\n\n    // normally call from dToken.\n    function deposit() public virtual;\n\n    function harvest() external virtual;\n\n    // Withdraw partial funds, normally used with a dToken withdrawal\n    function withdraw(uint256 _amount) external virtual;\n\n    // Withdraw all funds, normally used when migrating strategies\n    function withdrawAll() external virtual returns (uint256 balance);\n\n    function emergency() external virtual;\n\n    // pending cake\n    function pendingOutput() external view virtual returns (uint256);\n\n    function setMinHarvestAmount(uint256 _minAmount) external onlyOwner {\n        minHarvestAmount = _minAmount;\n        emit SetMinHarvestAmount(_minAmount);\n    }\n\n    function setController(address _controller) external onlyOwner {\n        require(_controller != address(0), \"INVALID_CONTROLLER\");\n        controller = _controller;\n        emit SetController(_controller);\n    }\n\n    function setFeeConf(address _feeConf) external onlyOwner {\n        require(_feeConf != address(0), \"INVALID_FEECONF\");\n        feeConf = IFeeConf(_feeConf);\n        emit SetFeeConf(_feeConf);\n    }\n\n    function inCaseTokensGetStuck(address _token, uint256 _amount) public onlyOwner {\n        IERC20(_token).safeTransfer(owner(), _amount);\n    }\n\n    function safeTransfer(\n        address _token,\n        address _to,\n        uint256 _amount\n    ) internal {\n        uint256 b = IERC20(_token).balanceOf(address(this));\n        if (b > _amount) {\n            IERC20(_token).safeTransfer(_to, _amount);\n        } else {\n            IERC20(_token).safeTransfer(_to, b);\n        }\n    }\n}\n"
    },
    "contracts/strategy/StrategyForCake.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../interfaces/IPair.sol\";\nimport \"../interfaces/IMasterChef.sol\";\nimport \"../interfaces/IRouter02.sol\";\n\nimport \"./BaseStrategy.sol\";\n\n// stake Cake earn cake.\ncontract StrategyForCake is BaseStrategy {\n    using SafeERC20 for IERC20;\n\n    address public immutable masterChef;\n    uint256 public constant pid = 0;\n\n    constructor(\n        address _controller,\n        address _fee,\n        address _master\n    ) BaseStrategy(_controller, _fee, IMasterChef(_master).cake(), IMasterChef(_master).cake()) {\n        masterChef = _master;\n        IERC20(output).safeApprove(masterChef, type(uint256).max);\n    }\n\n    function balanceOfPool() public view virtual override returns (uint256) {\n        (uint256 amount, ) = IMasterChef(masterChef).userInfo(pid, address(this));\n        return amount;\n    }\n\n    function pendingOutput() external view virtual override returns (uint256) {\n        return IMasterChef(masterChef).pendingCake(pid, address(this));\n    }\n\n    function deposit() public virtual override {\n        uint256 dAmount = IERC20(want).balanceOf(address(this));\n        if (dAmount > 0) {\n            IMasterChef(masterChef).enterStaking(dAmount); // receive pending cake.\n            emit Deposit(dAmount);\n        }\n\n        doHarvest();\n    }\n\n    // yield\n    function harvest() public virtual override {\n        IMasterChef(masterChef).enterStaking(0);\n        doHarvest();\n    }\n\n    // only call from dToken\n    function withdraw(uint256 _amount) external virtual override {\n        address dToken = IController(controller).dyTokens(want);\n        require(msg.sender == dToken, \"invalid caller\");\n\n        uint256 dAmount = IERC20(want).balanceOf(address(this));\n        if (dAmount < _amount) {\n            IMasterChef(masterChef).leaveStaking(_amount - dAmount);\n        }\n\n        safeTransfer(want, dToken, _amount); // lp transfer to dToken\n        emit Withdraw(_amount);\n        doHarvest();\n    }\n\n    // should used for reset strategy\n    function withdrawAll() external virtual override returns (uint256 balance) {\n        address dToken = IController(controller).dyTokens(want);\n        require(msg.sender == controller || msg.sender == dToken, \"invalid caller\");\n\n        doHarvest();\n        uint256 b = balanceOfPool();\n        IMasterChef(masterChef).leaveStaking(b);\n\n        uint256 balance = IERC20(want).balanceOf(address(this));\n        IERC20(want).safeTransfer(dToken, balance);\n        emit Withdraw(balance);\n    }\n\n    function emergency() external override onlyOwner {\n        IMasterChef(masterChef).emergencyWithdraw(pid);\n\n        uint256 amount = IERC20(want).balanceOf(address(this));\n        address dToken = IController(controller).dyTokens(want);\n\n        if (dToken != address(0)) {\n            IERC20(want).safeTransfer(dToken, amount);\n        } else {\n            IERC20(want).safeTransfer(owner(), amount);\n        }\n        emit Withdraw(amount);\n    }\n\n    function doHarvest() internal virtual {\n        uint256 cakeBalance = IERC20(output).balanceOf(address(this));\n        if (cakeBalance > minHarvestAmount) {\n            uint256 fee = sendYieldFee(cakeBalance);\n            uint256 hAmount = cakeBalance - fee;\n\n            IMasterChef(masterChef).enterStaking(hAmount);\n            emit Harvest(hAmount);\n        }\n    }\n\n    function sendYieldFee(uint256 liquidity) internal returns (uint256 fee) {\n        (address feeReceiver, uint256 yieldFee) = feeConf.getConfig(\"yield_fee\");\n\n        fee = (liquidity * yieldFee) / PercentBase;\n        if (fee > 0) {\n            IERC20(want).safeTransfer(feeReceiver, fee);\n        }\n    }\n}\n"
    },
    "contracts/strategy/Strategy2ForPancakeLP.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../interfaces/IPair.sol\";\nimport \"../interfaces/IMasterChefV2.sol\";\nimport \"../interfaces/IRouter02.sol\";\n\nimport \"./BaseStrategy.sol\";\n\n// 1. stake Pancake lp earn cake.\n// 2. cake to lp\ncontract Strategy2ForPancakeLP is BaseStrategy {\n    using SafeERC20 for IERC20;\n\n    address public immutable router;\n    // bsc: 0x73feaa1ee314f8c655e354234017be2193c9e24e\n    address public immutable masterChef;\n\n    uint256 public immutable pid;\n\n    address public immutable token0;\n    address public immutable token1;\n\n    address[] public outputToToken0Path;\n    address[] public outputToToken1Path;\n\n    constructor(\n        address _controller,\n        address _fee,\n        address _want,\n        address _router,\n        address _master,\n        address _cake,\n        uint256 _pid\n    ) BaseStrategy(_controller, _fee, _want, _cake) {\n        router = _router;\n        masterChef = _master;\n        pid = _pid;\n\n        token0 = IPair(_want).token0();\n        token1 = IPair(_want).token1();\n\n        outputToToken0Path = [output, token0];\n        outputToToken1Path = [output, token1];\n\n        doApprove();\n    }\n\n    function doApprove() public {\n        IERC20(token0).safeApprove(router, 0);\n        IERC20(token0).safeApprove(router, type(uint256).max);\n        IERC20(token1).safeApprove(router, 0);\n        IERC20(token1).safeApprove(router, type(uint256).max);\n\n        if (token0 != output && token1 != output) {\n            IERC20(output).safeApprove(router, 0);\n            IERC20(output).safeApprove(router, type(uint256).max);\n        }\n\n        IERC20(want).safeApprove(masterChef, 0);\n        IERC20(want).safeApprove(masterChef, type(uint256).max);\n    }\n\n    function balanceOfPool() public view virtual override returns (uint256) {\n        (uint256 amount, , ) = IMasterChefV2(masterChef).userInfo(pid, address(this));\n        return amount;\n    }\n\n    function pendingOutput() external view virtual override returns (uint256) {\n        return IMasterChefV2(masterChef).pendingCake(pid, address(this));\n    }\n\n    function deposit() public virtual override {\n        uint256 dAmount = IERC20(want).balanceOf(address(this));\n        if (dAmount > 0) {\n            IMasterChefV2(masterChef).deposit(pid, dAmount); // receive pending cake.\n            emit Deposit(dAmount);\n        }\n\n        doHarvest();\n    }\n\n    // yield\n    function harvest() public virtual override {\n        IMasterChefV2(masterChef).deposit(pid, 0);\n        doHarvest();\n    }\n\n    // only call from dToken\n    function withdraw(uint256 _amount) external virtual override {\n        address dToken = IController(controller).dyTokens(want);\n        require(msg.sender == dToken, \"invalid caller\");\n\n        uint256 dAmount = IERC20(want).balanceOf(address(this));\n        if (dAmount < _amount) {\n            IMasterChefV2(masterChef).withdraw(pid, _amount - dAmount);\n        }\n\n        safeTransfer(want, dToken, _amount); // lp transfer to dToken\n        emit Withdraw(_amount);\n        doHarvest();\n    }\n\n    // should used for reset strategy\n    function withdrawAll() external virtual override returns (uint256 balance) {\n        address dToken = IController(controller).dyTokens(want);\n        require(msg.sender == controller || msg.sender == dToken, \"invalid caller\");\n\n        doHarvest();\n        uint256 b = balanceOfPool();\n        IMasterChefV2(masterChef).withdraw(pid, b);\n\n        uint256 balance = IERC20(want).balanceOf(address(this));\n        IERC20(want).safeTransfer(dToken, balance);\n        emit Withdraw(balance);\n\n        // May left a little output token, let's send to Yield Fee Receiver.\n        uint256 cakeBalance = IERC20(output).balanceOf(address(this));\n        (address feeReceiver, ) = feeConf.getConfig(\"yield_fee\");\n        IERC20(output).safeTransfer(feeReceiver, cakeBalance);\n    }\n\n    function emergency() external override onlyOwner {\n        IMasterChefV2(masterChef).emergencyWithdraw(pid);\n\n        uint256 amount = IERC20(want).balanceOf(address(this));\n        address dToken = IController(controller).dyTokens(want);\n\n        if (dToken != address(0)) {\n            IERC20(want).safeTransfer(dToken, amount);\n        } else {\n            IERC20(want).safeTransfer(owner(), amount);\n        }\n        emit Withdraw(amount);\n    }\n\n    function doHarvest() internal virtual {\n        uint256 cakeBalance = IERC20(output).balanceOf(address(this));\n        if (cakeBalance > minHarvestAmount) {\n            if (output != token0) {\n                IRouter02(router).swapExactTokensForTokens(\n                    cakeBalance / 2,\n                    0,\n                    outputToToken0Path,\n                    address(this),\n                    block.timestamp\n                );\n            }\n\n            if (output != token1) {\n                IRouter02(router).swapExactTokensForTokens(\n                    cakeBalance / 2,\n                    0,\n                    outputToToken1Path,\n                    address(this),\n                    block.timestamp\n                );\n            }\n\n            uint256 token0Amount = IERC20(token0).balanceOf(address(this));\n            uint256 token1Amount = IERC20(token1).balanceOf(address(this));\n\n            (, , uint256 liquidity) = IRouter02(router).addLiquidity(\n                token0,\n                token1,\n                token0Amount,\n                token1Amount,\n                0,\n                0,\n                address(this),\n                block.timestamp\n            );\n\n            uint256 fee = sendYieldFee(liquidity);\n            uint256 hAmount = liquidity - fee;\n\n            IMasterChefV2(masterChef).deposit(pid, hAmount);\n            emit Harvest(hAmount);\n        }\n    }\n\n    function sendYieldFee(uint256 liquidity) internal returns (uint256 fee) {\n        (address feeReceiver, uint256 yieldFee) = feeConf.getConfig(\"yield_fee\");\n\n        fee = (liquidity * yieldFee) / PercentBase;\n        if (fee > 0) {\n            IERC20(want).safeTransfer(feeReceiver, fee);\n        }\n    }\n\n    function setToken0Path(address[] memory _path) public onlyOwner {\n        outputToToken0Path = _path;\n    }\n\n    function setToken1Path(address[] memory _path) public onlyOwner {\n        outputToToken1Path = _path;\n    }\n}\n"
    },
    "contracts/interfaces/IMasterChefV2.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IMasterChefV2 {\n    function CAKE() external view returns (address);\n\n    function poolLength() external view returns (uint256);\n\n    function cakePerBlock(bool _isRegular) external view returns (uint256);\n\n    function lpToken(uint256 pid) external view returns (address);\n\n    function poolInfo(uint256 pid)\n        external\n        view\n        returns (\n            uint256 accCakePerShare,\n            uint256 lastRewardBlock,\n            uint256 allocPoint,\n            uint256 totalBoostedShare,\n            bool isRegular\n        );\n\n    function userInfo(uint256 pid, address user)\n        external\n        view\n        returns (\n            uint256 amount,\n            uint256 rewardDebt,\n            uint256 boostMultiplier\n        );\n\n    // View function to see pending SUSHIs on frontend.\n    function pendingCake(uint256 _pid, address _user) external view returns (uint256);\n\n    function deposit(uint256 _pid, uint256 _amount) external;\n\n    function withdraw(uint256 _pid, uint256 _amount) external;\n\n    function emergencyWithdraw(uint256 _pid) external;\n}\n"
    },
    "contracts/strategy/Strategy2ForCake.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../interfaces/IPair.sol\";\nimport \"../interfaces/ICakePool.sol\";\nimport \"../interfaces/IRouter02.sol\";\n\nimport \"./BaseStrategy.sol\";\n\n// stake Cake earn cake.\ncontract Strategy2ForCake is BaseStrategy {\n    using SafeERC20 for IERC20;\n\n    address public immutable cakepool;\n\n    constructor(\n        address _controller,\n        address _fee,\n        address _cakepool\n    ) BaseStrategy(_controller, _fee, ICakePool(_cakepool).token(), ICakePool(_cakepool).token()) {\n        cakepool = _cakepool;\n        IERC20(output).safeApprove(cakepool, type(uint256).max);\n    }\n\n    function balanceOfPool() public view virtual override returns (uint256) {\n        (uint256 userShares, , , , , , , , ) = ICakePool(cakepool).userInfo(address(this));\n        uint256 pricePerFullShare = ICakePool(cakepool).getPricePerFullShare();\n        uint256 amount = (userShares * pricePerFullShare) / 1e18;\n        return amount;\n    }\n\n    function pendingOutput() external view virtual override returns (uint256) {\n        (uint256 userShares, , uint256 cakeAtLastUserAction, , , , , , ) = ICakePool(cakepool).userInfo(address(this));\n        uint256 pricePerFullShare = ICakePool(cakepool).getPricePerFullShare();\n        uint256 amount = (userShares * pricePerFullShare) / 1e18 - cakeAtLastUserAction;\n        return amount;\n    }\n\n    function deposit() public virtual override {\n        uint256 dAmount = IERC20(want).balanceOf(address(this));\n        if (dAmount > 0) {\n            ICakePool(cakepool).deposit(dAmount, 0);\n            emit Deposit(dAmount);\n        }\n    }\n\n    // only call from dToken\n    function withdraw(uint256 _amount) external virtual override {\n        address dToken = IController(controller).dyTokens(want);\n        require(msg.sender == dToken, \"invalid caller\");\n\n        uint256 dAmount = IERC20(want).balanceOf(address(this));\n        if (dAmount < _amount) {\n            ICakePool(cakepool).withdrawByAmount(_amount - dAmount);\n        }\n\n        safeTransfer(want, dToken, _amount); // lp transfer to dToken\n        emit Withdraw(_amount);\n    }\n\n    // should used for reset strategy\n    function withdrawAll() external virtual override returns (uint256 balance) {\n        address dToken = IController(controller).dyTokens(want);\n        require(msg.sender == controller || msg.sender == dToken, \"invalid caller\");\n\n        (uint256 userShares, , , , , , , , ) = ICakePool(cakepool).userInfo(address(this));\n        if (userShares > 0) {\n            ICakePool(cakepool).withdrawAll();\n            uint256 balance = IERC20(want).balanceOf(address(this));\n            IERC20(want).safeTransfer(dToken, balance);\n            emit Withdraw(balance);\n        }\n    }\n\n    function emergency() external override onlyOwner {\n        ICakePool(cakepool).withdrawAll();\n\n        uint256 amount = IERC20(want).balanceOf(address(this));\n        address dToken = IController(controller).dyTokens(want);\n\n        if (dToken != address(0)) {\n            IERC20(want).safeTransfer(dToken, amount);\n        } else {\n            IERC20(want).safeTransfer(owner(), amount);\n        }\n        emit Withdraw(amount);\n    }\n\n    function harvest() public virtual override {}\n\n    function sendYieldFee(uint256 liquidity) internal returns (uint256 fee) {\n        (address feeReceiver, uint256 yieldFee) = feeConf.getConfig(\"yield_fee\");\n\n        fee = (liquidity * yieldFee) / PercentBase;\n        if (fee > 0) {\n            IERC20(want).safeTransfer(feeReceiver, fee);\n        }\n    }\n}\n"
    },
    "contracts/interfaces/ICakePool.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface ICakePool {\n    function token() external view returns (address);\n\n    function deposit(uint256 _amount, uint256 _lockDuration) external;\n\n    function withdrawByAmount(uint256 _amount) external;\n\n    function withdrawAll() external;\n\n    function getPricePerFullShare() external view returns (uint256);\n\n    function userInfo(address user)\n        external\n        view\n        returns (\n            uint256 shares, // number of shares for a user.\n            uint256 lastDepositedTime, // keep track of deposited time for potential penalty.\n            uint256 cakeAtLastUserAction, // keep track of cake deposited at the last user action.\n            uint256 lastUserActionTime, // keep track of the last user action time.\n            uint256 lockStartTime, // lock start time.\n            uint256 lockEndTime, // lock end time.\n            uint256 userBoostedShare, // boost share, in order to give the user higher reward. The user only enjoys the reward, so the principal needs to be recorded as a debt.\n            bool locked, //lock status.\n            uint256 lockedAmount // amount deposited during lock period.\n        );\n}\n"
    },
    "contracts/mock/Reader.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../interfaces/IPair.sol\";\nimport \"../interfaces/IVault.sol\";\nimport \"../interfaces/IController.sol\";\nimport \"../interfaces/IUSDOracle.sol\";\nimport \"../interfaces/IRouter02.sol\";\nimport \"../interfaces/IPancakeFactory.sol\";\nimport \"../interfaces/IDusdMinter.sol\";\n\nimport \"../interfaces/IDYToken.sol\";\nimport \"../interfaces/IFeeConf.sol\";\nimport \"../interfaces/IMintVault.sol\";\nimport \"../interfaces/IDepositVault.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IERC20Metadata } from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\nimport \"../Constants.sol\";\n\ncontract Reader is Constants {\n    using SafeMath for uint256;\n\n    IFeeConf private feeConf;\n    IController private controller;\n    IPancakeFactory private factory;\n    IRouter02 private router;\n\n    address public minter;\n\n    constructor(\n        address _controller,\n        address _feeConf,\n        address _factory,\n        address _router,\n        address _minter\n    ) {\n        controller = IController(_controller);\n        feeConf = IFeeConf(_feeConf);\n        factory = IPancakeFactory(_factory);\n        router = IRouter02(_router);\n\n        minter = _minter;\n    }\n\n    // underlyingAmount : such as lp amount;\n    function getVaultPrice(\n        address vault,\n        uint256 underlyingAmount,\n        bool _dp\n    ) external view returns (uint256 value) {\n        // calc dytoken amount;\n        address dytoken = IVault(vault).underlying();\n\n        uint256 amount = (IERC20(dytoken).totalSupply() * underlyingAmount) / IDYToken(dytoken).underlyingTotal();\n        value = IVault(vault).underlyingAmountValue(amount, _dp);\n    }\n\n    function getAssetDiscount(address asset, bool lp) external view returns (uint16 dr) {\n        if (lp) {\n            address token0 = IPair(asset).token0();\n            address token1 = IPair(asset).token1();\n            (, uint16 dr0, , , uint16 dr1, ) = controller.getValueConfs(token0, token1);\n            dr = (dr0 + dr1) / 2;\n        } else {\n            (, dr, ) = controller.getValueConf(asset);\n        }\n    }\n\n    function getDTokenVaultPrice(\n        address[] memory _vaults,\n        address user,\n        bool _dp\n    )\n        external\n        view\n        returns (\n            uint256[] memory amounts,\n            uint256[] memory prices,\n            uint256[] memory values,\n            uint256[] memory marketcaps\n        )\n    {\n        uint256 len = _vaults.length;\n\n        values = new uint256[](len);\n        amounts = new uint256[](len);\n        prices = new uint256[](len);\n        marketcaps = new uint256[](len);\n\n        for (uint256 i = 0; i < len; i++) {\n            address dtoken = IVault(_vaults[i]).underlying();\n\n            prices[i] = IVault(_vaults[i]).underlyingAmountValue(1e18, _dp);\n\n            amounts[i] = IMintVault(_vaults[i]).borrows(user);\n            values[i] = (amounts[i] * prices[i]) / 1e18;\n\n            uint256 total = IERC20(dtoken).totalSupply();\n            marketcaps[i] = (total * prices[i]) / 1e18;\n        }\n    }\n\n    //\n    function depositVaultValues(address[] memory _vaults, bool _dp)\n        external\n        view\n        returns (uint256[] memory amounts, uint256[] memory values)\n    {\n        uint256 len = _vaults.length;\n        values = new uint256[](len);\n        amounts = new uint256[](len);\n\n        for (uint256 i = 0; i < len; i++) {\n            address dytoken = IVault(_vaults[i]).underlying();\n            require(dytoken != address(0), \"no dytoken\");\n\n            uint256 amount = IERC20(dytoken).balanceOf(_vaults[i]);\n            if (amount == 0) {\n                amounts[i] = 0;\n                values[i] = 0;\n            } else {\n                uint256 value = IVault(_vaults[i]).underlyingAmountValue(amount, _dp);\n                amounts[i] = amount;\n                values[i] = value;\n            }\n        }\n    }\n\n    // Ëé∑ÂèñÁî®Êà∑ÊâÄÊúâ‰ªì‰Ωç‰ª∑ÂÄº:\n    function userVaultValues(\n        address _user,\n        address[] memory _vaults,\n        bool _dp\n    ) external view returns (uint256[] memory values) {\n        uint256 len = _vaults.length;\n        values = new uint256[](len);\n\n        for (uint256 i = 0; i < len; i++) {\n            values[i] = IVault(_vaults[i]).userValue(_user, _dp);\n        }\n    }\n\n    // Ëé∑ÂèñÁî®Êà∑ÊâÄÊúâ‰ªì‰ΩçÊï∞ÈáèÔºàdyToken Êï∞ÈáèÂèäÂ∫ïÂ±ÇÂ∏ÅÊï∞ÈáèÔºâ\n    function userVaultDepositAmounts(address _user, address[] memory _vaults)\n        external\n        view\n        returns (uint256[] memory amounts, uint256[] memory underAmounts)\n    {\n        uint256 len = _vaults.length;\n        amounts = new uint256[](len);\n        underAmounts = new uint256[](len);\n\n        for (uint256 i = 0; i < len; i++) {\n            amounts[i] = IDepositVault(_vaults[i]).deposits(_user);\n            address underlying = IVault(_vaults[i]).underlying();\n            if (amounts[i] == 0) {\n                underAmounts[i] = 0;\n            } else {\n                underAmounts[i] = IDYToken(underlying).underlyingAmount(amounts[i]);\n            }\n        }\n    }\n\n    // Ëé∑ÂèñÁî®Êà∑ÊâÄÊúâÂÄüÊ¨æÊï∞Èáè\n    function userVaultBorrowAmounts(address _user, address[] memory _vaults)\n        external\n        view\n        returns (uint256[] memory amounts)\n    {\n        uint256 len = _vaults.length;\n        amounts = new uint256[](len);\n\n        for (uint256 i = 0; i < len; i++) {\n            amounts[i] = IMintVault(_vaults[i]).borrows(_user);\n        }\n    }\n\n    // Ê†πÊçÆËæìÂÖ•ÔºåÈ¢Ñ‰º∞ÂÆûÈôÖÂèØÂÄüÂíåË¥πÁî®\n    function pendingBorrow(uint256 amount) external view returns (uint256 actualBorrow, uint256 fee) {\n        (, uint256 borrowFee) = feeConf.getConfig(\"borrow_fee\");\n\n        fee = (amount * borrowFee) / PercentBase;\n        actualBorrow = amount - fee;\n    }\n\n    // Ê†πÊçÆËæìÂÖ•ÔºåÈ¢Ñ‰º∞ÂÆûÈôÖËΩ¨Êç¢ÂíåË¥πÁî®\n    function pendingRepay(\n        address borrower,\n        address vault,\n        uint256 amount\n    ) external view returns (uint256 actualRepay, uint256 fee) {\n        uint256 borrowed = IMintVault(vault).borrows(borrower);\n        if (borrowed == 0) {\n            return (0, 0);\n        }\n\n        (address receiver, uint256 repayFee) = feeConf.getConfig(\"repay_fee\");\n        fee = (borrowed * repayFee) / PercentBase;\n        if (amount > borrowed + fee) {\n            // repay all.\n            actualRepay = borrowed;\n        } else {\n            actualRepay = (amount * PercentBase) / (PercentBase + repayFee);\n            fee = amount - actualRepay;\n        }\n    }\n\n    // Ëé∑ÂèñÂ§ö‰∏™Áî®Êà∑ÁöÑ‰ª∑ÂÄº (only calculate valid vault)\n    function usersVaules(address[] memory users, bool dp)\n        external\n        view\n        returns (uint256[] memory totalDeposits, uint256[] memory totalBorrows)\n    {\n        uint256 len = users.length;\n        totalDeposits = new uint256[](len);\n        totalBorrows = new uint256[](len);\n\n        for (uint256 i = 0; i < len; i++) {\n            (totalDeposits[i], totalBorrows[i]) = controller.userValues(users[i], dp);\n        }\n    }\n\n    // Ëé∑ÂèñÂ§ö‰∏™Áî®Êà∑ÁöÑ‰ª∑ÂÄº\n    function usersTotalVaules(address[] memory users, bool dp)\n        external\n        view\n        returns (uint256[] memory totalDeposits, uint256[] memory totalBorrows)\n    {\n        uint256 len = users.length;\n        totalDeposits = new uint256[](len);\n        totalBorrows = new uint256[](len);\n\n        for (uint256 i = 0; i < len; i++) {\n            (totalDeposits[i], totalBorrows[i]) = controller.userTotalValues(users[i], dp);\n        }\n    }\n\n    function getValidVault(address vault, address user) external view returns (IController.ValidVault) {\n        IController.ValidVault _state = controller.validVaultsOfUser(vault, user);\n\n        IController.ValidVault state = _state == IController.ValidVault.UnInit ? controller.validVaults(vault) : _state;\n\n        return state;\n    }\n\n    function getValueOfTokenToLp(\n        address token,\n        uint256 amount,\n        address[] memory pathArr0,\n        address[] memory pathArr1\n    )\n        external\n        view\n        returns (\n            uint256 inputVaule,\n            uint256 outputValue,\n            uint256 actualAmountOut0,\n            uint256 actualAmountOut1\n        )\n    {\n        {\n            (address oracle, , ) = controller.getValueConf(token);\n            uint256 scale = 10**IERC20Metadata(token).decimals();\n            inputVaule = (IUSDOracle(oracle).getPrice(token) * amount) / scale;\n        }\n\n        address token0;\n        address token1;\n        uint256 amountOut0;\n        uint256 amountOut1;\n        uint112[] memory reserves = new uint112[](2);\n\n        {\n            address lp;\n            // get token reserves before swapping\n            (reserves, lp) = _getReserves(token, pathArr0, pathArr1);\n\n            (token0, amountOut0, reserves) = _predictSwapAmount(token, amount / 2, pathArr0, reserves, lp);\n            (token1, amountOut1, reserves) = _predictSwapAmount(token, amount - amount / 2, pathArr1, reserves, lp);\n        }\n        _checkAmountOut(token0, token1, amountOut0, amountOut1);\n\n        (actualAmountOut0, actualAmountOut1) = _getQuoteAmount(token0, amountOut0, token1, amountOut1, reserves);\n\n        uint256 price0 = _getPrice(token, pathArr0);\n        uint256 price1 = _getPrice(token, pathArr1);\n\n        uint256 scale0 = 10**IERC20Metadata(token0).decimals();\n        uint256 scale1 = 10**IERC20Metadata(token1).decimals();\n\n        outputValue = (actualAmountOut0 * price0) / scale0 + (actualAmountOut1 * price1) / scale1;\n    }\n\n    function getValueOfTokenToToken(\n        address token,\n        uint256 amount,\n        address[] memory pathArr\n    )\n        external\n        view\n        returns (\n            uint256 inputVaule,\n            uint256 outputValue,\n            uint256 amountOut\n        )\n    {\n        (address oracle, , ) = controller.getValueConf(token);\n        uint256 scaleIn = 10**IERC20Metadata(token).decimals();\n        inputVaule = (IUSDOracle(oracle).getPrice(token) * amount) / scaleIn;\n\n        address targetToken;\n        uint112[] memory reserves = new uint112[](2);\n\n        (targetToken, amountOut, reserves) = _predictSwapAmount(token, amount, pathArr, reserves, address(0));\n\n        uint256 price = _getPrice(token, pathArr);\n\n        uint256 scaleOut = 10**IERC20Metadata(targetToken).decimals();\n\n        outputValue = (amountOut * price) / scaleOut;\n    }\n\n    function _predictSwapAmount(\n        address originToken,\n        uint256 amount,\n        address[] memory pathArr,\n        uint112[] memory reserves,\n        address lp\n    )\n        internal\n        view\n        returns (\n            address targetToken,\n            uint256 amountOut,\n            uint112[] memory _reserves\n        )\n    {\n        if (pathArr.length == 0) {\n            return (originToken, amount, reserves);\n        }\n\n        // check busd -> dusd\n        for (uint256 i = 0; i < pathArr.length; i++) {\n            if (pathArr[i] == IDusdMinter(minter).stableToken() && i < pathArr.length - 1) {\n                if (pathArr[i + 1] == IDusdMinter(minter).dusd()) {\n                    return _predictSwapOfStableTokentoDUSD(pathArr, i, amount, reserves, lp);\n                }\n            }\n        }\n\n        (amountOut, _reserves) = _getAmountOut(amount, pathArr, reserves, lp);\n        return (pathArr[pathArr.length - 1], amountOut, _reserves);\n    }\n\n    function _predictSwapOfStableTokentoDUSD(\n        address[] memory pathArr,\n        uint256 position,\n        uint256 amount,\n        uint112[] memory reserves,\n        address lp\n    )\n        internal\n        view\n        returns (\n            address targetToken,\n            uint256 amountOut,\n            uint112[] memory _reserves\n        )\n    {\n        uint256 len = pathArr.length;\n\n        // len = 2, busd -> dusd\n        if (len == 2) {\n            (amountOut, ) = IDusdMinter(minter).calcOutputFee(amount);\n            return (pathArr[1], amountOut, reserves);\n        }\n\n        // len > 2, ...busd -> dusd...\n        uint256 busdAmout;\n        uint256 dusdAmount;\n        if (position == 0) {\n            // busd -> dusd, and then swap [dusd, ...]\n            (dusdAmount, ) = IDusdMinter(minter).calcOutputFee(amount);\n            address[] memory newPathArr = _fillArrbyPosition(1, len - 1, pathArr);\n            (amountOut, _reserves) = _getAmountOut(dusdAmount, newPathArr, reserves, lp);\n            return (pathArr[pathArr.length - 1], amountOut, _reserves);\n        } else if (position == len - 2) {\n            // swap [..., busd], and then busd -> dusd\n            address[] memory newPathArr = _fillArrbyPosition(0, len - 2, pathArr);\n            (busdAmout, _reserves) = _getAmountOut(amount, newPathArr, reserves, lp);\n            (amountOut, ) = IDusdMinter(minter).calcOutputFee(busdAmout);\n            return (pathArr[pathArr.length - 1], amountOut, _reserves);\n        } else {\n            // swap [..., busd], and then busd -> dusd, and swap [dusd, ...]\n            address[] memory newPathArr0 = _fillArrbyPosition(0, position, pathArr);\n            address[] memory newPathArr1 = _fillArrbyPosition(position + 1, len - 1, pathArr);\n            (busdAmout, _reserves) = _getAmountOut(amount, newPathArr0, reserves, lp);\n            (dusdAmount, ) = IDusdMinter(minter).calcOutputFee(busdAmout);\n            (amountOut, _reserves) = _getAmountOut(dusdAmount, newPathArr1, _reserves, lp);\n            return (pathArr[pathArr.length - 1], amountOut, _reserves);\n        }\n    }\n\n    function _fillArrbyPosition(\n        uint256 start,\n        uint256 end,\n        address[] memory originArr\n    ) internal view returns (address[] memory) {\n        uint256 newLen = end - start + 1;\n        address[] memory newArr = new address[](newLen);\n        for (uint256 i = 0; i < newLen; i++) {\n            newArr[i] = originArr[i + start];\n        }\n        return newArr;\n    }\n\n    function _getAmountOut(\n        uint256 amount,\n        address[] memory path,\n        uint112[] memory reserves,\n        address lp\n    ) internal view returns (uint256 amountOut, uint112[] memory) {\n        if (lp != address(0)) {\n            // swap Token to Lp.\n            IPair pair = IPair(lp);\n            address token0 = pair.token0();\n            address token1 = pair.token1();\n            uint256 slow = 0;\n            uint256 fast = 1;\n            uint256 start = 0; // currently start to swap\n\n            amountOut = amount;\n\n            for (fast; fast < path.length; fast++) {\n                if (path[slow] == token0 && path[fast] == token1) {\n                    // token0 -> token1\n                    if (start < slow) {\n                        // ... -> token0, token0 -> token1\n                        address[] memory newPathArr = _fillArrbyPosition(start, slow, path);\n                        amountOut = _tryToGetAmountsOut(amountOut, newPathArr);\n                        uint256 token0GapAmount = amountOut;\n                        amountOut = _getAmountsOutByReserves(\n                            token0GapAmount,\n                            uint256(reserves[0]),\n                            uint256(reserves[1])\n                        );\n                        uint256 token1GapAmount = amountOut;\n                        reserves[0] += uint112(token0GapAmount);\n                        reserves[1] -= uint112(token1GapAmount);\n                    } else {\n                        // start = slow, means token0 -> token1\n                        uint256 token0GapAmount = amountOut;\n                        amountOut = _getAmountsOutByReserves(\n                            token0GapAmount,\n                            uint256(reserves[0]),\n                            uint256(reserves[1])\n                        );\n                        uint256 token1GapAmount = amountOut;\n                        reserves[0] += uint112(token0GapAmount);\n                        reserves[1] -= uint112(token1GapAmount);\n                    }\n                    // reassignment\n                    start = fast;\n                } else if (path[slow] == token1 && path[fast] == token0) {\n                    // token1 -> token0\n                    if (start < slow) {\n                        // ... -> token1, token1 -> token0\n                        address[] memory newPathArr = _fillArrbyPosition(start, slow, path);\n                        amountOut = _tryToGetAmountsOut(amountOut, newPathArr);\n                        uint256 token1GapAmount = amountOut;\n                        amountOut = _getAmountsOutByReserves(\n                            token1GapAmount,\n                            uint256(reserves[1]),\n                            uint256(reserves[0])\n                        );\n                        uint256 token0GapAmount = amountOut;\n                        reserves[1] += uint112(token1GapAmount);\n                        reserves[0] -= uint112(token0GapAmount);\n                    } else {\n                        // start = slow, means token1 -> token0\n                        uint256 token1GapAmount = amountOut;\n                        amountOut = _getAmountsOutByReserves(\n                            token1GapAmount,\n                            uint256(reserves[1]),\n                            uint256(reserves[0])\n                        );\n                        uint256 token0GapAmount = amountOut;\n                        reserves[1] += uint112(token1GapAmount);\n                        reserves[0] -= uint112(token0GapAmount);\n                    }\n                    // reassignment\n                    start = fast;\n                } else {\n                    if (fast == path.length - 1) {\n                        // path end\n                        address[] memory newPathArr = _fillArrbyPosition(start, fast, path);\n                        amountOut = _tryToGetAmountsOut(amountOut, newPathArr);\n                    }\n                }\n                slow++;\n            }\n        } else {\n            // swap Token to Token\n            amountOut = _tryToGetAmountsOut(amount, path);\n        }\n        return (amountOut, reserves);\n    }\n\n    function _tryToGetAmountsOut(uint256 amount, address[] memory path) internal view returns (uint256 amountOut) {\n        try router.getAmountsOut(amount, path) returns (uint256[] memory amounts) {\n            amountOut = amounts[amounts.length - 1];\n        } catch {\n            revert(\"Wrong Path\");\n        }\n    }\n\n    function _getAmountsOutByReserves(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal view returns (uint256 amountOut) {\n        require(amountIn > 0, \"Reader: INSUFFICIENT_INPUT_AMOUNT\");\n        require(reserveIn > 0 && reserveOut > 0, \"Reader: INSUFFICIENT_LIQUIDITY\");\n        uint256 amountInWithFee = amountIn.mul(9975);\n        uint256 numerator = amountInWithFee.mul(reserveOut);\n        uint256 denominator = reserveIn.mul(10000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    function _getPrice(address token, address[] memory pathArr) internal view returns (uint256 price) {\n        if (pathArr.length == 0) {\n            // tokenInput\n            (address oracle, , ) = controller.getValueConf(token);\n            return IUSDOracle(oracle).getPrice(token);\n        }\n        // tokenOutput\n        address _token = pathArr[pathArr.length - 1];\n        (address oracle, , ) = controller.getValueConf(token);\n        price = IUSDOracle(oracle).getPrice(_token);\n    }\n\n    function _getQuoteAmount(\n        address token0,\n        uint256 amountOut0,\n        address token1,\n        uint256 amountOut1,\n        uint112[] memory reserves\n    ) internal view returns (uint256 actualAmountOut0, uint256 actualAmountOut1) {\n        address lp = factory.getPair(token0, token1);\n        IPair pair = IPair(lp);\n        address _token0 = pair.token0();\n        address _token1 = pair.token1();\n\n        uint112 reserve0 = reserves[0];\n        uint112 reserve1 = reserves[1];\n\n        if (_token0 != token0) {\n            // switch places when not match\n            uint112 temp = reserve0;\n            reserve0 = reserve1;\n            reserve1 = temp;\n        }\n\n        uint256 quoteAmountOut1 = router.quote(amountOut0, reserve0, reserve1);\n        uint256 quoteAmountOut0 = router.quote(amountOut1, reserve1, reserve0);\n\n        if (quoteAmountOut1 <= amountOut1) {\n            return (amountOut0, quoteAmountOut1);\n        } else if (quoteAmountOut0 <= amountOut0) {\n            return (quoteAmountOut0, amountOut1);\n        } else {\n            revert(\"Reader: predict addLiquidity error\");\n        }\n    }\n\n    function _checkAmountOut(\n        address token0,\n        address token1,\n        uint256 amountOut0,\n        uint256 amountOut1\n    ) internal view {\n        address lp = factory.getPair(token0, token1);\n        IPair pair = IPair(lp);\n        address _token0 = pair.token0();\n        address _token1 = pair.token1();\n\n        require(amountOut0 > 0 && amountOut1 > 0, \"Wrong Path: amountOut is zero\");\n        require(token0 == _token0 || token0 == _token1, \"Wrong Path: target tokens don't match\");\n        require(token1 == _token0 || token1 == _token1, \"Wrong Path: target tokens don't match\");\n    }\n\n    function _getReserves(\n        address token,\n        address[] memory pathArr0,\n        address[] memory pathArr1\n    ) internal view returns (uint112[] memory, address lp) {\n        address token0 = pathArr0.length == 0 ? token : pathArr0[pathArr0.length - 1];\n        address token1 = pathArr1.length == 0 ? token : pathArr1[pathArr1.length - 1];\n\n        require(token0 != token1, \"Zap: target tokens should't be the same\");\n\n        lp = factory.getPair(token0, token1);\n        IPair pair = IPair(lp);\n\n        uint112[] memory _reserves = new uint112[](2);\n        (_reserves[0], _reserves[1], ) = pair.getReserves();\n        return (_reserves, lp);\n    }\n}\n"
    },
    "contracts/interfaces/IPancakeFactory.sol": {
      "content": "interface IPancakeFactory {\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n}\n"
    },
    "contracts/interfaces/IDusdMinter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IDusdMinter {\n    function dusd() external view returns (address);\n\n    function stableToken() external view returns (address);\n\n    function mineDusd(\n        uint256 amount,\n        uint256 minDusd,\n        address to\n    ) external returns (uint256 amountOut);\n\n    function calcInputFee(uint256 amountOut) external view returns (uint256 amountIn, uint256 fee);\n\n    function calcOutputFee(uint256 amountIn) external view returns (uint256 amountOut, uint256 fee);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/vault/MintVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport { IERC20Metadata } from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\n\nimport \"../interfaces/IDUSD.sol\";\nimport \"../interfaces/TokenRecipient.sol\";\n\nimport \"./MintVaultBase.sol\";\n\ncontract MintVault is TokenRecipient, MintVaultBase {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n    uint256 internal decimalScale;\n\n    function initialize(\n        address _controller,\n        address _feeConf,\n        address _underlying\n    ) external initializer {\n        super.init(_controller, _feeConf, _underlying);\n        decimalScale = 10**IERC20Metadata(_underlying).decimals();\n    }\n\n    function underlyingTransferIn(address sender, uint256 amount) internal virtual override {\n        IERC20Upgradeable(underlying).safeTransferFrom(sender, address(this), amount);\n    }\n\n    function underlyingTransferOut(\n        address receipt,\n        uint256 amount,\n        bool\n    ) internal virtual override {\n        //  skip transfer to myself\n        if (receipt == address(this)) {\n            return;\n        }\n\n        require(receipt != address(0), \"receipt is empty\");\n        IERC20Upgradeable(underlying).safeTransfer(receipt, amount);\n    }\n\n    // TODO: ‰∏çÂêåÁöÑdAsset ÂèØ‰ª•ÂèØËÉΩÊúâ‰∏çÂêåÁöÑÂÆûÁé∞mint„ÄÇ\n    function underlyingMint(address to, uint256 amount) internal virtual override {\n        IDUSD(underlying).mint(to, amount);\n    }\n\n    // TODO: ‰∏çÂêåÁöÑdAsset ÂèØ‰ª•ÂèØËÉΩÊúâ‰∏çÂêåÁöÑÂÆûÁé∞mint„ÄÇ\n    function underlyingBurn(uint256 amount) internal virtual override {\n        IDUSD(underlying).burn(amount);\n    }\n\n    function borrow(uint256 amount) external override {\n        _borrow(msg.sender, amount);\n    }\n\n    function tokensReceived(\n        address from,\n        uint256 amount,\n        bytes calldata exData\n    ) external override returns (bool) {\n        require(msg.sender == underlying, \"INVALID_CALLER\");\n\n        uint256 repays = _repayFor(from, from, amount, true);\n        if (amount > repays) {\n            underlyingTransferOut(from, amount - repays, true);\n        }\n        return true;\n    }\n\n    //\n    function repay(uint256 amount) external override {\n        _repayFor(msg.sender, msg.sender, amount, false);\n    }\n\n    function repayTo(address to, uint256 amount) external override {\n        _repayFor(msg.sender, to, amount, false);\n    }\n\n    function liquidate(\n        address liquidator,\n        address borrower,\n        bytes calldata data\n    ) external {\n        _liquidate(liquidator, borrower, data);\n    }\n\n    function valueToAmount(uint256 value, bool dp) external view override returns (uint256 amount) {\n        (address oracle, , uint256 pr) = IController(controller).getValueConf(underlying);\n        uint256 price = IUSDOracle(oracle).getPrice(underlying);\n        if (dp) {\n            amount = (value * decimalScale * PercentBase) / price / pr;\n        } else {\n            amount = (value * decimalScale) / price;\n        }\n    }\n\n    function underlyingAmountValue(uint256 amount, bool dp) public view returns (uint256 value) {\n        if (amount == 0) {\n            return 0;\n        }\n\n        (address oracle, , uint256 pr) = IController(controller).getValueConf(underlying);\n        uint256 price = IUSDOracle(oracle).getPrice(underlying);\n        if (dp) {\n            value = (price * amount * pr) / PercentBase / decimalScale;\n        } else {\n            value = (price * amount) / decimalScale;\n        }\n    }\n\n    function userValue(address user, bool dp) external view override returns (uint256) {\n        if (borrows[user] == 0) {\n            return 0;\n        }\n        return underlyingAmountValue(borrows[user], dp);\n    }\n\n    // amount > 0 :  borrows\n    // amount < 0 :  repay\n    function pendingValue(address user, int256 amount) external view override returns (uint256) {\n        if (amount >= 0) {\n            return underlyingAmountValue(borrows[user] + uint256(amount), true);\n        } else {\n            return underlyingAmountValue(borrows[user] - uint256(0 - amount), true);\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IDUSD.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity >=0.6.0;\n\ninterface IDUSD {\n    function mint(address to, uint256 amount) external;\n\n    function burn(uint256 amount) external;\n\n    function burnme(uint256 amount) external;\n\n    function approve(address to, uint256 amount) external;\n}\n"
    },
    "contracts/vault/MintVaultBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport { IERC20Upgradeable } from \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\nimport \"../interfaces/IVault.sol\";\nimport \"../interfaces/IMintVault.sol\";\nimport \"../interfaces/IController.sol\";\nimport \"../interfaces/IUSDOracle.sol\";\nimport \"../interfaces/IFeeConf.sol\";\nimport \"../interfaces/ILiquidateCallee.sol\";\nimport \"../Constants.sol\";\n\nabstract contract MintVaultBase is Constants, IVault, IMintVault, OwnableUpgradeable, ReentrancyGuardUpgradeable {\n    address public override underlying;\n    address public controller;\n    IFeeConf public feeConf;\n\n    // Áî®Êà∑ÂÄüÊ¨æ\n    mapping(address => uint256) public borrows;\n\n    /**\n      @notice ÂÄüÊ¨æ‰∫ã‰ª∂\n      @param borrower ÂÄüÊ¨æ‰∫∫\n      @param amount ÂÄüÊ¨æ‰∫∫ÂΩìÂâçÁöÑÂÄüÊ¨æÊï∞\n    */\n    event Borrow(address indexed borrower, uint256 amount);\n\n    /**\n      @notice ËøòÊ¨æ‰∫ã‰ª∂\n      @param repayer ËøòÊ¨æ‰∫∫\n      @param amount ËøòÊ¨æ‰∫∫ÂÆûÈôÖËøòÊ¨æÁöÑÊï∞Èáè\n      @param leftBorrows Ââ©‰ΩôÂÄüÊ¨æÊï∞Èáè\n    */\n    event Repay(address indexed repayer, uint256 amount, uint256 leftBorrows);\n\n    /**\n      @notice ÂÄüÊ¨æ‰∫∫ÊäµÊäºÂìÅË¢´Ê∏ÖÁÆó‰∫ã‰ª∂\n      @param liquidator Ê∏ÖÁÆó‰∫∫\n      @param borrower ÂÄüÊ¨æ‰∫∫\n      @param borrows  ÂÄüÊ¨æ\n    */\n    event Liquidated(address indexed liquidator, address indexed borrower, uint256 borrows);\n\n    event FeeConfChanged(address feeconf);\n    event ControllerChanged(address controller);\n\n    /**\n     * @notice ÂàùÂßãÂåñ\n     * @dev  Âú®VaultÂàùÂßãÂåñÊó∂ËÆæÁΩÆË¥ßÂ∏ÅÂü∫Á°Ä‰ø°ÊÅØ„ÄÇ\n     */\n    function init(\n        address _controller,\n        address _feeConf,\n        address _underlying\n    ) internal {\n        OwnableUpgradeable.__Ownable_init();\n        controller = _controller;\n        feeConf = IFeeConf(_feeConf);\n        underlying = _underlying;\n    }\n\n    function isDuetVault() external view override returns (bool) {\n        return true;\n    }\n\n    function underlyingTransferIn(address sender, uint256 amount) internal virtual;\n\n    function underlyingTransferOut(\n        address receipt,\n        uint256 amount,\n        bool giveWETH\n    ) internal virtual;\n\n    function underlyingMint(address to, uint256 amount) internal virtual;\n\n    function underlyingBurn(uint256 amount) internal virtual;\n\n    function setFeeConf(address _feeConf) external onlyOwner {\n        require(_feeConf != address(0), \"INVALID_FEECONF\");\n        feeConf = IFeeConf(_feeConf);\n        emit FeeConfChanged(_feeConf);\n    }\n\n    function setAppController(address _controller) external onlyOwner {\n        require(_controller != address(0), \"INVALID_CONTROLLER\");\n        controller = _controller;\n        emit ControllerChanged(_controller);\n    }\n\n    /**\n    @dev ÂÄüÂÖ•Ê†áÁöÑËµÑ‰∫ßÔºåÂÄüÊ¨æÂøÖÈ°ªÊúâË∂≥Â§üÁöÑËµÑ‰∫ßËøõË°åÊäµÊäº\n  */\n    function _borrow(address borrower, uint256 amount) internal nonReentrant {\n        // È£éÊéßÊ£ÄÊü•\n        IController(controller).beforeBorrow(borrower, address(this), amount);\n\n        (address receiver, uint256 borrowFee) = feeConf.getConfig(\"borrow_fee\");\n\n        uint256 fee = (amount * borrowFee) / PercentBase;\n        uint256 actualBorrow = amount - fee;\n        borrows[borrower] += actualBorrow;\n\n        _updateJoinStatus(borrower);\n\n        //Èì∏ÈÄ†\n        underlyingMint(borrower, actualBorrow);\n        if (fee > 0) {\n            underlyingMint(receiver, fee);\n        }\n\n        emit Borrow(borrower, actualBorrow);\n    }\n\n    /**\n    @notice ËøòÊ¨æ\n    @dev ÂÄüÊ¨æ‰∫∫ÂÅøËøòÊú¨ÊÅØÔºåÂ§ö‰ΩôËøòÊ¨æÂ∞Ü‰Ωú‰∏∫Â≠òÊ¨æÂ≠òÂÖ•Â∏ÇÂú∫„ÄÇ\n    @param repayer ËøòÊ¨æ‰∫∫\n    @param borrower ÂÄüÊ¨æ‰∫∫\n    @param amount ËøòÊ¨æÁöÑÊ†áÁöÑËµÑ‰∫ßÊï∞Èáè\n    */\n    function _repayFor(\n        address repayer,\n        address borrower,\n        uint256 amount,\n        bool isTransed\n    ) internal nonReentrant returns (uint256 repays) {\n        require(amount > 0, \"REPAY_ZERO\");\n        IController(controller).beforeRepay(repayer, address(this), amount);\n        repays = _repayBorrows(repayer, borrower, amount, isTransed);\n        require(repays > 0, \"NO_LOAN_REPAY\");\n    }\n\n    function _repayBorrows(\n        address repayer,\n        address borrower,\n        uint256 amount,\n        bool isTransed\n    ) internal returns (uint256 repays) {\n        uint256 borrowsOld = borrows[borrower];\n        if (borrowsOld == 0) {\n            return 0;\n        }\n\n        (address receiver, uint256 repayFee) = feeConf.getConfig(\"repay_fee\");\n        uint256 fee = (borrowsOld * repayFee) / PercentBase;\n        uint256 actualRepays;\n        if (amount >= borrowsOld + fee) {\n            // repay all.\n            actualRepays = borrowsOld;\n            borrows[borrower] = 0;\n            repays = actualRepays + fee;\n        } else {\n            actualRepays = (amount * PercentBase) / (PercentBase + repayFee);\n            fee = amount - actualRepays;\n            borrows[borrower] = borrowsOld - actualRepays;\n            repays = amount;\n        }\n\n        // ËΩ¨ÁßªËµÑ‰∫ß\n\n        if (!isTransed) {\n            underlyingTransferIn(repayer, repays);\n        } else {\n            require(amount >= repays, \"INSUFFICIENT_REPAY\");\n        }\n\n        underlyingBurn(actualRepays);\n        underlyingTransferOut(receiver, fee, true);\n\n        //Êõ¥Êñ∞\n        emit Repay(borrower, actualRepays, borrows[borrower]);\n    }\n\n    /**\n     * @notice Ê∏ÖÁÆóË¥¶Êà∑ËµÑ‰∫ß\n     * @param liquidator Ê∏ÖÁÆó‰∫∫\n     * @param borrower ÂÄüÊ¨æ‰∫∫\n     */\n    function _liquidate(\n        address liquidator,\n        address borrower,\n        bytes calldata data\n    ) internal nonReentrant {\n        require(msg.sender == controller, \"LIQUIDATE_INVALID_CALLER\");\n        require(liquidator != borrower, \"LIQUIDATE_DISABLE_YOURSELF\");\n        uint256 loan = borrows[borrower];\n\n        //ÂÅøËøòÂÄüÊ¨æ\n        if (loan > 0) {\n            if (data.length > 0) ILiquidateCallee(liquidator).liquidateBorrow(borrower, underlying, loan, data);\n            underlyingTransferIn(liquidator, loan);\n        }\n\n        borrows[borrower] = 0;\n        _updateJoinStatus(borrower);\n\n        emit Liquidated(liquidator, borrower, loan);\n    }\n\n    function _updateJoinStatus(address _user) internal {\n        bool isDepositVault = false;\n        if (borrows[_user] > 0) {\n            IController(controller).joinVault(_user, isDepositVault);\n        } else {\n            IController(controller).exitVault(_user, isDepositVault);\n        }\n    }\n}\n"
    },
    "contracts/Liquidate.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./interfaces/IController.sol\";\nimport \"./interfaces/IDUSD.sol\";\nimport \"./interfaces/IDYToken.sol\";\nimport \"./interfaces/IDusdMinter.sol\";\nimport \"./interfaces/ILiquidateCallee.sol\";\nimport \"./interfaces/IPancakeFactory.sol\";\nimport \"./interfaces/IRouter02.sol\";\n\nimport \"./interfaces/IPair.sol\";\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\n\ncontract Liquidate is ILiquidateCallee, OwnableUpgradeable {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    address public controller;\n    address public dusd;\n    IPancakeFactory public factory;\n    IRouter02 router;\n\n    address public bUSD;\n    address public minter;\n    uint256 public leftLimit;\n\n    mapping(address => bool) public isV2Lp;\n    mapping(address => bool) public isV3Lp;\n    mapping(address => bool) public liquidator;\n    mapping(address => address) public forBridge;\n\n    address public balanceReceiver;\n\n    constructor() {}\n\n    function initialize(\n        address _controller,\n        address _dusd,\n        address _router,\n        address _bUSD,\n        address _minter\n    ) external initializer {\n        OwnableUpgradeable.__Ownable_init();\n\n        controller = _controller;\n        dusd = _dusd;\n\n        router = IRouter02(_router);\n        factory = IPancakeFactory(IRouter02(_router).factory());\n        bUSD = _bUSD;\n        minter = _minter;\n\n        leftLimit = 100e18;\n        IERC20Upgradeable(_bUSD).safeIncreaseAllowance(_minter, type(uint256).max);\n\n        liquidator[msg.sender] = true;\n\n        // CAKE_DUET LP\n\n        isV2Lp[address(0xbDF0aA1D1985Caa357A6aC6661D838DA8691c569)] = true;\n        // DUET_DUSD_LP\n        isV2Lp[address(0x33C8Fb945d71746f448579559Ea04479a23dFF17)] = true;\n        // DUET_WBNB_LP\n        isV2Lp[address(0x27027Ef46202B0ff4D091E4bEd5685295aFbD98B)] = true;\n        // DUSD_BUSD_LP\n        isV2Lp[address(0x4124A6dF3989834c6aCbEe502b7603d4030E18eC)] = true;\n        // CAKE_WBNB_LP\n        isV2Lp[address(0x0eD7e52944161450477ee417DE9Cd3a859b14fD0)] = true;\n        // BTCB_ETH_LP\n        isV2Lp[address(0xD171B26E4484402de70e3Ea256bE5A2630d7e88D)] = true;\n        // USDC_USDT_LP\n        isV2Lp[address(0xEc6557348085Aa57C72514D67070dC863C0a5A8c)] = true;\n        // USDT_BUSD_LP\n        isV2Lp[address(0x7EFaEf62fDdCCa950418312c6C91Aef321375A00)] = true;\n\n        // forBridge\n        // DUET -> CAKE\n        forBridge[address(0x95EE03e1e2C5c4877f9A298F1C0D6c98698FAB7B)] = address(\n            0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82\n        );\n\n        // CAKE -> BUSD\n        forBridge[address(0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82)] = address(\n            0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56\n        );\n        // USDT -> BUSD\n        forBridge[address(0x55d398326f99059fF775485246999027B3197955)] = address(\n            0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56\n        );\n        // WBNB -> BUSD\n        forBridge[address(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c)] = address(\n            0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56\n        );\n        // ETH -> WBNB\n        forBridge[address(0x2170Ed0880ac9A755fd29B2688956BD959F933F8)] = address(\n            0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\n        );\n        // BTCB -> BUSD\n        forBridge[address(0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c)] = address(\n            0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56\n        );\n        // USDC -> BUSD\n        forBridge[address(0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d)] = address(\n            0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56\n        );\n\n        balanceReceiver = owner();\n    }\n\n    function approveToken(address[] memory tokens, address[] memory targets) external onlyOwner {\n        require(tokens.length == targets.length, \"mismatch length\");\n        for (uint256 i = 0; i < tokens.length; i++) {\n            IERC20Upgradeable(tokens[i]).safeIncreaseAllowance(targets[i], type(uint256).max);\n        }\n    }\n\n    modifier onlyLiquidator() {\n        require(liquidator[tx.origin], \"Invalid caller\");\n        _;\n    }\n\n    function liquidate(address _borrower, bytes calldata data) external onlyLiquidator {\n        IController(controller).liquidate(_borrower, data);\n\n        // transfer extra left dusd balance\n        // eg:\n        // 500>200, transfer out 300, left 200\n        // 300>200,  transfer out 150,left 150\n        uint256 leftBalance = IERC20Upgradeable(dusd).balanceOf(address(this));\n\n        if (leftBalance > leftLimit) {\n            if (leftBalance / 2 < leftLimit) {\n                IERC20Upgradeable(dusd).safeTransfer(balanceReceiver, leftBalance / 2);\n            } else {\n                IERC20Upgradeable(dusd).safeTransfer(balanceReceiver, leftBalance - leftLimit);\n            }\n        }\n    }\n\n    function setLiquidator(address _liquidator, bool enable) external onlyOwner {\n        liquidator[_liquidator] = enable;\n    }\n\n    function setLeftLimit(uint256 limit) external onlyOwner {\n        leftLimit = limit;\n    }\n\n    function setV2Lp(address pair, bool isv2) external onlyOwner {\n        isV2Lp[pair] = isv2;\n    }\n\n    function addV2Lps(address[] memory pairs) external onlyOwner {\n        for (uint256 i = 0; i < pairs.length; i++) {\n            isV2Lp[pairs[i]] = true;\n        }\n    }\n\n    function setBridge(address token, address bridge) external onlyOwner {\n        forBridge[token] = bridge;\n    }\n\n    function execTransaction(\n        address target,\n        uint256 value,\n        string memory signature,\n        bytes memory data,\n        uint256 eta\n    ) public payable onlyOwner returns (bool success) {\n        bytes memory callData;\n        if (bytes(signature).length == 0) {\n            callData = data;\n        } else {\n            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\n        }\n\n        (success, ) = target.call{ value: value }(callData);\n    }\n\n    function withdraw(address token, uint256 amount) external onlyOwner {\n        IERC20Upgradeable(token).safeTransfer(owner(), amount);\n    }\n\n    function withdrawEth(uint256 amount) external onlyOwner {\n        (bool success, ) = owner().call{ value: amount }(new bytes(0));\n        require(success, \"safeTransferETH: ETH transfer failed\");\n    }\n\n    function approveTokenIfNeeded(\n        address token,\n        address spender,\n        uint256 amount\n    ) private {\n        uint256 allowed = IERC20Upgradeable(token).allowance(address(this), spender);\n        if (allowed == 0) {\n            IERC20Upgradeable(token).safeApprove(spender, type(uint256).max);\n        } else if (allowed < amount) {\n            IERC20Upgradeable(token).safeIncreaseAllowance(spender, type(uint256).max - allowed);\n        }\n    }\n\n    function swap(address token0, address token1) public onlyLiquidator returns (uint256 output) {\n        uint256 balance = IERC20Upgradeable(token0).balanceOf(address(this));\n        address[] memory path = new address[](2);\n        path[0] = token0;\n        path[1] = token1;\n\n        approveTokenIfNeeded(token0, address(router), balance);\n        uint256[] memory amounts = router.swapExactTokensForTokens(balance, 0, path, address(this), block.timestamp);\n        output = amounts[amounts.length - 1];\n    }\n\n    function swapForExactOut(\n        uint256 amountOut,\n        address token0,\n        address token1\n    ) public onlyLiquidator returns (uint256 input) {\n        // swap token for exact token1 amount\n        address[] memory path = new address[](2);\n        path[0] = token0;\n        path[1] = token1;\n\n        approveTokenIfNeeded(token0, address(router), 0);\n        uint256[] memory amounts = router.swapTokensForExactTokens(\n            amountOut,\n            type(uint256).max,\n            path,\n            address(this),\n            block.timestamp\n        ); //todo slippage\n        input = amounts[0];\n    }\n\n    function convert(address token) public onlyLiquidator returns (uint256 output) {\n        uint256 balance = IERC20Upgradeable(token).balanceOf(address(this));\n        if (token == dusd) {\n            output = balance;\n        } else if (token == bUSD) {\n            output = IDusdMinter(minter).mineDusd(balance, 0, address(this));\n        } else if (forBridge[token] != address(0)) {\n            address target = forBridge[token];\n            swap(token, target);\n            output = convert(target);\n        } else {\n            output = swap(token, dusd);\n        }\n    }\n\n    function liquidateDeposit(\n        address borrower,\n        address underlying,\n        uint256 amount,\n        bytes calldata data\n    ) external override onlyLiquidator {\n        IDYToken(underlying).withdraw(address(this), amount, false);\n        address under = IDYToken(underlying).underlying();\n\n        if (isV2Lp[under]) {\n            IPair pair = IPair(under);\n            IERC20Upgradeable(under).safeTransfer(under, pair.balanceOf(address(this)));\n\n            pair.burn(address(this));\n            address token0 = pair.token0();\n            address token1 = pair.token1();\n\n            if (forBridge[token0] == token1) {\n                swap(token0, token1);\n                convert(token1);\n            } else if (forBridge[token1] == token0) {\n                swap(token1, token0);\n                convert(token0);\n            } else {\n                convert(token0);\n                convert(token1);\n            }\n        } else if (isV3Lp[under]) {} else {\n            convert(under);\n        }\n    }\n\n    function liquidateBorrow(\n        address borrower,\n        address underlying,\n        uint256 amount,\n        bytes calldata data\n    ) external override onlyLiquidator {\n        // msg.sender is vault\n        approveTokenIfNeeded(underlying, msg.sender, amount);\n\n        if (underlying != dusd) {\n            swapForExactOut(amount, dusd, underlying);\n        }\n    }\n\n    function setBalanceReceiver(address newReceiver) external onlyOwner {\n        require(newReceiver != balanceReceiver, \"Same receiver\");\n        require(newReceiver != address(0), \"Invalid receiver\");\n\n        balanceReceiver = newReceiver;\n    }\n}\n"
    },
    "contracts/dyTokenUpgrade/DYSBUSD.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\n\nimport \"./DYTokenBaseUpgradeable.sol\";\n\nimport \"../Constants.sol\";\n\nimport \"../interfaces/IVault.sol\";\nimport \"../interfaces/IDepositVault.sol\";\nimport \"../interfaces/IDUSD.sol\";\nimport \"../interfaces/IPair.sol\";\nimport \"../interfaces/IRouter02.sol\";\nimport \"../interfaces/IFeeConf.sol\";\nimport \"../interfaces/IDusdMinter.sol\";\n\ncontract DYSBUSD is Constants, DYTokenBaseUpgradeable {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    address public BUSD;\n    address public DUSD;\n    address public pair;\n    address public router;\n    address public minter;\n    IFeeConf public feeConf;\n    uint256 public maxPriceOffset;\n\n    bool token0IsBUSD;\n\n    mapping(address => uint256) public debts;\n    mapping(address => uint256) public lps;\n\n    event FeeConfChanged(address feeconf);\n    event TransferByVault(address from, address to, uint256 amount);\n\n    function initialize(\n        address _bUSD,\n        address _dUSD,\n        address _pair,\n        address _router,\n        address _minter,\n        address _controller,\n        IFeeConf _feeConf\n    ) external initializer {\n        uint8 dec = IERC20MetadataUpgradeable(_bUSD).decimals();\n\n        DYTokenBaseUpgradeable.init(address(this), \"SBUSD\", dec, _controller);\n\n        BUSD = _bUSD;\n        DUSD = _dUSD;\n        pair = _pair;\n        router = _router;\n        feeConf = _feeConf;\n        if (IPair(_pair).token0() == BUSD) {\n            token0IsBUSD = true;\n            require(IPair(_pair).token1() == DUSD);\n        } else if (IPair(_pair).token0() == DUSD) {\n            token0IsBUSD = false;\n            require(IPair(_pair).token1() == BUSD);\n        } else {\n            revert(\"error pair\");\n        }\n\n        minter = _minter;\n\n        IERC20Upgradeable(BUSD).safeApprove(router, type(uint256).max);\n        IERC20Upgradeable(DUSD).safeApprove(router, type(uint256).max);\n        IERC20Upgradeable(pair).safeApprove(router, type(uint256).max);\n        IERC20Upgradeable(BUSD).safeApprove(minter, type(uint256).max);\n\n        maxPriceOffset = 5e16; // 5% 0.05\n    }\n\n    function setMaxPriceOffset(uint256 offset) external onlyOwner {\n        maxPriceOffset = offset;\n    }\n\n    function setFeeConf(address _feeConf) external onlyOwner {\n        require(_feeConf != address(0), \"INVALID_FEECONF\");\n        feeConf = IFeeConf(_feeConf);\n        emit FeeConfChanged(_feeConf);\n    }\n\n    function underlyingTotal() public view override returns (uint256) {\n        return totalSupply();\n    }\n\n    function underlyingAmount(uint256 amount) public view override returns (uint256) {\n        return amount;\n    }\n\n    function balanceOfUnderlying(address _user) public view override returns (uint256) {\n        return balanceOf(_user);\n    }\n\n    function earn() public override {}\n\n    function burn(uint256 amount) public override {\n        withdraw(msg.sender, amount, false);\n    }\n\n    function deposit(uint256 _amount, address _toVault) external override {\n        depositTo(msg.sender, _amount, _toVault);\n    }\n\n    function depositTo(\n        address _to,\n        uint256 _amount,\n        address _toVault\n    ) public override {\n        require(_toVault != address(0), \"miss vault\");\n        require(_toVault == IController(controller).dyTokenVaults(address(this)), \"mismatch dToken vault\");\n        _mint(_toVault, _amount);\n        IERC20Upgradeable(BUSD).safeTransferFrom(msg.sender, address(this), _amount);\n        IDepositVault(_toVault).syncDeposit(address(this), _amount, _to);\n\n        userEarn(_to, _amount);\n    }\n\n    function withdrawByVault(\n        address user,\n        uint256 withdrawAmount,\n        uint256 totalDepositsOfUser,\n        bool onlyBUSD\n    ) public {\n        require(withdrawAmount > 0, \"shares need > 0\");\n        address vault = IController(controller).dyTokenVaults(address(this));\n        require(msg.sender == vault, \"not vault\");\n\n        uint256 totalAmountOfUser = balanceOf(user) + totalDepositsOfUser;\n\n        _calOutputandAllocation(user, user, msg.sender, withdrawAmount, totalAmountOfUser, onlyBUSD);\n    }\n\n    function withdraw(\n        address user,\n        uint256 amount,\n        bool onlyBUSD\n    ) public override {\n        require(amount > 0, \"shares need > 0\");\n        require(totalSupply() > 0, \"no deposit\");\n\n        address withdrawUser = msg.sender;\n        require(balanceOf(withdrawUser) > 0, \"The user has no deposits\");\n\n        address vault = IController(controller).dyTokenVaults(address(this));\n        uint256 totalAmountOfUser;\n        if (vault != address(0)) {\n            totalAmountOfUser += IDepositVault(vault).deposits(withdrawUser);\n        }\n        totalAmountOfUser += balanceOf(withdrawUser);\n\n        _calOutputandAllocation(withdrawUser, user, withdrawUser, amount, totalAmountOfUser, onlyBUSD);\n    }\n\n    function transferByVault(\n        address user,\n        address to,\n        uint256 transferAmount,\n        uint256 totalDepositsOfUser\n    ) external returns (bool) {\n        address vault = IController(controller).dyTokenVaults(address(this));\n        require(msg.sender == vault, \"DYSBUSD Transfer: Only Vault\");\n        // handle debts and lps\n        if (user != to) {\n            uint256 totalAmountOfUser = balanceOf(user) + totalDepositsOfUser;\n            _allocation(user, to, transferAmount, totalAmountOfUser);\n        }\n\n        // handle dysToken\n        uint256 vaultBalance = _balances[vault];\n        require(vaultBalance >= transferAmount, \"DYSBUSD Transfer: transfer amount exceeds balance\");\n        unchecked {\n            _balances[vault] = vaultBalance - transferAmount;\n        }\n        _balances[to] += transferAmount;\n\n        emit TransferByVault(vault, to, transferAmount);\n        return true;\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        uint256 totalAmountOfUser;\n        address vault = IController(controller).dyTokenVaults(address(this));\n        if (vault != address(0)) {\n            totalAmountOfUser += IDepositVault(vault).deposits(from);\n        }\n        totalAmountOfUser += balanceOf(from);\n        _allocation(from, to, amount, totalAmountOfUser);\n    }\n\n    function checkPrice(uint256 reserve0, uint256 reserve1) internal {\n        require(reserve0 > 0 && reserve1 > 0, \"invalid reserve\");\n        if (reserve0 > reserve1) {\n            require(reserve0 < ((reserve1 * (1e18 + maxPriceOffset)) / 1e18), \"mismatch price\");\n        } else {\n            require(reserve1 < ((reserve0 * (1e18 + maxPriceOffset)) / 1e18), \"mismatch price\");\n        }\n    }\n\n    function userEarn(address user, uint256 bUSDAmount) internal returns (uint256 mintAmount) {\n        (uint256 reserve0, uint256 reserve1, ) = IPair(pair).getReserves();\n        checkPrice(reserve0, reserve1);\n\n        if (token0IsBUSD) {\n            mintAmount = (bUSDAmount * reserve1) / reserve0;\n        } else {\n            mintAmount = (bUSDAmount * reserve0) / reserve1;\n        }\n\n        IDUSD(DUSD).mint(address(this), mintAmount);\n        debts[user] += mintAmount;\n\n        addLiquidity(user, bUSDAmount, mintAmount);\n    }\n\n    function addLiquidity(\n        address user,\n        uint256 bUSDAmount,\n        uint256 dUSDAmount\n    ) internal {\n        (, , uint256 liquidity) = IRouter02(router).addLiquidity(\n            BUSD,\n            DUSD,\n            bUSDAmount,\n            dUSDAmount,\n            bUSDAmount,\n            dUSDAmount,\n            address(this),\n            block.timestamp\n        );\n\n        lps[user] += liquidity;\n    }\n\n    function removeLiquidity(uint256 liquidity) internal returns (uint256 bUSDAmount, uint256 dUSDAmount) {\n        (bUSDAmount, dUSDAmount) = IRouter02(router).removeLiquidity(\n            BUSD,\n            DUSD,\n            liquidity,\n            0,\n            0,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function swapExactUseToken(\n        address useToken,\n        uint256 amount,\n        address wantToken\n    ) internal {\n        address[] memory path = new address[](2);\n        path[0] = useToken;\n        path[1] = wantToken;\n        IRouter02(router).swapExactTokensForTokens(amount, 0, path, address(this), block.timestamp);\n    }\n\n    function swapExactGetToken(\n        address useToken,\n        uint256 max,\n        address wantToken,\n        uint256 amount\n    ) internal {\n        address[] memory path = new address[](2);\n        path[0] = useToken;\n        path[1] = wantToken;\n        IRouter02(router).swapTokensForExactTokens(amount, max, path, address(this), block.timestamp);\n    }\n\n    function _allocation(\n        address _user,\n        address _to,\n        uint256 _transferAmount,\n        uint256 _totalAmountOfUser\n    ) internal {\n        // handle debts and lps\n        if (_user != address(0) && _to != address(0)) {\n            uint256 transferDebt = (debts[_user] * _transferAmount) / _totalAmountOfUser;\n            debts[_user] -= transferDebt;\n            debts[_to] += transferDebt;\n\n            uint256 transferlp = (lps[_user] * _transferAmount) / _totalAmountOfUser;\n            lps[_user] -= transferlp;\n            lps[_to] += transferlp;\n        }\n    }\n\n    function _calOutputandAllocation(\n        address withdrawUser,\n        address to,\n        address tokenOwner,\n        uint256 withdrawAmount,\n        uint256 totalAmountOfUser,\n        bool onlyBUSD\n    ) internal {\n        uint256 lp = (lps[withdrawUser] * withdrawAmount) / totalAmountOfUser;\n        uint256 debt = (debts[withdrawUser] * withdrawAmount) / totalAmountOfUser;\n\n        (uint256 bUSDAmount, uint256 dUSDAmount) = removeLiquidity(lp);\n        lps[withdrawUser] -= lp;\n\n        if (dUSDAmount > debt) {\n            if (onlyBUSD) {\n                swapExactUseToken(DUSD, dUSDAmount - debt, BUSD);\n            }\n        } else {\n            //  dUSDAmount <= debt\n            uint256 needDusdAmount = debt - dUSDAmount;\n            if (bUSDAmount >= dUSDAmount) {\n                // dUSD price >= 1\n                (uint256 needBUSDAmount, ) = IDusdMinter(minter).calcInputFee(needDusdAmount);\n                IDusdMinter(minter).mineDusd(needBUSDAmount, needDusdAmount, address(this));\n            } else {\n                // dUSD price < 1\n                // bUSD swap to dUSD\n                swapExactGetToken(BUSD, bUSDAmount, DUSD, needDusdAmount);\n            }\n        }\n\n        IDUSD(DUSD).burn(debt);\n        debts[withdrawUser] -= debt;\n\n        _burn(tokenOwner, withdrawAmount);\n\n        (address feeReceiver, uint256 wdFee) = feeConf.getConfig(\"dybusd_wd\");\n        if (wdFee > 0 && feeReceiver != address(0)) {\n            uint256 fee = (withdrawAmount * wdFee) / PercentBase;\n            IERC20Upgradeable(BUSD).safeTransfer(feeReceiver, fee);\n        }\n\n        uint256 busdBalance = IERC20Upgradeable(BUSD).balanceOf(address(this));\n        IERC20Upgradeable(BUSD).safeTransfer(to, busdBalance);\n\n        uint256 dusdBalance = IERC20Upgradeable(DUSD).balanceOf(address(this));\n        if (dusdBalance > 0) {\n            IERC20Upgradeable(DUSD).safeTransfer(to, dusdBalance);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/dyTokenUpgrade/DYTokenBaseUpgradeable.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./draft-ERC20PermitUpgradeable.sol\";\n\nimport { IERC20Upgradeable } from \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\n\nimport \"../interfaces/TokenRecipient.sol\";\nimport \"../interfaces/IStrategy.sol\";\nimport \"../interfaces/IDYToken.sol\";\nimport \"../interfaces/IController.sol\";\n\nabstract contract DYTokenBaseUpgradeable is IDYToken, ERC20PermitUpgradeable, OwnableUpgradeable {\n    using AddressUpgradeable for address;\n\n    address public underlying;\n    uint8 internal dec;\n    address public controller;\n\n    event SetController(address controller);\n\n    constructor() {}\n\n    function init(\n        address _underlying,\n        string memory _symbol,\n        uint8 _dec,\n        address _controller\n    ) internal {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n        __ERC20_init(\"DYToken\", string(abi.encodePacked(\"DY-\", _symbol)));\n        __ERC20Permit_init(\"DYToken\");\n\n        underlying = _underlying;\n        dec = _dec;\n        controller = _controller;\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {}\n\n    function decimals() public view virtual override returns (uint8) {\n        return dec;\n    }\n\n    function burn(uint256 amount) public virtual {\n        _burn(msg.sender, amount);\n    }\n\n    function send(\n        address recipient,\n        uint256 amount,\n        bytes calldata exData\n    ) external returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n\n        if (recipient.isContract()) {\n            bool rv = TokenRecipient(recipient).tokensReceived(msg.sender, amount, exData);\n            require(rv, \"No tokensReceived\");\n        }\n\n        return true;\n    }\n\n    // ====== Controller ======\n    function setController(address _controller) public onlyOwner {\n        require(_controller != address(0), \"INVALID_CONTROLLER\");\n        controller = _controller;\n        emit SetController(_controller);\n    }\n\n    // ====== yield functions  =====\n\n    // total hold\n    function underlyingTotal() public view virtual returns (uint256);\n\n    function underlyingAmount(uint256 amount) public view virtual override returns (uint256);\n\n    function balanceOfUnderlying(address _user) public view virtual override returns (uint256);\n\n    // Âçï‰ΩçÂáÄÂÄº\n    function pricePerShare() public view returns (uint256 price) {\n        if (totalSupply() > 0) {\n            return (underlyingTotal() * 1e18) / totalSupply();\n        }\n    }\n\n    function depositTo(\n        address _to,\n        uint256 _amount,\n        address _toVault\n    ) public virtual;\n\n    // for native coin\n    function depositCoin(address _to, address _toVault) public payable virtual {}\n\n    function depositAll(address _toVault) external virtual {\n        address user = msg.sender;\n        depositTo(user, IERC20Upgradeable(underlying).balanceOf(user), _toVault);\n    }\n\n    // withdraw underlying asset, brun dyTokens\n    function withdraw(\n        address _to,\n        uint256 _shares,\n        bool needETH\n    ) public virtual;\n\n    function withdrawAll() external virtual {\n        withdraw(msg.sender, balanceOf(msg.sender), true);\n    }\n\n    // transfer all underlying asset to yield strategy\n    function earn() public virtual;\n}\n"
    },
    "contracts/dyTokenUpgrade/draft-ERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/draft-ERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\";\nimport \"./ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20PermitUpgradeable is\n    Initializable,\n    ERC20Upgradeable,\n    IERC20PermitUpgradeable,\n    EIP712Upgradeable\n{\n    using CountersUpgradeable for CountersUpgradeable.Counter;\n\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private _PERMIT_TYPEHASH;\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    function __ERC20Permit_init(string memory name) internal initializer {\n        __Context_init_unchained();\n        __EIP712_init_unchained(name, \"1\");\n        __ERC20Permit_init_unchained(name);\n    }\n\n    function __ERC20Permit_init_unchained(string memory name) internal initializer {\n        _PERMIT_TYPEHASH = keccak256(\n            \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n        );\n    }\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "contracts/dyTokenUpgrade/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) internal _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSAUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n *\n * @custom:storage-size 52\n */\nabstract contract EIP712Upgradeable is Initializable {\n    /* solhint-disable var-name-mixedcase */\n    bytes32 private _HASHED_NAME;\n    bytes32 private _HASHED_VERSION;\n    bytes32 private constant _TYPE_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\n        __EIP712_init_unchained(name, version);\n    }\n\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev The hash of the name parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\n        return _HASHED_NAME;\n    }\n\n    /**\n     * @dev The hash of the version parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\n        return _HASHED_VERSION;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../StringsUpgradeable.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n √∑ 2 + 1, and for v in (302): v ‚àà {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary CountersUpgradeable {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/DuetZap.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\nimport { IERC20Upgradeable } from \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport \"./interfaces/IPair.sol\";\nimport \"./interfaces/IWETH.sol\";\nimport \"./interfaces/IRouter02.sol\";\nimport \"./interfaces/IPancakeFactory.sol\";\nimport \"./interfaces/IController.sol\";\nimport \"./interfaces/IDYToken.sol\";\nimport \"./interfaces/IDusdMinter.sol\";\n\ncontract DuetZap is OwnableUpgradeable {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    IRouter02 private router;\n    IPancakeFactory private factory;\n    address private wbnb;\n    IController public controller;\n\n    event ZapToLP(address token, uint256 amount, address lp, uint256 liquidity);\n\n    /* ========== STATE VARIABLES ========== */\n    mapping(address => address) private routePairAddresses;\n\n    address public minter;\n\n    /* ========== INITIALIZER ========== */\n    function initialize(\n        address _controller,\n        address _factory,\n        address _router,\n        address _wbnb\n    ) external initializer {\n        __Ownable_init();\n        require(owner() != address(0), \"Zap: owner must be set\");\n        controller = IController(_controller);\n        factory = IPancakeFactory(_factory);\n        router = IRouter02(_router);\n        wbnb = _wbnb;\n    }\n\n    receive() external payable {}\n\n    /* ========== View Functions ========== */\n\n    function routePair(address _address) external view returns (address) {\n        return routePairAddresses[_address];\n    }\n\n    /* ========== External Functions ========== */\n    function setMinter(address _minter) external onlyOwner {\n        minter = _minter;\n    }\n\n    function tokenToLp(\n        address _token,\n        uint256 amount,\n        address _lp,\n        bool needDeposit\n    ) external {\n        address receiver = msg.sender;\n        if (needDeposit) {\n            receiver = address(this);\n        }\n        IERC20Upgradeable(_token).safeTransferFrom(msg.sender, address(this), amount);\n        _approveTokenIfNeeded(_token, address(router), amount);\n\n        IPair pair = IPair(_lp);\n        address token0 = pair.token0();\n        address token1 = pair.token1();\n        require(factory.getPair(token0, token1) == _lp, \"NO_PAIR\");\n\n        uint256 liquidity;\n\n        if (_token == token0 || _token == token1) {\n            // swap half amount for other\n            address other = _token == token0 ? token1 : token0;\n            _approveTokenIfNeeded(other, address(router), amount);\n            uint256 sellAmount = amount / 2;\n\n            uint256 otherAmount = _swap(_token, sellAmount, other, address(this));\n            pair.skim(address(this));\n\n            (, , liquidity) = router.addLiquidity(\n                _token,\n                other,\n                amount - sellAmount,\n                otherAmount,\n                0,\n                0,\n                receiver,\n                block.timestamp\n            );\n        } else {\n            uint256 bnbAmount = _token == wbnb ? amount : _swapTokenForBNB(_token, amount, address(this), false);\n            require(IERC20Upgradeable(wbnb).balanceOf(address(this)) >= bnbAmount, \"Zap: Not enough wbnb balance\");\n            liquidity = _swapBNBToLp(_lp, bnbAmount, receiver, false);\n        }\n\n        emit ZapToLP(_token, amount, _lp, liquidity);\n        if (needDeposit) {\n            deposit(_lp, liquidity, msg.sender);\n        }\n    }\n\n    function tokenToLpbyPath(\n        address _token,\n        uint256 amount,\n        address _lp,\n        bool needDeposit,\n        address[] memory pathArr0,\n        address[] memory pathArr1\n    ) external {\n        require(amount > 0, \"Zero Amount\");\n\n        IERC20Upgradeable(_token).safeTransferFrom(msg.sender, address(this), amount);\n\n        _approveTokenIfNeeded(_token, address(router), amount);\n\n        uint256 liquidity = _zapToLPbyPath(_token, amount, _lp, needDeposit, pathArr0, pathArr1);\n    }\n\n    function coinToLp(address _lp, bool needDeposit) external payable returns (uint256 liquidity) {\n        if (!needDeposit) {\n            liquidity = _swapBNBToLp(_lp, msg.value, msg.sender, true);\n            emit ZapToLP(address(0), msg.value, _lp, liquidity);\n        } else {\n            liquidity = _swapBNBToLp(_lp, msg.value, address(this), true);\n            emit ZapToLP(address(0), msg.value, _lp, liquidity);\n            deposit(_lp, liquidity, msg.sender);\n        }\n    }\n\n    function coinToLpbyPath(\n        address _lp,\n        bool needDeposit,\n        address[] memory pathArr0,\n        address[] memory pathArr1\n    ) external payable returns (uint256 liquidity) {\n        require(msg.value > 0, \"Zap: coin zero\");\n        IWETH(wbnb).deposit{ value: msg.value }();\n        uint256 wbnbAmount = msg.value;\n        _approveTokenIfNeeded(wbnb, address(router), wbnbAmount);\n        liquidity = _zapToLPbyPath(wbnb, wbnbAmount, _lp, needDeposit, pathArr0, pathArr1);\n    }\n\n    function coinToToken(address _token, bool needDeposit) external payable returns (uint256 amountOut) {\n        if (!needDeposit) {\n            amountOut = _swapBNBForToken(_token, msg.value, msg.sender, true);\n        } else {\n            amountOut = _swapBNBForToken(_token, msg.value, address(this), true);\n            deposit(_token, amountOut, msg.sender);\n        }\n    }\n\n    function coinToTokenbyPath(bool needDeposit, address[] memory pathArr)\n        external\n        payable\n        returns (uint256 amountOut)\n    {\n        require(pathArr.length > 1, \"Wrong Path: length of pathArr should exceed 1\");\n        address _from = pathArr[0];\n        require(_from == wbnb, \"Wrong Path: First item of PathArr should be WBNB!\");\n\n        IWETH(wbnb).deposit{ value: msg.value }();\n        uint256 wbnbAmount = msg.value;\n\n        _approveTokenIfNeeded(_from, address(router), wbnbAmount);\n\n        address _to;\n        if (needDeposit) {\n            (_to, amountOut) = _swapbyPath(_from, wbnbAmount, pathArr, address(this));\n            deposit(_to, amountOut, msg.sender);\n        } else {\n            (_to, amountOut) = _swapbyPath(_from, wbnbAmount, pathArr, msg.sender);\n        }\n    }\n\n    function tokenToToken(\n        address _token,\n        uint256 _amount,\n        address _to,\n        bool needDeposit\n    ) external returns (uint256 amountOut) {\n        IERC20Upgradeable(_token).safeTransferFrom(msg.sender, address(this), _amount);\n        _approveTokenIfNeeded(_token, address(router), _amount);\n\n        if (needDeposit) {\n            amountOut = _swap(_token, _amount, _to, address(this));\n            deposit(_to, amountOut, msg.sender);\n        } else {\n            amountOut = _swap(_token, _amount, _to, msg.sender);\n        }\n    }\n\n    function tokenToTokenbyPath(\n        uint256 _amount,\n        bool needDeposit,\n        address[] memory pathArr\n    ) external returns (uint256 amountOut) {\n        require(pathArr.length > 1, \"Wrong Path: length of pathArr should exceed 1\");\n        address _from = pathArr[0];\n        IERC20Upgradeable(_from).safeTransferFrom(msg.sender, address(this), _amount);\n        _approveTokenIfNeeded(_from, address(router), _amount);\n\n        address _to;\n        if (needDeposit) {\n            (_to, amountOut) = _swapbyPath(_from, _amount, pathArr, address(this));\n            deposit(_to, amountOut, msg.sender);\n        } else {\n            (_to, amountOut) = _swapbyPath(_from, _amount, pathArr, msg.sender);\n        }\n    }\n\n    // unpack lp\n    function zapOut(address _from, uint256 _amount) external {\n        IERC20Upgradeable(_from).safeTransferFrom(msg.sender, address(this), _amount);\n        _approveTokenIfNeeded(_from, address(router), _amount);\n\n        IPair pair = IPair(_from);\n        address token0 = pair.token0();\n        address token1 = pair.token1();\n\n        if (pair.balanceOf(_from) > 0) {\n            pair.burn(address(this));\n        }\n\n        if (token0 == wbnb || token1 == wbnb) {\n            router.removeLiquidityETH(token0 != wbnb ? token0 : token1, _amount, 0, 0, msg.sender, block.timestamp);\n        } else {\n            router.removeLiquidity(token0, token1, _amount, 0, 0, msg.sender, block.timestamp);\n        }\n    }\n\n    /* ========== Private Functions ========== */\n    function deposit(\n        address token,\n        uint256 amount,\n        address toUser\n    ) private {\n        address dytoken = controller.dyTokens(token);\n        require(dytoken != address(0), \"NO_DYTOKEN\");\n        address vault = controller.dyTokenVaults(dytoken);\n        require(vault != address(0), \"NO_VAULT\");\n\n        _approveTokenIfNeeded(token, dytoken, amount);\n        IDYToken(dytoken).depositTo(toUser, amount, vault);\n    }\n\n    function _approveTokenIfNeeded(\n        address token,\n        address spender,\n        uint256 amount\n    ) private {\n        uint256 allowed = IERC20Upgradeable(token).allowance(address(this), spender);\n        if (allowed == 0) {\n            IERC20Upgradeable(token).safeApprove(spender, type(uint256).max);\n        } else if (allowed < amount) {\n            IERC20Upgradeable(token).safeApprove(spender, 0);\n            IERC20Upgradeable(token).safeApprove(spender, type(uint256).max);\n        }\n    }\n\n    function _swapBNBToLp(\n        address lp,\n        uint256 amount,\n        address receiver,\n        bool byBNB\n    ) private returns (uint256 liquidity) {\n        IPair pair = IPair(lp);\n        address token0 = pair.token0();\n        address token1 = pair.token1();\n        if (token0 == wbnb || token1 == wbnb) {\n            address token = token0 == wbnb ? token1 : token0;\n            uint256 tokenAmount = _swapBNBForToken(token, amount / 2, address(this), byBNB);\n            _approveTokenIfNeeded(token, address(router), tokenAmount);\n            pair.skim(address(this));\n            if (byBNB) {\n                // BNB to LP\n                (, , liquidity) = router.addLiquidityETH{ value: amount - amount / 2 }(\n                    token,\n                    tokenAmount,\n                    0,\n                    0,\n                    receiver,\n                    block.timestamp\n                );\n            } else {\n                // WBNB to LP\n                (, , liquidity) = router.addLiquidity(\n                    wbnb,\n                    token,\n                    amount - amount / 2,\n                    tokenAmount,\n                    0,\n                    0,\n                    receiver,\n                    block.timestamp\n                );\n            }\n        } else {\n            uint256 token0Amount = _swapBNBForToken(token0, amount / 2, address(this), byBNB);\n            uint256 token1Amount = _swapBNBForToken(token1, amount - amount / 2, address(this), byBNB);\n\n            _approveTokenIfNeeded(token0, address(router), token0Amount);\n            _approveTokenIfNeeded(token1, address(router), token1Amount);\n            pair.skim(address(this));\n            (, , liquidity) = router.addLiquidity(\n                token0,\n                token1,\n                token0Amount,\n                token1Amount,\n                0,\n                0,\n                receiver,\n                block.timestamp\n            );\n        }\n    }\n\n    function _swapBNBForToken(\n        address token,\n        uint256 value,\n        address receiver,\n        bool byBNB\n    ) private returns (uint256) {\n        address[] memory path;\n\n        if (routePairAddresses[token] != address(0)) {\n            path = new address[](3);\n            path[0] = wbnb;\n            path[1] = routePairAddresses[token];\n            path[2] = token;\n        } else {\n            path = new address[](2);\n            path[0] = wbnb;\n            path[1] = token;\n        }\n\n        uint256[] memory amounts;\n        if (byBNB) {\n            // BNB to other Token\n            amounts = router.swapExactETHForTokens{ value: value }(0, path, receiver, block.timestamp);\n        } else {\n            // WBNB to other Token\n            _approveTokenIfNeeded(wbnb, address(router), value);\n            amounts = router.swapExactTokensForTokens(value, 0, path, receiver, block.timestamp);\n        }\n        return amounts[amounts.length - 1];\n    }\n\n    function _swapTokenForBNB(\n        address token,\n        uint256 amount,\n        address receiver,\n        bool byBNB\n    ) private returns (uint256) {\n        address[] memory path;\n        if (routePairAddresses[token] != address(0)) {\n            path = new address[](3);\n            path[0] = token;\n            path[1] = routePairAddresses[token];\n            path[2] = wbnb;\n        } else {\n            path = new address[](2);\n            path[0] = token;\n            path[1] = wbnb;\n        }\n\n        uint256[] memory amounts;\n        if (byBNB) {\n            // Token to BNB\n            amounts = router.swapExactTokensForETH(amount, 0, path, receiver, block.timestamp);\n        } else {\n            // Token to WBNB\n            amounts = router.swapExactTokensForTokens(amount, 0, path, receiver, block.timestamp);\n        }\n\n        return amounts[amounts.length - 1];\n    }\n\n    function _checkAmountOutbyPath(\n        address _lp,\n        address _token0,\n        address _token1,\n        uint256 _amountOutbyPath0,\n        uint256 _amountOutbyPath1\n    ) private {\n        IPair pair = IPair(_lp);\n        address token0 = pair.token0();\n        address token1 = pair.token1();\n\n        require(factory.getPair(token0, token1) == _lp, \"Zap: NO_PAIR\");\n        require(_amountOutbyPath0 > 0 && _amountOutbyPath1 > 0, \"Wrong Path: amountOut is zero\");\n        require(_token0 != _token1, \"Zap: target tokens should't be the same\");\n        require(_token0 == token0 || _token0 == token1, \"Wrong Path: target tokens don't match\");\n        require(_token1 == token0 || _token1 == token1, \"Wrong Path: target tokens don't match\");\n    }\n\n    function _checkAmountOut(uint256 amount, address[] memory path) private returns (uint256 amountOut) {\n        try router.getAmountsOut(amount, path) returns (uint256[] memory amounts) {\n            amountOut = amounts[amounts.length - 1];\n        } catch {}\n    }\n\n    function _calSuitablePath(\n        uint256 amount,\n        address _from,\n        address intermediate,\n        address _to\n    ) private returns (address[] memory pathOut) {\n        address[] memory pathL2 = new address[](2);\n        pathL2[0] = _from;\n        pathL2[1] = _to;\n        address[] memory pathL3 = new address[](3);\n        pathL3[0] = _from;\n        pathL3[1] = intermediate;\n        pathL3[2] = _to;\n\n        uint256 amountOutL2 = _checkAmountOut(amount, pathL2);\n        uint256 amountOutL3 = _checkAmountOut(amount, pathL3);\n\n        require(amountOutL2 > 0 || amountOutL3 > 0, \"Wrong Path: amountOutLX is zero\");\n        return amountOutL2 > amountOutL3 ? pathL2 : pathL3;\n    }\n\n    function _swap(\n        address _from,\n        uint256 amount,\n        address _to,\n        address receiver\n    ) private returns (uint256) {\n        if (minter != address(0) && IDusdMinter(minter).stableToken() == _from && IDusdMinter(minter).dusd() == _to) {\n            uint256 output = _mineDusd(_from, amount);\n            return output;\n        }\n\n        address intermediate = routePairAddresses[_from];\n        if (intermediate == address(0)) {\n            intermediate = routePairAddresses[_to];\n        }\n\n        address[] memory path;\n        if (intermediate == address(0) || _from == intermediate || _to == intermediate) {\n            // [DUET, BUSD] or [BUSD, DUET]\n            path = new address[](2);\n            path[0] = _from;\n            path[1] = _to;\n            uint256 amountOut = _checkAmountOut(amount, path);\n            require(amountOut != 0, \"Wrong Path: amountOut is zero\");\n        } else {\n            path = _calSuitablePath(amount, _from, intermediate, _to);\n        }\n\n        uint256[] memory amounts = router.swapExactTokensForTokens(amount, 0, path, receiver, block.timestamp);\n        return amounts[amounts.length - 1];\n    }\n\n    function _swapbyPath(\n        address _from,\n        uint256 amount,\n        address[] memory pathArr,\n        address receiver\n    ) private returns (address _to, uint256 amountOut) {\n        if (pathArr.length == 0) {\n            return (_from, amount);\n        }\n\n        require(pathArr.length > 1, \"Wrong path: one path\");\n        require(_from == pathArr[0], \"Wrong path: swapped token not in pathArr\");\n        require(minter != address(0), \"Should set DusdMinter\");\n\n        // check busd -> dusd\n        for (uint256 i = 0; i < pathArr.length; i++) {\n            if (pathArr[i] == IDusdMinter(minter).stableToken() && i < pathArr.length - 1) {\n                if (pathArr[i + 1] == IDusdMinter(minter).dusd()) {\n                    return _swapPathArrofStableTokentoDUSD(pathArr, i, amount);\n                }\n            }\n        }\n\n        uint256[] memory amounts = router.swapExactTokensForTokens(amount, 0, pathArr, receiver, block.timestamp);\n        return (pathArr[amounts.length - 1], amounts[amounts.length - 1]);\n    }\n\n    function _swapPathArrofStableTokentoDUSD(\n        address[] memory pathArr,\n        uint256 position,\n        uint256 amount\n    ) private returns (address _to, uint256 amountOut) {\n        uint256 len = pathArr.length;\n\n        // len = 2, busd -> dusd\n        if (len == 2) {\n            amountOut = _mineDusd(pathArr[0], amount);\n            return (pathArr[1], amountOut);\n        }\n\n        // len > 2, ...busd -> dusd...\n        if (position == 0) {\n            // busd -> dusd, and then swap [dusd, ...]\n            uint256 dusdAmount = _mineDusd(pathArr[position], amount);\n            address[] memory newPathArr = new address[](len - 1);\n            newPathArr = _fillArrbyPosition(1, len - 1, pathArr);\n            uint256[] memory amounts = router.swapExactTokensForTokens(\n                dusdAmount,\n                0,\n                newPathArr,\n                address(this),\n                block.timestamp\n            );\n            return (newPathArr[newPathArr.length - 1], amounts[amounts.length - 1]);\n        } else if (position == len - 2) {\n            // swap [..., busd], and then busd -> dusd\n            address[] memory newPathArr = new address[](len - 1);\n            newPathArr = _fillArrbyPosition(0, len - 2, pathArr);\n            uint256[] memory amounts = router.swapExactTokensForTokens(\n                amount,\n                0,\n                newPathArr,\n                address(this),\n                block.timestamp\n            );\n            uint256 dusdAmount = _mineDusd(pathArr[position], amounts[amounts.length - 1]);\n            return (pathArr[pathArr.length - 1], dusdAmount);\n        } else {\n            // swap [..., busd], and then busd -> dusd, and swap [dusd, ...]\n            address[] memory newPathArr0 = new address[](position + 1);\n            address[] memory newPathArr1 = new address[](len - position - 1);\n            newPathArr0 = _fillArrbyPosition(0, position, pathArr);\n            newPathArr1 = _fillArrbyPosition(position + 1, len - 1, pathArr);\n            uint256[] memory amounts0 = router.swapExactTokensForTokens(\n                amount,\n                0,\n                newPathArr0,\n                address(this),\n                block.timestamp\n            );\n            uint256 dusdAmount = _mineDusd(pathArr[position], amounts0[amounts0.length - 1]);\n            uint256[] memory amounts1 = router.swapExactTokensForTokens(\n                dusdAmount,\n                0,\n                newPathArr1,\n                address(this),\n                block.timestamp\n            );\n            return (pathArr[pathArr.length - 1], amounts1[amounts1.length - 1]);\n        }\n    }\n\n    function _mineDusd(address _from, uint256 amount) private returns (uint256 amountOut) {\n        _approveTokenIfNeeded(_from, minter, amount);\n        amountOut = IDusdMinter(minter).mineDusd(amount, 0, address(this));\n    }\n\n    function _fillArrbyPosition(\n        uint256 start,\n        uint256 end,\n        address[] memory originArr\n    ) private returns (address[] memory) {\n        uint256 newLen = end - start + 1;\n        address[] memory newArr = new address[](newLen);\n        for (uint256 i = 0; i < newLen; i++) {\n            newArr[i] = originArr[i + start];\n        }\n        return newArr;\n    }\n\n    function _safeSwapToBNB(uint256 amount) private returns (uint256) {\n        require(IERC20Upgradeable(wbnb).balanceOf(address(this)) >= amount, \"Zap: Not enough wbnb balance\");\n        uint256 beforeBNB = address(this).balance;\n        IWETH(wbnb).withdraw(amount);\n        return address(this).balance - beforeBNB;\n    }\n\n    function _zapToLPbyPath(\n        address _token,\n        uint256 amount,\n        address _lp,\n        bool needDeposit,\n        address[] memory pathArr0,\n        address[] memory pathArr1\n    ) private returns (uint256 liquidity) {\n        address receiver = msg.sender;\n        if (needDeposit) {\n            receiver = address(this);\n        }\n        (address _token0, uint256 _amountOutbyPath0) = _swapbyPath(_token, amount / 2, pathArr0, address(this));\n        (address _token1, uint256 _amountOutbyPath1) = _swapbyPath(\n            _token,\n            amount - amount / 2,\n            pathArr1,\n            address(this)\n        );\n        _checkAmountOutbyPath(_lp, _token0, _token1, _amountOutbyPath0, _amountOutbyPath1);\n\n        _approveTokenIfNeeded(_token0, address(router), _amountOutbyPath0);\n        _approveTokenIfNeeded(_token1, address(router), _amountOutbyPath1);\n        (, , liquidity) = router.addLiquidity(\n            _token0,\n            _token1,\n            _amountOutbyPath0,\n            _amountOutbyPath1,\n            0,\n            0,\n            receiver,\n            block.timestamp\n        );\n\n        if (needDeposit) {\n            deposit(_lp, liquidity, msg.sender);\n        }\n        emit ZapToLP(_token, amount, _lp, liquidity);\n        return liquidity;\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    function setRoutePairAddress(address asset, address route) public onlyOwner {\n        routePairAddresses[asset] = route;\n    }\n\n    function sweep(address[] memory tokens, bool byBNB) external onlyOwner {\n        for (uint256 i = 0; i < tokens.length; i++) {\n            address token = tokens[i];\n            if (token == address(0)) continue;\n            uint256 amount = IERC20Upgradeable(token).balanceOf(address(this));\n            if (amount > 0) {\n                _swapTokenForBNB(token, amount, owner(), byBNB);\n            }\n        }\n    }\n\n    function withdraw(address token) external onlyOwner {\n        if (token == address(0)) {\n            payable(owner()).transfer(address(this).balance);\n            return;\n        }\n\n        IERC20Upgradeable(token).transfer(owner(), IERC20Upgradeable(token).balanceOf(address(this)));\n    }\n}\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "pragma solidity >=0.8.0;\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function withdraw(uint256) external;\n}\n"
    },
    "contracts/keeper/StrategyKeeper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../interfaces/IStrategy.sol\";\n\ncontract StrategyKeeper is KeeperCompatibleInterface, Ownable {\n    address[] public strategyList;\n\n    constructor() {}\n\n    function addStrategyList(address[] memory newStrategy) external onlyOwner {\n        if (newStrategy.length == 0) return;\n        for (uint256 i = 0; i < newStrategy.length; i++) {\n            strategyList.push(newStrategy[i]);\n        }\n    }\n\n    function validStrategy(address strategy) internal view returns (bool valid) {\n        for (uint256 i = 0; i < strategyList.length; i++) {\n            if (strategy == strategyList[i]) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function removeStrategyList(uint256 index) external onlyOwner {\n        uint256 len = strategyList.length;\n        if (index >= len) return;\n        for (uint256 i = index; i < len - 1; i++) {\n            strategyList[i] = strategyList[i + 1];\n        }\n        strategyList.pop();\n    }\n\n    function getStrategyList() external view returns (address[] memory) {\n        return strategyList;\n    }\n\n    function checkUpkeep(\n        bytes calldata /* checkData */\n    ) external view override returns (bool upkeepNeeded, bytes memory performData) {\n        for (uint256 i = 0; i < strategyList.length; i++) {\n            uint256 pendingOutput = IStrategy(strategyList[i]).pendingOutput();\n            uint256 minHarvestAmount = IStrategy(strategyList[i]).minHarvestAmount();\n\n            if (pendingOutput > minHarvestAmount) {\n                performData = abi.encodePacked(performData, _addressToBytes(strategyList[i]));\n            }\n        }\n\n        if (performData.length > 0) {\n            upkeepNeeded = true;\n        }\n    }\n\n    function performUpkeep(bytes calldata performData) external override {\n        uint256 len = performData.length;\n        uint256 acc = 0;\n        while (acc < len) {\n            address strategy = address(_toBytes20(performData, acc));\n            require(validStrategy(strategy), \"invalid strategy\");\n            IStrategy(strategy).harvest();\n            acc += 20;\n        }\n    }\n\n    function _addressToBytes(address a) internal pure returns (bytes memory b) {\n        assembly {\n            let m := mload(0x40)\n            a := and(a, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n            mstore(add(m, 20), xor(0x140000000000000000000000000000000000000000, a))\n            mstore(0x40, add(m, 52))\n            b := m\n        }\n    }\n\n    function _toBytes20(bytes memory _b, uint256 _offset) internal pure returns (bytes20) {\n        bytes20 out;\n\n        for (uint256 i = 0; i < 20; i++) {\n            out |= bytes20(_b[_offset + i] & 0xFF) >> (i * 8);\n        }\n        return out;\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/KeeperCompatible.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./KeeperBase.sol\";\nimport \"./interfaces/KeeperCompatibleInterface.sol\";\n\nabstract contract KeeperCompatible is KeeperBase, KeeperCompatibleInterface {}\n"
    },
    "@chainlink/contracts/src/v0.8/KeeperBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract KeeperBase {\n  error OnlySimulatedBackend();\n\n  /**\n   * @notice method that allows it to be simulated via eth_call by checking that\n   * the sender is the zero address.\n   */\n  function preventExecution() internal view {\n    if (tx.origin != address(0)) {\n      revert OnlySimulatedBackend();\n    }\n  }\n\n  /**\n   * @notice modifier that allows it to be simulated via eth_call by checking\n   * that the sender is the zero address.\n   */\n  modifier cannotExecute() {\n    preventExecution();\n    _;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface KeeperCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
    },
    "contracts/oracle/TMCUSDOracle.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../chainlink/v0.6/interfaces/AggregatorV3Interface.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"../interfaces/IUSDOracle.sol\";\n\ncontract TMCUSDOracle is Ownable, IUSDOracle {\n    mapping(address => AggregatorV3Interface) public aggregators;\n    event SetAggregator(address indexed token, AggregatorV3Interface indexed aggregator);\n\n    function setAggregator(address token, AggregatorV3Interface aggregator) external onlyOwner {\n        uint8 dec = aggregator.decimals();\n        require(dec == 8, \"not support decimals\");\n        aggregators[token] = aggregator;\n        emit SetAggregator(token, aggregator);\n    }\n\n    // get latest price\n    function getPrice(address token) external view override returns (uint256) {\n        (, int256 price, , , ) = aggregators[token].latestRoundData();\n        require(price >= 0, \"Negative Price!\");\n        return uint256(price) / 10000000000;\n    }\n}\n"
    },
    "contracts/chainlink/v0.6/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0;\n\ninterface AggregatorV3Interface {\n    function decimals() external view returns (uint8);\n\n    function description() external view returns (string memory);\n\n    function version() external view returns (uint256);\n\n    // getRoundData and latestRoundData should both raise \"No data present\"\n    // if they do not have data to report, instead of returning unset values\n    // which could be misinterpreted as actual reported values.\n    function getRoundData(uint80 _roundId)\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n\n    function latestRoundData()\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n}\n"
    },
    "contracts/mock/MockUSDOracle.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../interfaces/IUSDOracle.sol\";\n\ncontract MockUSDOracle is Ownable, IUSDOracle {\n    mapping(address => uint256) prices;\n\n    function setPrice(address _token, uint256 _price) external {\n        prices[_token] = _price;\n    }\n\n    // get latest price\n    function getPrice(address token) external view override returns (uint256) {\n        return prices[token];\n    }\n}\n"
    },
    "contracts/keeper/OracleKeeper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../interfaces/IDexUsdOracle.sol\";\nimport \"../libs/UniswapV2OracleLibrary.sol\";\n\ncontract OracleKeeper is KeeperCompatibleInterface, Ownable {\n    address public dexUSDOracle;\n\n    constructor() {}\n\n    function setOracle(address _oracle) external onlyOwner {\n        require(_oracle != address(0), \"Zero address\");\n        dexUSDOracle = _oracle;\n    }\n\n    function checkUpkeep(\n        bytes calldata /* checkData */\n    ) external view override returns (bool upkeepNeeded, bytes memory performData) {\n        address pair = IDexUsdOracle(dexUSDOracle).pair();\n        uint32 blockTimestampLast1Period = IDexUsdOracle(dexUSDOracle).blockTimestampLast1Period();\n        (, , uint32 blockTimestamp) = UniswapV2OracleLibrary.currentCumulativePrices(pair);\n        uint32 timeElapsed1Period = blockTimestamp - blockTimestampLast1Period; // overflow is desired\n\n        uint256 period = IDexUsdOracle(dexUSDOracle).period();\n        if (timeElapsed1Period >= period) {\n            upkeepNeeded = true;\n        }\n    }\n\n    function performUpkeep(bytes calldata performData) external override {\n        IDexUsdOracle(dexUSDOracle).update();\n    }\n}\n"
    },
    "contracts/interfaces/IDexUsdOracle.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0;\n\ninterface IDexUsdOracle {\n    function pair() external view returns (address);\n\n    function period() external view returns (uint256);\n\n    function blockTimestampLast1Period() external view returns (uint32);\n\n    function update() external;\n}\n"
    },
    "contracts/libs/UniswapV2OracleLibrary.sol": {
      "content": "pragma solidity >=0.5.0;\n\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\";\nimport \"./FixedPoint.sol\";\n\n// library with helper methods for oracles that are concerned with computing average prices\nlibrary UniswapV2OracleLibrary {\n    using FixedPoint for *;\n\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\n    function currentBlockTimestamp() internal view returns (uint32) {\n        return uint32(block.timestamp % 2**32);\n    }\n\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\n    function currentCumulativePrices(address pair)\n        internal\n        view\n        returns (\n            uint256 price0Cumulative,\n            uint256 price1Cumulative,\n            uint32 blockTimestamp\n        )\n    {\n        blockTimestamp = currentBlockTimestamp();\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\n\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\n        if (blockTimestampLast != blockTimestamp) {\n            // subtraction overflow is desired\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\n            // addition overflow is desired\n            // counterfactual\n            price0Cumulative += uint256(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\n            // counterfactual\n            price1Cumulative += uint256(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\n        }\n    }\n}\n"
    },
    "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "contracts/libs/FixedPoint.sol": {
      "content": "pragma solidity >=0.4.0;\n\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\nlibrary FixedPoint {\n    // range: [0, 2**112 - 1]\n    // resolution: 1 / 2**112\n    struct uq112x112 {\n        uint224 _x;\n    }\n\n    // range: [0, 2**144 - 1]\n    // resolution: 1 / 2**112\n    struct uq144x112 {\n        uint256 _x;\n    }\n\n    uint8 private constant RESOLUTION = 112;\n\n    // encode a uint112 as a UQ112x112\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\n        return uq112x112(uint224(x) << RESOLUTION);\n    }\n\n    // encodes a uint144 as a UQ144x112\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\n        return uq144x112(uint256(x) << RESOLUTION);\n    }\n\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\n    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\n        require(x != 0, \"FixedPoint: DIV_BY_ZERO\");\n        return uq112x112(self._x / uint224(x));\n    }\n\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\n    // reverts on overflow\n    function mul(uq112x112 memory self, uint256 y) internal pure returns (uq144x112 memory) {\n        uint256 z;\n        require(y == 0 || (z = uint256(self._x) * y) / y == uint256(self._x), \"FixedPoint: MULTIPLICATION_OVERFLOW\");\n        return uq144x112(z);\n    }\n\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\n    // equivalent to encode(numerator).div(denominator)\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\n        require(denominator > 0, \"FixedPoint: DIV_BY_ZERO\");\n        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\n    }\n\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\n        return uint112(self._x >> RESOLUTION);\n    }\n\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\n        return uint144(self._x >> RESOLUTION);\n    }\n}\n"
    },
    "contracts/oracle/DexUsdOracle.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\";\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\";\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport { IERC20Metadata } from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\nimport \"../libs/FixedPoint.sol\";\nimport \"../libs/UniswapV2OracleLibrary.sol\";\n\nimport \"../interfaces/IUSDOracle.sol\";\n\ncontract DexUSDOracle is IUSDOracle, Initializable, OwnableUpgradeable {\n    using FixedPoint for *;\n    uint256 public period;\n\n    IUniswapV2Pair public pair;\n    IUSDOracle public baseOracle;\n    address public token0;\n    address public token1;\n\n    uint256 public price0CumulativeLast1Period;\n    uint256 public price1CumulativeLast1Period;\n    uint32 public blockTimestampLast1Period;\n    FixedPoint.uq112x112 public price0Average1Period;\n    FixedPoint.uq112x112 public price1Average1Period;\n\n    uint256 public price0CumulativeLast4Period;\n    uint256 public price1CumulativeLast4Period;\n    uint32 public blockTimestampLast4Period;\n    FixedPoint.uq112x112 public price0Average4Period;\n    FixedPoint.uq112x112 public price1Average4Period;\n\n    event PeriodChanged(uint256 newPeriod);\n\n    constructor() {}\n\n    function initialize(address _baseOracle, address _pair) external initializer {\n        OwnableUpgradeable.__Ownable_init();\n        period = 30 minutes;\n\n        baseOracle = IUSDOracle(_baseOracle);\n        pair = IUniswapV2Pair(_pair);\n\n        token0 = pair.token0();\n        token1 = pair.token1();\n        price0CumulativeLast1Period = pair.price0CumulativeLast(); // fetch the current accumulated price value (1 / 0)\n        price1CumulativeLast1Period = pair.price1CumulativeLast(); // fetch the current accumulated price value (0 / 1)\n\n        price0CumulativeLast4Period = price0CumulativeLast1Period;\n        price1CumulativeLast4Period = price1CumulativeLast1Period;\n\n        uint112 reserve0;\n        uint112 reserve1;\n        (reserve0, reserve1, blockTimestampLast1Period) = pair.getReserves();\n        require(reserve0 != 0 && reserve1 != 0, \"NO_RESERVES\"); // ensure that there's liquidity in the pair\n        blockTimestampLast4Period = blockTimestampLast1Period;\n\n        uint256 decimal0 = IERC20Metadata(token0).decimals();\n        uint256 decimal1 = IERC20Metadata(token1).decimals();\n\n        require(decimal0 == 18 && decimal1 == 18, \"MISMATCH_DEC\");\n    }\n\n    function setPeriod(uint256 _period) external onlyOwner {\n        period = _period;\n        emit PeriodChanged(_period);\n    }\n\n    function update() external {\n        (uint256 price0Cumulative, uint256 price1Cumulative, uint32 blockTimestamp) = UniswapV2OracleLibrary\n            .currentCumulativePrices(address(pair));\n        uint32 timeElapsed1Period = blockTimestamp - blockTimestampLast1Period; // overflow is desired\n\n        // ensure that at least one full period has passed since the last update\n        require(timeElapsed1Period >= period, \"PERIOD_NOT_ELAPSED\");\n\n        // overflow is desired, casting never truncates\n        // cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\n        price0Average1Period = FixedPoint.uq112x112(\n            uint224((price0Cumulative - price0CumulativeLast1Period) / timeElapsed1Period)\n        );\n        price1Average1Period = FixedPoint.uq112x112(\n            uint224((price1Cumulative - price1CumulativeLast1Period) / timeElapsed1Period)\n        );\n\n        price0CumulativeLast1Period = price0Cumulative;\n        price1CumulativeLast1Period = price1Cumulative;\n        blockTimestampLast1Period = blockTimestamp;\n\n        uint32 timeElapsed4Period = blockTimestamp - blockTimestampLast4Period;\n        if (timeElapsed4Period >= 4 * period) {\n            price0Average4Period = FixedPoint.uq112x112(\n                uint224((price0Cumulative - price0CumulativeLast4Period) / timeElapsed4Period)\n            );\n            price1Average4Period = FixedPoint.uq112x112(\n                uint224((price1Cumulative - price1CumulativeLast4Period) / timeElapsed4Period)\n            );\n\n            price0CumulativeLast4Period = price0Cumulative;\n            price1CumulativeLast4Period = price1Cumulative;\n            blockTimestampLast4Period = blockTimestamp;\n        }\n    }\n\n    function consult(address token, uint256 amountIn) external view returns (uint256 amountOut) {\n        if (token == token0) {\n            if (price0Average4Period._x < price0Average1Period._x) {\n                amountOut = price0Average4Period.mul(amountIn).decode144();\n            } else {\n                amountOut = price0Average1Period.mul(amountIn).decode144();\n            }\n        } else {\n            require(token == token1, \"INVALID_TOKEN\");\n            if (price1Average4Period._x < price1Average1Period._x) {\n                amountOut = price1Average4Period.mul(amountIn).decode144();\n            } else {\n                amountOut = price1Average1Period.mul(amountIn).decode144();\n            }\n        }\n    }\n\n    // get latest price\n    function getPrice(address token) external view override returns (uint256 price) {\n        if (token == token0) {\n            uint256 token1Price = baseOracle.getPrice(token1);\n\n            if (price0Average4Period._x < price0Average1Period._x) {\n                price = price0Average4Period.mul(token1Price).decode144();\n            } else {\n                price = price0Average1Period.mul(token1Price).decode144();\n            }\n        } else {\n            require(token == token1, \"INVALID_TOKEN\");\n\n            uint256 token0Price = baseOracle.getPrice(token0);\n            if (price1Average4Period._x < price1Average1Period._x) {\n                price = price1Average4Period.mul(token0Price).decode144();\n            } else {\n                price = price1Average1Period.mul(token0Price).decode144();\n            }\n        }\n        require(price != 0, \"NO_PRICE\");\n    }\n}\n"
    },
    "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"
    },
    "contracts/mock/DBTC.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\n\ncontract DBTC is Initializable, OwnableUpgradeable, ERC20Upgradeable {\n    mapping(address => bool) public miners;\n\n    event MinerChanged(address indexed miner, bool enabled);\n\n    function initialize() public initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n        __ERC20_init_unchained(\"Mock Duet BTC\", \"DBTC\");\n    }\n\n    function addMiner(address _miner) public onlyOwner {\n        miners[_miner] = true;\n        emit MinerChanged(_miner, true);\n    }\n\n    function mint(address account, uint256 amount) public {\n        require(miners[msg.sender], \"invalid miner\");\n        _mint(account, amount);\n    }\n\n    function burnFrom(address account, uint256 amount) public onlyOwner {\n        _burn(account, amount);\n    }\n\n    function burn(uint256 amount) public {\n        _burn(msg.sender, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
    },
    "contracts/Duet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\n\ncontract Duet is Initializable, OwnableUpgradeable, ERC20Upgradeable {\n    function initialize() public initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n        __ERC20_init_unchained(\"Duet Governance Token\", \"DUET\");\n    }\n\n    function mint(address account, uint256 amount) public onlyOwner {\n        _mint(account, amount);\n    }\n\n    function burn(address account, uint256 amount) public onlyOwner {\n        _burn(account, amount);\n    }\n\n    function burnme(uint256 amount) public {\n        _burn(msg.sender, amount);\n    }\n}\n"
    },
    "contracts/FeeConf.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./Constants.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n// fee for protocol\n\ncontract FeeConf is Constants, Ownable {\n    struct ReceiverRate {\n        address receiver;\n        uint16 rate;\n    }\n\n    mapping(bytes32 => ReceiverRate) configs;\n\n    event SetConfig(bytes32 key, address receiver, uint16 rate);\n\n    // deposit_fee   0\n    // withdraw_fee: 0x77697468647261775f666565  50; 0.5%\n    constructor(address receiver) {\n        // yield_fee: 0x7969656c645f666565\n        setConfig(\"yield_fee\", receiver, 2000); //  20%\n        // borrow_fee: 0x626f72726f775f666565\n        setConfig(\"borrow_fee\", receiver, 50); // 0.5%\n        // repay_fee: 0x72657061795f666565\n        setConfig(\"repay_fee\", receiver, 100); // 1%\n\n        setConfig(\"withdraw_fee\", receiver, 50); // 0.5%\n        // setConfig(\"liq_fee\", receiver, 100);  // 0%\n    }\n\n    function setConfig(\n        bytes32 _key,\n        address _receiver,\n        uint16 _rate\n    ) public onlyOwner {\n        require(_receiver != address(0), \"INVALID_RECEIVE\");\n        ReceiverRate storage conf = configs[_key];\n        conf.receiver = _receiver;\n        conf.rate = _rate;\n        emit SetConfig(_key, _receiver, _rate);\n    }\n\n    function getConfig(bytes32 _key) external view returns (address, uint256) {\n        ReceiverRate memory conf = configs[_key];\n        return (conf.receiver, conf.rate);\n    }\n}\n"
    },
    "contracts/DYTokenNative.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./libs/TransferHelper.sol\";\n\nimport \"./DYTokenBase.sol\";\nimport \"./interfaces/IVault.sol\";\nimport \"./interfaces/IDepositVault.sol\";\n\nimport \"./interfaces/IWETH.sol\";\n\ncontract DYTokenNative is DYTokenBase {\n    using SafeERC20 for IERC20;\n\n    // _underlying is WETH WBNB\n    constructor(\n        address _underlying,\n        string memory _symbol,\n        address _controller\n    ) DYTokenBase(_underlying, _symbol, _controller) {}\n\n    receive() external payable {\n        assert(msg.sender == underlying);\n        // only accept ETH via fallback from the WETH contract\n    }\n\n    function depositCoin(address _to, address _toVault) public payable override {\n        uint256 total = underlyingTotal();\n        uint256 amount = msg.value;\n\n        IWETH(underlying).deposit{ value: amount }();\n\n        uint256 shares = 0;\n        if (totalSupply() == 0) {\n            require(amount >= 10000, \"too small\");\n            shares = amount;\n        } else {\n            shares = (amount * totalSupply()) / total;\n        }\n\n        require(shares > 0, \"ZERO_SHARE\");\n        if (_toVault != address(0)) {\n            require(_toVault == IController(controller).dyTokenVaults(address(this)), \"mismatch dToken vault\");\n            _mint(_toVault, shares);\n            IDepositVault(_toVault).syncDeposit(address(this), shares, _to);\n        } else {\n            _mint(_to, shares);\n        }\n\n        earn();\n    }\n\n    function deposit(uint256 _amount, address _toVault) external override {\n        depositTo(msg.sender, _amount, _toVault);\n    }\n\n    function depositTo(\n        address _to,\n        uint256 _amount,\n        address _toVault\n    ) public override {\n        uint256 total = underlyingTotal();\n        IERC20(underlying).safeTransferFrom(msg.sender, address(this), _amount);\n\n        uint256 shares = 0;\n        if (totalSupply() == 0) {\n            require(_amount >= 10000, \"too small\");\n            // permanently lock the first MINIMUM_SUPPLY tokens\n            _mint(controller, MINIMUM_SUPPLY);\n            shares = _amount;\n        } else {\n            shares = (_amount * totalSupply()) / total;\n        }\n\n        require(shares > 0, \"ZERO_SHARE\");\n        //\n        if (_toVault != address(0)) {\n            require(_toVault == IController(controller).dyTokenVaults(address(this)), \"mismatch dToken vault\");\n            _mint(_toVault, shares);\n            IDepositVault(_toVault).syncDeposit(address(this), shares, _to);\n        } else {\n            _mint(_to, shares);\n        }\n\n        earn();\n    }\n\n    function withdraw(\n        address _to,\n        uint256 _shares,\n        bool needETH\n    ) public override {\n        require(_shares > 0, \"shares need > 0\");\n        require(totalSupply() > 0, \"no deposit\");\n\n        uint256 r = (underlyingTotal() * _shares) / totalSupply();\n        _burn(msg.sender, _shares);\n\n        uint256 b = IERC20(underlying).balanceOf(address(this));\n        // need withdraw from strategy\n        if (b < r) {\n            uint256 withdrawAmount = r - b;\n\n            address strategy = IController(controller).strategies(underlying);\n            if (strategy != address(0)) {\n                IStrategy(strategy).withdraw(withdrawAmount);\n            }\n\n            uint256 withdrawed = IERC20(underlying).balanceOf(address(this)) - b;\n            if (withdrawed < withdrawAmount) {\n                r = b + withdrawed;\n            }\n        }\n\n        if (needETH) {\n            IWETH(underlying).withdraw(r);\n            TransferHelper.safeTransferETH(_to, r);\n        } else {\n            IERC20(underlying).safeTransfer(_to, r);\n        }\n    }\n\n    function earn() public override {\n        uint256 b = IERC20(underlying).balanceOf(address(this));\n\n        address strategy = IController(controller).strategies(underlying);\n        if (strategy != address(0)) {\n            IERC20(underlying).safeTransfer(strategy, b);\n            IStrategy(strategy).deposit();\n        }\n    }\n}\n"
    },
    "contracts/libs/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.6.0;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper::safeApprove: approve failed\"\n        );\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper::safeTransfer: transfer failed\"\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            \"TransferHelper::transferFrom: transferFrom failed\"\n        );\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{ value: value }(new bytes(0));\n        require(success, \"TransferHelper::safeTransferETH: ETH transfer failed\");\n    }\n}\n"
    },
    "contracts/dTokens/dXAU.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport { ERC20Permit } from \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\";\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport \"../interfaces/TokenRecipient.sol\";\n\ncontract dXAU is ERC20, ERC20Permit, Ownable {\n    using Address for address;\n\n    mapping(address => bool) public miners;\n\n    event MinerChanged(address indexed miner, bool enabled);\n\n    constructor() ERC20(\"Duet XAU\", \"dXAU\") ERC20Permit(\"Duet XAU\") {\n        _mint(msg.sender, 0);\n    }\n\n    function addMiner(address _miner) public onlyOwner {\n        miners[_miner] = true;\n        emit MinerChanged(_miner, true);\n    }\n\n    function removeMiner(address _miner) public onlyOwner {\n        miners[_miner] = false;\n        emit MinerChanged(_miner, false);\n    }\n\n    function mint(address to, uint256 amount) public {\n        require(miners[msg.sender], \"invalid miner\");\n        _mint(to, amount);\n    }\n\n    function burn(uint256 amount) public {\n        _burn(msg.sender, amount);\n    }\n\n    function send(\n        address recipient,\n        uint256 amount,\n        bytes calldata exData\n    ) external returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n\n        if (recipient.isContract()) {\n            bool rv = TokenRecipient(recipient).tokensReceived(msg.sender, amount, exData);\n            require(rv, \"No tokensReceived\");\n        }\n\n        return true;\n    }\n}\n"
    },
    "contracts/dTokens/dWTI.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport { ERC20Permit } from \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\";\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport \"../interfaces/TokenRecipient.sol\";\n\ncontract dWTI is ERC20, ERC20Permit, Ownable {\n    using Address for address;\n\n    mapping(address => bool) public miners;\n\n    event MinerChanged(address indexed miner, bool enabled);\n\n    constructor() ERC20(\"Duet WTI\", \"dWTI\") ERC20Permit(\"Duet WTI\") {\n        _mint(msg.sender, 0);\n    }\n\n    function addMiner(address _miner) public onlyOwner {\n        miners[_miner] = true;\n        emit MinerChanged(_miner, true);\n    }\n\n    function removeMiner(address _miner) public onlyOwner {\n        miners[_miner] = false;\n        emit MinerChanged(_miner, false);\n    }\n\n    function mint(address to, uint256 amount) public {\n        require(miners[msg.sender], \"invalid miner\");\n        _mint(to, amount);\n    }\n\n    function burn(uint256 amount) public {\n        _burn(msg.sender, amount);\n    }\n\n    function send(\n        address recipient,\n        uint256 amount,\n        bytes calldata exData\n    ) external returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n\n        if (recipient.isContract()) {\n            bool rv = TokenRecipient(recipient).tokensReceived(msg.sender, amount, exData);\n            require(rv, \"No tokensReceived\");\n        }\n\n        return true;\n    }\n}\n"
    },
    "contracts/dTokens/dTMC.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport { ERC20Permit } from \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\";\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport \"../interfaces/TokenRecipient.sol\";\n\ncontract dTMC is ERC20, ERC20Permit, Ownable {\n    using Address for address;\n\n    mapping(address => bool) public miners;\n\n    event MinerChanged(address indexed miner, bool enabled);\n\n    constructor() ERC20(\"Duet TMC\", \"dTMC\") ERC20Permit(\"Duet TMC\") {\n        _mint(msg.sender, 0);\n    }\n\n    function addMiner(address _miner) public onlyOwner {\n        miners[_miner] = true;\n        emit MinerChanged(_miner, true);\n    }\n\n    function removeMiner(address _miner) public onlyOwner {\n        miners[_miner] = false;\n        emit MinerChanged(_miner, false);\n    }\n\n    function mint(address to, uint256 amount) public {\n        require(miners[msg.sender], \"invalid miner\");\n        _mint(to, amount);\n    }\n\n    function burn(uint256 amount) public {\n        _burn(msg.sender, amount);\n    }\n\n    function send(\n        address recipient,\n        uint256 amount,\n        bytes calldata exData\n    ) external returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n\n        if (recipient.isContract()) {\n            bool rv = TokenRecipient(recipient).tokensReceived(msg.sender, amount, exData);\n            require(rv, \"No tokensReceived\");\n        }\n\n        return true;\n    }\n}\n"
    },
    "contracts/vault/BTCMintVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"./MintVault.sol\";\n\ncontract BTCMintVault is MintVault {\n    // TODO: ‰∏çÂêåÁöÑdAsset ÂèØ‰ª•ÂèØËÉΩÊúâ‰∏çÂêåÁöÑÂÆûÁé∞mint„ÄÇ\n    function underlyingBurn(uint256 amount) internal virtual override {\n        IDUSD(underlying).burnme(amount);\n    }\n}\n"
    },
    "contracts/mock/ApyHelper.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../interfaces/IMasterChef.sol\";\nimport \"../interfaces/IUSDOracle.sol\";\nimport \"../interfaces/IPair.sol\";\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { IERC20Metadata } from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\ncontract ApyHelper {\n    IMasterChef public masterChef;\n    IUSDOracle public usdOracle;\n    address public cake;\n\n    constructor(\n        IMasterChef _chef,\n        IUSDOracle _usdOracle,\n        address _cake\n    ) {\n        masterChef = _chef;\n        usdOracle = _usdOracle;\n        cake = _cake;\n    }\n\n    function lpPrice(address lpToken) public view returns (uint256 price) {\n        uint256 lpSupply = IERC20(lpToken).totalSupply();\n        address token0 = IPair(lpToken).token0();\n        address token1 = IPair(lpToken).token1();\n        (uint112 reserve0, uint112 reserve1, ) = IPair(lpToken).getReserves();\n        uint256 amount0 = (uint256(reserve0) * 10**18) / lpSupply;\n        uint256 amount1 = (uint256(reserve1) * 10**18) / lpSupply;\n\n        uint256 price0 = usdOracle.getPrice(token0);\n        uint256 price1 = usdOracle.getPrice(token1);\n\n        uint256 decimal0 = IERC20Metadata(token0).decimals();\n        uint256 decimal0Scale = 10**decimal0;\n\n        uint256 decimal1 = IERC20Metadata(token1).decimals();\n        uint256 decimal1Scale = 10**decimal1;\n\n        return ((amount0 * price0) / decimal0Scale) + ((amount1 * price1) / decimal1Scale);\n    }\n\n    function lpApyInfo(uint256 pid)\n        public\n        view\n        returns (\n            uint256 takingTokenPrice,\n            uint256 rewardTokenPrice,\n            uint256 totalStaked,\n            uint256 tokenPerBlock\n        )\n    {\n        (address lpToken, uint256 allocPoint, , ) = masterChef.poolInfo(pid);\n\n        takingTokenPrice = lpPrice(lpToken);\n\n        rewardTokenPrice = usdOracle.getPrice(cake);\n\n        totalStaked = IERC20(lpToken).balanceOf(address(masterChef));\n        uint256 cakeTotal = masterChef.cakePerBlock();\n        uint256 totalAlloc = masterChef.totalAllocPoint();\n\n        tokenPerBlock = (allocPoint * cakeTotal) / totalAlloc;\n    }\n}\n"
    },
    "contracts/oracle/ZeroUSDOracle.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"../interfaces/IUSDOracle.sol\";\n\ncontract ZeroUSDOracle is IUSDOracle {\n    function getPrice(address token) external view returns (uint256) {\n        return 0;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}