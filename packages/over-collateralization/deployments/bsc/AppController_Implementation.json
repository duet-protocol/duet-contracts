{
  "address": "0xfa4bA795b951151EA899c616BB16E45324660484",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "AllowedLiquidatorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralRate",
          "type": "uint256"
        }
      ],
      "name": "CollateralRateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "dToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldVault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newVault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vtype",
          "type": "uint256"
        }
      ],
      "name": "DTokenVaultChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usdValue",
          "type": "uint256"
        }
      ],
      "name": "DepositVaultReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sourceVault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sourceAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "targetVault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetAmount",
          "type": "uint256"
        }
      ],
      "name": "DepositVaultSwapped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum IController.ValidVault",
          "name": "state",
          "type": "uint8"
        }
      ],
      "name": "InitValidVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidateRate",
          "type": "uint256"
        }
      ],
      "name": "LiquidateRateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usdValue",
          "type": "uint256"
        }
      ],
      "name": "MintVaultReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "open",
          "type": "bool"
        }
      ],
      "name": "OpenLiquidateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum IController.ValidVault",
          "name": "state",
          "type": "uint8"
        }
      ],
      "name": "SetValidVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "enabled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableDeposit",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableWithdraw",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableBorrow",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableRepay",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableLiquidate",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct AppController.VaultState",
          "name": "state",
          "type": "tuple"
        }
      ],
      "name": "SetVaultStates",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldDToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newDToken",
          "type": "address"
        }
      ],
      "name": "UnderlyingDTokenChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldStrage",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newDToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stype",
          "type": "uint256"
        }
      ],
      "name": "UnderlyingStrategyChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "discount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "premium",
          "type": "uint256"
        }
      ],
      "name": "ValueConfChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expectedUsdValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releasedUsdValue",
          "type": "uint256"
        }
      ],
      "name": "VaultsReleased",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedLiquidator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "beforeBorrow",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "beforeDeposit",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_repayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "beforeRepay",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "beforeWithdraw",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "dyTokenVaults",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "dyTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        }
      ],
      "name": "emergencyWithdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isDepositVault",
          "type": "bool"
        }
      ],
      "name": "exitVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        }
      ],
      "name": "getValueConf",
      "outputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "dr",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "pr",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        }
      ],
      "name": "getValueConfs",
      "outputs": [
        {
          "internalType": "address",
          "name": "oracle0",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "dr0",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "pr0",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "oracle1",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "dr1",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "pr1",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_vault",
          "type": "address[]"
        },
        {
          "internalType": "enum IController.ValidVault[]",
          "name": "_state",
          "type": "uint8[]"
        }
      ],
      "name": "initValidVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "isNeedLiquidate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOpenLiquidate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isDepositVault",
          "type": "bool"
        }
      ],
      "name": "joinVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidateRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "maxBorrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator_",
          "type": "address"
        },
        {
          "internalType": "contract IVault[]",
          "name": "mintVaults_",
          "type": "address[]"
        }
      ],
      "name": "releaseMintVaults",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator_",
          "type": "address"
        }
      ],
      "name": "releaseZeroValueVaults",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_collateralRate",
          "type": "uint256"
        }
      ],
      "name": "setCollateralRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dToken",
          "type": "address"
        }
      ],
      "name": "setDYToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_liquidateRate",
          "type": "uint256"
        }
      ],
      "name": "setLiquidateRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_open",
          "type": "bool"
        }
      ],
      "name": "setOpenLiquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_discount",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_premium",
          "type": "uint16"
        }
      ],
      "name": "setOracles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stype",
          "type": "uint256"
        }
      ],
      "name": "setStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_vault",
          "type": "address[]"
        },
        {
          "internalType": "enum IController.ValidVault[]",
          "name": "_state",
          "type": "uint8[]"
        }
      ],
      "name": "setValidVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dyToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "vtype",
          "type": "uint256"
        }
      ],
      "name": "setVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "enabled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableDeposit",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableWithdraw",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableBorrow",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableRepay",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableLiquidate",
              "type": "bool"
            }
          ],
          "internalType": "struct AppController.VaultState",
          "name": "_state",
          "type": "tuple"
        }
      ],
      "name": "setVaultStates",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "strategies",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator_",
          "type": "address"
        },
        {
          "internalType": "contract IVault[]",
          "name": "sourceVaults_",
          "type": "address[]"
        },
        {
          "internalType": "contract IVault[]",
          "name": "targetVaults_",
          "type": "address[]"
        }
      ],
      "name": "swapUserDepositVaults",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "updateAllowedLiquidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isDepositVault",
          "type": "bool"
        }
      ],
      "name": "userJoinedVaultCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isDepositVault",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "userJoinedVaultInfoAt",
      "outputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "enabled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableDeposit",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableWithdraw",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableBorrow",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableRepay",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableLiquidate",
              "type": "bool"
            }
          ],
          "internalType": "struct AppController.VaultState",
          "name": "state",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "contract IVault",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "_amount",
          "type": "int256"
        },
        {
          "internalType": "bool",
          "name": "_dp",
          "type": "bool"
        }
      ],
      "name": "userPendingValues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pendingDepositValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingBrorowValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "contract IVault",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "_amount",
          "type": "int256"
        },
        {
          "internalType": "bool",
          "name": "_dp",
          "type": "bool"
        }
      ],
      "name": "userTotalPendingValues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pendingDepositValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingBrorowValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_dp",
          "type": "bool"
        }
      ],
      "name": "userTotalValues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalDepositValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalBorrowValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_dp",
          "type": "bool"
        }
      ],
      "name": "userValues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalDepositValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalBorrowValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "validVaults",
      "outputs": [
        {
          "internalType": "enum IController.ValidVault",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "validVaultsOfUser",
      "outputs": [
        {
          "internalType": "enum IController.ValidVault",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vaultStates",
      "outputs": [
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "enableDeposit",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "enableWithdraw",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "enableBorrow",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "enableRepay",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "enableLiquidate",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4b33b1e94347b54a7d5cd872b449b57d6603d4043386f05efcf81907d06730f7",
  "receipt": {
    "to": null,
    "from": "0xB3e74e2F2a3160b4BB25cfD683F6080d8D28BB3A",
    "contractAddress": "0xfa4bA795b951151EA899c616BB16E45324660484",
    "transactionIndex": 167,
    "gasUsed": "4443497",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x5a2f8eb8178cbf54216193928a7cc7e3a46781a36777c4f809f17ab88078f2d1",
    "transactionHash": "0x4b33b1e94347b54a7d5cd872b449b57d6603d4043386f05efcf81907d06730f7",
    "logs": [],
    "blockNumber": 20349254,
    "cumulativeGasUsed": "22087676",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bd640888a598675b6d369327b02f7e3e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"AllowedLiquidatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralRate\",\"type\":\"uint256\"}],\"name\":\"CollateralRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vtype\",\"type\":\"uint256\"}],\"name\":\"DTokenVaultChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdValue\",\"type\":\"uint256\"}],\"name\":\"DepositVaultReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"}],\"name\":\"DepositVaultSwapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IController.ValidVault\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"InitValidVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidateRate\",\"type\":\"uint256\"}],\"name\":\"LiquidateRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdValue\",\"type\":\"uint256\"}],\"name\":\"MintVaultReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"}],\"name\":\"OpenLiquidateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IController.ValidVault\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"SetValidVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableDeposit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableWithdraw\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableBorrow\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableRepay\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableLiquidate\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct AppController.VaultState\",\"name\":\"state\",\"type\":\"tuple\"}],\"name\":\"SetVaultStates\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldDToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDToken\",\"type\":\"address\"}],\"name\":\"UnderlyingDTokenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldStrage\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stype\",\"type\":\"uint256\"}],\"name\":\"UnderlyingStrategyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"discount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"}],\"name\":\"ValueConfChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expectedUsdValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releasedUsdValue\",\"type\":\"uint256\"}],\"name\":\"VaultsReleased\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedLiquidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"beforeBorrow\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"beforeDeposit\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_repayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"beforeRepay\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"beforeWithdraw\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dyTokenVaults\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dyTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"}],\"name\":\"emergencyWithdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDepositVault\",\"type\":\"bool\"}],\"name\":\"exitVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"}],\"name\":\"getValueConf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"dr\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"pr\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"getValueConfs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oracle0\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"dr0\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"pr0\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"oracle1\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"dr1\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"pr1\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_vault\",\"type\":\"address[]\"},{\"internalType\":\"enum IController.ValidVault[]\",\"name\":\"_state\",\"type\":\"uint8[]\"}],\"name\":\"initValidVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"isNeedLiquidate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOpenLiquidate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDepositVault\",\"type\":\"bool\"}],\"name\":\"joinVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidateRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"maxBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator_\",\"type\":\"address\"},{\"internalType\":\"contract IVault[]\",\"name\":\"mintVaults_\",\"type\":\"address[]\"}],\"name\":\"releaseMintVaults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator_\",\"type\":\"address\"}],\"name\":\"releaseZeroValueVaults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collateralRate\",\"type\":\"uint256\"}],\"name\":\"setCollateralRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dToken\",\"type\":\"address\"}],\"name\":\"setDYToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidateRate\",\"type\":\"uint256\"}],\"name\":\"setLiquidateRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_open\",\"type\":\"bool\"}],\"name\":\"setOpenLiquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_discount\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_premium\",\"type\":\"uint16\"}],\"name\":\"setOracles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stype\",\"type\":\"uint256\"}],\"name\":\"setStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_vault\",\"type\":\"address[]\"},{\"internalType\":\"enum IController.ValidVault[]\",\"name\":\"_state\",\"type\":\"uint8[]\"}],\"name\":\"setValidVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vtype\",\"type\":\"uint256\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableDeposit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableWithdraw\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableBorrow\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableRepay\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableLiquidate\",\"type\":\"bool\"}],\"internalType\":\"struct AppController.VaultState\",\"name\":\"_state\",\"type\":\"tuple\"}],\"name\":\"setVaultStates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator_\",\"type\":\"address\"},{\"internalType\":\"contract IVault[]\",\"name\":\"sourceVaults_\",\"type\":\"address[]\"},{\"internalType\":\"contract IVault[]\",\"name\":\"targetVaults_\",\"type\":\"address[]\"}],\"name\":\"swapUserDepositVaults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"updateAllowedLiquidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDepositVault\",\"type\":\"bool\"}],\"name\":\"userJoinedVaultCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDepositVault\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"userJoinedVaultInfoAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableDeposit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableWithdraw\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableBorrow\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableRepay\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableLiquidate\",\"type\":\"bool\"}],\"internalType\":\"struct AppController.VaultState\",\"name\":\"state\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"contract IVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"_amount\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"_dp\",\"type\":\"bool\"}],\"name\":\"userPendingValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingDepositValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingBrorowValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"contract IVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"_amount\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"_dp\",\"type\":\"bool\"}],\"name\":\"userTotalPendingValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingDepositValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingBrorowValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_dp\",\"type\":\"bool\"}],\"name\":\"userTotalValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalDepositValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_dp\",\"type\":\"bool\"}],\"name\":\"userValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalDepositValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"validVaults\",\"outputs\":[{\"internalType\":\"enum IController.ValidVault\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"validVaultsOfUser\",\"outputs\":[{\"internalType\":\"enum IController.ValidVault\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultStates\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableDeposit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableWithdraw\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableBorrow\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableRepay\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableLiquidate\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"beforeBorrow(address,address,uint256)\":{\"params\":{\"_amount\":\"loan amount\",\"_user\":\"borrower\",\"_vault\":\"address of loan market\"}},\"beforeDeposit(address,address,uint256)\":{\"params\":{\"_vault\":\"address of deposit market param  _amount deposit amount\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"userPendingValues(address,address,int256,bool)\":{\"params\":{\"_amount\":\"the amount of deposits or withdrawals\",\"_dp\":\"discount or premium\",\"_user\":\"depositors\",\"_vault\":\"target vault\"}},\"userTotalPendingValues(address,address,int256,bool)\":{\"params\":{\"_amount\":\"the amount of deposits or withdrawals\",\"_dp\":\"discount or premium\",\"_user\":\"depositors\",\"_vault\":\"target vault\"}},\"userTotalValues(address,bool)\":{\"params\":{\"_dp\":\"discount or premium\",\"_user\":\"depositors\"}},\"userValues(address,bool)\":{\"params\":{\"_dp\":\"discount or premium\",\"_user\":\"depositors\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"beforeBorrow(address,address,uint256)\":{\"notice\":\"Risk control check before borrowing\"},\"beforeDeposit(address,address,uint256)\":{\"notice\":\"Risk control check before deposit param _user depositors\"},\"isNeedLiquidate(address)\":{\"notice\":\"determine whether the borrower needs to be liquidated\"},\"maxBorrow(address,address)\":{\"notice\":\"maximum that a user can borrow from a Vault\"},\"userPendingValues(address,address,int256,bool)\":{\"notice\":\"predict total valid vault value after the user operating vault (i.e., Vault of deposit only counts collateral)\"},\"userTotalPendingValues(address,address,int256,bool)\":{\"notice\":\"predict total vault value after the user operating Vault\"},\"userTotalValues(address,bool)\":{\"notice\":\"Get user total Vault value\"},\"userValues(address,bool)\":{\"notice\":\"Get user total valid Vault value (i.e., Vault of deposit only counts collateral)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AppController.sol\":\"AppController\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/AppController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/IDepositVault.sol\\\";\\nimport \\\"./interfaces/IMintVault.sol\\\";\\nimport \\\"./interfaces/IController.sol\\\";\\nimport \\\"./interfaces/IStrategy.sol\\\";\\nimport \\\"./Constants.sol\\\";\\n\\ncontract AppController is Constants, IController, OwnableUpgradeable {\\n\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n  using SafeERC20 for IERC20;\\n\\n  uint constant JOINED_VAULT_LIMIT = 20;\\n\\n  // underlying => dToken\\n  mapping(address => address) public override dyTokens;\\n  // underlying => IStratege\\n  mapping(address => address) public strategies;\\n\\n  struct ValueConf {\\n    address oracle;\\n    uint16 dr;  // discount rate\\n    uint16 pr;  // premium rate\\n  }\\n\\n  // underlying => orcale\\n  mapping(address => ValueConf) internal valueConfs;\\n\\n  //  dyToken => vault\\n  mapping(address => address) public override dyTokenVaults;\\n\\n  // user => vaults\\n  mapping(address => EnumerableSet.AddressSet) internal userJoinedDepositVaults;\\n\\n  mapping(address => EnumerableSet.AddressSet) internal userJoinedBorrowVaults;\\n\\n  // manage Vault state for risk control\\n  struct VaultState {\\n    bool enabled;\\n    bool enableDeposit;\\n    bool enableWithdraw;\\n    bool enableBorrow;\\n    bool enableRepay;\\n    bool enableLiquidate;\\n  }\\n\\n  // Vault => VaultStatus\\n  mapping(address => VaultState) public vaultStates;\\n\\n\\n  // depost value / borrow value >= liquidateRate\\n  uint public liquidateRate;\\n  uint public collateralRate;\\n\\n  // is anyone can call Liquidate.\\n  bool public isOpenLiquidate;\\n\\n  mapping(address => bool) public allowedLiquidator;\\n\\n  // vault => ValidVault\\n  // Initialize once\\n  mapping(address => ValidVault) public override validVaults;\\n\\n  // vault => user => ValidVault\\n  // set by user\\n  mapping(address => mapping(address => ValidVault)) public override validVaultsOfUser;\\n\\n\\n  // EVENT\\n  event UnderlyingDTokenChanged(address indexed underlying, address oldDToken, address newDToken);\\n  event UnderlyingStrategyChanged(address indexed underlying, address oldStrage, address newDToken, uint stype);\\n  event DTokenVaultChanged(address indexed dToken, address oldVault, address newVault, uint vtype);\\n\\n  event ValueConfChanged(address indexed underlying, address oracle, uint discount, uint premium);\\n\\n  event LiquidateRateChanged(uint liquidateRate);\\n  event CollateralRateChanged(uint collateralRate);\\n\\n  event OpenLiquidateChanged(bool open);\\n  event AllowedLiquidatorChanged(address liquidator, bool allowed);\\n\\n  event SetVaultStates(address vault, VaultState state);\\n\\n  event InitValidVault(address vault, ValidVault state);\\n  event SetValidVault(address vault, address user, ValidVault state);\\n\\n  event MintVaultReleased(address indexed user, address vault, uint256 amount, uint256 usdValue);\\n  event DepositVaultReleased(address indexed user, address vault, uint256 amount, uint256 usdValue);\\n  event VaultsReleased(address indexed user, uint256 expectedUsdValue, uint256 releasedUsdValue);\\n  event DepositVaultSwapped(address indexed user, address sourceVault, uint256 sourceAmount, address targetVault, uint256 targetAmount);\\n\\n  constructor() {\\n  }\\n\\n  function initialize() external initializer {\\n    OwnableUpgradeable.__Ownable_init();\\n    liquidateRate = 11000;\\n    // PercentBase * 1.1;\\n    collateralRate = 13000;\\n    // PercentBase * 1.3;\\n    isOpenLiquidate = true;\\n  }\\n\\n  // ======  yield =======\\n  function setDYToken(address _underlying, address _dToken) external onlyOwner {\\n    require(_dToken != address(0), \\\"INVALID_DTOKEN\\\");\\n    address oldDToken = dyTokens[_underlying];\\n    dyTokens[_underlying] = _dToken;\\n    emit UnderlyingDTokenChanged(_underlying, oldDToken, _dToken);\\n  }\\n\\n\\n  // set or update strategy\\n  // stype: 1: pancakeswap\\n  function setStrategy(address _underlying, address _strategy, uint stype) external onlyOwner {\\n    require(_strategy != address(0), \\\"Strategies Disabled\\\");\\n\\n    address _current = strategies[_underlying];\\n    if (_current != address(0)) {\\n      IStrategy(_current).withdrawAll();\\n    }\\n    strategies[_underlying] = _strategy;\\n\\n    emit UnderlyingStrategyChanged(_underlying, _current, _strategy, stype);\\n  }\\n\\n  function emergencyWithdrawAll(address _underlying) public onlyOwner {\\n    IStrategy(strategies[_underlying]).withdrawAll();\\n  }\\n\\n  // ======  vault  =======\\n  function setOpenLiquidate(bool _open) external onlyOwner {\\n    isOpenLiquidate = _open;\\n    emit OpenLiquidateChanged(_open);\\n  }\\n\\n  function updateAllowedLiquidator(address liquidator, bool allowed) external onlyOwner {\\n    allowedLiquidator[liquidator] = allowed;\\n    emit AllowedLiquidatorChanged(liquidator, allowed);\\n  }\\n\\n  function setLiquidateRate(uint _liquidateRate) external onlyOwner {\\n    liquidateRate = _liquidateRate;\\n    emit LiquidateRateChanged(liquidateRate);\\n  }\\n\\n  function setCollateralRate(uint _collateralRate) external onlyOwner {\\n    collateralRate = _collateralRate;\\n    emit CollateralRateChanged(collateralRate);\\n  }\\n\\n  // @dev set different oracle\\u3001 discount rate and premium rate for each underlying asset\\n  function setOracles(address _underlying, address _oracle, uint16 _discount, uint16 _premium) external onlyOwner {\\n    require(_oracle != address(0), \\\"INVALID_ORACLE\\\");\\n    require(_discount <= PercentBase, \\\"DISCOUT_TOO_BIG\\\");\\n    require(_premium >= PercentBase, \\\"PREMIUM_TOO_SMALL\\\");\\n\\n    ValueConf storage conf = valueConfs[_underlying];\\n    conf.oracle = _oracle;\\n    conf.dr = _discount;\\n    conf.pr = _premium;\\n\\n    emit ValueConfChanged(_underlying, _oracle, _discount, _premium);\\n  }\\n\\n  function getValueConfs(address token0, address token1) external view returns (\\n    address oracle0, uint16 dr0, uint16 pr0,\\n    address oracle1, uint16 dr1, uint16 pr1) {\\n    (oracle0, dr0, pr0) = getValueConf(token0);\\n    (oracle1, dr1, pr1) = getValueConf(token1);\\n  }\\n\\n  // get DiscountRate and PremiumRate\\n  function getValueConf(address _underlying) public view returns (address oracle, uint16 dr, uint16 pr) {\\n    ValueConf memory conf = valueConfs[_underlying];\\n    oracle = conf.oracle;\\n    dr = conf.dr;\\n    pr = conf.pr;\\n  }\\n\\n  // vtype 1 : for deposit vault 2: for mint vault\\n  function setVault(address _dyToken, address _vault, uint vtype) external onlyOwner {\\n    require(IVault(_vault).isDuetVault(), \\\"INVALIE_VALUT\\\");\\n    address old = dyTokenVaults[_dyToken];\\n    dyTokenVaults[_dyToken] = _vault;\\n    emit DTokenVaultChanged(_dyToken, old, _vault, vtype);\\n  }\\n\\n  function joinVault(address _user, bool isDepositVault) external {\\n    address vault = msg.sender;\\n    require(vaultStates[vault].enabled || vaultStates[vault].enableLiquidate, \\\"INVALID_CALLER\\\");\\n\\n    EnumerableSet.AddressSet storage set = isDepositVault ? userJoinedDepositVaults[_user] : userJoinedBorrowVaults[_user];\\n    require(set.length() < JOINED_VAULT_LIMIT, \\\"JOIN_TOO_MUCH\\\");\\n    set.add(vault);\\n  }\\n\\n  function exitVault(address _user, bool isDepositVault) external {\\n    address vault = msg.sender;\\n    require(vaultStates[vault].enabled || vaultStates[vault].enableLiquidate, \\\"INVALID_CALLER\\\");\\n\\n    EnumerableSet.AddressSet storage set = isDepositVault ? userJoinedDepositVaults[_user] : userJoinedBorrowVaults[_user];\\n    set.remove(vault);\\n  }\\n\\n  function setVaultStates(address _vault, VaultState memory _state) external onlyOwner {\\n    vaultStates[_vault] = _state;\\n    emit SetVaultStates(_vault, _state);\\n  }\\n\\n  function initValidVault(address[] memory _vault, ValidVault[] memory _state) external onlyOwner {\\n    uint len1 = _vault.length;\\n    uint len2 = _state.length;\\n    require(len1 == len2 && len1 != 0, \\\"INVALID_PARAM\\\");\\n    for (uint i = 0; i < len1; i++) {\\n      require(validVaults[_vault[i]] == ValidVault.UnInit, \\\"SET_ONLY_ONCE\\\");\\n      require(_state[i] == ValidVault.Yes || _state[i] == ValidVault.No, \\\"INVALID_VALUE\\\");\\n      validVaults[_vault[i]] = _state[i];\\n      emit InitValidVault(_vault[i], _state[i]);\\n    }\\n  }\\n\\n  function setValidVault(address[] memory _vault, ValidVault[] memory _state) external {\\n    address user = msg.sender;\\n    uint len1 = _vault.length;\\n    uint len2 = _state.length;\\n    require(len1 == len2 && len1 != 0, \\\"INVALID_PARAM\\\");\\n    for (uint i = 0; i < len1; i++) {\\n      require(_state[i] == ValidVault.Yes || _state[i] == ValidVault.No, \\\"INVALID_VALUE\\\");\\n      validVaultsOfUser[_vault[i]][user] = _state[i];\\n      emit SetValidVault(_vault[i], user, _state[i]);\\n    }\\n\\n    uint totalDepositValue = accValidVaultVaule(user, true);\\n    uint totalBorrowValue = accVaultVaule(user, userJoinedBorrowVaults[user], true);\\n    uint validValue = totalDepositValue * PercentBase / collateralRate;\\n    require(totalDepositValue * PercentBase >= totalBorrowValue * collateralRate, \\\"SETVALIDVAULT: LOW_COLLATERAL\\\");\\n  }\\n\\n  function userJoinedVaultInfoAt(address _user, bool isDepositVault, uint256 index) external view returns (address vault, VaultState memory state) {\\n    EnumerableSet.AddressSet storage set = isDepositVault ? userJoinedDepositVaults[_user] : userJoinedBorrowVaults[_user];\\n    vault = set.at(index);\\n    state = vaultStates[vault];\\n  }\\n\\n  function userJoinedVaultCount(address _user, bool isDepositVault) external view returns (uint256) {\\n    return isDepositVault ? userJoinedDepositVaults[_user].length() : userJoinedBorrowVaults[_user].length();\\n  }\\n\\n  /**\\n  * @notice  maximum that a user can borrow from a Vault\\n  */\\n  function maxBorrow(address _user, address vault) public view returns (uint) {\\n    uint totalDepositValue = accValidVaultVaule(_user, true);\\n    uint totalBorrowValue = accVaultVaule(_user, userJoinedBorrowVaults[_user], true);\\n\\n    uint validValue = totalDepositValue * PercentBase / collateralRate;\\n    if (validValue > totalBorrowValue) {\\n      uint canBorrowValue = validValue - totalBorrowValue;\\n      return IMintVault(vault).valueToAmount(canBorrowValue, true);\\n    } else {\\n      return 0;\\n    }\\n\\n  }\\n\\n  /**\\n    * @notice Get user total valid Vault value (i.e., Vault of deposit only counts collateral)\\n    * @param  _user depositors\\n    * @param _dp  discount or premium\\n    */\\n  function userValues(address _user, bool _dp) public view override returns (uint totalDepositValue, uint totalBorrowValue) {\\n    totalDepositValue = accValidVaultVaule(_user, _dp);\\n    totalBorrowValue = accVaultVaule(_user, userJoinedBorrowVaults[_user], _dp);\\n  }\\n\\n  /**\\n    * @notice  Get user total Vault value\\n    * @param  _user depositors\\n    * @param _dp  discount or premium\\n    */\\n  function userTotalValues(address _user, bool _dp) public view returns (uint totalDepositValue, uint totalBorrowValue) {\\n    totalDepositValue = accVaultVaule(_user, userJoinedDepositVaults[_user], _dp);\\n    totalBorrowValue = accVaultVaule(_user, userJoinedBorrowVaults[_user], _dp);\\n  }\\n\\n  /**\\n    * @notice predict total valid vault value after the user operating vault (i.e., Vault of deposit only counts collateral)\\n    * @param  _user depositors\\n    * @param  _vault target vault\\n    * @param  _amount the amount of deposits or withdrawals\\n    * @param _dp  discount or premium\\n    */\\n  function userPendingValues(address _user, IVault _vault, int _amount, bool _dp) public view returns (uint pendingDepositValue, uint pendingBrorowValue) {\\n    pendingDepositValue = accValidPendingValue(_user, _vault, _amount, _dp);\\n    pendingBrorowValue = accPendingValue(_user, userJoinedBorrowVaults[_user], _vault, _amount, _dp);\\n  }\\n\\n  /**\\n    * @notice  predict total vault value after the user operating Vault\\n    * @param  _user depositors\\n    * @param  _vault target vault\\n    * @param  _amount the amount of deposits or withdrawals\\n    * @param _dp  discount or premium\\n    */\\n  function userTotalPendingValues(address _user, IVault _vault, int _amount, bool _dp) public view returns (uint pendingDepositValue, uint pendingBrorowValue) {\\n    pendingDepositValue = accPendingValue(_user, userJoinedDepositVaults[_user], _vault, _amount, _dp);\\n    pendingBrorowValue = accPendingValue(_user, userJoinedBorrowVaults[_user], _vault, _amount, _dp);\\n  }\\n\\n  /**\\n  * @notice  determine whether the borrower needs to be liquidated\\n  */\\n  function isNeedLiquidate(address _borrower) public view returns (bool) {\\n    (uint totalDepositValue, uint totalBorrowValue) = userValues(_borrower, true);\\n    return totalDepositValue * PercentBase < totalBorrowValue * liquidateRate;\\n  }\\n\\n  /**\\n  * @dev return total value of vault\\n  *\\n  * @param _user address of user\\n  * @param set all address of vault\\n  * @param _dp Discount or Premium\\n  */\\n  function accVaultVaule(address _user, EnumerableSet.AddressSet storage set, bool _dp) internal view returns (uint totalValue) {\\n    uint len = set.length();\\n    for (uint256 i = 0; i < len; i++) {\\n      address vault = set.at(i);\\n      totalValue += IVault(vault).userValue(_user, _dp);\\n    }\\n  }\\n\\n  /**\\n  * @dev return total deposit collateral's value of vault\\n  *\\n  * @param _user address of user\\n  * @param _dp Discount or Premium\\n  */\\n  function accValidVaultVaule(address _user, bool _dp) internal view returns (uint totalValue) {\\n    EnumerableSet.AddressSet storage set = userJoinedDepositVaults[_user];\\n    uint len = set.length();\\n    for (uint256 i = 0; i < len; i++) {\\n      address vault = set.at(i);\\n      if (isCollateralizedVault(vault, _user)) {\\n        totalValue += IVault(vault).userValue(_user, _dp);\\n      }\\n    }\\n  }\\n\\n  function accPendingValue(\\n    address _user,\\n    EnumerableSet.AddressSet storage set,\\n    IVault vault,\\n    int amount,\\n    bool _dp\\n  ) internal view returns (uint totalValue) {\\n    uint len = set.length();\\n    bool existVault = false;\\n\\n    for (uint256 i = 0; i < len; i++) {\\n      IVault _vault = IVault(set.at(i));\\n\\n      if (vault == _vault) {\\n        totalValue += _vault.pendingValue(_user, amount);\\n        existVault = true;\\n      } else {\\n        totalValue += _vault.userValue(_user, _dp);\\n      }\\n    }\\n\\n    if (!existVault) {\\n      totalValue += vault.pendingValue(_user, amount);\\n    }\\n\\n  }\\n\\n  function accValidPendingValue(\\n    address _user,\\n    IVault vault,\\n    int amount,\\n    bool _dp\\n  ) internal view returns (uint totalValue) {\\n    EnumerableSet.AddressSet storage set = userJoinedDepositVaults[_user];\\n    uint len = set.length();\\n    bool existVault = false;\\n\\n    for (uint256 i = 0; i < len; i++) {\\n      IVault _vault = IVault(set.at(i));\\n\\n      if (isCollateralizedVault(address(_vault), _user)) {\\n        if (vault == _vault) {\\n          totalValue += _vault.pendingValue(_user, amount);\\n          existVault = true;\\n        } else {\\n          totalValue += _vault.userValue(_user, _dp);\\n        }\\n      }\\n    }\\n\\n    if (!existVault && isCollateralizedVault(address(vault), _user)) {\\n      totalValue += vault.pendingValue(_user, amount);\\n    }\\n  }\\n\\n\\n  /**\\n    * @notice return bool, true means the vault is as collateral to user, false is opposite\\n    * @param  _vault address of vault\\n    * @param _user   address of user\\n    */\\n  function isCollateralizedVault(address _vault, address _user) internal view returns (bool) {\\n    ValidVault _state = validVaultsOfUser[_vault][_user];\\n    ValidVault state = _state == ValidVault.UnInit ? validVaults[_vault] : _state;\\n    require(state != ValidVault.UnInit, \\\"VALIDVAULT_UNINIT\\\");\\n\\n    if (state == ValidVault.Yes) return true;\\n    // vault can be collateralized\\n    return false;\\n  }\\n\\n  /**\\n    * @notice Risk control check before deposit\\n    * param _user depositors\\n    * @param _vault address of deposit market\\n    * param  _amount deposit amount\\n    */\\n  function beforeDeposit(address, address _vault, uint) external view {\\n    VaultState memory state = vaultStates[_vault];\\n    require(state.enabled && state.enableDeposit, \\\"DEPOSITE_DISABLE\\\");\\n  }\\n\\n  /**\\n    * @notice Risk control check before borrowing\\n    * @param  _user borrower\\n    * @param _vault address of loan market\\n    * @param  _amount loan amount\\n    */\\n  function beforeBorrow(address _user, address _vault, uint256 _amount) external view {\\n    VaultState memory state = vaultStates[_vault];\\n    require(state.enabled && state.enableBorrow, \\\"BORROW_DISABLED\\\");\\n\\n    uint totalDepositValue = accValidVaultVaule(_user, true);\\n    uint pendingBrorowValue = accPendingValue(_user, userJoinedBorrowVaults[_user], IVault(_vault), int(_amount), true);\\n    require(totalDepositValue * PercentBase >= pendingBrorowValue * collateralRate, \\\"LOW_COLLATERAL\\\");\\n  }\\n\\n  function beforeWithdraw(address _user, address _vault, uint256 _amount) external view {\\n    VaultState memory state = vaultStates[_vault];\\n    require(state.enabled && state.enableWithdraw, \\\"WITHDRAW_DISABLED\\\");\\n\\n    if (isCollateralizedVault(_vault, _user)) {\\n      uint pendingDepositValidValue = accValidPendingValue(_user, IVault(_vault), int(0) - int(_amount), true);\\n      uint totalBorrowValue = accVaultVaule(_user, userJoinedBorrowVaults[_user], true);\\n      require(pendingDepositValidValue * PercentBase >= totalBorrowValue * collateralRate, \\\"LOW_COLLATERAL\\\");\\n    }\\n  }\\n\\n  function beforeRepay(address _repayer, address _vault, uint256 _amount) external view {\\n    VaultState memory state = vaultStates[_vault];\\n    require(state.enabled && state.enableRepay, \\\"REPAY_DISABLED\\\");\\n  }\\n\\n  function liquidate(address _borrower, bytes calldata data) external {\\n    address liquidator = msg.sender;\\n\\n    require(isOpenLiquidate || allowedLiquidator[liquidator], \\\"INVALID_LIQUIDATOR\\\");\\n    require(isNeedLiquidate(_borrower), \\\"COLLATERAL_ENOUGH\\\");\\n\\n    EnumerableSet.AddressSet storage set = userJoinedDepositVaults[_borrower];\\n    uint len = set.length();\\n\\n    for (uint256 i = len; i > 0; i--) {\\n      IVault v = IVault(set.at(i - 1));\\n      // liquidate valid vault\\n      if (isCollateralizedVault(address(v), _borrower)) {\\n        beforeLiquidate(_borrower, address(v));\\n        v.liquidate(liquidator, _borrower, data);\\n      }\\n    }\\n\\n    EnumerableSet.AddressSet storage set2 = userJoinedBorrowVaults[_borrower];\\n    uint len2 = set2.length();\\n\\n    for (uint256 i = len2; i > 0; i--) {\\n      IVault v = IVault(set2.at(i - 1));\\n      beforeLiquidate(_borrower, address(v));\\n      v.liquidate(liquidator, _borrower, data);\\n    }\\n  }\\n\\n  function releaseMintVaults(address user_, address liquidator_, IVault[] calldata mintVaults_) external onlyOwner {\\n    require(allowedLiquidator[liquidator_], \\\"Invalid liquidator\\\");\\n\\n    EnumerableSet.AddressSet storage depositedVaults = userJoinedDepositVaults[user_];\\n\\n    uint256 usdValueToRelease = 0;\\n    bytes memory liquidateData = abi.encodePacked(uint(0x1));\\n    // release mint vaults\\n    for (uint256 i = 0; i < mintVaults_.length; i++) {\\n      IVault v = mintVaults_[i];\\n      uint256 currentVaultUsdValue = v.userValue(user_, false);\\n      uint256 currentVaultAmount = IMintVault(address(v)).borrows(user_);\\n      usdValueToRelease += currentVaultUsdValue;\\n      v.liquidate(liquidator_, user_, liquidateData);\\n      emit MintVaultReleased(user_, address(v), currentVaultAmount, currentVaultUsdValue);\\n    }\\n\\n    // No release required\\n    if (usdValueToRelease <= 0) {\\n      return;\\n    }\\n    uint256 releasedUsdValue = 0;\\n\\n    // release deposit vaults\\n    for (uint256 i = depositedVaults.length(); i > 0; i--) {\\n      IVault v = IVault(depositedVaults.at(i - 1));\\n\\n      // invalid vault\\n      if (!isCollateralizedVault(address(v), user_) || !vaultStates[address(v)].enableLiquidate) {\\n        continue;\\n      }\\n      uint256 currentVaultUsdValue = v.userValue(user_, false);\\n      releasedUsdValue += currentVaultUsdValue;\\n      uint256 currentVaultAmount = IDepositVault(address(v)).deposits(user_);\\n      v.liquidate(liquidator_, user_, liquidateData);\\n      if (releasedUsdValue == usdValueToRelease) {\\n        emit DepositVaultReleased(user_, address(v), currentVaultAmount, currentVaultUsdValue);\\n        // release done\\n        break;\\n      }\\n      if (releasedUsdValue < usdValueToRelease) {\\n        emit DepositVaultReleased(user_, address(v), currentVaultAmount, currentVaultUsdValue);\\n        continue;\\n      }\\n      // over released, returning\\n      uint256 usdDelta = releasedUsdValue - usdValueToRelease;\\n      // The minimum usd value to return is $1\\n      if (usdDelta < 1e8) {\\n        emit DepositVaultReleased(user_, address(v), currentVaultAmount, currentVaultUsdValue);\\n        break;\\n      }\\n      uint256 amountToReturn = (currentVaultAmount * usdDelta * 1e12) / currentVaultUsdValue / 1e12;\\n      // possible precision issues\\n      if (amountToReturn > currentVaultAmount) {\\n        amountToReturn = currentVaultAmount;\\n      }\\n      // return over released tokens\\n      IERC20(v.underlying()).safeTransferFrom(liquidator_, address(this), amountToReturn);\\n      IERC20(v.underlying()).safeApprove(address(v), amountToReturn);\\n      _depositForUser(v, user_, amountToReturn);\\n      emit DepositVaultReleased(user_, address(v), currentVaultAmount - amountToReturn, currentVaultUsdValue - usdDelta);\\n      releasedUsdValue -= usdDelta;\\n      break;\\n    }\\n\\n    emit VaultsReleased(user_, usdValueToRelease, releasedUsdValue);\\n  }\\n\\n  function releaseZeroValueVaults(address user_, address liquidator_) external onlyOwner {\\n    require(allowedLiquidator[liquidator_], \\\"Invalid liquidator\\\");\\n\\n    bytes memory liquidateData = abi.encodePacked(uint(0x1));\\n\\n    EnumerableSet.AddressSet storage mintVaults = userJoinedBorrowVaults[user_];\\n    // release mint vaults with zero usd value\\n    for (uint256 i = 0; i < mintVaults.length(); i++) {\\n      IVault v = IVault(mintVaults.at(i));\\n      uint256 currentVaultUsdValue = v.userValue(user_, false);\\n      if (currentVaultUsdValue > 0) {\\n        continue;\\n      }\\n      uint256 currentVaultAmount = IMintVault(address(v)).borrows(user_);\\n      v.liquidate(liquidator_, user_, liquidateData);\\n      emit MintVaultReleased(user_, address(v), currentVaultAmount, currentVaultUsdValue);\\n    }\\n\\n    EnumerableSet.AddressSet storage depositedVaults = userJoinedDepositVaults[user_];\\n    // release deposit vaults with zero usd value\\n    for (uint256 i = 0; i < depositedVaults.length(); i++) {\\n      IVault v = IVault(depositedVaults.at(i));\\n      uint256 currentVaultUsdValue = v.userValue(user_, false);\\n      // 0x1E3174C5757cf5457f8A3A8c3E4a35Ed2d138322 is vault of Smart BUSD, force close.\\n      if (currentVaultUsdValue > 0 && address(v) != 0x1E3174C5757cf5457f8A3A8c3E4a35Ed2d138322) {\\n        continue;\\n      }\\n      uint256 currentVaultAmount = IDepositVault(address(v)).deposits(user_);\\n      v.liquidate(liquidator_, user_, liquidateData);\\n      emit DepositVaultReleased(user_, address(v), currentVaultAmount, currentVaultUsdValue);\\n    }\\n  }\\n\\n  function swapUserDepositVaults(address user_, address liquidator_, IVault[] calldata sourceVaults_, IVault[] calldata targetVaults_) external onlyOwner {\\n    require(allowedLiquidator[liquidator_], \\\"Invalid liquidator\\\");\\n\\n    require(sourceVaults_.length > 0, \\\"nothing to swap\\\");\\n    require(sourceVaults_.length == targetVaults_.length, \\\"length of sourceVaults_ should be equal to targetVaults_'s\\\");\\n\\n    bytes memory liquidateData = abi.encodePacked(uint(0x1));\\n\\n    for (uint256 i = 0; i < sourceVaults_.length; i++) {\\n      IVault sourceVault = sourceVaults_[i];\\n      IVault targetVault = targetVaults_[i];\\n      uint256 sourceVaultUsdValue = sourceVault.userValue(user_, false);\\n      uint256 sourceVaultAmount = IDepositVault(address(sourceVault)).deposits(user_);\\n      sourceVault.liquidate(liquidator_, user_, liquidateData);\\n      // set dUSD-DUET LP Price to 0.306\\n      if (address(sourceVault) == 0x4527Ba20F16F86525b6D174b6314502ca6D5256E) {\\n        // 306e5 = 0.306$\\n        sourceVaultUsdValue = sourceVaultAmount * 306e5;\\n        // set dUSD-BUSD LP Price to 2.02\\n      } else if (address(sourceVault) == 0xC703Fdad6cA5DF56bd729fef24157e196A4810f8) {\\n        // 202e6 = 2.02$\\n        sourceVaultUsdValue = sourceVaultAmount * 202e6;\\n      }\\n      if (sourceVaultUsdValue <= 0) {\\n        continue;\\n      }\\n      uint256 targetPrice = targetVault.underlyingAmountValue(1e18, false);\\n      uint256 targetVaultAmount = sourceVaultUsdValue * 1e12 / targetPrice / 1e12;\\n      IERC20(targetVault.underlying()).safeTransferFrom(msg.sender, address(this), targetVaultAmount);\\n      IERC20(targetVault.underlying()).safeApprove(address(targetVault), targetVaultAmount);\\n      _depositForUser(targetVault, user_, targetVaultAmount);\\n      emit DepositVaultSwapped(user_, address(sourceVault), sourceVaultAmount, address(targetVault), targetVaultAmount);\\n    }\\n  }\\n\\n  function _depositForUser(IVault depositVault_, address user_, uint256 amount_) internal {\\n    IDepositVault(address(depositVault_)).depositTo(depositVault_.underlying(), user_, amount_);\\n  }\\n\\n  function beforeLiquidate(address _borrower, address _vault) internal view {\\n    VaultState memory state = vaultStates[_vault];\\n    require(state.enabled && state.enableLiquidate, \\\"LIQ_DISABLED\\\");\\n  }\\n  //  ======   vault end =======\\n\\n}\\n\",\"keccak256\":\"0x4fc3815279f18e5ab9dbd31f491e4ce74b25ede2a3603d6cf468a1884c0433a7\",\"license\":\"MIT\"},\"contracts/Constants.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ncontract Constants {\\n  uint internal constant PercentBase = 10000;\\n}\",\"keccak256\":\"0x5769daf8aabd51393211ff1f2b7e1681008e2e6bf9941b7f637e2563afa769dd\",\"license\":\"MIT\"},\"contracts/interfaces/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IController {\\n  function dyTokens(address) external view returns (address);\\n  function getValueConf(address _underlying) external view returns (address oracle, uint16 dr, uint16 pr);\\n  function getValueConfs(address token0, address token1) external view returns (address oracle0, uint16 dr0, uint16 pr0, address oracle1, uint16 dr1, uint16 pr1);\\n\\n  function strategies(address) external view returns (address);\\n  function dyTokenVaults(address) external view returns (address);\\n\\n  function beforeDeposit(address , address _vault, uint) external view;\\n  function beforeBorrow(address _borrower, address _vault, uint256 _amount) external view;\\n  function beforeWithdraw(address _redeemer, address _vault, uint256 _amount) external view;\\n  function beforeRepay(address _repayer , address _vault, uint256 _amount) external view;\\n\\n  function joinVault(address _user, bool isDeposit) external;\\n  function exitVault(address _user, bool isDeposit) external;\\n\\n  function userValues(address _user, bool _dp) external view returns(uint totalDepositValue, uint totalBorrowValue);\\n  function userTotalValues(address _user, bool _dp) external view returns(uint totalDepositValue, uint totalBorrowValue);\\n\\n  function liquidate(address _borrower, bytes calldata data) external;\\n\\n  // ValidVault 0: uninitialized, default value\\n  // ValidVault 1: No, vault can not be collateralized\\n  // ValidVault 2: Yes, vault can be collateralized\\n  enum ValidVault { UnInit, No, Yes }\\n  function validVaults(address _vault) external view returns(ValidVault);\\n  function validVaultsOfUser(address _vault, address _user) external view returns(ValidVault);\\n\\n}\",\"keccak256\":\"0x98083d9afaba89dbdd5c3a1c25ad664f4c4545bf055f72732c4c8e19e7540fc2\",\"license\":\"MIT\"},\"contracts/interfaces/IDepositVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IDepositVault {\\n\\n  function deposits(address user) external view returns(uint amount);\\n  function deposit(address dtoken, uint256 amount) external;\\n  function depositTo(address dtoken, address to, uint256 amount) external;\\n  function syncDeposit(address dtoken, uint256 amount, address user) external;\\n\\n  function withdraw(uint256 amount, bool unpack) external;\\n  function withdrawTo(address to, uint256 amount, bool unpack) external;\\n\\n}\\n\",\"keccak256\":\"0x93117446c7fc374ce409e56d2de150a5c5f6d3a48d285193ea16f27513c3d74d\",\"license\":\"MIT\"},\"contracts/interfaces/IMintVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IMintVault {\\n\\n  function borrows(address user) external view returns(uint amount);\\n  function borrow(uint256 amount) external;\\n  function repay(uint256 amount) external;\\n  function repayTo(address to, uint256 amount) external;\\n\\n  function valueToAmount(uint value, bool dp) external view returns(uint amount);\\n\\n}\\n\",\"keccak256\":\"0xaaf79e2234462bfc29f8c8550f8c4e8d62108d81ec801ba96a3302de45a4d20d\",\"license\":\"MIT\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.8.0;\\n\\ninterface IStrategy {\\n\\n    function controller() external view returns (address);\\n    function getWant() external view returns (address);\\n    function deposit() external;\\n    function harvest() external;\\n    function withdraw(uint) external;\\n    function withdrawAll() external returns (uint256);\\n    function balanceOf() external view returns (uint256);\\n    function pendingOutput() external view returns (uint256);\\n    function minHarvestAmount() external view returns (uint256);\\n    function output() external view returns (address);\\n}\",\"keccak256\":\"0x702de5fcaecf97e5774b9734a8c79e492632eb7a5d88e16be2e1b116403cdbea\",\"license\":\"MIT\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IVault {\\n  // call from controller must impl.\\n  function underlying() external view returns (address);\\n  function isDuetVault() external view returns (bool);\\n  function liquidate(address liquidator, address borrower, bytes calldata data) external;\\n  function userValue(address user, bool dp) external view returns(uint);\\n  function pendingValue(address user, int pending) external view returns(uint);\\n  function underlyingAmountValue(uint amount, bool dp) external view returns(uint value);\\n}\",\"keccak256\":\"0xb713c3e19b97f7018acc1c34cadd92ff78200bbf90f3b68a7b55597f18cb8e33\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614f6b806100206000396000f3fe608060405234801561001057600080fd5b506004361061028a5760003560e01c80636af2482d1161015c578063ab27197e116100ce578063d2786d4511610087578063d2786d451461070f578063d7a6681c1461073d578063e26ec36a14610750578063f2fde38b14610763578063f7d2267314610776578063f9009ee81461078957600080fd5b8063ab27197e146106a7578063b66d927a146106b0578063b74e8b05146106c3578063c4c00487146106d6578063c5321fb0146106e9578063c8b268b3146106fc57600080fd5b806383d576501161012057806383d57650146105fd5780638da5cb5b1461062657806390a83dc214610637578063967217531461064a5780639c045f3e1461065d578063aaace6011461067e57600080fd5b80636af2482d146105b45780636c459677146105c7578063715018a6146105da57806379bf27b1146105e25780638129fc1c146105f557600080fd5b806338b20421116102005780635911a1ae116101b95780635911a1ae146104ac57806359e27fc4146104bf5780635f49202f146104d2578063624b5ed41461055e5780636657fc67146105715780636989725c146105a157600080fd5b806338b20421146103bf57806339ebf823146103e75780633dcecc2f1461042857806346b45be71461047d57806354ab62691461049057806358a6be1c146104a357600080fd5b80630eccd2c9116102525780630eccd2c9146102f057806314908816146103035780631acd8c9c146103165780631e516051146103585780632b9553ce1461038b5780632ea874821461039e57600080fd5b8063054c13441461028f578063095e377d146102a457806309ba9b47146102b75780630d37a290146102ca5780630ebdee19146102dd575b600080fd5b6102a261029d366004614410565b610796565b005b6102a26102b2366004614451565b61091d565b6102a26102c5366004614410565b610dc4565b6102a26102d836600461449c565b610e91565b6102a26102eb366004614502565b611031565b6102a26102fe366004614530565b6110bd565b6102a2610311366004614451565b611314565b6103296103243660046145b5565b6113f3565b604080516001600160a01b03909416845261ffff92831660208501529116908201526060015b60405180910390f35b61037b6103663660046145b5565b606f6020526000908152604090205460ff1681565b604051901515815260200161034f565b6102a2610399366004614410565b611446565b6103b16103ac366004614502565b61154a565b60405190815260200161034f565b6103d26103cd3660046145d2565b6115a1565b6040805192835260208301919091520161034f565b6104106103f53660046145b5565b6066602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161034f565b61043b610436366004614451565b6115fd565b604080516001600160a01b03978816815261ffff96871660208201529486169085015294909116606083015282166080820152911660a082015260c00161034f565b6102a261048b366004614732565b611630565b6102a261049e3660046145b5565b6118d5565b6103b1606d5481565b6103b16104ba366004614451565b61198c565b6102a26104cd366004614410565b611a9a565b6105256104e03660046145b5565b606b6020526000908152604090205460ff80821691610100810482169162010000820481169163010000008104821691600160201b8204811691600160281b90041686565b604080519615158752941515602087015292151593850193909352151560608401529015156080830152151560a082015260c00161034f565b6102a261056c3660046147f4565b611be4565b61059461057f3660046145b5565b60706020526000908152604090205460ff1681565b60405161034f9190614845565b6102a26105af366004614410565b611c4a565b6102a26105c2366004614853565b611d15565b6102a26105d5366004614909565b611e1f565b6102a2611e8a565b6102a26105f0366004614502565b611ec0565b6102a2611f83565b61041061060b3660046145b5565b6068602052600090815260409020546001600160a01b031681565b6033546001600160a01b0316610410565b6102a2610645366004614410565b61200d565b6103d26106583660046145d2565b61217d565b61067061066b366004614926565b61218c565b60405161034f929190614956565b61041061068c3660046145b5565b6065602052600090815260409020546001600160a01b031681565b6103b1606c5481565b61037b6106be3660046145b5565b612293565b6102a26106d1366004614a01565b6122ca565b6102a26106e4366004614502565b612890565b6102a26106f7366004614732565b61299b565b6102a261070a3660046147f4565b612c58565b61059461071d366004614451565b607160209081526000928352604080842090915290825290205460ff1681565b6102a261074b366004614a96565b612cb7565b6103d261075e366004614502565b6133a1565b6102a26107713660046145b5565b6133de565b6103d2610784366004614502565b613476565b606e5461037b9060ff1681565b6001600160a01b0382166000908152606b6020908152604091829020825160c081018452905460ff80821615801580855261010084048316151595850195909552620100008304821615159584019590955263010000008204811615156060840152600160201b8204811615156080840152600160281b90910416151560a082015291610824575080604001515b6108695760405162461bcd60e51b815260206004820152601160248201527015d2551211149055d7d11254d050931151607a1b60448201526064015b60405180910390fd5b610873838561349c565b1561091757600061089085856108898685614b11565b600161358b565b6001600160a01b0386166000908152606a60205260408120919250906108b990879060016137d6565b9050606d54816108c99190614b50565b6108d561271084614b50565b10156109145760405162461bcd60e51b815260206004820152600e60248201526d1313d5d7d0d3d31310551154905360921b6044820152606401610860565b50505b50505050565b6033546001600160a01b031633146109475760405162461bcd60e51b815260040161086090614b6f565b6001600160a01b0381166000908152606f602052604090205460ff1661097f5760405162461bcd60e51b815260040161086090614ba4565b60408051600160208201526000910160408051601f198184030181529181526001600160a01b0385166000908152606a6020529081209192505b6109c2826138a5565b811015610ba45760006109d583836138af565b90506000816001600160a01b031663ae318c4d8860006040518363ffffffff1660e01b8152600401610a08929190614bd0565b60206040518083038186803b158015610a2057600080fd5b505afa158015610a34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a589190614beb565b90508015610a67575050610b92565b6040516354a5706f60e01b81526001600160a01b038881166004830152600091908416906354a5706f9060240160206040518083038186803b158015610aac57600080fd5b505afa158015610ac0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae49190614beb565b6040516374eb83c160e01b81529091506001600160a01b038416906374eb83c190610b17908a908c908b90600401614c5c565b600060405180830381600087803b158015610b3157600080fd5b505af1158015610b45573d6000803e3d6000fd5b50505050876001600160a01b03167f7114e74d858e0dbdc24007f787fb65581d52fdcd4e8517d6f3a1f9448323428c848385604051610b8693929190614c91565b60405180910390a25050505b80610b9c81614cb2565b9150506109b9565b506001600160a01b0384166000908152606960205260408120905b610bc8826138a5565b811015610914576000610bdb83836138af565b90506000816001600160a01b031663ae318c4d8960006040518363ffffffff1660e01b8152600401610c0e929190614bd0565b60206040518083038186803b158015610c2657600080fd5b505afa158015610c3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5e9190614beb565b9050600081118015610c8d5750731e3174c5757cf5457f8a3a8c3e4a35ed2d1383226001600160a01b03831614155b15610c99575050610db2565b60405163fc7e286d60e01b81526001600160a01b0389811660048301526000919084169063fc7e286d9060240160206040518083038186803b158015610cde57600080fd5b505afa158015610cf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d169190614beb565b6040516374eb83c160e01b81529091506001600160a01b038416906374eb83c190610d49908b908d908c90600401614c5c565b600060405180830381600087803b158015610d6357600080fd5b505af1158015610d77573d6000803e3d6000fd5b50505050886001600160a01b0316600080516020614f16833981519152848385604051610da693929190614c91565b60405180910390a25050505b80610dbc81614cb2565b915050610bbf565b6001600160a01b0382166000908152606b6020908152604091829020825160c081018452905460ff80821615801580855261010084048316151595850195909552620100008304821615159584019590955263010000008204811615156060840152600160201b8204811615156080840152600160281b90910416151560a082015291610e52575080602001515b6109175760405162461bcd60e51b815260206004820152601060248201526f4445504f534954455f44495341424c4560801b6044820152606401610860565b6033546001600160a01b03163314610ebb5760405162461bcd60e51b815260040161086090614b6f565b6001600160a01b038316610f025760405162461bcd60e51b815260206004820152600e60248201526d494e56414c49445f4f5241434c4560901b6044820152606401610860565b6127108261ffff161115610f4a5760405162461bcd60e51b815260206004820152600f60248201526e444953434f55545f544f4f5f42494760881b6044820152606401610860565b6127108161ffff161015610f945760405162461bcd60e51b81526020600482015260116024820152701414915352555357d513d3d7d4d3505313607a1b6044820152606401610860565b6001600160a01b0384811660008181526067602090815260409182902080549488166001600160b01b03199095168517600160a01b61ffff8981169182029290921761ffff60b01b1916600160b01b92891692830217835584519687529286019290925291840152917f7cb71f764a6240297d887d23473a61cf07ba9d34ccfbdd326620a5b896cd33469060600160405180910390a25050505050565b6033546001600160a01b0316331461105b5760405162461bcd60e51b815260040161086090614b6f565b6001600160a01b0382166000908152606f602052604090819020805460ff1916831515179055517fd8949265082223b72749a7863e551684ee0df9a0c8ece536b9f14686b68425fc906110b19084908490614bd0565b60405180910390a15050565b606e54339060ff16806110e857506001600160a01b0381166000908152606f602052604090205460ff165b6111295760405162461bcd60e51b815260206004820152601260248201527124a72b20a624a22fa624a8aaa4a220aa27a960711b6044820152606401610860565b61113284612293565b6111725760405162461bcd60e51b81526020600482015260116024820152700869e989882a88aa48298be8a9c9eaa8e9607b1b6044820152606401610860565b6001600160a01b038416600090815260696020526040812090611194826138a5565b9050805b80156112485760006111b56111ae600184614ccd565b85906138af565b90506111c1818961349c565b15611235576111d088826138bb565b6040516374eb83c160e01b81526001600160a01b038216906374eb83c1906112029088908c908c908c90600401614ce4565b600060405180830381600087803b15801561121c57600080fd5b505af1158015611230573d6000803e3d6000fd5b505050505b508061124081614d30565b915050611198565b506001600160a01b0386166000908152606a602052604081209061126b826138a5565b9050805b80156113095760006112856111ae600184614ccd565b90506112918a826138bb565b6040516374eb83c160e01b81526001600160a01b038216906374eb83c1906112c3908a908e908e908e90600401614ce4565b600060405180830381600087803b1580156112dd57600080fd5b505af11580156112f1573d6000803e3d6000fd5b5050505050808061130190614d30565b91505061126f565b505050505050505050565b6033546001600160a01b0316331461133e5760405162461bcd60e51b815260040161086090614b6f565b6001600160a01b0381166113855760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa22a27a5a2a760911b6044820152606401610860565b6001600160a01b0382811660008181526065602090815260409182902080548686166001600160a01b0319821681179092558351951680865291850152927fd5c0cad2a6b3eea813a7bdf548752779e26da201508f6e807ec5ec3d65d020d6910160405180910390a2505050565b6001600160a01b039081166000908152606760209081526040918290208251606081018452905493841680825261ffff600160a01b86048116938301849052600160b01b90950490941692018290529192565b6001600160a01b0382166000908152606b6020908152604091829020825160c081018452905460ff80821615801580855261010084048316151595850195909552620100008304821615159584019590955263010000008204811615156060840152600160201b8204811615156080840152600160281b90910416151560a0820152916114d4575080606001515b6115125760405162461bcd60e51b815260206004820152600f60248201526e1093d49493d5d7d11254d050931151608a1b6044820152606401610860565b600061151f856001613989565b6001600160a01b0386166000908152606a60205260408120919250906108b990879087876001613a73565b600081611577576001600160a01b0383166000908152606a60205260409020611572906138a5565b611598565b6001600160a01b0383166000908152606960205260409020611598906138a5565b90505b92915050565b6001600160a01b038416600090815260696020526040812081906115c9908790878787613a73565b6001600160a01b0387166000908152606a602052604090209092506115f2908790878787613a73565b905094509492505050565b60008060008060008061160f886113f3565b9197509550935061161f876113f3565b979a96995094975095939492505050565b6033546001600160a01b0316331461165a5760405162461bcd60e51b815260040161086090614b6f565b81518151808214801561166c57508115155b6116a85760405162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f504152414d60981b6044820152606401610860565b60005b828110156118ce576000607060008784815181106116cb576116cb614d47565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff1660028111156117035761170361480d565b146117405760405162461bcd60e51b815260206004820152600d60248201526c5345545f4f4e4c595f4f4e434560981b6044820152606401610860565b600284828151811061175457611754614d47565b6020026020010151600281111561176d5761176d61480d565b14806117a35750600184828151811061178857611788614d47565b602002602001015160028111156117a1576117a161480d565b145b6117df5760405162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f56414c554560981b6044820152606401610860565b8381815181106117f1576117f1614d47565b60200260200101516070600087848151811061180f5761180f614d47565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916600183600281111561184c5761184c61480d565b02179055507f05334cade7d5051a457d6cddb92a76a5266e31459f3118a536c99b169beaa0f585828151811061188457611884614d47565b602002602001015185838151811061189e5761189e614d47565b60200260200101516040516118b4929190614d5d565b60405180910390a1806118c681614cb2565b9150506116ab565b5050505050565b6033546001600160a01b031633146118ff5760405162461bcd60e51b815260040161086090614b6f565b6001600160a01b03808216600090815260666020908152604080832054815163429c145b60e11b8152915194169363853828b693600480840194938390030190829087803b15801561195057600080fd5b505af1158015611964573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119889190614beb565b5050565b60008061199a846001613989565b6001600160a01b0385166000908152606a60205260408120919250906119c390869060016137d6565b90506000606d54612710846119d89190614b50565b6119e29190614d7a565b905081811115611a855760006119f88383614ccd565b60405163281aa7fd60e21b815260048101829052600160248201529091506001600160a01b0387169063a06a9ff49060440160206040518083038186803b158015611a4257600080fd5b505afa158015611a56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7a9190614beb565b94505050505061159b565b6000935050505061159b565b50505092915050565b6033546001600160a01b03163314611ac45760405162461bcd60e51b815260040161086090614b6f565b816001600160a01b031663ba58591c6040518163ffffffff1660e01b815260040160206040518083038186803b158015611afd57600080fd5b505afa158015611b11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b359190614d9c565b611b715760405162461bcd60e51b815260206004820152600d60248201526c1253959053125157d590531555609a1b6044820152606401610860565b6001600160a01b038084166000818152606860205260409081902080548685166001600160a01b031982161790915590519216917f0ff9c79e47a5eed61bfb093d8315d37efcfa7f6679e507f608289c78941b0e5190611bd690849087908790614db9565b60405180910390a250505050565b6033546001600160a01b03163314611c0e5760405162461bcd60e51b815260040161086090614b6f565b606d8190556040518181527f13e612fc69e30b3adcca3cb6573fa94782e94f59261f9b32c96c34b90552b335906020015b60405180910390a150565b6001600160a01b0382166000908152606b6020908152604091829020825160c081018452905460ff80821615801580855261010084048316151595850195909552620100008304821615159584019590955263010000008204811615156060840152600160201b8204811615156080840152600160281b90910416151560a082015291611cd8575080608001515b6109175760405162461bcd60e51b815260206004820152600e60248201526d149154105657d11254d05093115160921b6044820152606401610860565b6033546001600160a01b03163314611d3f5760405162461bcd60e51b815260040161086090614b6f565b6001600160a01b0382166000908152606b60209081526040918290208351815492850151858501516060870151608088015160a089015161ffff1990971694151561ff00191694909417610100931515939093029290921763ffff00001916620100009115159190910263ff0000001916176301000000911515919091021765ffff000000001916600160201b9115159190910265ff0000000000191617600160281b92151592909202919091179055517f0f86f36676a78407d88aa894e600955aca44b6b9eaff4740c81228e2fa75d628906110b19084908490614956565b6033546001600160a01b03163314611e495760405162461bcd60e51b815260040161086090614b6f565b606e805460ff19168215159081179091556040519081527fcfa23450328fe03391963dc3e54c19ebeecb28fd8a628b495b71ab8534d61c3290602001611c3f565b6033546001600160a01b03163314611eb45760405162461bcd60e51b815260040161086090614b6f565b611ebe6000613c86565b565b336000818152606b602052604090205460ff1680611efd57506001600160a01b0381166000908152606b6020526040902054600160281b900460ff165b611f3a5760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa1a0a62622a960911b6044820152606401610860565b600082611f5e576001600160a01b0384166000908152606a60205260409020611f77565b6001600160a01b03841660009081526069602052604090205b90506118ce8183613cd8565b6000611f8f6001613ced565b90508015611fa7576000805461ff0019166101001790555b611faf613d7a565b612af8606c556132c8606d55606e805460ff19166001179055801561200a576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001611c3f565b50565b6033546001600160a01b031633146120375760405162461bcd60e51b815260040161086090614b6f565b6001600160a01b0382166120835760405162461bcd60e51b815260206004820152601360248201527214dd1c985d1959da595cc8111a5cd8589b1959606a1b6044820152606401610860565b6001600160a01b0380841660009081526066602052604090205416801561211957806001600160a01b031663853828b66040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156120df57600080fd5b505af11580156120f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121179190614beb565b505b6001600160a01b038481166000818152606660205260409081902080546001600160a01b0319169387169390931790925590517fcc7d45f325309ae5b4940b5de638a482be2a51aa3a917326a84f65bcc2f7352390611bd690849087908790614db9565b6000806115c98686868661358b565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081018290526000846121e1576001600160a01b0386166000908152606a602052604090206121fa565b6001600160a01b03861660009081526069602052604090205b905061220681856138af565b6001600160a01b0381166000908152606b6020908152604091829020825160c081018452905460ff8082161515835261010082048116151593830193909352620100008104831615159382019390935263010000008304821615156060820152600160201b8304821615156080820152600160281b90920416151560a08201529097909650945050505050565b60008060006122a38460016133a1565b91509150606c54816122b59190614b50565b6122c161271084614b50565b10949350505050565b6033546001600160a01b031633146122f45760405162461bcd60e51b815260040161086090614b6f565b6001600160a01b0385166000908152606f602052604090205460ff1661232c5760405162461bcd60e51b815260040161086090614ba4565b8261236b5760405162461bcd60e51b815260206004820152600f60248201526e06e6f7468696e6720746f207377617608c1b6044820152606401610860565b8281146123e05760405162461bcd60e51b815260206004820152603a60248201527f6c656e677468206f6620736f757263655661756c74735f2073686f756c64206260448201527f6520657175616c20746f207461726765745661756c74735f27730000000000006064820152608401610860565b604080516001602082015260009101604051602081830303815290604052905060005b8481101561288657600086868381811061241f5761241f614d47565b905060200201602081019061243491906145b5565b9050600085858481811061244a5761244a614d47565b905060200201602081019061245f91906145b5565b90506000826001600160a01b031663ae318c4d8c60006040518363ffffffff1660e01b8152600401612492929190614bd0565b60206040518083038186803b1580156124aa57600080fd5b505afa1580156124be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124e29190614beb565b60405163fc7e286d60e01b81526001600160a01b038d8116600483015291925060009185169063fc7e286d9060240160206040518083038186803b15801561252957600080fd5b505afa15801561253d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125619190614beb565b9050836001600160a01b03166374eb83c18c8e896040518463ffffffff1660e01b815260040161259393929190614c5c565b600060405180830381600087803b1580156125ad57600080fd5b505af11580156125c1573d6000803e3d6000fd5b505050506001600160a01b038416734527ba20f16f86525b6d174b6314502ca6d5256e14156125ff576125f8816301d2eb40614b50565b9150612635565b73c703fdad6ca5df56bd729fef24157e196a4810f86001600160a01b03851614156126355761263281630c0a4680614b50565b91505b600082116126465750505050612874565b604051630eda25c760e11b8152670de0b6b3a76400006004820152600060248201819052906001600160a01b03851690631db44b8e9060440160206040518083038186803b15801561269757600080fd5b505afa1580156126ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126cf9190614beb565b9050600064e8d4a51000826126e48683614b50565b6126ee9190614d7a565b6126f89190614d7a565b9050612782333083886001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561273957600080fd5b505afa15801561274d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127719190614ddd565b6001600160a01b0316929190613da9565b6128088582876001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156127c057600080fd5b505afa1580156127d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127f89190614ddd565b6001600160a01b03169190613e01565b612813858f83613f25565b604080516001600160a01b038881168252602082018690528781169282019290925260608101839052908f16907fcba74a9a38e532ea920e947d3babe6efc7b838cb416f82d9b9d79f32744b34ca9060800160405180910390a25050505050505b8061287e81614cb2565b915050612403565b5050505050505050565b336000818152606b602052604090205460ff16806128cd57506001600160a01b0381166000908152606b6020526040902054600160281b900460ff165b61290a5760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa1a0a62622a960911b6044820152606401610860565b60008261292e576001600160a01b0384166000908152606a60205260409020612947565b6001600160a01b03841660009081526069602052604090205b90506014612954826138a5565b106129915760405162461bcd60e51b815260206004820152600d60248201526c0949e929cbea89e9ebe9aaa869609b1b6044820152606401610860565b6118ce8183613ffc565b8151815133919080821480156129b057508115155b6129ec5760405162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f504152414d60981b6044820152606401610860565b60005b82811015612b98576002858281518110612a0b57612a0b614d47565b60200260200101516002811115612a2457612a2461480d565b1480612a5a57506001858281518110612a3f57612a3f614d47565b60200260200101516002811115612a5857612a5861480d565b145b612a965760405162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f56414c554560981b6044820152606401610860565b848181518110612aa857612aa8614d47565b602002602001015160716000888481518110612ac657612ac6614d47565b6020908102919091018101516001600160a01b039081168352828201939093526040918201600090812093891681529290529020805460ff19166001836002811115612b1457612b1461480d565b02179055507f65d4763abdc1e045affaf50aed5fc2a1f4f466da45ee41ea701e0ad5029ff0b0868281518110612b4c57612b4c614d47565b602002602001015185878481518110612b6757612b67614d47565b6020026020010151604051612b7e93929190614dfa565b60405180910390a180612b9081614cb2565b9150506129ef565b506000612ba6846001613989565b6001600160a01b0385166000908152606a6020526040812091925090612bcf90869060016137d6565b90506000606d5461271084612be49190614b50565b612bee9190614d7a565b9050606d5482612bfe9190614b50565b612c0a61271085614b50565b10156128865760405162461bcd60e51b815260206004820152601d60248201527f53455456414c49445641554c543a204c4f575f434f4c4c41544552414c0000006044820152606401610860565b6033546001600160a01b03163314612c825760405162461bcd60e51b815260040161086090614b6f565b606c8190556040518181527f138a4f81e91d7ed8109625537819aae162d22b1e4b5f73e1919d1f6e21bfbb4b90602001611c3f565b6033546001600160a01b03163314612ce15760405162461bcd60e51b815260040161086090614b6f565b6001600160a01b0383166000908152606f602052604090205460ff16612d195760405162461bcd60e51b815260040161086090614ba4565b6001600160a01b038416600090815260696020908152604080832081516001818501528251808203909401845282019091529190815b84811015612f4e576000868683818110612d6b57612d6b614d47565b9050602002016020810190612d8091906145b5565b90506000816001600160a01b031663ae318c4d8b60006040518363ffffffff1660e01b8152600401612db3929190614bd0565b60206040518083038186803b158015612dcb57600080fd5b505afa158015612ddf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e039190614beb565b6040516354a5706f60e01b81526001600160a01b038c811660048301529192506000918416906354a5706f9060240160206040518083038186803b158015612e4a57600080fd5b505afa158015612e5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e829190614beb565b9050612e8e8287614e1f565b6040516374eb83c160e01b81529096506001600160a01b038416906374eb83c190612ec1908d908f908a90600401614c5c565b600060405180830381600087803b158015612edb57600080fd5b505af1158015612eef573d6000803e3d6000fd5b505050508a6001600160a01b03167f7114e74d858e0dbdc24007f787fb65581d52fdcd4e8517d6f3a1f9448323428c848385604051612f3093929190614c91565b60405180910390a25050508080612f4690614cb2565b915050612d4f565b5060008211612f5f57505050610917565b600080612f6b856138a5565b90505b8015613352576000612f8b612f84600184614ccd565b87906138af565b9050612f97818b61349c565b1580612fc357506001600160a01b0381166000908152606b6020526040902054600160281b900460ff16155b15612fce5750613340565b60405163ae318c4d60e01b81526000906001600160a01b0383169063ae318c4d90612fff908e908590600401614bd0565b60206040518083038186803b15801561301757600080fd5b505afa15801561302b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061304f9190614beb565b905061305b8185614e1f565b60405163fc7e286d60e01b81526001600160a01b038d8116600483015291955060009184169063fc7e286d9060240160206040518083038186803b1580156130a257600080fd5b505afa1580156130b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130da9190614beb565b9050826001600160a01b03166374eb83c18c8e896040518463ffffffff1660e01b815260040161310c93929190614c5c565b600060405180830381600087803b15801561312657600080fd5b505af115801561313a573d6000803e3d6000fd5b5050505086851415613181578b6001600160a01b0316600080516020614f1683398151915284838560405161317193929190614c91565b60405180910390a2505050613352565b868510156131c4578b6001600160a01b0316600080516020614f168339815191528483856040516131b493929190614c91565b60405180910390a2505050613340565b60006131d08887614ccd565b90506305f5e10081101561321a578c6001600160a01b0316600080516020614f1683398151915285848660405161320993929190614c91565b60405180910390a250505050613352565b600064e8d4a510008461322d8486614b50565b61323c9064e8d4a51000614b50565b6132469190614d7a565b6132509190614d7a565b90508281111561325d5750815b61329c8d3083886001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561273957600080fd5b6132da8582876001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156127c057600080fd5b6132e5858f83613f25565b6001600160a01b038e16600080516020614f16833981519152866133098487614ccd565b6133138689614ccd565b60405161332293929190614c91565b60405180910390a26133348288614ccd565b96505050505050613352565b8061334a81614d30565b915050612f6e565b5060408051848152602081018390526001600160a01b038a16917f26e0bc17070eb8681630837613dc291e5976262044227decb74f578aee1eee5c910160405180910390a25050505050505050565b6000806133ae8484613989565b6001600160a01b0385166000908152606a602052604090209092506133d5908590856137d6565b90509250929050565b6033546001600160a01b031633146134085760405162461bcd60e51b815260040161086090614b6f565b6001600160a01b03811661346d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610860565b61200a81613c86565b6001600160a01b038216600090815260696020526040812081906133ae908590856137d6565b6001600160a01b03808316600090815260716020908152604080832093851683529290529081205460ff1681808260028111156134db576134db61480d565b146134e65781613503565b6001600160a01b03851660009081526070602052604090205460ff165b905060008160028111156135195761351961480d565b141561355b5760405162461bcd60e51b81526020600482015260116024820152701590531251159055531517d55392539255607a1b6044820152606401610860565b600281600281111561356f5761356f61480d565b14156135805760019250505061159b565b506000949350505050565b6001600160a01b0384166000908152606960205260408120816135ad826138a5565b90506000805b828110156137255760006135c785836138af565b90506135d3818b61349c565b1561371257806001600160a01b0316896001600160a01b0316141561368757604051635ac28bf960e01b81526001600160a01b038b81166004830152602482018a9052821690635ac28bf99060440160206040518083038186803b15801561363a57600080fd5b505afa15801561364e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136729190614beb565b61367c9087614e1f565b955060019250613712565b60405163ae318c4d60e01b81526001600160a01b0382169063ae318c4d906136b5908d908b90600401614bd0565b60206040518083038186803b1580156136cd57600080fd5b505afa1580156136e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137059190614beb565b61370f9087614e1f565b95505b508061371d81614cb2565b9150506135b3565b50801580156137395750613739878961349c565b156137cb57604051635ac28bf960e01b81526001600160a01b03898116600483015260248201889052881690635ac28bf99060440160206040518083038186803b15801561378657600080fd5b505afa15801561379a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137be9190614beb565b6137c89085614e1f565b93505b505050949350505050565b6000806137e2846138a5565b905060005b8181101561389c5760006137fb86836138af565b60405163ae318c4d60e01b81529091506001600160a01b0382169063ae318c4d9061382c908a908990600401614bd0565b60206040518083038186803b15801561384457600080fd5b505afa158015613858573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061387c9190614beb565b6138869085614e1f565b935050808061389490614cb2565b9150506137e7565b50509392505050565b600061159b825490565b60006115988383614011565b6001600160a01b0381166000908152606b6020908152604091829020825160c081018452905460ff80821615801580855261010084048316151595850195909552620100008304821615159584019590955263010000008204811615156060840152600160201b8204811615156080840152600160281b90910416151560a08201529161394957508060a001515b6139845760405162461bcd60e51b815260206004820152600c60248201526b13125457d11254d05093115160a21b6044820152606401610860565b505050565b6001600160a01b0382166000908152606960205260408120816139ab826138a5565b905060005b81811015611a915760006139c484836138af565b90506139d0818861349c565b15613a605760405163ae318c4d60e01b81526001600160a01b0382169063ae318c4d90613a03908a908a90600401614bd0565b60206040518083038186803b158015613a1b57600080fd5b505afa158015613a2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a539190614beb565b613a5d9086614e1f565b94505b5080613a6b81614cb2565b9150506139b0565b600080613a7f866138a5565b90506000805b82811015613be8576000613a9989836138af565b9050806001600160a01b0316886001600160a01b03161415613b4a57604051635ac28bf960e01b81526001600160a01b038b8116600483015260248201899052821690635ac28bf99060440160206040518083038186803b158015613afd57600080fd5b505afa158015613b11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b359190614beb565b613b3f9086614e1f565b945060019250613bd5565b60405163ae318c4d60e01b81526001600160a01b0382169063ae318c4d90613b78908d908a90600401614bd0565b60206040518083038186803b158015613b9057600080fd5b505afa158015613ba4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bc89190614beb565b613bd29086614e1f565b94505b5080613be081614cb2565b915050613a85565b5080613c7b57604051635ac28bf960e01b81526001600160a01b03898116600483015260248201879052871690635ac28bf99060440160206040518083038186803b158015613c3657600080fd5b505afa158015613c4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c6e9190614beb565b613c789084614e1f565b92505b505095945050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000611598836001600160a01b03841661403b565b60008054610100900460ff1615613d34578160ff166001148015613d105750303b155b613d2c5760405162461bcd60e51b815260040161086090614e37565b506000919050565b60005460ff808416911610613d5b5760405162461bcd60e51b815260040161086090614e37565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff16613da15760405162461bcd60e51b815260040161086090614e85565b611ebe61412e565b610917846323b872dd60e01b858585604051602401613dca93929190614db9565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261415e565b801580613e8a5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015613e5057600080fd5b505afa158015613e64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e889190614beb565b155b613ef55760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610860565b6040516001600160a01b03831660248201526044810182905261398490849063095ea7b360e01b90606401613dca565b826001600160a01b031663f213159c846001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015613f6d57600080fd5b505afa158015613f81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fa59190614ddd565b84846040518463ffffffff1660e01b8152600401613fc593929190614db9565b600060405180830381600087803b158015613fdf57600080fd5b505af1158015613ff3573d6000803e3d6000fd5b50505050505050565b6000611598836001600160a01b038416614230565b600082600001828154811061402857614028614d47565b9060005260206000200154905092915050565b6000818152600183016020526040812054801561412457600061405f600183614ccd565b855490915060009061407390600190614ccd565b90508181146140d857600086600001828154811061409357614093614d47565b90600052602060002001549050808760000184815481106140b6576140b6614d47565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806140e9576140e9614ed0565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061159b565b600091505061159b565b600054610100900460ff166141555760405162461bcd60e51b815260040161086090614e85565b611ebe33613c86565b60006141b3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661427f9092919063ffffffff16565b80519091501561398457808060200190518101906141d19190614d9c565b6139845760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610860565b60008181526001830160205260408120546142775750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561159b565b50600061159b565b606061428e8484600085614298565b90505b9392505050565b6060824710156142f95760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610860565b843b6143475760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610860565b600080866001600160a01b031685876040516143639190614ee6565b60006040518083038185875af1925050503d80600081146143a0576040519150601f19603f3d011682016040523d82523d6000602084013e6143a5565b606091505b50915091506143b58282866143c2565b925050505b949350505050565b606083156143d1575081614291565b8251156143e15782518084602001fd5b8160405162461bcd60e51b81526004016108609190614f02565b6001600160a01b038116811461200a57600080fd5b60008060006060848603121561442557600080fd5b8335614430816143fb565b92506020840135614440816143fb565b929592945050506040919091013590565b6000806040838503121561446457600080fd5b823561446f816143fb565b9150602083013561447f816143fb565b809150509250929050565b803561ffff81168114613d7557600080fd5b600080600080608085870312156144b257600080fd5b84356144bd816143fb565b935060208501356144cd816143fb565b92506144db6040860161448a565b91506144e96060860161448a565b905092959194509250565b801515811461200a57600080fd5b6000806040838503121561451557600080fd5b8235614520816143fb565b9150602083013561447f816144f4565b60008060006040848603121561454557600080fd5b8335614550816143fb565b9250602084013567ffffffffffffffff8082111561456d57600080fd5b818601915086601f83011261458157600080fd5b81358181111561459057600080fd5b8760208285010111156145a257600080fd5b6020830194508093505050509250925092565b6000602082840312156145c757600080fd5b8135614291816143fb565b600080600080608085870312156145e857600080fd5b84356145f3816143fb565b93506020850135614603816143fb565b925060408501359150606085013561461a816144f4565b939692955090935050565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff8111828210171561465e5761465e614625565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561468d5761468d614625565b604052919050565b600067ffffffffffffffff8211156146af576146af614625565b5060051b60200190565b600082601f8301126146ca57600080fd5b813560206146df6146da83614695565b614664565b82815260059290921b840181019181810190868411156146fe57600080fd5b8286015b848110156147275780356003811061471a5760008081fd5b8352918301918301614702565b509695505050505050565b6000806040838503121561474557600080fd5b823567ffffffffffffffff8082111561475d57600080fd5b818501915085601f83011261477157600080fd5b813560206147816146da83614695565b82815260059290921b840181019181810190898411156147a057600080fd5b948201945b838610156147c75785356147b8816143fb565b825294820194908201906147a5565b965050860135925050808211156147dd57600080fd5b506147ea858286016146b9565b9150509250929050565b60006020828403121561480657600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6003811061484157634e487b7160e01b600052602160045260246000fd5b9052565b6020810161159b8284614823565b60008082840360e081121561486757600080fd5b8335614872816143fb565b925060c0601f198201121561488657600080fd5b5061488f61463b565b602084013561489d816144f4565b815260408401356148ad816144f4565b602082015260608401356148c0816144f4565b604082015260808401356148d3816144f4565b606082015260a08401356148e6816144f4565b608082015260c08401356148f9816144f4565b60a0820152919491935090915050565b60006020828403121561491b57600080fd5b8135614291816144f4565b60008060006060848603121561493b57600080fd5b8335614946816143fb565b92506020840135614440816144f4565b600060e08201905060018060a01b03841682528251151560208301526020830151151560408301526040830151151560608301526060830151151560808301526080830151151560a083015260a0830151151560c08301529392505050565b60008083601f8401126149c757600080fd5b50813567ffffffffffffffff8111156149df57600080fd5b6020830191508360208260051b85010111156149fa57600080fd5b9250929050565b60008060008060008060808789031215614a1a57600080fd5b8635614a25816143fb565b95506020870135614a35816143fb565b9450604087013567ffffffffffffffff80821115614a5257600080fd5b614a5e8a838b016149b5565b90965094506060890135915080821115614a7757600080fd5b50614a8489828a016149b5565b979a9699509497509295939492505050565b60008060008060608587031215614aac57600080fd5b8435614ab7816143fb565b93506020850135614ac7816143fb565b9250604085013567ffffffffffffffff811115614ae357600080fd5b614aef878288016149b5565b95989497509550505050565b634e487b7160e01b600052601160045260246000fd5b60008083128015600160ff1b850184121615614b2f57614b2f614afb565b6001600160ff1b0384018313811615614b4a57614b4a614afb565b50500390565b6000816000190483118215151615614b6a57614b6a614afb565b500290565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526012908201527124b73b30b634b2103634b8bab4b230ba37b960711b604082015260600190565b6001600160a01b039290921682521515602082015260400190565b600060208284031215614bfd57600080fd5b5051919050565b60005b83811015614c1f578181015183820152602001614c07565b838111156109175750506000910152565b60008151808452614c48816020860160208601614c04565b601f01601f19169290920160200192915050565b6001600160a01b03848116825283166020820152606060408201819052600090614c8890830184614c30565b95945050505050565b6001600160a01b039390931683526020830191909152604082015260600190565b6000600019821415614cc657614cc6614afb565b5060010190565b600082821015614cdf57614cdf614afb565b500390565b6001600160a01b0385811682528416602082015260606040820181905281018290526000828460808401376000608084840101526080601f19601f850116830101905095945050505050565b600081614d3f57614d3f614afb565b506000190190565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0383168152604081016142916020830184614823565b600082614d9757634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215614dae57600080fd5b8151614291816144f4565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215614def57600080fd5b8151614291816143fb565b6001600160a01b03848116825283166020820152606081016143ba6040830184614823565b60008219821115614e3257614e32614afb565b500190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052603160045260246000fd5b60008251614ef8818460208701614c04565b9190910192915050565b6020815260006115986020830184614c3056fe007534de14ea9193847e0ffc37f145402749f07b3c792a421470da99278f1359a26469706673582212202540fe1a735bc037aafa0eaf8cc61837986155ac912d89a7801ba53019cab0b764736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061028a5760003560e01c80636af2482d1161015c578063ab27197e116100ce578063d2786d4511610087578063d2786d451461070f578063d7a6681c1461073d578063e26ec36a14610750578063f2fde38b14610763578063f7d2267314610776578063f9009ee81461078957600080fd5b8063ab27197e146106a7578063b66d927a146106b0578063b74e8b05146106c3578063c4c00487146106d6578063c5321fb0146106e9578063c8b268b3146106fc57600080fd5b806383d576501161012057806383d57650146105fd5780638da5cb5b1461062657806390a83dc214610637578063967217531461064a5780639c045f3e1461065d578063aaace6011461067e57600080fd5b80636af2482d146105b45780636c459677146105c7578063715018a6146105da57806379bf27b1146105e25780638129fc1c146105f557600080fd5b806338b20421116102005780635911a1ae116101b95780635911a1ae146104ac57806359e27fc4146104bf5780635f49202f146104d2578063624b5ed41461055e5780636657fc67146105715780636989725c146105a157600080fd5b806338b20421146103bf57806339ebf823146103e75780633dcecc2f1461042857806346b45be71461047d57806354ab62691461049057806358a6be1c146104a357600080fd5b80630eccd2c9116102525780630eccd2c9146102f057806314908816146103035780631acd8c9c146103165780631e516051146103585780632b9553ce1461038b5780632ea874821461039e57600080fd5b8063054c13441461028f578063095e377d146102a457806309ba9b47146102b75780630d37a290146102ca5780630ebdee19146102dd575b600080fd5b6102a261029d366004614410565b610796565b005b6102a26102b2366004614451565b61091d565b6102a26102c5366004614410565b610dc4565b6102a26102d836600461449c565b610e91565b6102a26102eb366004614502565b611031565b6102a26102fe366004614530565b6110bd565b6102a2610311366004614451565b611314565b6103296103243660046145b5565b6113f3565b604080516001600160a01b03909416845261ffff92831660208501529116908201526060015b60405180910390f35b61037b6103663660046145b5565b606f6020526000908152604090205460ff1681565b604051901515815260200161034f565b6102a2610399366004614410565b611446565b6103b16103ac366004614502565b61154a565b60405190815260200161034f565b6103d26103cd3660046145d2565b6115a1565b6040805192835260208301919091520161034f565b6104106103f53660046145b5565b6066602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161034f565b61043b610436366004614451565b6115fd565b604080516001600160a01b03978816815261ffff96871660208201529486169085015294909116606083015282166080820152911660a082015260c00161034f565b6102a261048b366004614732565b611630565b6102a261049e3660046145b5565b6118d5565b6103b1606d5481565b6103b16104ba366004614451565b61198c565b6102a26104cd366004614410565b611a9a565b6105256104e03660046145b5565b606b6020526000908152604090205460ff80821691610100810482169162010000820481169163010000008104821691600160201b8204811691600160281b90041686565b604080519615158752941515602087015292151593850193909352151560608401529015156080830152151560a082015260c00161034f565b6102a261056c3660046147f4565b611be4565b61059461057f3660046145b5565b60706020526000908152604090205460ff1681565b60405161034f9190614845565b6102a26105af366004614410565b611c4a565b6102a26105c2366004614853565b611d15565b6102a26105d5366004614909565b611e1f565b6102a2611e8a565b6102a26105f0366004614502565b611ec0565b6102a2611f83565b61041061060b3660046145b5565b6068602052600090815260409020546001600160a01b031681565b6033546001600160a01b0316610410565b6102a2610645366004614410565b61200d565b6103d26106583660046145d2565b61217d565b61067061066b366004614926565b61218c565b60405161034f929190614956565b61041061068c3660046145b5565b6065602052600090815260409020546001600160a01b031681565b6103b1606c5481565b61037b6106be3660046145b5565b612293565b6102a26106d1366004614a01565b6122ca565b6102a26106e4366004614502565b612890565b6102a26106f7366004614732565b61299b565b6102a261070a3660046147f4565b612c58565b61059461071d366004614451565b607160209081526000928352604080842090915290825290205460ff1681565b6102a261074b366004614a96565b612cb7565b6103d261075e366004614502565b6133a1565b6102a26107713660046145b5565b6133de565b6103d2610784366004614502565b613476565b606e5461037b9060ff1681565b6001600160a01b0382166000908152606b6020908152604091829020825160c081018452905460ff80821615801580855261010084048316151595850195909552620100008304821615159584019590955263010000008204811615156060840152600160201b8204811615156080840152600160281b90910416151560a082015291610824575080604001515b6108695760405162461bcd60e51b815260206004820152601160248201527015d2551211149055d7d11254d050931151607a1b60448201526064015b60405180910390fd5b610873838561349c565b1561091757600061089085856108898685614b11565b600161358b565b6001600160a01b0386166000908152606a60205260408120919250906108b990879060016137d6565b9050606d54816108c99190614b50565b6108d561271084614b50565b10156109145760405162461bcd60e51b815260206004820152600e60248201526d1313d5d7d0d3d31310551154905360921b6044820152606401610860565b50505b50505050565b6033546001600160a01b031633146109475760405162461bcd60e51b815260040161086090614b6f565b6001600160a01b0381166000908152606f602052604090205460ff1661097f5760405162461bcd60e51b815260040161086090614ba4565b60408051600160208201526000910160408051601f198184030181529181526001600160a01b0385166000908152606a6020529081209192505b6109c2826138a5565b811015610ba45760006109d583836138af565b90506000816001600160a01b031663ae318c4d8860006040518363ffffffff1660e01b8152600401610a08929190614bd0565b60206040518083038186803b158015610a2057600080fd5b505afa158015610a34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a589190614beb565b90508015610a67575050610b92565b6040516354a5706f60e01b81526001600160a01b038881166004830152600091908416906354a5706f9060240160206040518083038186803b158015610aac57600080fd5b505afa158015610ac0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae49190614beb565b6040516374eb83c160e01b81529091506001600160a01b038416906374eb83c190610b17908a908c908b90600401614c5c565b600060405180830381600087803b158015610b3157600080fd5b505af1158015610b45573d6000803e3d6000fd5b50505050876001600160a01b03167f7114e74d858e0dbdc24007f787fb65581d52fdcd4e8517d6f3a1f9448323428c848385604051610b8693929190614c91565b60405180910390a25050505b80610b9c81614cb2565b9150506109b9565b506001600160a01b0384166000908152606960205260408120905b610bc8826138a5565b811015610914576000610bdb83836138af565b90506000816001600160a01b031663ae318c4d8960006040518363ffffffff1660e01b8152600401610c0e929190614bd0565b60206040518083038186803b158015610c2657600080fd5b505afa158015610c3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5e9190614beb565b9050600081118015610c8d5750731e3174c5757cf5457f8a3a8c3e4a35ed2d1383226001600160a01b03831614155b15610c99575050610db2565b60405163fc7e286d60e01b81526001600160a01b0389811660048301526000919084169063fc7e286d9060240160206040518083038186803b158015610cde57600080fd5b505afa158015610cf2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d169190614beb565b6040516374eb83c160e01b81529091506001600160a01b038416906374eb83c190610d49908b908d908c90600401614c5c565b600060405180830381600087803b158015610d6357600080fd5b505af1158015610d77573d6000803e3d6000fd5b50505050886001600160a01b0316600080516020614f16833981519152848385604051610da693929190614c91565b60405180910390a25050505b80610dbc81614cb2565b915050610bbf565b6001600160a01b0382166000908152606b6020908152604091829020825160c081018452905460ff80821615801580855261010084048316151595850195909552620100008304821615159584019590955263010000008204811615156060840152600160201b8204811615156080840152600160281b90910416151560a082015291610e52575080602001515b6109175760405162461bcd60e51b815260206004820152601060248201526f4445504f534954455f44495341424c4560801b6044820152606401610860565b6033546001600160a01b03163314610ebb5760405162461bcd60e51b815260040161086090614b6f565b6001600160a01b038316610f025760405162461bcd60e51b815260206004820152600e60248201526d494e56414c49445f4f5241434c4560901b6044820152606401610860565b6127108261ffff161115610f4a5760405162461bcd60e51b815260206004820152600f60248201526e444953434f55545f544f4f5f42494760881b6044820152606401610860565b6127108161ffff161015610f945760405162461bcd60e51b81526020600482015260116024820152701414915352555357d513d3d7d4d3505313607a1b6044820152606401610860565b6001600160a01b0384811660008181526067602090815260409182902080549488166001600160b01b03199095168517600160a01b61ffff8981169182029290921761ffff60b01b1916600160b01b92891692830217835584519687529286019290925291840152917f7cb71f764a6240297d887d23473a61cf07ba9d34ccfbdd326620a5b896cd33469060600160405180910390a25050505050565b6033546001600160a01b0316331461105b5760405162461bcd60e51b815260040161086090614b6f565b6001600160a01b0382166000908152606f602052604090819020805460ff1916831515179055517fd8949265082223b72749a7863e551684ee0df9a0c8ece536b9f14686b68425fc906110b19084908490614bd0565b60405180910390a15050565b606e54339060ff16806110e857506001600160a01b0381166000908152606f602052604090205460ff165b6111295760405162461bcd60e51b815260206004820152601260248201527124a72b20a624a22fa624a8aaa4a220aa27a960711b6044820152606401610860565b61113284612293565b6111725760405162461bcd60e51b81526020600482015260116024820152700869e989882a88aa48298be8a9c9eaa8e9607b1b6044820152606401610860565b6001600160a01b038416600090815260696020526040812090611194826138a5565b9050805b80156112485760006111b56111ae600184614ccd565b85906138af565b90506111c1818961349c565b15611235576111d088826138bb565b6040516374eb83c160e01b81526001600160a01b038216906374eb83c1906112029088908c908c908c90600401614ce4565b600060405180830381600087803b15801561121c57600080fd5b505af1158015611230573d6000803e3d6000fd5b505050505b508061124081614d30565b915050611198565b506001600160a01b0386166000908152606a602052604081209061126b826138a5565b9050805b80156113095760006112856111ae600184614ccd565b90506112918a826138bb565b6040516374eb83c160e01b81526001600160a01b038216906374eb83c1906112c3908a908e908e908e90600401614ce4565b600060405180830381600087803b1580156112dd57600080fd5b505af11580156112f1573d6000803e3d6000fd5b5050505050808061130190614d30565b91505061126f565b505050505050505050565b6033546001600160a01b0316331461133e5760405162461bcd60e51b815260040161086090614b6f565b6001600160a01b0381166113855760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa22a27a5a2a760911b6044820152606401610860565b6001600160a01b0382811660008181526065602090815260409182902080548686166001600160a01b0319821681179092558351951680865291850152927fd5c0cad2a6b3eea813a7bdf548752779e26da201508f6e807ec5ec3d65d020d6910160405180910390a2505050565b6001600160a01b039081166000908152606760209081526040918290208251606081018452905493841680825261ffff600160a01b86048116938301849052600160b01b90950490941692018290529192565b6001600160a01b0382166000908152606b6020908152604091829020825160c081018452905460ff80821615801580855261010084048316151595850195909552620100008304821615159584019590955263010000008204811615156060840152600160201b8204811615156080840152600160281b90910416151560a0820152916114d4575080606001515b6115125760405162461bcd60e51b815260206004820152600f60248201526e1093d49493d5d7d11254d050931151608a1b6044820152606401610860565b600061151f856001613989565b6001600160a01b0386166000908152606a60205260408120919250906108b990879087876001613a73565b600081611577576001600160a01b0383166000908152606a60205260409020611572906138a5565b611598565b6001600160a01b0383166000908152606960205260409020611598906138a5565b90505b92915050565b6001600160a01b038416600090815260696020526040812081906115c9908790878787613a73565b6001600160a01b0387166000908152606a602052604090209092506115f2908790878787613a73565b905094509492505050565b60008060008060008061160f886113f3565b9197509550935061161f876113f3565b979a96995094975095939492505050565b6033546001600160a01b0316331461165a5760405162461bcd60e51b815260040161086090614b6f565b81518151808214801561166c57508115155b6116a85760405162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f504152414d60981b6044820152606401610860565b60005b828110156118ce576000607060008784815181106116cb576116cb614d47565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff1660028111156117035761170361480d565b146117405760405162461bcd60e51b815260206004820152600d60248201526c5345545f4f4e4c595f4f4e434560981b6044820152606401610860565b600284828151811061175457611754614d47565b6020026020010151600281111561176d5761176d61480d565b14806117a35750600184828151811061178857611788614d47565b602002602001015160028111156117a1576117a161480d565b145b6117df5760405162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f56414c554560981b6044820152606401610860565b8381815181106117f1576117f1614d47565b60200260200101516070600087848151811061180f5761180f614d47565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916600183600281111561184c5761184c61480d565b02179055507f05334cade7d5051a457d6cddb92a76a5266e31459f3118a536c99b169beaa0f585828151811061188457611884614d47565b602002602001015185838151811061189e5761189e614d47565b60200260200101516040516118b4929190614d5d565b60405180910390a1806118c681614cb2565b9150506116ab565b5050505050565b6033546001600160a01b031633146118ff5760405162461bcd60e51b815260040161086090614b6f565b6001600160a01b03808216600090815260666020908152604080832054815163429c145b60e11b8152915194169363853828b693600480840194938390030190829087803b15801561195057600080fd5b505af1158015611964573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119889190614beb565b5050565b60008061199a846001613989565b6001600160a01b0385166000908152606a60205260408120919250906119c390869060016137d6565b90506000606d54612710846119d89190614b50565b6119e29190614d7a565b905081811115611a855760006119f88383614ccd565b60405163281aa7fd60e21b815260048101829052600160248201529091506001600160a01b0387169063a06a9ff49060440160206040518083038186803b158015611a4257600080fd5b505afa158015611a56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7a9190614beb565b94505050505061159b565b6000935050505061159b565b50505092915050565b6033546001600160a01b03163314611ac45760405162461bcd60e51b815260040161086090614b6f565b816001600160a01b031663ba58591c6040518163ffffffff1660e01b815260040160206040518083038186803b158015611afd57600080fd5b505afa158015611b11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b359190614d9c565b611b715760405162461bcd60e51b815260206004820152600d60248201526c1253959053125157d590531555609a1b6044820152606401610860565b6001600160a01b038084166000818152606860205260409081902080548685166001600160a01b031982161790915590519216917f0ff9c79e47a5eed61bfb093d8315d37efcfa7f6679e507f608289c78941b0e5190611bd690849087908790614db9565b60405180910390a250505050565b6033546001600160a01b03163314611c0e5760405162461bcd60e51b815260040161086090614b6f565b606d8190556040518181527f13e612fc69e30b3adcca3cb6573fa94782e94f59261f9b32c96c34b90552b335906020015b60405180910390a150565b6001600160a01b0382166000908152606b6020908152604091829020825160c081018452905460ff80821615801580855261010084048316151595850195909552620100008304821615159584019590955263010000008204811615156060840152600160201b8204811615156080840152600160281b90910416151560a082015291611cd8575080608001515b6109175760405162461bcd60e51b815260206004820152600e60248201526d149154105657d11254d05093115160921b6044820152606401610860565b6033546001600160a01b03163314611d3f5760405162461bcd60e51b815260040161086090614b6f565b6001600160a01b0382166000908152606b60209081526040918290208351815492850151858501516060870151608088015160a089015161ffff1990971694151561ff00191694909417610100931515939093029290921763ffff00001916620100009115159190910263ff0000001916176301000000911515919091021765ffff000000001916600160201b9115159190910265ff0000000000191617600160281b92151592909202919091179055517f0f86f36676a78407d88aa894e600955aca44b6b9eaff4740c81228e2fa75d628906110b19084908490614956565b6033546001600160a01b03163314611e495760405162461bcd60e51b815260040161086090614b6f565b606e805460ff19168215159081179091556040519081527fcfa23450328fe03391963dc3e54c19ebeecb28fd8a628b495b71ab8534d61c3290602001611c3f565b6033546001600160a01b03163314611eb45760405162461bcd60e51b815260040161086090614b6f565b611ebe6000613c86565b565b336000818152606b602052604090205460ff1680611efd57506001600160a01b0381166000908152606b6020526040902054600160281b900460ff165b611f3a5760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa1a0a62622a960911b6044820152606401610860565b600082611f5e576001600160a01b0384166000908152606a60205260409020611f77565b6001600160a01b03841660009081526069602052604090205b90506118ce8183613cd8565b6000611f8f6001613ced565b90508015611fa7576000805461ff0019166101001790555b611faf613d7a565b612af8606c556132c8606d55606e805460ff19166001179055801561200a576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001611c3f565b50565b6033546001600160a01b031633146120375760405162461bcd60e51b815260040161086090614b6f565b6001600160a01b0382166120835760405162461bcd60e51b815260206004820152601360248201527214dd1c985d1959da595cc8111a5cd8589b1959606a1b6044820152606401610860565b6001600160a01b0380841660009081526066602052604090205416801561211957806001600160a01b031663853828b66040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156120df57600080fd5b505af11580156120f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121179190614beb565b505b6001600160a01b038481166000818152606660205260409081902080546001600160a01b0319169387169390931790925590517fcc7d45f325309ae5b4940b5de638a482be2a51aa3a917326a84f65bcc2f7352390611bd690849087908790614db9565b6000806115c98686868661358b565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081018290526000846121e1576001600160a01b0386166000908152606a602052604090206121fa565b6001600160a01b03861660009081526069602052604090205b905061220681856138af565b6001600160a01b0381166000908152606b6020908152604091829020825160c081018452905460ff8082161515835261010082048116151593830193909352620100008104831615159382019390935263010000008304821615156060820152600160201b8304821615156080820152600160281b90920416151560a08201529097909650945050505050565b60008060006122a38460016133a1565b91509150606c54816122b59190614b50565b6122c161271084614b50565b10949350505050565b6033546001600160a01b031633146122f45760405162461bcd60e51b815260040161086090614b6f565b6001600160a01b0385166000908152606f602052604090205460ff1661232c5760405162461bcd60e51b815260040161086090614ba4565b8261236b5760405162461bcd60e51b815260206004820152600f60248201526e06e6f7468696e6720746f207377617608c1b6044820152606401610860565b8281146123e05760405162461bcd60e51b815260206004820152603a60248201527f6c656e677468206f6620736f757263655661756c74735f2073686f756c64206260448201527f6520657175616c20746f207461726765745661756c74735f27730000000000006064820152608401610860565b604080516001602082015260009101604051602081830303815290604052905060005b8481101561288657600086868381811061241f5761241f614d47565b905060200201602081019061243491906145b5565b9050600085858481811061244a5761244a614d47565b905060200201602081019061245f91906145b5565b90506000826001600160a01b031663ae318c4d8c60006040518363ffffffff1660e01b8152600401612492929190614bd0565b60206040518083038186803b1580156124aa57600080fd5b505afa1580156124be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124e29190614beb565b60405163fc7e286d60e01b81526001600160a01b038d8116600483015291925060009185169063fc7e286d9060240160206040518083038186803b15801561252957600080fd5b505afa15801561253d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125619190614beb565b9050836001600160a01b03166374eb83c18c8e896040518463ffffffff1660e01b815260040161259393929190614c5c565b600060405180830381600087803b1580156125ad57600080fd5b505af11580156125c1573d6000803e3d6000fd5b505050506001600160a01b038416734527ba20f16f86525b6d174b6314502ca6d5256e14156125ff576125f8816301d2eb40614b50565b9150612635565b73c703fdad6ca5df56bd729fef24157e196a4810f86001600160a01b03851614156126355761263281630c0a4680614b50565b91505b600082116126465750505050612874565b604051630eda25c760e11b8152670de0b6b3a76400006004820152600060248201819052906001600160a01b03851690631db44b8e9060440160206040518083038186803b15801561269757600080fd5b505afa1580156126ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126cf9190614beb565b9050600064e8d4a51000826126e48683614b50565b6126ee9190614d7a565b6126f89190614d7a565b9050612782333083886001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561273957600080fd5b505afa15801561274d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127719190614ddd565b6001600160a01b0316929190613da9565b6128088582876001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156127c057600080fd5b505afa1580156127d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127f89190614ddd565b6001600160a01b03169190613e01565b612813858f83613f25565b604080516001600160a01b038881168252602082018690528781169282019290925260608101839052908f16907fcba74a9a38e532ea920e947d3babe6efc7b838cb416f82d9b9d79f32744b34ca9060800160405180910390a25050505050505b8061287e81614cb2565b915050612403565b5050505050505050565b336000818152606b602052604090205460ff16806128cd57506001600160a01b0381166000908152606b6020526040902054600160281b900460ff165b61290a5760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa1a0a62622a960911b6044820152606401610860565b60008261292e576001600160a01b0384166000908152606a60205260409020612947565b6001600160a01b03841660009081526069602052604090205b90506014612954826138a5565b106129915760405162461bcd60e51b815260206004820152600d60248201526c0949e929cbea89e9ebe9aaa869609b1b6044820152606401610860565b6118ce8183613ffc565b8151815133919080821480156129b057508115155b6129ec5760405162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f504152414d60981b6044820152606401610860565b60005b82811015612b98576002858281518110612a0b57612a0b614d47565b60200260200101516002811115612a2457612a2461480d565b1480612a5a57506001858281518110612a3f57612a3f614d47565b60200260200101516002811115612a5857612a5861480d565b145b612a965760405162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f56414c554560981b6044820152606401610860565b848181518110612aa857612aa8614d47565b602002602001015160716000888481518110612ac657612ac6614d47565b6020908102919091018101516001600160a01b039081168352828201939093526040918201600090812093891681529290529020805460ff19166001836002811115612b1457612b1461480d565b02179055507f65d4763abdc1e045affaf50aed5fc2a1f4f466da45ee41ea701e0ad5029ff0b0868281518110612b4c57612b4c614d47565b602002602001015185878481518110612b6757612b67614d47565b6020026020010151604051612b7e93929190614dfa565b60405180910390a180612b9081614cb2565b9150506129ef565b506000612ba6846001613989565b6001600160a01b0385166000908152606a6020526040812091925090612bcf90869060016137d6565b90506000606d5461271084612be49190614b50565b612bee9190614d7a565b9050606d5482612bfe9190614b50565b612c0a61271085614b50565b10156128865760405162461bcd60e51b815260206004820152601d60248201527f53455456414c49445641554c543a204c4f575f434f4c4c41544552414c0000006044820152606401610860565b6033546001600160a01b03163314612c825760405162461bcd60e51b815260040161086090614b6f565b606c8190556040518181527f138a4f81e91d7ed8109625537819aae162d22b1e4b5f73e1919d1f6e21bfbb4b90602001611c3f565b6033546001600160a01b03163314612ce15760405162461bcd60e51b815260040161086090614b6f565b6001600160a01b0383166000908152606f602052604090205460ff16612d195760405162461bcd60e51b815260040161086090614ba4565b6001600160a01b038416600090815260696020908152604080832081516001818501528251808203909401845282019091529190815b84811015612f4e576000868683818110612d6b57612d6b614d47565b9050602002016020810190612d8091906145b5565b90506000816001600160a01b031663ae318c4d8b60006040518363ffffffff1660e01b8152600401612db3929190614bd0565b60206040518083038186803b158015612dcb57600080fd5b505afa158015612ddf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e039190614beb565b6040516354a5706f60e01b81526001600160a01b038c811660048301529192506000918416906354a5706f9060240160206040518083038186803b158015612e4a57600080fd5b505afa158015612e5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e829190614beb565b9050612e8e8287614e1f565b6040516374eb83c160e01b81529096506001600160a01b038416906374eb83c190612ec1908d908f908a90600401614c5c565b600060405180830381600087803b158015612edb57600080fd5b505af1158015612eef573d6000803e3d6000fd5b505050508a6001600160a01b03167f7114e74d858e0dbdc24007f787fb65581d52fdcd4e8517d6f3a1f9448323428c848385604051612f3093929190614c91565b60405180910390a25050508080612f4690614cb2565b915050612d4f565b5060008211612f5f57505050610917565b600080612f6b856138a5565b90505b8015613352576000612f8b612f84600184614ccd565b87906138af565b9050612f97818b61349c565b1580612fc357506001600160a01b0381166000908152606b6020526040902054600160281b900460ff16155b15612fce5750613340565b60405163ae318c4d60e01b81526000906001600160a01b0383169063ae318c4d90612fff908e908590600401614bd0565b60206040518083038186803b15801561301757600080fd5b505afa15801561302b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061304f9190614beb565b905061305b8185614e1f565b60405163fc7e286d60e01b81526001600160a01b038d8116600483015291955060009184169063fc7e286d9060240160206040518083038186803b1580156130a257600080fd5b505afa1580156130b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130da9190614beb565b9050826001600160a01b03166374eb83c18c8e896040518463ffffffff1660e01b815260040161310c93929190614c5c565b600060405180830381600087803b15801561312657600080fd5b505af115801561313a573d6000803e3d6000fd5b5050505086851415613181578b6001600160a01b0316600080516020614f1683398151915284838560405161317193929190614c91565b60405180910390a2505050613352565b868510156131c4578b6001600160a01b0316600080516020614f168339815191528483856040516131b493929190614c91565b60405180910390a2505050613340565b60006131d08887614ccd565b90506305f5e10081101561321a578c6001600160a01b0316600080516020614f1683398151915285848660405161320993929190614c91565b60405180910390a250505050613352565b600064e8d4a510008461322d8486614b50565b61323c9064e8d4a51000614b50565b6132469190614d7a565b6132509190614d7a565b90508281111561325d5750815b61329c8d3083886001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561273957600080fd5b6132da8582876001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156127c057600080fd5b6132e5858f83613f25565b6001600160a01b038e16600080516020614f16833981519152866133098487614ccd565b6133138689614ccd565b60405161332293929190614c91565b60405180910390a26133348288614ccd565b96505050505050613352565b8061334a81614d30565b915050612f6e565b5060408051848152602081018390526001600160a01b038a16917f26e0bc17070eb8681630837613dc291e5976262044227decb74f578aee1eee5c910160405180910390a25050505050505050565b6000806133ae8484613989565b6001600160a01b0385166000908152606a602052604090209092506133d5908590856137d6565b90509250929050565b6033546001600160a01b031633146134085760405162461bcd60e51b815260040161086090614b6f565b6001600160a01b03811661346d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610860565b61200a81613c86565b6001600160a01b038216600090815260696020526040812081906133ae908590856137d6565b6001600160a01b03808316600090815260716020908152604080832093851683529290529081205460ff1681808260028111156134db576134db61480d565b146134e65781613503565b6001600160a01b03851660009081526070602052604090205460ff165b905060008160028111156135195761351961480d565b141561355b5760405162461bcd60e51b81526020600482015260116024820152701590531251159055531517d55392539255607a1b6044820152606401610860565b600281600281111561356f5761356f61480d565b14156135805760019250505061159b565b506000949350505050565b6001600160a01b0384166000908152606960205260408120816135ad826138a5565b90506000805b828110156137255760006135c785836138af565b90506135d3818b61349c565b1561371257806001600160a01b0316896001600160a01b0316141561368757604051635ac28bf960e01b81526001600160a01b038b81166004830152602482018a9052821690635ac28bf99060440160206040518083038186803b15801561363a57600080fd5b505afa15801561364e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136729190614beb565b61367c9087614e1f565b955060019250613712565b60405163ae318c4d60e01b81526001600160a01b0382169063ae318c4d906136b5908d908b90600401614bd0565b60206040518083038186803b1580156136cd57600080fd5b505afa1580156136e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137059190614beb565b61370f9087614e1f565b95505b508061371d81614cb2565b9150506135b3565b50801580156137395750613739878961349c565b156137cb57604051635ac28bf960e01b81526001600160a01b03898116600483015260248201889052881690635ac28bf99060440160206040518083038186803b15801561378657600080fd5b505afa15801561379a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137be9190614beb565b6137c89085614e1f565b93505b505050949350505050565b6000806137e2846138a5565b905060005b8181101561389c5760006137fb86836138af565b60405163ae318c4d60e01b81529091506001600160a01b0382169063ae318c4d9061382c908a908990600401614bd0565b60206040518083038186803b15801561384457600080fd5b505afa158015613858573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061387c9190614beb565b6138869085614e1f565b935050808061389490614cb2565b9150506137e7565b50509392505050565b600061159b825490565b60006115988383614011565b6001600160a01b0381166000908152606b6020908152604091829020825160c081018452905460ff80821615801580855261010084048316151595850195909552620100008304821615159584019590955263010000008204811615156060840152600160201b8204811615156080840152600160281b90910416151560a08201529161394957508060a001515b6139845760405162461bcd60e51b815260206004820152600c60248201526b13125457d11254d05093115160a21b6044820152606401610860565b505050565b6001600160a01b0382166000908152606960205260408120816139ab826138a5565b905060005b81811015611a915760006139c484836138af565b90506139d0818861349c565b15613a605760405163ae318c4d60e01b81526001600160a01b0382169063ae318c4d90613a03908a908a90600401614bd0565b60206040518083038186803b158015613a1b57600080fd5b505afa158015613a2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a539190614beb565b613a5d9086614e1f565b94505b5080613a6b81614cb2565b9150506139b0565b600080613a7f866138a5565b90506000805b82811015613be8576000613a9989836138af565b9050806001600160a01b0316886001600160a01b03161415613b4a57604051635ac28bf960e01b81526001600160a01b038b8116600483015260248201899052821690635ac28bf99060440160206040518083038186803b158015613afd57600080fd5b505afa158015613b11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b359190614beb565b613b3f9086614e1f565b945060019250613bd5565b60405163ae318c4d60e01b81526001600160a01b0382169063ae318c4d90613b78908d908a90600401614bd0565b60206040518083038186803b158015613b9057600080fd5b505afa158015613ba4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bc89190614beb565b613bd29086614e1f565b94505b5080613be081614cb2565b915050613a85565b5080613c7b57604051635ac28bf960e01b81526001600160a01b03898116600483015260248201879052871690635ac28bf99060440160206040518083038186803b158015613c3657600080fd5b505afa158015613c4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c6e9190614beb565b613c789084614e1f565b92505b505095945050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000611598836001600160a01b03841661403b565b60008054610100900460ff1615613d34578160ff166001148015613d105750303b155b613d2c5760405162461bcd60e51b815260040161086090614e37565b506000919050565b60005460ff808416911610613d5b5760405162461bcd60e51b815260040161086090614e37565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff16613da15760405162461bcd60e51b815260040161086090614e85565b611ebe61412e565b610917846323b872dd60e01b858585604051602401613dca93929190614db9565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261415e565b801580613e8a5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015613e5057600080fd5b505afa158015613e64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e889190614beb565b155b613ef55760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610860565b6040516001600160a01b03831660248201526044810182905261398490849063095ea7b360e01b90606401613dca565b826001600160a01b031663f213159c846001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015613f6d57600080fd5b505afa158015613f81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fa59190614ddd565b84846040518463ffffffff1660e01b8152600401613fc593929190614db9565b600060405180830381600087803b158015613fdf57600080fd5b505af1158015613ff3573d6000803e3d6000fd5b50505050505050565b6000611598836001600160a01b038416614230565b600082600001828154811061402857614028614d47565b9060005260206000200154905092915050565b6000818152600183016020526040812054801561412457600061405f600183614ccd565b855490915060009061407390600190614ccd565b90508181146140d857600086600001828154811061409357614093614d47565b90600052602060002001549050808760000184815481106140b6576140b6614d47565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806140e9576140e9614ed0565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061159b565b600091505061159b565b600054610100900460ff166141555760405162461bcd60e51b815260040161086090614e85565b611ebe33613c86565b60006141b3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661427f9092919063ffffffff16565b80519091501561398457808060200190518101906141d19190614d9c565b6139845760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610860565b60008181526001830160205260408120546142775750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561159b565b50600061159b565b606061428e8484600085614298565b90505b9392505050565b6060824710156142f95760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610860565b843b6143475760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610860565b600080866001600160a01b031685876040516143639190614ee6565b60006040518083038185875af1925050503d80600081146143a0576040519150601f19603f3d011682016040523d82523d6000602084013e6143a5565b606091505b50915091506143b58282866143c2565b925050505b949350505050565b606083156143d1575081614291565b8251156143e15782518084602001fd5b8160405162461bcd60e51b81526004016108609190614f02565b6001600160a01b038116811461200a57600080fd5b60008060006060848603121561442557600080fd5b8335614430816143fb565b92506020840135614440816143fb565b929592945050506040919091013590565b6000806040838503121561446457600080fd5b823561446f816143fb565b9150602083013561447f816143fb565b809150509250929050565b803561ffff81168114613d7557600080fd5b600080600080608085870312156144b257600080fd5b84356144bd816143fb565b935060208501356144cd816143fb565b92506144db6040860161448a565b91506144e96060860161448a565b905092959194509250565b801515811461200a57600080fd5b6000806040838503121561451557600080fd5b8235614520816143fb565b9150602083013561447f816144f4565b60008060006040848603121561454557600080fd5b8335614550816143fb565b9250602084013567ffffffffffffffff8082111561456d57600080fd5b818601915086601f83011261458157600080fd5b81358181111561459057600080fd5b8760208285010111156145a257600080fd5b6020830194508093505050509250925092565b6000602082840312156145c757600080fd5b8135614291816143fb565b600080600080608085870312156145e857600080fd5b84356145f3816143fb565b93506020850135614603816143fb565b925060408501359150606085013561461a816144f4565b939692955090935050565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff8111828210171561465e5761465e614625565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561468d5761468d614625565b604052919050565b600067ffffffffffffffff8211156146af576146af614625565b5060051b60200190565b600082601f8301126146ca57600080fd5b813560206146df6146da83614695565b614664565b82815260059290921b840181019181810190868411156146fe57600080fd5b8286015b848110156147275780356003811061471a5760008081fd5b8352918301918301614702565b509695505050505050565b6000806040838503121561474557600080fd5b823567ffffffffffffffff8082111561475d57600080fd5b818501915085601f83011261477157600080fd5b813560206147816146da83614695565b82815260059290921b840181019181810190898411156147a057600080fd5b948201945b838610156147c75785356147b8816143fb565b825294820194908201906147a5565b965050860135925050808211156147dd57600080fd5b506147ea858286016146b9565b9150509250929050565b60006020828403121561480657600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6003811061484157634e487b7160e01b600052602160045260246000fd5b9052565b6020810161159b8284614823565b60008082840360e081121561486757600080fd5b8335614872816143fb565b925060c0601f198201121561488657600080fd5b5061488f61463b565b602084013561489d816144f4565b815260408401356148ad816144f4565b602082015260608401356148c0816144f4565b604082015260808401356148d3816144f4565b606082015260a08401356148e6816144f4565b608082015260c08401356148f9816144f4565b60a0820152919491935090915050565b60006020828403121561491b57600080fd5b8135614291816144f4565b60008060006060848603121561493b57600080fd5b8335614946816143fb565b92506020840135614440816144f4565b600060e08201905060018060a01b03841682528251151560208301526020830151151560408301526040830151151560608301526060830151151560808301526080830151151560a083015260a0830151151560c08301529392505050565b60008083601f8401126149c757600080fd5b50813567ffffffffffffffff8111156149df57600080fd5b6020830191508360208260051b85010111156149fa57600080fd5b9250929050565b60008060008060008060808789031215614a1a57600080fd5b8635614a25816143fb565b95506020870135614a35816143fb565b9450604087013567ffffffffffffffff80821115614a5257600080fd5b614a5e8a838b016149b5565b90965094506060890135915080821115614a7757600080fd5b50614a8489828a016149b5565b979a9699509497509295939492505050565b60008060008060608587031215614aac57600080fd5b8435614ab7816143fb565b93506020850135614ac7816143fb565b9250604085013567ffffffffffffffff811115614ae357600080fd5b614aef878288016149b5565b95989497509550505050565b634e487b7160e01b600052601160045260246000fd5b60008083128015600160ff1b850184121615614b2f57614b2f614afb565b6001600160ff1b0384018313811615614b4a57614b4a614afb565b50500390565b6000816000190483118215151615614b6a57614b6a614afb565b500290565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526012908201527124b73b30b634b2103634b8bab4b230ba37b960711b604082015260600190565b6001600160a01b039290921682521515602082015260400190565b600060208284031215614bfd57600080fd5b5051919050565b60005b83811015614c1f578181015183820152602001614c07565b838111156109175750506000910152565b60008151808452614c48816020860160208601614c04565b601f01601f19169290920160200192915050565b6001600160a01b03848116825283166020820152606060408201819052600090614c8890830184614c30565b95945050505050565b6001600160a01b039390931683526020830191909152604082015260600190565b6000600019821415614cc657614cc6614afb565b5060010190565b600082821015614cdf57614cdf614afb565b500390565b6001600160a01b0385811682528416602082015260606040820181905281018290526000828460808401376000608084840101526080601f19601f850116830101905095945050505050565b600081614d3f57614d3f614afb565b506000190190565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0383168152604081016142916020830184614823565b600082614d9757634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215614dae57600080fd5b8151614291816144f4565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215614def57600080fd5b8151614291816143fb565b6001600160a01b03848116825283166020820152606081016143ba6040830184614823565b60008219821115614e3257614e32614afb565b500190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052603160045260246000fd5b60008251614ef8818460208701614c04565b9190910192915050565b6020815260006115986020830184614c3056fe007534de14ea9193847e0ffc37f145402749f07b3c792a421470da99278f1359a26469706673582212202540fe1a735bc037aafa0eaf8cc61837986155ac912d89a7801ba53019cab0b764736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "beforeBorrow(address,address,uint256)": {
        "params": {
          "_amount": "loan amount",
          "_user": "borrower",
          "_vault": "address of loan market"
        }
      },
      "beforeDeposit(address,address,uint256)": {
        "params": {
          "_vault": "address of deposit market param  _amount deposit amount"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "userPendingValues(address,address,int256,bool)": {
        "params": {
          "_amount": "the amount of deposits or withdrawals",
          "_dp": "discount or premium",
          "_user": "depositors",
          "_vault": "target vault"
        }
      },
      "userTotalPendingValues(address,address,int256,bool)": {
        "params": {
          "_amount": "the amount of deposits or withdrawals",
          "_dp": "discount or premium",
          "_user": "depositors",
          "_vault": "target vault"
        }
      },
      "userTotalValues(address,bool)": {
        "params": {
          "_dp": "discount or premium",
          "_user": "depositors"
        }
      },
      "userValues(address,bool)": {
        "params": {
          "_dp": "discount or premium",
          "_user": "depositors"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "beforeBorrow(address,address,uint256)": {
        "notice": "Risk control check before borrowing"
      },
      "beforeDeposit(address,address,uint256)": {
        "notice": "Risk control check before deposit param _user depositors"
      },
      "isNeedLiquidate(address)": {
        "notice": "determine whether the borrower needs to be liquidated"
      },
      "maxBorrow(address,address)": {
        "notice": "maximum that a user can borrow from a Vault"
      },
      "userPendingValues(address,address,int256,bool)": {
        "notice": "predict total valid vault value after the user operating vault (i.e., Vault of deposit only counts collateral)"
      },
      "userTotalPendingValues(address,address,int256,bool)": {
        "notice": "predict total vault value after the user operating Vault"
      },
      "userTotalValues(address,bool)": {
        "notice": "Get user total Vault value"
      },
      "userValues(address,bool)": {
        "notice": "Get user total valid Vault value (i.e., Vault of deposit only counts collateral)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 188,
        "contract": "contracts/AppController.sol:AppController",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 191,
        "contract": "contracts/AppController.sol:AppController",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1640,
        "contract": "contracts/AppController.sol:AppController",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 68,
        "contract": "contracts/AppController.sol:AppController",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 180,
        "contract": "contracts/AppController.sol:AppController",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5807,
        "contract": "contracts/AppController.sol:AppController",
        "label": "dyTokens",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 5811,
        "contract": "contracts/AppController.sol:AppController",
        "label": "strategies",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 5823,
        "contract": "contracts/AppController.sol:AppController",
        "label": "valueConfs",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_address,t_struct(ValueConf)5818_storage)"
      },
      {
        "astId": 5828,
        "contract": "contracts/AppController.sol:AppController",
        "label": "dyTokenVaults",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 5833,
        "contract": "contracts/AppController.sol:AppController",
        "label": "userJoinedDepositVaults",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_address,t_struct(AddressSet)5179_storage)"
      },
      {
        "astId": 5838,
        "contract": "contracts/AppController.sol:AppController",
        "label": "userJoinedBorrowVaults",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_struct(AddressSet)5179_storage)"
      },
      {
        "astId": 5856,
        "contract": "contracts/AppController.sol:AppController",
        "label": "vaultStates",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_address,t_struct(VaultState)5851_storage)"
      },
      {
        "astId": 5858,
        "contract": "contracts/AppController.sol:AppController",
        "label": "liquidateRate",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 5860,
        "contract": "contracts/AppController.sol:AppController",
        "label": "collateralRate",
        "offset": 0,
        "slot": "109",
        "type": "t_uint256"
      },
      {
        "astId": 5862,
        "contract": "contracts/AppController.sol:AppController",
        "label": "isOpenLiquidate",
        "offset": 0,
        "slot": "110",
        "type": "t_bool"
      },
      {
        "astId": 5866,
        "contract": "contracts/AppController.sol:AppController",
        "label": "allowedLiquidator",
        "offset": 0,
        "slot": "111",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5872,
        "contract": "contracts/AppController.sol:AppController",
        "label": "validVaults",
        "offset": 0,
        "slot": "112",
        "type": "t_mapping(t_address,t_enum(ValidVault)16751)"
      },
      {
        "astId": 5880,
        "contract": "contracts/AppController.sol:AppController",
        "label": "validVaultsOfUser",
        "offset": 0,
        "slot": "113",
        "type": "t_mapping(t_address,t_mapping(t_address,t_enum(ValidVault)16751))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(ValidVault)16751": {
        "encoding": "inplace",
        "label": "enum IController.ValidVault",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_enum(ValidVault)16751)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum IController.ValidVault)",
        "numberOfBytes": "32",
        "value": "t_enum(ValidVault)16751"
      },
      "t_mapping(t_address,t_mapping(t_address,t_enum(ValidVault)16751))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => enum IController.ValidVault))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_enum(ValidVault)16751)"
      },
      "t_mapping(t_address,t_struct(AddressSet)5179_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)5179_storage"
      },
      "t_mapping(t_address,t_struct(ValueConf)5818_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AppController.ValueConf)",
        "numberOfBytes": "32",
        "value": "t_struct(ValueConf)5818_storage"
      },
      "t_mapping(t_address,t_struct(VaultState)5851_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AppController.VaultState)",
        "numberOfBytes": "32",
        "value": "t_struct(VaultState)5851_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)5179_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 5178,
            "contract": "contracts/AppController.sol:AppController",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4878_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)4878_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 4873,
            "contract": "contracts/AppController.sol:AppController",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4877,
            "contract": "contracts/AppController.sol:AppController",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ValueConf)5818_storage": {
        "encoding": "inplace",
        "label": "struct AppController.ValueConf",
        "members": [
          {
            "astId": 5813,
            "contract": "contracts/AppController.sol:AppController",
            "label": "oracle",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5815,
            "contract": "contracts/AppController.sol:AppController",
            "label": "dr",
            "offset": 20,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 5817,
            "contract": "contracts/AppController.sol:AppController",
            "label": "pr",
            "offset": 22,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(VaultState)5851_storage": {
        "encoding": "inplace",
        "label": "struct AppController.VaultState",
        "members": [
          {
            "astId": 5840,
            "contract": "contracts/AppController.sol:AppController",
            "label": "enabled",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5842,
            "contract": "contracts/AppController.sol:AppController",
            "label": "enableDeposit",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5844,
            "contract": "contracts/AppController.sol:AppController",
            "label": "enableWithdraw",
            "offset": 2,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5846,
            "contract": "contracts/AppController.sol:AppController",
            "label": "enableBorrow",
            "offset": 3,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5848,
            "contract": "contracts/AppController.sol:AppController",
            "label": "enableRepay",
            "offset": 4,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5850,
            "contract": "contracts/AppController.sol:AppController",
            "label": "enableLiquidate",
            "offset": 5,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}