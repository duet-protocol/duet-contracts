{
  "address": "0xe1fdA208D4528d5cD95696e7c7F49221a5C10AdB",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "AllowedLiquidatorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevQuota",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newQuota",
          "type": "uint256"
        }
      ],
      "name": "BorrowQuotaChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralRate",
          "type": "uint256"
        }
      ],
      "name": "CollateralRateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "dToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldVault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newVault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vtype",
          "type": "uint256"
        }
      ],
      "name": "DTokenVaultChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usdValue",
          "type": "uint256"
        }
      ],
      "name": "DepositVaultReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sourceVault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sourceAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "targetVault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetAmount",
          "type": "uint256"
        }
      ],
      "name": "DepositVaultSwapped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum IController.ValidVault",
          "name": "state",
          "type": "uint8"
        }
      ],
      "name": "InitValidVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidateRate",
          "type": "uint256"
        }
      ],
      "name": "LiquidateRateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usdValue",
          "type": "uint256"
        }
      ],
      "name": "MintVaultReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "open",
          "type": "bool"
        }
      ],
      "name": "OpenLiquidateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum IController.ValidVault",
          "name": "state",
          "type": "uint8"
        }
      ],
      "name": "SetValidVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "enabled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableDeposit",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableWithdraw",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableBorrow",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableRepay",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableLiquidate",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct AppController.VaultState",
          "name": "state",
          "type": "tuple"
        }
      ],
      "name": "SetVaultStates",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldDToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newDToken",
          "type": "address"
        }
      ],
      "name": "UnderlyingDTokenChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldStrage",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newDToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stype",
          "type": "uint256"
        }
      ],
      "name": "UnderlyingStrategyChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "discount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "premium",
          "type": "uint256"
        }
      ],
      "name": "ValueConfChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expectedUsdValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "releasedUsdValue",
          "type": "uint256"
        }
      ],
      "name": "VaultsReleased",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedLiquidator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "beforeBorrow",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "beforeDeposit",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_repayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "beforeRepay",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "beforeWithdraw",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "dyTokenVaults",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "dyTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        }
      ],
      "name": "emergencyWithdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isDepositVault",
          "type": "bool"
        }
      ],
      "name": "exitVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        }
      ],
      "name": "getValueConf",
      "outputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "dr",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "pr",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        }
      ],
      "name": "getValueConfs",
      "outputs": [
        {
          "internalType": "address",
          "name": "oracle0",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "dr0",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "pr0",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "oracle1",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "dr1",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "pr1",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_vault",
          "type": "address[]"
        },
        {
          "internalType": "enum IController.ValidVault[]",
          "name": "_state",
          "type": "uint8[]"
        }
      ],
      "name": "initValidVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "isNeedLiquidate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOpenLiquidate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isDepositVault",
          "type": "bool"
        }
      ],
      "name": "joinVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidateRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "maxBorrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator_",
          "type": "address"
        },
        {
          "internalType": "contract IVault[]",
          "name": "mintVaults_",
          "type": "address[]"
        }
      ],
      "name": "releaseMintVaults",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator_",
          "type": "address"
        }
      ],
      "name": "releaseZeroValueVaults",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_collateralRate",
          "type": "uint256"
        }
      ],
      "name": "setCollateralRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dToken",
          "type": "address"
        }
      ],
      "name": "setDYToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_liquidateRate",
          "type": "uint256"
        }
      ],
      "name": "setLiquidateRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_open",
          "type": "bool"
        }
      ],
      "name": "setOpenLiquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_discount",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_premium",
          "type": "uint16"
        }
      ],
      "name": "setOracles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stype",
          "type": "uint256"
        }
      ],
      "name": "setStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_vault",
          "type": "address[]"
        },
        {
          "internalType": "enum IController.ValidVault[]",
          "name": "_state",
          "type": "uint8[]"
        }
      ],
      "name": "setValidVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dyToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "vtype",
          "type": "uint256"
        }
      ],
      "name": "setVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quota_",
          "type": "uint256"
        }
      ],
      "name": "setVaultBorrowQuota",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "enabled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableDeposit",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableWithdraw",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableBorrow",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableRepay",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableLiquidate",
              "type": "bool"
            }
          ],
          "internalType": "struct AppController.VaultState",
          "name": "_state",
          "type": "tuple"
        }
      ],
      "name": "setVaultStates",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "strategies",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidator_",
          "type": "address"
        },
        {
          "internalType": "contract IVault[]",
          "name": "sourceVaults_",
          "type": "address[]"
        },
        {
          "internalType": "contract IVault[]",
          "name": "targetVaults_",
          "type": "address[]"
        }
      ],
      "name": "swapUserDepositVaults",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "updateAllowedLiquidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isDepositVault",
          "type": "bool"
        }
      ],
      "name": "userJoinedVaultCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isDepositVault",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "userJoinedVaultInfoAt",
      "outputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "enabled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableDeposit",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableWithdraw",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableBorrow",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableRepay",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableLiquidate",
              "type": "bool"
            }
          ],
          "internalType": "struct AppController.VaultState",
          "name": "state",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "contract IVault",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "_amount",
          "type": "int256"
        },
        {
          "internalType": "bool",
          "name": "_dp",
          "type": "bool"
        }
      ],
      "name": "userPendingValues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pendingDepositValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingBrorowValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "contract IVault",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "_amount",
          "type": "int256"
        },
        {
          "internalType": "bool",
          "name": "_dp",
          "type": "bool"
        }
      ],
      "name": "userTotalPendingValues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pendingDepositValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingBrorowValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_dp",
          "type": "bool"
        }
      ],
      "name": "userTotalValues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalDepositValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalBorrowValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_dp",
          "type": "bool"
        }
      ],
      "name": "userValues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalDepositValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalBorrowValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "validVaults",
      "outputs": [
        {
          "internalType": "enum IController.ValidVault",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "validVaultsOfUser",
      "outputs": [
        {
          "internalType": "enum IController.ValidVault",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vaultStates",
      "outputs": [
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "enableDeposit",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "enableWithdraw",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "enableBorrow",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "enableRepay",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "enableLiquidate",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vaultsBorrowQuota",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa9f39e6023aad8978eccf9ea86dd6e4ebb15ddf836d049c2aa4126459afebb8c",
  "receipt": {
    "to": null,
    "from": "0xB3e74e2F2a3160b4BB25cfD683F6080d8D28BB3A",
    "contractAddress": "0xe1fdA208D4528d5cD95696e7c7F49221a5C10AdB",
    "transactionIndex": 86,
    "gasUsed": "4640570",
    "logsBloom": "0x
    "blockHash": "0x8b1ecc055f56f8622886ea7082e4e6d71599633a2aa3f6258cd5a4ef612c1cf6",
    "transactionHash": "0xa9f39e6023aad8978eccf9ea86dd6e4ebb15ddf836d049c2aa4126459afebb8c",
    "logs": [
      {
        "transactionIndex": 86,
        "blockNumber": 22363294,
        "transactionHash": "0xa9f39e6023aad8978eccf9ea86dd6e4ebb15ddf836d049c2aa4126459afebb8c",
        "address": "0xe1fdA208D4528d5cD95696e7c7F49221a5C10AdB",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 189,
        "blockHash": "0x8b1ecc055f56f8622886ea7082e4e6d71599633a2aa3f6258cd5a4ef612c1cf6"
      }
    ],
    "blockNumber": 22363294,
    "cumulativeGasUsed": "11996761",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "7c105b815c493d49d66db31847a1ffea",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"AllowedLiquidatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevQuota\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newQuota\",\"type\":\"uint256\"}],\"name\":\"BorrowQuotaChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralRate\",\"type\":\"uint256\"}],\"name\":\"CollateralRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vtype\",\"type\":\"uint256\"}],\"name\":\"DTokenVaultChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdValue\",\"type\":\"uint256\"}],\"name\":\"DepositVaultReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"targetVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"}],\"name\":\"DepositVaultSwapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IController.ValidVault\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"InitValidVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidateRate\",\"type\":\"uint256\"}],\"name\":\"LiquidateRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdValue\",\"type\":\"uint256\"}],\"name\":\"MintVaultReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"}],\"name\":\"OpenLiquidateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IController.ValidVault\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"SetValidVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableDeposit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableWithdraw\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableBorrow\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableRepay\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableLiquidate\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct AppController.VaultState\",\"name\":\"state\",\"type\":\"tuple\"}],\"name\":\"SetVaultStates\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldDToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDToken\",\"type\":\"address\"}],\"name\":\"UnderlyingDTokenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldStrage\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stype\",\"type\":\"uint256\"}],\"name\":\"UnderlyingStrategyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"discount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"}],\"name\":\"ValueConfChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expectedUsdValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releasedUsdValue\",\"type\":\"uint256\"}],\"name\":\"VaultsReleased\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedLiquidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"beforeBorrow\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"beforeDeposit\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_repayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"beforeRepay\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"beforeWithdraw\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dyTokenVaults\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dyTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"}],\"name\":\"emergencyWithdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDepositVault\",\"type\":\"bool\"}],\"name\":\"exitVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"}],\"name\":\"getValueConf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"dr\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"pr\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"getValueConfs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oracle0\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"dr0\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"pr0\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"oracle1\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"dr1\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"pr1\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_vault\",\"type\":\"address[]\"},{\"internalType\":\"enum IController.ValidVault[]\",\"name\":\"_state\",\"type\":\"uint8[]\"}],\"name\":\"initValidVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"isNeedLiquidate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOpenLiquidate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDepositVault\",\"type\":\"bool\"}],\"name\":\"joinVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidateRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"maxBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator_\",\"type\":\"address\"},{\"internalType\":\"contract IVault[]\",\"name\":\"mintVaults_\",\"type\":\"address[]\"}],\"name\":\"releaseMintVaults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator_\",\"type\":\"address\"}],\"name\":\"releaseZeroValueVaults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collateralRate\",\"type\":\"uint256\"}],\"name\":\"setCollateralRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dToken\",\"type\":\"address\"}],\"name\":\"setDYToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidateRate\",\"type\":\"uint256\"}],\"name\":\"setLiquidateRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_open\",\"type\":\"bool\"}],\"name\":\"setOpenLiquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_discount\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_premium\",\"type\":\"uint16\"}],\"name\":\"setOracles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stype\",\"type\":\"uint256\"}],\"name\":\"setStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_vault\",\"type\":\"address[]\"},{\"internalType\":\"enum IController.ValidVault[]\",\"name\":\"_state\",\"type\":\"uint8[]\"}],\"name\":\"setValidVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vtype\",\"type\":\"uint256\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quota_\",\"type\":\"uint256\"}],\"name\":\"setVaultBorrowQuota\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableDeposit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableWithdraw\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableBorrow\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableRepay\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableLiquidate\",\"type\":\"bool\"}],\"internalType\":\"struct AppController.VaultState\",\"name\":\"_state\",\"type\":\"tuple\"}],\"name\":\"setVaultStates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidator_\",\"type\":\"address\"},{\"internalType\":\"contract IVault[]\",\"name\":\"sourceVaults_\",\"type\":\"address[]\"},{\"internalType\":\"contract IVault[]\",\"name\":\"targetVaults_\",\"type\":\"address[]\"}],\"name\":\"swapUserDepositVaults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"updateAllowedLiquidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDepositVault\",\"type\":\"bool\"}],\"name\":\"userJoinedVaultCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDepositVault\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"userJoinedVaultInfoAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableDeposit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableWithdraw\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableBorrow\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableRepay\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableLiquidate\",\"type\":\"bool\"}],\"internalType\":\"struct AppController.VaultState\",\"name\":\"state\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"contract IVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"_amount\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"_dp\",\"type\":\"bool\"}],\"name\":\"userPendingValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingDepositValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingBrorowValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"contract IVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"_amount\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"_dp\",\"type\":\"bool\"}],\"name\":\"userTotalPendingValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingDepositValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingBrorowValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_dp\",\"type\":\"bool\"}],\"name\":\"userTotalValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalDepositValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_dp\",\"type\":\"bool\"}],\"name\":\"userValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalDepositValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"validVaults\",\"outputs\":[{\"internalType\":\"enum IController.ValidVault\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"validVaultsOfUser\",\"outputs\":[{\"internalType\":\"enum IController.ValidVault\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultStates\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableDeposit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableWithdraw\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableBorrow\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableRepay\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableLiquidate\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultsBorrowQuota\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"beforeBorrow(address,address,uint256)\":{\"params\":{\"_amount\":\"loan amount\",\"_user\":\"borrower\",\"_vault\":\"address of loan market\"}},\"beforeDeposit(address,address,uint256)\":{\"params\":{\"_vault\":\"address of deposit market param  _amount deposit amount\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"userPendingValues(address,address,int256,bool)\":{\"params\":{\"_amount\":\"the amount of deposits or withdrawals\",\"_dp\":\"discount or premium\",\"_user\":\"depositors\",\"_vault\":\"target vault\"}},\"userTotalPendingValues(address,address,int256,bool)\":{\"params\":{\"_amount\":\"the amount of deposits or withdrawals\",\"_dp\":\"discount or premium\",\"_user\":\"depositors\",\"_vault\":\"target vault\"}},\"userTotalValues(address,bool)\":{\"params\":{\"_dp\":\"discount or premium\",\"_user\":\"depositors\"}},\"userValues(address,bool)\":{\"params\":{\"_dp\":\"discount or premium\",\"_user\":\"depositors\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"beforeBorrow(address,address,uint256)\":{\"notice\":\"Risk control check before borrowing\"},\"beforeDeposit(address,address,uint256)\":{\"notice\":\"Risk control check before deposit param _user depositors\"},\"isNeedLiquidate(address)\":{\"notice\":\"determine whether the borrower needs to be liquidated\"},\"maxBorrow(address,address)\":{\"notice\":\"maximum that a user can borrow from a Vault\"},\"userPendingValues(address,address,int256,bool)\":{\"notice\":\"predict total valid vault value after the user operating vault (i.e., Vault of deposit only counts collateral)\"},\"userTotalPendingValues(address,address,int256,bool)\":{\"notice\":\"predict total vault value after the user operating Vault\"},\"userTotalValues(address,bool)\":{\"notice\":\"Get user total Vault value\"},\"userValues(address,bool)\":{\"notice\":\"Get user total valid Vault value (i.e., Vault of deposit only counts collateral)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AppController.sol\":\"AppController\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/AppController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/IDepositVault.sol\\\";\\nimport \\\"./interfaces/IMintVault.sol\\\";\\nimport \\\"./interfaces/IController.sol\\\";\\nimport \\\"./interfaces/IStrategy.sol\\\";\\nimport \\\"./Constants.sol\\\";\\n\\ncontract AppController is Constants, IController, OwnableUpgradeable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 constant JOINED_VAULT_LIMIT = 20;\\n\\n    // underlying => dToken\\n    mapping(address => address) public override dyTokens;\\n    // underlying => IStratege\\n    mapping(address => address) public strategies;\\n\\n    struct ValueConf {\\n        address oracle;\\n        uint16 dr; // discount rate\\n        uint16 pr; // premium rate\\n    }\\n\\n    // underlying => orcale\\n    mapping(address => ValueConf) internal valueConfs;\\n\\n    //  dyToken => vault\\n    mapping(address => address) public override dyTokenVaults;\\n\\n    // user => vaults\\n    mapping(address => EnumerableSet.AddressSet) internal userJoinedDepositVaults;\\n\\n    mapping(address => EnumerableSet.AddressSet) internal userJoinedBorrowVaults;\\n\\n    // manage Vault state for risk control\\n    struct VaultState {\\n        bool enabled;\\n        bool enableDeposit;\\n        bool enableWithdraw;\\n        bool enableBorrow;\\n        bool enableRepay;\\n        bool enableLiquidate;\\n    }\\n\\n    // Vault => VaultStatus\\n    mapping(address => VaultState) public vaultStates;\\n\\n    // depost value / borrow value >= liquidateRate\\n    uint256 public liquidateRate;\\n    uint256 public collateralRate;\\n\\n    // is anyone can call Liquidate.\\n    bool public isOpenLiquidate;\\n\\n    mapping(address => bool) public allowedLiquidator;\\n\\n    // vault => ValidVault\\n    // Initialize once\\n    mapping(address => ValidVault) public override validVaults;\\n\\n    // vault => user => ValidVault\\n    // set by user\\n    mapping(address => mapping(address => ValidVault)) public override validVaultsOfUser;\\n\\n    // vault => quota\\n    mapping(address => uint256) public vaultsBorrowQuota;\\n    // EVENT\\n    event UnderlyingDTokenChanged(address indexed underlying, address oldDToken, address newDToken);\\n    event UnderlyingStrategyChanged(address indexed underlying, address oldStrage, address newDToken, uint256 stype);\\n    event DTokenVaultChanged(address indexed dToken, address oldVault, address newVault, uint256 vtype);\\n\\n    event ValueConfChanged(address indexed underlying, address oracle, uint256 discount, uint256 premium);\\n\\n    event LiquidateRateChanged(uint256 liquidateRate);\\n    event CollateralRateChanged(uint256 collateralRate);\\n\\n    event OpenLiquidateChanged(bool open);\\n    event AllowedLiquidatorChanged(address liquidator, bool allowed);\\n\\n    event SetVaultStates(address vault, VaultState state);\\n\\n    event InitValidVault(address vault, ValidVault state);\\n    event SetValidVault(address vault, address user, ValidVault state);\\n\\n    event MintVaultReleased(address indexed user, address vault, uint256 amount, uint256 usdValue);\\n    event DepositVaultReleased(address indexed user, address vault, uint256 amount, uint256 usdValue);\\n    event VaultsReleased(address indexed user, uint256 expectedUsdValue, uint256 releasedUsdValue);\\n    event DepositVaultSwapped(\\n        address indexed user,\\n        address sourceVault,\\n        uint256 sourceAmount,\\n        address targetVault,\\n        uint256 targetAmount\\n    );\\n    event BorrowQuotaChanged(address vault, address operator, uint256 prevQuota, uint256 newQuota);\\n\\n    constructor() initializer {}\\n\\n    function initialize() external initializer {\\n        OwnableUpgradeable.__Ownable_init();\\n        liquidateRate = 11000;\\n        // PercentBase * 1.1;\\n        collateralRate = 13000;\\n        // PercentBase * 1.3;\\n        isOpenLiquidate = true;\\n    }\\n\\n    // ======  yield =======\\n    function setDYToken(address _underlying, address _dToken) external onlyOwner {\\n        require(_dToken != address(0), \\\"INVALID_DTOKEN\\\");\\n        address oldDToken = dyTokens[_underlying];\\n        dyTokens[_underlying] = _dToken;\\n        emit UnderlyingDTokenChanged(_underlying, oldDToken, _dToken);\\n    }\\n\\n    // set or update strategy\\n    // stype: 1: pancakeswap\\n    function setStrategy(\\n        address _underlying,\\n        address _strategy,\\n        uint256 stype\\n    ) external onlyOwner {\\n        require(_strategy != address(0), \\\"Strategies Disabled\\\");\\n\\n        address _current = strategies[_underlying];\\n        if (_current != address(0)) {\\n            IStrategy(_current).withdrawAll();\\n        }\\n        strategies[_underlying] = _strategy;\\n\\n        emit UnderlyingStrategyChanged(_underlying, _current, _strategy, stype);\\n    }\\n\\n    function emergencyWithdrawAll(address _underlying) public onlyOwner {\\n        IStrategy(strategies[_underlying]).withdrawAll();\\n    }\\n\\n    // ======  vault  =======\\n    function setVaultBorrowQuota(address vault_, uint256 quota_) external onlyOwner {\\n        emit BorrowQuotaChanged(vault_, msg.sender, vaultsBorrowQuota[vault_], quota_);\\n        vaultsBorrowQuota[vault_] = quota_;\\n    }\\n\\n    function setOpenLiquidate(bool _open) external onlyOwner {\\n        isOpenLiquidate = _open;\\n        emit OpenLiquidateChanged(_open);\\n    }\\n\\n    function updateAllowedLiquidator(address liquidator, bool allowed) external onlyOwner {\\n        allowedLiquidator[liquidator] = allowed;\\n        emit AllowedLiquidatorChanged(liquidator, allowed);\\n    }\\n\\n    function setLiquidateRate(uint256 _liquidateRate) external onlyOwner {\\n        liquidateRate = _liquidateRate;\\n        emit LiquidateRateChanged(liquidateRate);\\n    }\\n\\n    function setCollateralRate(uint256 _collateralRate) external onlyOwner {\\n        collateralRate = _collateralRate;\\n        emit CollateralRateChanged(collateralRate);\\n    }\\n\\n    // @dev set different oracle\\u3001 discount rate and premium rate for each underlying asset\\n    function setOracles(\\n        address _underlying,\\n        address _oracle,\\n        uint16 _discount,\\n        uint16 _premium\\n    ) external onlyOwner {\\n        require(_oracle != address(0), \\\"INVALID_ORACLE\\\");\\n        require(_discount <= PercentBase, \\\"DISCOUT_TOO_BIG\\\");\\n        require(_premium >= PercentBase, \\\"PREMIUM_TOO_SMALL\\\");\\n\\n        ValueConf storage conf = valueConfs[_underlying];\\n        conf.oracle = _oracle;\\n        conf.dr = _discount;\\n        conf.pr = _premium;\\n\\n        emit ValueConfChanged(_underlying, _oracle, _discount, _premium);\\n    }\\n\\n    function getValueConfs(address token0, address token1)\\n        external\\n        view\\n        returns (\\n            address oracle0,\\n            uint16 dr0,\\n            uint16 pr0,\\n            address oracle1,\\n            uint16 dr1,\\n            uint16 pr1\\n        )\\n    {\\n        (oracle0, dr0, pr0) = getValueConf(token0);\\n        (oracle1, dr1, pr1) = getValueConf(token1);\\n    }\\n\\n    // get DiscountRate and PremiumRate\\n    function getValueConf(address _underlying)\\n        public\\n        view\\n        returns (\\n            address oracle,\\n            uint16 dr,\\n            uint16 pr\\n        )\\n    {\\n        ValueConf memory conf = valueConfs[_underlying];\\n        oracle = conf.oracle;\\n        dr = conf.dr;\\n        pr = conf.pr;\\n    }\\n\\n    // vtype 1 : for deposit vault 2: for mint vault\\n    function setVault(\\n        address _dyToken,\\n        address _vault,\\n        uint256 vtype\\n    ) external onlyOwner {\\n        require(IVault(_vault).isDuetVault(), \\\"INVALIE_VALUT\\\");\\n        address old = dyTokenVaults[_dyToken];\\n        dyTokenVaults[_dyToken] = _vault;\\n        emit DTokenVaultChanged(_dyToken, old, _vault, vtype);\\n    }\\n\\n    function joinVault(address _user, bool isDepositVault) external {\\n        address vault = msg.sender;\\n        require(vaultStates[vault].enabled || vaultStates[vault].enableLiquidate, \\\"INVALID_CALLER\\\");\\n\\n        EnumerableSet.AddressSet storage set = isDepositVault\\n            ? userJoinedDepositVaults[_user]\\n            : userJoinedBorrowVaults[_user];\\n        require(set.length() < JOINED_VAULT_LIMIT, \\\"JOIN_TOO_MUCH\\\");\\n        set.add(vault);\\n    }\\n\\n    function exitVault(address _user, bool isDepositVault) external {\\n        address vault = msg.sender;\\n        require(vaultStates[vault].enabled || vaultStates[vault].enableLiquidate, \\\"INVALID_CALLER\\\");\\n\\n        EnumerableSet.AddressSet storage set = isDepositVault\\n            ? userJoinedDepositVaults[_user]\\n            : userJoinedBorrowVaults[_user];\\n        set.remove(vault);\\n    }\\n\\n    function setVaultStates(address _vault, VaultState memory _state) external onlyOwner {\\n        vaultStates[_vault] = _state;\\n        emit SetVaultStates(_vault, _state);\\n    }\\n\\n    function initValidVault(address[] memory _vault, ValidVault[] memory _state) external onlyOwner {\\n        uint256 len1 = _vault.length;\\n        uint256 len2 = _state.length;\\n        require(len1 == len2 && len1 != 0, \\\"INVALID_PARAM\\\");\\n        for (uint256 i = 0; i < len1; i++) {\\n            require(validVaults[_vault[i]] == ValidVault.UnInit, \\\"SET_ONLY_ONCE\\\");\\n            require(_state[i] == ValidVault.Yes || _state[i] == ValidVault.No, \\\"INVALID_VALUE\\\");\\n            validVaults[_vault[i]] = _state[i];\\n            emit InitValidVault(_vault[i], _state[i]);\\n        }\\n    }\\n\\n    function setValidVault(address[] memory _vault, ValidVault[] memory _state) external {\\n        address user = msg.sender;\\n        uint256 len1 = _vault.length;\\n        uint256 len2 = _state.length;\\n        require(len1 == len2 && len1 != 0, \\\"INVALID_PARAM\\\");\\n        for (uint256 i = 0; i < len1; i++) {\\n            require(_state[i] == ValidVault.Yes || _state[i] == ValidVault.No, \\\"INVALID_VALUE\\\");\\n            validVaultsOfUser[_vault[i]][user] = _state[i];\\n            emit SetValidVault(_vault[i], user, _state[i]);\\n        }\\n\\n        uint256 totalDepositValue = accValidVaultVaule(user, true);\\n        uint256 totalBorrowValue = accVaultVaule(user, userJoinedBorrowVaults[user], true);\\n        uint256 validValue = (totalDepositValue * PercentBase) / collateralRate;\\n        require(totalDepositValue * PercentBase >= totalBorrowValue * collateralRate, \\\"SETVALIDVAULT: LOW_COLLATERAL\\\");\\n    }\\n\\n    function userJoinedVaultInfoAt(\\n        address _user,\\n        bool isDepositVault,\\n        uint256 index\\n    ) external view returns (address vault, VaultState memory state) {\\n        EnumerableSet.AddressSet storage set = isDepositVault\\n            ? userJoinedDepositVaults[_user]\\n            : userJoinedBorrowVaults[_user];\\n        vault = set.at(index);\\n        state = vaultStates[vault];\\n    }\\n\\n    function userJoinedVaultCount(address _user, bool isDepositVault) external view returns (uint256) {\\n        return isDepositVault ? userJoinedDepositVaults[_user].length() : userJoinedBorrowVaults[_user].length();\\n    }\\n\\n    /**\\n     * @notice  maximum that a user can borrow from a Vault\\n     */\\n    function maxBorrow(address _user, address vault) public view returns (uint256) {\\n        uint256 totalDepositValue = accValidVaultVaule(_user, true);\\n        uint256 totalBorrowValue = accVaultVaule(_user, userJoinedBorrowVaults[_user], true);\\n\\n        uint256 validValue = (totalDepositValue * PercentBase) / collateralRate;\\n        if (validValue > totalBorrowValue) {\\n            uint256 canBorrowValue = validValue - totalBorrowValue;\\n            return IMintVault(vault).valueToAmount(canBorrowValue, true);\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get user total valid Vault value (i.e., Vault of deposit only counts collateral)\\n     * @param  _user depositors\\n     * @param _dp  discount or premium\\n     */\\n    function userValues(address _user, bool _dp)\\n        public\\n        view\\n        override\\n        returns (uint256 totalDepositValue, uint256 totalBorrowValue)\\n    {\\n        totalDepositValue = accValidVaultVaule(_user, _dp);\\n        totalBorrowValue = accVaultVaule(_user, userJoinedBorrowVaults[_user], _dp);\\n    }\\n\\n    /**\\n     * @notice  Get user total Vault value\\n     * @param  _user depositors\\n     * @param _dp  discount or premium\\n     */\\n    function userTotalValues(address _user, bool _dp)\\n        public\\n        view\\n        returns (uint256 totalDepositValue, uint256 totalBorrowValue)\\n    {\\n        totalDepositValue = accVaultVaule(_user, userJoinedDepositVaults[_user], _dp);\\n        totalBorrowValue = accVaultVaule(_user, userJoinedBorrowVaults[_user], _dp);\\n    }\\n\\n    /**\\n     * @notice predict total valid vault value after the user operating vault (i.e., Vault of deposit only counts collateral)\\n     * @param  _user depositors\\n     * @param  _vault target vault\\n     * @param  _amount the amount of deposits or withdrawals\\n     * @param _dp  discount or premium\\n     */\\n    function userPendingValues(\\n        address _user,\\n        IVault _vault,\\n        int256 _amount,\\n        bool _dp\\n    ) public view returns (uint256 pendingDepositValue, uint256 pendingBrorowValue) {\\n        pendingDepositValue = accValidPendingValue(_user, _vault, _amount, _dp);\\n        pendingBrorowValue = accPendingValue(_user, userJoinedBorrowVaults[_user], _vault, _amount, _dp);\\n    }\\n\\n    /**\\n     * @notice  predict total vault value after the user operating Vault\\n     * @param  _user depositors\\n     * @param  _vault target vault\\n     * @param  _amount the amount of deposits or withdrawals\\n     * @param _dp  discount or premium\\n     */\\n    function userTotalPendingValues(\\n        address _user,\\n        IVault _vault,\\n        int256 _amount,\\n        bool _dp\\n    ) public view returns (uint256 pendingDepositValue, uint256 pendingBrorowValue) {\\n        pendingDepositValue = accPendingValue(_user, userJoinedDepositVaults[_user], _vault, _amount, _dp);\\n        pendingBrorowValue = accPendingValue(_user, userJoinedBorrowVaults[_user], _vault, _amount, _dp);\\n    }\\n\\n    /**\\n     * @notice  determine whether the borrower needs to be liquidated\\n     */\\n    function isNeedLiquidate(address _borrower) public view returns (bool) {\\n        (uint256 totalDepositValue, uint256 totalBorrowValue) = userValues(_borrower, true);\\n        return totalDepositValue * PercentBase < totalBorrowValue * liquidateRate;\\n    }\\n\\n    /**\\n     * @dev return total value of vault\\n     *\\n     * @param _user address of user\\n     * @param set all address of vault\\n     * @param _dp Discount or Premium\\n     */\\n    function accVaultVaule(\\n        address _user,\\n        EnumerableSet.AddressSet storage set,\\n        bool _dp\\n    ) internal view returns (uint256 totalValue) {\\n        uint256 len = set.length();\\n        for (uint256 i = 0; i < len; i++) {\\n            address vault = set.at(i);\\n            totalValue += IVault(vault).userValue(_user, _dp);\\n        }\\n    }\\n\\n    /**\\n     * @dev return total deposit collateral's value of vault\\n     *\\n     * @param _user address of user\\n     * @param _dp Discount or Premium\\n     */\\n    function accValidVaultVaule(address _user, bool _dp) internal view returns (uint256 totalValue) {\\n        EnumerableSet.AddressSet storage set = userJoinedDepositVaults[_user];\\n        uint256 len = set.length();\\n        for (uint256 i = 0; i < len; i++) {\\n            address vault = set.at(i);\\n            if (isCollateralizedVault(vault, _user)) {\\n                totalValue += IVault(vault).userValue(_user, _dp);\\n            }\\n        }\\n    }\\n\\n    function accPendingValue(\\n        address _user,\\n        EnumerableSet.AddressSet storage set,\\n        IVault vault,\\n        int256 amount,\\n        bool _dp\\n    ) internal view returns (uint256 totalValue) {\\n        uint256 len = set.length();\\n        bool existVault = false;\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            IVault _vault = IVault(set.at(i));\\n\\n            if (vault == _vault) {\\n                totalValue += _vault.pendingValue(_user, amount);\\n                existVault = true;\\n            } else {\\n                totalValue += _vault.userValue(_user, _dp);\\n            }\\n        }\\n\\n        if (!existVault) {\\n            totalValue += vault.pendingValue(_user, amount);\\n        }\\n    }\\n\\n    function accValidPendingValue(\\n        address _user,\\n        IVault vault,\\n        int256 amount,\\n        bool _dp\\n    ) internal view returns (uint256 totalValue) {\\n        EnumerableSet.AddressSet storage set = userJoinedDepositVaults[_user];\\n        uint256 len = set.length();\\n        bool existVault = false;\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            IVault _vault = IVault(set.at(i));\\n\\n            if (isCollateralizedVault(address(_vault), _user)) {\\n                if (vault == _vault) {\\n                    totalValue += _vault.pendingValue(_user, amount);\\n                    existVault = true;\\n                } else {\\n                    totalValue += _vault.userValue(_user, _dp);\\n                }\\n            }\\n        }\\n\\n        if (!existVault && isCollateralizedVault(address(vault), _user)) {\\n            totalValue += vault.pendingValue(_user, amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice return bool, true means the vault is as collateral to user, false is opposite\\n     * @param  _vault address of vault\\n     * @param _user   address of user\\n     */\\n    function isCollateralizedVault(address _vault, address _user) internal view returns (bool) {\\n        ValidVault _state = validVaultsOfUser[_vault][_user];\\n        ValidVault state = _state == ValidVault.UnInit ? validVaults[_vault] : _state;\\n        require(state != ValidVault.UnInit, \\\"VALIDVAULT_UNINIT\\\");\\n\\n        if (state == ValidVault.Yes) return true;\\n        // vault can be collateralized\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Risk control check before deposit\\n     * param _user depositors\\n     * @param _vault address of deposit market\\n     * param  _amount deposit amount\\n     */\\n    function beforeDeposit(\\n        address,\\n        address _vault,\\n        uint256\\n    ) external view {\\n        VaultState memory state = vaultStates[_vault];\\n        require(state.enabled && state.enableDeposit, \\\"DEPOSITE_DISABLE\\\");\\n    }\\n\\n    /**\\n     * @notice Risk control check before borrowing\\n     * @param  _user borrower\\n     * @param _vault address of loan market\\n     * @param  _amount loan amount\\n     */\\n    function beforeBorrow(\\n        address _user,\\n        address _vault,\\n        uint256 _amount\\n    ) external view {\\n        VaultState memory state = vaultStates[_vault];\\n        require(state.enabled && state.enableBorrow, \\\"BORROW_DISABLED\\\");\\n        uint256 borrowQuota = vaultsBorrowQuota[_vault];\\n        uint256 borrowedAmount = IERC20(IVault(_vault).underlying()).totalSupply();\\n        require(\\n            borrowQuota == 0 || borrowedAmount + _amount <= borrowQuota,\\n            \\\"AppController: amount to borrow exceeds quota\\\"\\n        );\\n\\n        uint256 totalDepositValue = accValidVaultVaule(_user, true);\\n        uint256 pendingBrorowValue = accPendingValue(\\n            _user,\\n            userJoinedBorrowVaults[_user],\\n            IVault(_vault),\\n            int256(_amount),\\n            true\\n        );\\n        require(totalDepositValue * PercentBase >= pendingBrorowValue * collateralRate, \\\"LOW_COLLATERAL\\\");\\n    }\\n\\n    function beforeWithdraw(\\n        address _user,\\n        address _vault,\\n        uint256 _amount\\n    ) external view {\\n        VaultState memory state = vaultStates[_vault];\\n        require(state.enabled && state.enableWithdraw, \\\"WITHDRAW_DISABLED\\\");\\n\\n        if (isCollateralizedVault(_vault, _user)) {\\n            uint256 pendingDepositValidValue = accValidPendingValue(\\n                _user,\\n                IVault(_vault),\\n                int256(0) - int256(_amount),\\n                true\\n            );\\n            uint256 totalBorrowValue = accVaultVaule(_user, userJoinedBorrowVaults[_user], true);\\n            require(pendingDepositValidValue * PercentBase >= totalBorrowValue * collateralRate, \\\"LOW_COLLATERAL\\\");\\n        }\\n    }\\n\\n    function beforeRepay(\\n        address _repayer,\\n        address _vault,\\n        uint256 _amount\\n    ) external view {\\n        VaultState memory state = vaultStates[_vault];\\n        require(state.enabled && state.enableRepay, \\\"REPAY_DISABLED\\\");\\n    }\\n\\n    function liquidate(address _borrower, bytes calldata data) external {\\n        address liquidator = msg.sender;\\n\\n        require(isOpenLiquidate || allowedLiquidator[liquidator], \\\"INVALID_LIQUIDATOR\\\");\\n        require(isNeedLiquidate(_borrower), \\\"COLLATERAL_ENOUGH\\\");\\n\\n        EnumerableSet.AddressSet storage set = userJoinedDepositVaults[_borrower];\\n        uint256 len = set.length();\\n\\n        for (uint256 i = len; i > 0; i--) {\\n            IVault v = IVault(set.at(i - 1));\\n            // liquidate valid vault\\n            if (isCollateralizedVault(address(v), _borrower)) {\\n                beforeLiquidate(_borrower, address(v));\\n                v.liquidate(liquidator, _borrower, data);\\n            }\\n        }\\n\\n        EnumerableSet.AddressSet storage set2 = userJoinedBorrowVaults[_borrower];\\n        uint256 len2 = set2.length();\\n\\n        for (uint256 i = len2; i > 0; i--) {\\n            IVault v = IVault(set2.at(i - 1));\\n            beforeLiquidate(_borrower, address(v));\\n            v.liquidate(liquidator, _borrower, data);\\n        }\\n    }\\n\\n    function releaseMintVaults(\\n        address user_,\\n        address liquidator_,\\n        IVault[] calldata mintVaults_\\n    ) external onlyOwner {\\n        require(allowedLiquidator[liquidator_], \\\"Invalid liquidator\\\");\\n\\n        EnumerableSet.AddressSet storage depositedVaults = userJoinedDepositVaults[user_];\\n\\n        uint256 usdValueToRelease = 0;\\n        bytes memory liquidateData = abi.encodePacked(uint256(0x1));\\n        // release mint vaults\\n        for (uint256 i = 0; i < mintVaults_.length; i++) {\\n            IVault v = mintVaults_[i];\\n            uint256 currentVaultUsdValue = v.userValue(user_, false);\\n            uint256 currentVaultAmount = IMintVault(address(v)).borrows(user_);\\n            usdValueToRelease += currentVaultUsdValue;\\n            v.liquidate(liquidator_, user_, liquidateData);\\n            emit MintVaultReleased(user_, address(v), currentVaultAmount, currentVaultUsdValue);\\n        }\\n\\n        // No release required\\n        if (usdValueToRelease <= 0) {\\n            return;\\n        }\\n        uint256 releasedUsdValue = 0;\\n\\n        // release deposit vaults\\n        for (uint256 i = depositedVaults.length(); i > 0; i--) {\\n            IVault v = IVault(depositedVaults.at(i - 1));\\n\\n            // invalid vault\\n            if (!isCollateralizedVault(address(v), user_) || !vaultStates[address(v)].enableLiquidate) {\\n                continue;\\n            }\\n            uint256 currentVaultUsdValue = v.userValue(user_, false);\\n            releasedUsdValue += currentVaultUsdValue;\\n            uint256 currentVaultAmount = IDepositVault(address(v)).deposits(user_);\\n            v.liquidate(liquidator_, user_, liquidateData);\\n            if (releasedUsdValue == usdValueToRelease) {\\n                emit DepositVaultReleased(user_, address(v), currentVaultAmount, currentVaultUsdValue);\\n                // release done\\n                break;\\n            }\\n            if (releasedUsdValue < usdValueToRelease) {\\n                emit DepositVaultReleased(user_, address(v), currentVaultAmount, currentVaultUsdValue);\\n                continue;\\n            }\\n            // over released, returning\\n            uint256 usdDelta = releasedUsdValue - usdValueToRelease;\\n            // The minimum usd value to return is $1\\n            if (usdDelta < 1e8) {\\n                emit DepositVaultReleased(user_, address(v), currentVaultAmount, currentVaultUsdValue);\\n                break;\\n            }\\n            uint256 amountToReturn = (currentVaultAmount * usdDelta * 1e12) / currentVaultUsdValue / 1e12;\\n            // possible precision issues\\n            if (amountToReturn > currentVaultAmount) {\\n                amountToReturn = currentVaultAmount;\\n            }\\n            // return over released tokens\\n            IERC20(v.underlying()).safeTransferFrom(liquidator_, address(this), amountToReturn);\\n            IERC20(v.underlying()).safeApprove(address(v), amountToReturn);\\n            _depositForUser(v, user_, amountToReturn);\\n            emit DepositVaultReleased(\\n                user_,\\n                address(v),\\n                currentVaultAmount - amountToReturn,\\n                currentVaultUsdValue - usdDelta\\n            );\\n            releasedUsdValue -= usdDelta;\\n            break;\\n        }\\n\\n        emit VaultsReleased(user_, usdValueToRelease, releasedUsdValue);\\n    }\\n\\n    function releaseZeroValueVaults(address user_, address liquidator_) external onlyOwner {\\n        require(allowedLiquidator[liquidator_], \\\"Invalid liquidator\\\");\\n\\n        bytes memory liquidateData = abi.encodePacked(uint256(0x1));\\n\\n        EnumerableSet.AddressSet storage mintVaults = userJoinedBorrowVaults[user_];\\n        // release mint vaults with zero usd value\\n        for (uint256 i = 0; i < mintVaults.length(); i++) {\\n            IVault v = IVault(mintVaults.at(i));\\n            uint256 currentVaultUsdValue = v.userValue(user_, false);\\n            if (currentVaultUsdValue > 0) {\\n                continue;\\n            }\\n            uint256 currentVaultAmount = IMintVault(address(v)).borrows(user_);\\n            v.liquidate(liquidator_, user_, liquidateData);\\n            emit MintVaultReleased(user_, address(v), currentVaultAmount, currentVaultUsdValue);\\n        }\\n\\n        EnumerableSet.AddressSet storage depositedVaults = userJoinedDepositVaults[user_];\\n        // release deposit vaults with zero usd value\\n        for (uint256 i = 0; i < depositedVaults.length(); i++) {\\n            IVault v = IVault(depositedVaults.at(i));\\n            uint256 currentVaultUsdValue = v.userValue(user_, false);\\n            // 0x1E3174C5757cf5457f8A3A8c3E4a35Ed2d138322 is vault of Smart BUSD, force close.\\n            if (currentVaultUsdValue > 0 && address(v) != 0x1E3174C5757cf5457f8A3A8c3E4a35Ed2d138322) {\\n                continue;\\n            }\\n            uint256 currentVaultAmount = IDepositVault(address(v)).deposits(user_);\\n            v.liquidate(liquidator_, user_, liquidateData);\\n            emit DepositVaultReleased(user_, address(v), currentVaultAmount, currentVaultUsdValue);\\n        }\\n    }\\n\\n    function swapUserDepositVaults(\\n        address user_,\\n        address liquidator_,\\n        IVault[] calldata sourceVaults_,\\n        IVault[] calldata targetVaults_\\n    ) external onlyOwner {\\n        require(allowedLiquidator[liquidator_], \\\"Invalid liquidator\\\");\\n\\n        require(sourceVaults_.length > 0, \\\"nothing to swap\\\");\\n        require(\\n            sourceVaults_.length == targetVaults_.length,\\n            \\\"length of sourceVaults_ should be equal to targetVaults_'s\\\"\\n        );\\n\\n        bytes memory liquidateData = abi.encodePacked(uint256(0x1));\\n\\n        for (uint256 i = 0; i < sourceVaults_.length; i++) {\\n            IVault sourceVault = sourceVaults_[i];\\n            IVault targetVault = targetVaults_[i];\\n            uint256 sourceVaultUsdValue = sourceVault.userValue(user_, false);\\n            uint256 sourceVaultAmount = IDepositVault(address(sourceVault)).deposits(user_);\\n            sourceVault.liquidate(liquidator_, user_, liquidateData);\\n            // set dUSD-DUET LP Price to 0.306\\n            if (address(sourceVault) == 0x4527Ba20F16F86525b6D174b6314502ca6D5256E) {\\n                // 306e5 = 0.306$\\n                sourceVaultUsdValue = sourceVaultAmount * 306e5;\\n                // set dUSD-BUSD LP Price to 2.02\\n            } else if (address(sourceVault) == 0xC703Fdad6cA5DF56bd729fef24157e196A4810f8) {\\n                // 202e6 = 2.02$\\n                sourceVaultUsdValue = sourceVaultAmount * 202e6;\\n            }\\n            if (sourceVaultUsdValue <= 0) {\\n                continue;\\n            }\\n            uint256 targetPrice = targetVault.underlyingAmountValue(1e18, false);\\n            uint256 targetVaultAmount = (sourceVaultUsdValue * 1e12) / targetPrice / 1e12;\\n            IERC20(targetVault.underlying()).safeTransferFrom(msg.sender, address(this), targetVaultAmount);\\n            IERC20(targetVault.underlying()).safeApprove(address(targetVault), targetVaultAmount);\\n            _depositForUser(targetVault, user_, targetVaultAmount);\\n            emit DepositVaultSwapped(\\n                user_,\\n                address(sourceVault),\\n                sourceVaultAmount,\\n                address(targetVault),\\n                targetVaultAmount\\n            );\\n        }\\n    }\\n\\n    function _depositForUser(\\n        IVault depositVault_,\\n        address user_,\\n        uint256 amount_\\n    ) internal {\\n        IDepositVault(address(depositVault_)).depositTo(depositVault_.underlying(), user_, amount_);\\n    }\\n\\n    function beforeLiquidate(address _borrower, address _vault) internal view {\\n        VaultState memory state = vaultStates[_vault];\\n        require(state.enabled && state.enableLiquidate, \\\"LIQ_DISABLED\\\");\\n    }\\n    //  ======   vault end =======\\n}\\n\",\"keccak256\":\"0x3f60b480b55a051737c0aac3de4c7e39990351caa1507ca4cd52e78f1f5e1226\",\"license\":\"MIT\"},\"contracts/Constants.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ncontract Constants {\\n    uint256 internal constant PercentBase = 10000;\\n}\\n\",\"keccak256\":\"0xcb3094791fe70bdefa92f22834a8dea8384cd0cc0ee36fc2270804a9e43403fc\",\"license\":\"MIT\"},\"contracts/interfaces/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IController {\\n    function dyTokens(address) external view returns (address);\\n\\n    function getValueConf(address _underlying)\\n        external\\n        view\\n        returns (\\n            address oracle,\\n            uint16 dr,\\n            uint16 pr\\n        );\\n\\n    function getValueConfs(address token0, address token1)\\n        external\\n        view\\n        returns (\\n            address oracle0,\\n            uint16 dr0,\\n            uint16 pr0,\\n            address oracle1,\\n            uint16 dr1,\\n            uint16 pr1\\n        );\\n\\n    function strategies(address) external view returns (address);\\n\\n    function dyTokenVaults(address) external view returns (address);\\n\\n    function beforeDeposit(\\n        address,\\n        address _vault,\\n        uint256\\n    ) external view;\\n\\n    function beforeBorrow(\\n        address _borrower,\\n        address _vault,\\n        uint256 _amount\\n    ) external view;\\n\\n    function beforeWithdraw(\\n        address _redeemer,\\n        address _vault,\\n        uint256 _amount\\n    ) external view;\\n\\n    function beforeRepay(\\n        address _repayer,\\n        address _vault,\\n        uint256 _amount\\n    ) external view;\\n\\n    function joinVault(address _user, bool isDeposit) external;\\n\\n    function exitVault(address _user, bool isDeposit) external;\\n\\n    function userValues(address _user, bool _dp)\\n        external\\n        view\\n        returns (uint256 totalDepositValue, uint256 totalBorrowValue);\\n\\n    function userTotalValues(address _user, bool _dp)\\n        external\\n        view\\n        returns (uint256 totalDepositValue, uint256 totalBorrowValue);\\n\\n    function liquidate(address _borrower, bytes calldata data) external;\\n\\n    // ValidVault 0: uninitialized, default value\\n    // ValidVault 1: No, vault can not be collateralized\\n    // ValidVault 2: Yes, vault can be collateralized\\n    enum ValidVault {\\n        UnInit,\\n        No,\\n        Yes\\n    }\\n\\n    function validVaults(address _vault) external view returns (ValidVault);\\n\\n    function validVaultsOfUser(address _vault, address _user) external view returns (ValidVault);\\n}\\n\",\"keccak256\":\"0x328a089b836a6b0ca810c1c059343d64a620f209f4eb5f53c800171e01206238\",\"license\":\"MIT\"},\"contracts/interfaces/IDepositVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IDepositVault {\\n    function deposits(address user) external view returns (uint256 amount);\\n\\n    function deposit(address dtoken, uint256 amount) external;\\n\\n    function depositTo(\\n        address dtoken,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    function syncDeposit(\\n        address dtoken,\\n        uint256 amount,\\n        address user\\n    ) external;\\n\\n    function withdraw(uint256 amount, bool unpack) external;\\n\\n    function withdrawTo(\\n        address to,\\n        uint256 amount,\\n        bool unpack\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa560fa48e86685a5ba07da53a2fef51169beffd46faa478b1117d400eef35165\",\"license\":\"MIT\"},\"contracts/interfaces/IMintVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IMintVault {\\n    function borrows(address user) external view returns (uint256 amount);\\n\\n    function borrow(uint256 amount) external;\\n\\n    function repay(uint256 amount) external;\\n\\n    function repayTo(address to, uint256 amount) external;\\n\\n    function valueToAmount(uint256 value, bool dp) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0xee8b36eb284cfd96d7baa88708af99e42a81c4965ce4e961139dc8d807405baf\",\"license\":\"MIT\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IStrategy {\\n    function controller() external view returns (address);\\n\\n    function getWant() external view returns (address);\\n\\n    function deposit() external;\\n\\n    function harvest() external;\\n\\n    function withdraw(uint256) external;\\n\\n    function withdrawAll() external returns (uint256);\\n\\n    function balanceOf() external view returns (uint256);\\n\\n    function pendingOutput() external view returns (uint256);\\n\\n    function minHarvestAmount() external view returns (uint256);\\n\\n    function output() external view returns (address);\\n}\\n\",\"keccak256\":\"0xecaf8e192a5eb0db5e9b9a8ec21219769059dfa7a0cb866c5247e4c5c0151467\",\"license\":\"MIT\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IVault {\\n    // call from controller must impl.\\n    function underlying() external view returns (address);\\n\\n    function isDuetVault() external view returns (bool);\\n\\n    function liquidate(\\n        address liquidator,\\n        address borrower,\\n        bytes calldata data\\n    ) external;\\n\\n    function userValue(address user, bool dp) external view returns (uint256);\\n\\n    function pendingValue(address user, int256 pending) external view returns (uint256);\\n\\n    function underlyingAmountValue(uint256 amount, bool dp) external view returns (uint256 value);\\n}\\n\",\"keccak256\":\"0xf480a9d8974571f58e36781ac0120630d638b26ff9dfa58bf546b7984e7f59e9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600062000020600162000087565b9050801562000039576000805461ff0019166101001790555b801562000080576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50620001a8565b60008054610100900460ff161562000120578160ff166001148015620000c05750620000be306200019960201b620037561760201c565b155b620001185760405162461bcd60e51b815260206004820152602e60248201526000805160206200541883398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b506000919050565b60005460ff8084169116106200017f5760405162461bcd60e51b815260206004820152602e60248201526000805160206200541883398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016200010f565b506000805460ff191660ff92909216919091179055600190565b6001600160a01b03163b151590565b61526080620001b86000396000f3fe608060405234801561001057600080fd5b50600436106102a05760003560e01c80636af2482d11610167578063b66d927a116100ce578063d7a6681c11610087578063d7a6681c14610773578063e26ec36a14610786578063f2fde38b14610799578063f7d22673146107ac578063f9009ee8146107bf578063fdeef046146107cc57600080fd5b8063b66d927a146106e6578063b74e8b05146106f9578063c4c004871461070c578063c5321fb01461071f578063c8b268b314610732578063d2786d451461074557600080fd5b80638da5cb5b116101205780638da5cb5b1461065c57806390a83dc21461066d57806396721753146106805780639c045f3e14610693578063aaace601146106b4578063ab27197e146106dd57600080fd5b80636af2482d146105ea5780636c459677146105fd578063715018a61461061057806379bf27b1146106185780638129fc1c1461062b57806383d576501461063357600080fd5b806338b204211161020b5780635911a1ae116101c45780635911a1ae146104e257806359e27fc4146104f55780635f49202f14610508578063624b5ed4146105945780636657fc67146105a75780636989725c146105d757600080fd5b806338b20421146103f557806339ebf8231461041d5780633dcecc2f1461045e57806346b45be7146104b357806354ab6269146104c657806358a6be1c146104d957600080fd5b8063149088161161025d57806314908816146103195780631a5ab4c91461032c5780631acd8c9c1461035f5780631e5160511461039c5780632b9553ce146103cf5780632ea87482146103e257600080fd5b8063054c1344146102a5578063095e377d146102ba57806309ba9b47146102cd5780630d37a290146102e05780630ebdee19146102f35780630eccd2c914610306575b600080fd5b6102b86102b33660046146d9565b6107df565b005b6102b86102c836600461471a565b610966565b6102b86102db3660046146d9565b610e0d565b6102b86102ee366004614765565b610eda565b6102b86103013660046147cb565b61107a565b6102b86103143660046147f9565b611106565b6102b861032736600461471a565b61135d565b61034c61033a36600461487e565b60726020526000908152604090205481565b6040519081526020015b60405180910390f35b61037261036d36600461487e565b61143c565b604080516001600160a01b03909416845261ffff9283166020850152911690820152606001610356565b6103bf6103aa36600461487e565b606f6020526000908152604090205460ff1681565b6040519015158152602001610356565b6102b86103dd3660046146d9565b61148f565b61034c6103f03660046147cb565b611768565b61040861040336600461489b565b6117bf565b60408051928352602083019190915201610356565b61044661042b36600461487e565b6066602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610356565b61047161046c36600461471a565b61181b565b604080516001600160a01b03978816815261ffff96871660208201529486169085015294909116606083015282166080820152911660a082015260c001610356565b6102b86104c13660046149fb565b61184e565b6102b86104d436600461487e565b611af3565b61034c606d5481565b61034c6104f036600461471a565b611baa565b6102b86105033660046146d9565b611cb8565b61055b61051636600461487e565b606b6020526000908152604090205460ff80821691610100810482169162010000820481169163010000008104821691600160201b8204811691600160281b90041686565b604080519615158752941515602087015292151593850193909352151560608401529015156080830152151560a082015260c001610356565b6102b86105a2366004614abd565b611e02565b6105ca6105b536600461487e565b60706020526000908152604090205460ff1681565b6040516103569190614b0e565b6102b86105e53660046146d9565b611e68565b6102b86105f8366004614b1c565b611f33565b6102b861060b366004614bd2565b61203d565b6102b86120a8565b6102b86106263660046147cb565b6120de565b6102b86121a1565b61044661064136600461487e565b6068602052600090815260409020546001600160a01b031681565b6033546001600160a01b0316610446565b6102b861067b3660046146d9565b61222b565b61040861068e36600461489b565b61239b565b6106a66106a1366004614bef565b6123aa565b604051610356929190614c1f565b6104466106c236600461487e565b6065602052600090815260409020546001600160a01b031681565b61034c606c5481565b6103bf6106f436600461487e565b6124b1565b6102b8610707366004614cca565b6124e8565b6102b861071a3660046147cb565b612aa4565b6102b861072d3660046149fb565b612baf565b6102b8610740366004614abd565b612e6c565b6105ca61075336600461471a565b607160209081526000928352604080842090915290825290205460ff1681565b6102b8610781366004614d5f565b612ecb565b6104086107943660046147cb565b6135b5565b6102b86107a736600461487e565b6135f2565b6104086107ba3660046147cb565b61368a565b606e546103bf9060ff1681565b6102b86107da366004614dc4565b6136b0565b6001600160a01b0382166000908152606b6020908152604091829020825160c081018452905460ff80821615801580855261010084048316151595850195909552620100008304821615159584019590955263010000008204811615156060840152600160201b8204811615156080840152600160281b90910416151560a08201529161086d575080604001515b6108b25760405162461bcd60e51b815260206004820152601160248201527015d2551211149055d7d11254d050931151607a1b60448201526064015b60405180910390fd5b6108bc8385613765565b156109605760006108d985856108d28685614e06565b6001613854565b6001600160a01b0386166000908152606a60205260408120919250906109029087906001613a9f565b9050606d54816109129190614e45565b61091e61271084614e45565b101561095d5760405162461bcd60e51b815260206004820152600e60248201526d1313d5d7d0d3d31310551154905360921b60448201526064016108a9565b50505b50505050565b6033546001600160a01b031633146109905760405162461bcd60e51b81526004016108a990614e64565b6001600160a01b0381166000908152606f602052604090205460ff166109c85760405162461bcd60e51b81526004016108a990614e99565b60408051600160208201526000910160408051601f198184030181529181526001600160a01b0385166000908152606a6020529081209192505b610a0b82613b6e565b811015610bed576000610a1e8383613b78565b90506000816001600160a01b031663ae318c4d8860006040518363ffffffff1660e01b8152600401610a51929190614ec5565b60206040518083038186803b158015610a6957600080fd5b505afa158015610a7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa19190614ee0565b90508015610ab0575050610bdb565b6040516354a5706f60e01b81526001600160a01b038881166004830152600091908416906354a5706f9060240160206040518083038186803b158015610af557600080fd5b505afa158015610b09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2d9190614ee0565b6040516374eb83c160e01b81529091506001600160a01b038416906374eb83c190610b60908a908c908b90600401614f51565b600060405180830381600087803b158015610b7a57600080fd5b505af1158015610b8e573d6000803e3d6000fd5b50505050876001600160a01b03167f7114e74d858e0dbdc24007f787fb65581d52fdcd4e8517d6f3a1f9448323428c848385604051610bcf93929190614f86565b60405180910390a25050505b80610be581614fa7565b915050610a02565b506001600160a01b0384166000908152606960205260408120905b610c1182613b6e565b81101561095d576000610c248383613b78565b90506000816001600160a01b031663ae318c4d8960006040518363ffffffff1660e01b8152600401610c57929190614ec5565b60206040518083038186803b158015610c6f57600080fd5b505afa158015610c83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca79190614ee0565b9050600081118015610cd65750731e3174c5757cf5457f8a3a8c3e4a35ed2d1383226001600160a01b03831614155b15610ce2575050610dfb565b60405163fc7e286d60e01b81526001600160a01b0389811660048301526000919084169063fc7e286d9060240160206040518083038186803b158015610d2757600080fd5b505afa158015610d3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5f9190614ee0565b6040516374eb83c160e01b81529091506001600160a01b038416906374eb83c190610d92908b908d908c90600401614f51565b600060405180830381600087803b158015610dac57600080fd5b505af1158015610dc0573d6000803e3d6000fd5b50505050886001600160a01b031660008051602061520b833981519152848385604051610def93929190614f86565b60405180910390a25050505b80610e0581614fa7565b915050610c08565b6001600160a01b0382166000908152606b6020908152604091829020825160c081018452905460ff80821615801580855261010084048316151595850195909552620100008304821615159584019590955263010000008204811615156060840152600160201b8204811615156080840152600160281b90910416151560a082015291610e9b575080602001515b6109605760405162461bcd60e51b815260206004820152601060248201526f4445504f534954455f44495341424c4560801b60448201526064016108a9565b6033546001600160a01b03163314610f045760405162461bcd60e51b81526004016108a990614e64565b6001600160a01b038316610f4b5760405162461bcd60e51b815260206004820152600e60248201526d494e56414c49445f4f5241434c4560901b60448201526064016108a9565b6127108261ffff161115610f935760405162461bcd60e51b815260206004820152600f60248201526e444953434f55545f544f4f5f42494760881b60448201526064016108a9565b6127108161ffff161015610fdd5760405162461bcd60e51b81526020600482015260116024820152701414915352555357d513d3d7d4d3505313607a1b60448201526064016108a9565b6001600160a01b0384811660008181526067602090815260409182902080549488166001600160b01b03199095168517600160a01b61ffff8981169182029290921761ffff60b01b1916600160b01b92891692830217835584519687529286019290925291840152917f7cb71f764a6240297d887d23473a61cf07ba9d34ccfbdd326620a5b896cd33469060600160405180910390a25050505050565b6033546001600160a01b031633146110a45760405162461bcd60e51b81526004016108a990614e64565b6001600160a01b0382166000908152606f602052604090819020805460ff1916831515179055517fd8949265082223b72749a7863e551684ee0df9a0c8ece536b9f14686b68425fc906110fa9084908490614ec5565b60405180910390a15050565b606e54339060ff168061113157506001600160a01b0381166000908152606f602052604090205460ff165b6111725760405162461bcd60e51b815260206004820152601260248201527124a72b20a624a22fa624a8aaa4a220aa27a960711b60448201526064016108a9565b61117b846124b1565b6111bb5760405162461bcd60e51b81526020600482015260116024820152700869e989882a88aa48298be8a9c9eaa8e9607b1b60448201526064016108a9565b6001600160a01b0384166000908152606960205260408120906111dd82613b6e565b9050805b80156112915760006111fe6111f7600184614fc2565b8590613b78565b905061120a8189613765565b1561127e576112198882613b84565b6040516374eb83c160e01b81526001600160a01b038216906374eb83c19061124b9088908c908c908c90600401614fd9565b600060405180830381600087803b15801561126557600080fd5b505af1158015611279573d6000803e3d6000fd5b505050505b508061128981615025565b9150506111e1565b506001600160a01b0386166000908152606a60205260408120906112b482613b6e565b9050805b80156113525760006112ce6111f7600184614fc2565b90506112da8a82613b84565b6040516374eb83c160e01b81526001600160a01b038216906374eb83c19061130c908a908e908e908e90600401614fd9565b600060405180830381600087803b15801561132657600080fd5b505af115801561133a573d6000803e3d6000fd5b5050505050808061134a90615025565b9150506112b8565b505050505050505050565b6033546001600160a01b031633146113875760405162461bcd60e51b81526004016108a990614e64565b6001600160a01b0381166113ce5760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa22a27a5a2a760911b60448201526064016108a9565b6001600160a01b0382811660008181526065602090815260409182902080548686166001600160a01b0319821681179092558351951680865291850152927fd5c0cad2a6b3eea813a7bdf548752779e26da201508f6e807ec5ec3d65d020d6910160405180910390a2505050565b6001600160a01b039081166000908152606760209081526040918290208251606081018452905493841680825261ffff600160a01b86048116938301849052600160b01b90950490941692018290529192565b6001600160a01b0382166000908152606b6020908152604091829020825160c081018452905460ff80821615801580855261010084048316151595850195909552620100008304821615159584019590955263010000008204811615156060840152600160201b8204811615156080840152600160281b90910416151560a08201529161151d575080606001515b61155b5760405162461bcd60e51b815260206004820152600f60248201526e1093d49493d5d7d11254d050931151608a1b60448201526064016108a9565b6001600160a01b0383166000818152607260209081526040808320548151636f307dc360e01b81529151909492636f307dc39260048082019391829003018186803b1580156115a957600080fd5b505afa1580156115bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e1919061503c565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561161957600080fd5b505afa15801561162d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116519190614ee0565b90508115806116695750816116668583615059565b11155b6116cb5760405162461bcd60e51b815260206004820152602d60248201527f417070436f6e74726f6c6c65723a20616d6f756e7420746f20626f72726f772060448201526c657863656564732071756f746160981b60648201526084016108a9565b60006116d8876001613c52565b6001600160a01b0388166000908152606a602052604081209192509061170390899089896001613d3c565b9050606d54816117139190614e45565b61171f61271084614e45565b101561175e5760405162461bcd60e51b815260206004820152600e60248201526d1313d5d7d0d3d31310551154905360921b60448201526064016108a9565b5050505050505050565b600081611795576001600160a01b0383166000908152606a6020526040902061179090613b6e565b6117b6565b6001600160a01b03831660009081526069602052604090206117b690613b6e565b90505b92915050565b6001600160a01b038416600090815260696020526040812081906117e7908790878787613d3c565b6001600160a01b0387166000908152606a60205260409020909250611810908790878787613d3c565b905094509492505050565b60008060008060008061182d8861143c565b9197509550935061183d8761143c565b979a96995094975095939492505050565b6033546001600160a01b031633146118785760405162461bcd60e51b81526004016108a990614e64565b81518151808214801561188a57508115155b6118c65760405162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f504152414d60981b60448201526064016108a9565b60005b82811015611aec576000607060008784815181106118e9576118e9615071565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16600281111561192157611921614ad6565b1461195e5760405162461bcd60e51b815260206004820152600d60248201526c5345545f4f4e4c595f4f4e434560981b60448201526064016108a9565b600284828151811061197257611972615071565b6020026020010151600281111561198b5761198b614ad6565b14806119c1575060018482815181106119a6576119a6615071565b602002602001015160028111156119bf576119bf614ad6565b145b6119fd5760405162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f56414c554560981b60448201526064016108a9565b838181518110611a0f57611a0f615071565b602002602001015160706000878481518110611a2d57611a2d615071565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19166001836002811115611a6a57611a6a614ad6565b02179055507f05334cade7d5051a457d6cddb92a76a5266e31459f3118a536c99b169beaa0f5858281518110611aa257611aa2615071565b6020026020010151858381518110611abc57611abc615071565b6020026020010151604051611ad2929190615087565b60405180910390a180611ae481614fa7565b9150506118c9565b5050505050565b6033546001600160a01b03163314611b1d5760405162461bcd60e51b81526004016108a990614e64565b6001600160a01b03808216600090815260666020908152604080832054815163429c145b60e11b8152915194169363853828b693600480840194938390030190829087803b158015611b6e57600080fd5b505af1158015611b82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba69190614ee0565b5050565b600080611bb8846001613c52565b6001600160a01b0385166000908152606a6020526040812091925090611be19086906001613a9f565b90506000606d5461271084611bf69190614e45565b611c0091906150a4565b905081811115611ca3576000611c168383614fc2565b60405163281aa7fd60e21b815260048101829052600160248201529091506001600160a01b0387169063a06a9ff49060440160206040518083038186803b158015611c6057600080fd5b505afa158015611c74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c989190614ee0565b9450505050506117b9565b600093505050506117b9565b50505092915050565b6033546001600160a01b03163314611ce25760405162461bcd60e51b81526004016108a990614e64565b816001600160a01b031663ba58591c6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d1b57600080fd5b505afa158015611d2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5391906150c6565b611d8f5760405162461bcd60e51b815260206004820152600d60248201526c1253959053125157d590531555609a1b60448201526064016108a9565b6001600160a01b038084166000818152606860205260409081902080548685166001600160a01b031982161790915590519216917f0ff9c79e47a5eed61bfb093d8315d37efcfa7f6679e507f608289c78941b0e5190611df4908490879087906150e3565b60405180910390a250505050565b6033546001600160a01b03163314611e2c5760405162461bcd60e51b81526004016108a990614e64565b606d8190556040518181527f13e612fc69e30b3adcca3cb6573fa94782e94f59261f9b32c96c34b90552b335906020015b60405180910390a150565b6001600160a01b0382166000908152606b6020908152604091829020825160c081018452905460ff80821615801580855261010084048316151595850195909552620100008304821615159584019590955263010000008204811615156060840152600160201b8204811615156080840152600160281b90910416151560a082015291611ef6575080608001515b6109605760405162461bcd60e51b815260206004820152600e60248201526d149154105657d11254d05093115160921b60448201526064016108a9565b6033546001600160a01b03163314611f5d5760405162461bcd60e51b81526004016108a990614e64565b6001600160a01b0382166000908152606b60209081526040918290208351815492850151858501516060870151608088015160a089015161ffff1990971694151561ff00191694909417610100931515939093029290921763ffff00001916620100009115159190910263ff0000001916176301000000911515919091021765ffff000000001916600160201b9115159190910265ff0000000000191617600160281b92151592909202919091179055517f0f86f36676a78407d88aa894e600955aca44b6b9eaff4740c81228e2fa75d628906110fa9084908490614c1f565b6033546001600160a01b031633146120675760405162461bcd60e51b81526004016108a990614e64565b606e805460ff19168215159081179091556040519081527fcfa23450328fe03391963dc3e54c19ebeecb28fd8a628b495b71ab8534d61c3290602001611e5d565b6033546001600160a01b031633146120d25760405162461bcd60e51b81526004016108a990614e64565b6120dc6000613f4f565b565b336000818152606b602052604090205460ff168061211b57506001600160a01b0381166000908152606b6020526040902054600160281b900460ff165b6121585760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa1a0a62622a960911b60448201526064016108a9565b60008261217c576001600160a01b0384166000908152606a60205260409020612195565b6001600160a01b03841660009081526069602052604090205b9050611aec8183613fa1565b60006121ad6001613fb6565b905080156121c5576000805461ff0019166101001790555b6121cd614043565b612af8606c556132c8606d55606e805460ff191660011790558015612228576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001611e5d565b50565b6033546001600160a01b031633146122555760405162461bcd60e51b81526004016108a990614e64565b6001600160a01b0382166122a15760405162461bcd60e51b815260206004820152601360248201527214dd1c985d1959da595cc8111a5cd8589b1959606a1b60448201526064016108a9565b6001600160a01b0380841660009081526066602052604090205416801561233757806001600160a01b031663853828b66040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156122fd57600080fd5b505af1158015612311573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123359190614ee0565b505b6001600160a01b038481166000818152606660205260409081902080546001600160a01b0319169387169390931790925590517fcc7d45f325309ae5b4940b5de638a482be2a51aa3a917326a84f65bcc2f7352390611df4908490879087906150e3565b6000806117e786868686613854565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081018290526000846123ff576001600160a01b0386166000908152606a60205260409020612418565b6001600160a01b03861660009081526069602052604090205b90506124248185613b78565b6001600160a01b0381166000908152606b6020908152604091829020825160c081018452905460ff8082161515835261010082048116151593830193909352620100008104831615159382019390935263010000008304821615156060820152600160201b8304821615156080820152600160281b90920416151560a08201529097909650945050505050565b60008060006124c18460016135b5565b91509150606c54816124d39190614e45565b6124df61271084614e45565b10949350505050565b6033546001600160a01b031633146125125760405162461bcd60e51b81526004016108a990614e64565b6001600160a01b0385166000908152606f602052604090205460ff1661254a5760405162461bcd60e51b81526004016108a990614e99565b826125895760405162461bcd60e51b815260206004820152600f60248201526e06e6f7468696e6720746f207377617608c1b60448201526064016108a9565b8281146125fe5760405162461bcd60e51b815260206004820152603a60248201527f6c656e677468206f6620736f757263655661756c74735f2073686f756c64206260448201527f6520657175616c20746f207461726765745661756c74735f277300000000000060648201526084016108a9565b604080516001602082015260009101604051602081830303815290604052905060005b8481101561175e57600086868381811061263d5761263d615071565b9050602002016020810190612652919061487e565b9050600085858481811061266857612668615071565b905060200201602081019061267d919061487e565b90506000826001600160a01b031663ae318c4d8c60006040518363ffffffff1660e01b81526004016126b0929190614ec5565b60206040518083038186803b1580156126c857600080fd5b505afa1580156126dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127009190614ee0565b60405163fc7e286d60e01b81526001600160a01b038d8116600483015291925060009185169063fc7e286d9060240160206040518083038186803b15801561274757600080fd5b505afa15801561275b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277f9190614ee0565b9050836001600160a01b03166374eb83c18c8e896040518463ffffffff1660e01b81526004016127b193929190614f51565b600060405180830381600087803b1580156127cb57600080fd5b505af11580156127df573d6000803e3d6000fd5b505050506001600160a01b038416734527ba20f16f86525b6d174b6314502ca6d5256e141561281d57612816816301d2eb40614e45565b9150612853565b73c703fdad6ca5df56bd729fef24157e196a4810f86001600160a01b03851614156128535761285081630c0a4680614e45565b91505b600082116128645750505050612a92565b604051630eda25c760e11b8152670de0b6b3a76400006004820152600060248201819052906001600160a01b03851690631db44b8e9060440160206040518083038186803b1580156128b557600080fd5b505afa1580156128c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128ed9190614ee0565b9050600064e8d4a51000826129028683614e45565b61290c91906150a4565b61291691906150a4565b90506129a0333083886001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561295757600080fd5b505afa15801561296b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061298f919061503c565b6001600160a01b0316929190614072565b612a268582876001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156129de57600080fd5b505afa1580156129f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a16919061503c565b6001600160a01b031691906140ca565b612a31858f836141ee565b604080516001600160a01b038881168252602082018690528781169282019290925260608101839052908f16907fcba74a9a38e532ea920e947d3babe6efc7b838cb416f82d9b9d79f32744b34ca9060800160405180910390a25050505050505b80612a9c81614fa7565b915050612621565b336000818152606b602052604090205460ff1680612ae157506001600160a01b0381166000908152606b6020526040902054600160281b900460ff165b612b1e5760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa1a0a62622a960911b60448201526064016108a9565b600082612b42576001600160a01b0384166000908152606a60205260409020612b5b565b6001600160a01b03841660009081526069602052604090205b90506014612b6882613b6e565b10612ba55760405162461bcd60e51b815260206004820152600d60248201526c0949e929cbea89e9ebe9aaa869609b1b60448201526064016108a9565b611aec81836142c5565b815181513391908082148015612bc457508115155b612c005760405162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f504152414d60981b60448201526064016108a9565b60005b82811015612dac576002858281518110612c1f57612c1f615071565b60200260200101516002811115612c3857612c38614ad6565b1480612c6e57506001858281518110612c5357612c53615071565b60200260200101516002811115612c6c57612c6c614ad6565b145b612caa5760405162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f56414c554560981b60448201526064016108a9565b848181518110612cbc57612cbc615071565b602002602001015160716000888481518110612cda57612cda615071565b6020908102919091018101516001600160a01b039081168352828201939093526040918201600090812093891681529290529020805460ff19166001836002811115612d2857612d28614ad6565b02179055507f65d4763abdc1e045affaf50aed5fc2a1f4f466da45ee41ea701e0ad5029ff0b0868281518110612d6057612d60615071565b602002602001015185878481518110612d7b57612d7b615071565b6020026020010151604051612d9293929190615107565b60405180910390a180612da481614fa7565b915050612c03565b506000612dba846001613c52565b6001600160a01b0385166000908152606a6020526040812091925090612de39086906001613a9f565b90506000606d5461271084612df89190614e45565b612e0291906150a4565b9050606d5482612e129190614e45565b612e1e61271085614e45565b101561175e5760405162461bcd60e51b815260206004820152601d60248201527f53455456414c49445641554c543a204c4f575f434f4c4c41544552414c00000060448201526064016108a9565b6033546001600160a01b03163314612e965760405162461bcd60e51b81526004016108a990614e64565b606c8190556040518181527f138a4f81e91d7ed8109625537819aae162d22b1e4b5f73e1919d1f6e21bfbb4b90602001611e5d565b6033546001600160a01b03163314612ef55760405162461bcd60e51b81526004016108a990614e64565b6001600160a01b0383166000908152606f602052604090205460ff16612f2d5760405162461bcd60e51b81526004016108a990614e99565b6001600160a01b038416600090815260696020908152604080832081516001818501528251808203909401845282019091529190815b84811015613162576000868683818110612f7f57612f7f615071565b9050602002016020810190612f94919061487e565b90506000816001600160a01b031663ae318c4d8b60006040518363ffffffff1660e01b8152600401612fc7929190614ec5565b60206040518083038186803b158015612fdf57600080fd5b505afa158015612ff3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130179190614ee0565b6040516354a5706f60e01b81526001600160a01b038c811660048301529192506000918416906354a5706f9060240160206040518083038186803b15801561305e57600080fd5b505afa158015613072573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130969190614ee0565b90506130a28287615059565b6040516374eb83c160e01b81529096506001600160a01b038416906374eb83c1906130d5908d908f908a90600401614f51565b600060405180830381600087803b1580156130ef57600080fd5b505af1158015613103573d6000803e3d6000fd5b505050508a6001600160a01b03167f7114e74d858e0dbdc24007f787fb65581d52fdcd4e8517d6f3a1f9448323428c84838560405161314493929190614f86565b60405180910390a2505050808061315a90614fa7565b915050612f63565b506000821161317357505050610960565b60008061317f85613b6e565b90505b801561356657600061319f613198600184614fc2565b8790613b78565b90506131ab818b613765565b15806131d757506001600160a01b0381166000908152606b6020526040902054600160281b900460ff16155b156131e25750613554565b60405163ae318c4d60e01b81526000906001600160a01b0383169063ae318c4d90613213908e908590600401614ec5565b60206040518083038186803b15801561322b57600080fd5b505afa15801561323f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132639190614ee0565b905061326f8185615059565b60405163fc7e286d60e01b81526001600160a01b038d8116600483015291955060009184169063fc7e286d9060240160206040518083038186803b1580156132b657600080fd5b505afa1580156132ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132ee9190614ee0565b9050826001600160a01b03166374eb83c18c8e896040518463ffffffff1660e01b815260040161332093929190614f51565b600060405180830381600087803b15801561333a57600080fd5b505af115801561334e573d6000803e3d6000fd5b5050505086851415613395578b6001600160a01b031660008051602061520b83398151915284838560405161338593929190614f86565b60405180910390a2505050613566565b868510156133d8578b6001600160a01b031660008051602061520b8339815191528483856040516133c893929190614f86565b60405180910390a2505050613554565b60006133e48887614fc2565b90506305f5e10081101561342e578c6001600160a01b031660008051602061520b83398151915285848660405161341d93929190614f86565b60405180910390a250505050613566565b600064e8d4a51000846134418486614e45565b6134509064e8d4a51000614e45565b61345a91906150a4565b61346491906150a4565b9050828111156134715750815b6134b08d3083886001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561295757600080fd5b6134ee8582876001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156129de57600080fd5b6134f9858f836141ee565b6001600160a01b038e1660008051602061520b8339815191528661351d8487614fc2565b6135278689614fc2565b60405161353693929190614f86565b60405180910390a26135488288614fc2565b96505050505050613566565b8061355e81615025565b915050613182565b5060408051848152602081018390526001600160a01b038a16917f26e0bc17070eb8681630837613dc291e5976262044227decb74f578aee1eee5c910160405180910390a25050505050505050565b6000806135c28484613c52565b6001600160a01b0385166000908152606a602052604090209092506135e990859085613a9f565b90509250929050565b6033546001600160a01b0316331461361c5760405162461bcd60e51b81526004016108a990614e64565b6001600160a01b0381166136815760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016108a9565b61222881613f4f565b6001600160a01b038216600090815260696020526040812081906135c290859085613a9f565b6033546001600160a01b031633146136da5760405162461bcd60e51b81526004016108a990614e64565b6001600160a01b03821660008181526072602090815260409182902054825193845233918401919091528282015260608201839052517f3293d79c25c2df19fbbce583d677755d261349535e2ac61d5a06e6524fcbed759181900360800190a16001600160a01b03909116600090815260726020526040902055565b6001600160a01b03163b151590565b6001600160a01b03808316600090815260716020908152604080832093851683529290529081205460ff1681808260028111156137a4576137a4614ad6565b146137af57816137cc565b6001600160a01b03851660009081526070602052604090205460ff165b905060008160028111156137e2576137e2614ad6565b14156138245760405162461bcd60e51b81526020600482015260116024820152701590531251159055531517d55392539255607a1b60448201526064016108a9565b600281600281111561383857613838614ad6565b1415613849576001925050506117b9565b506000949350505050565b6001600160a01b03841660009081526069602052604081208161387682613b6e565b90506000805b828110156139ee5760006138908583613b78565b905061389c818b613765565b156139db57806001600160a01b0316896001600160a01b0316141561395057604051635ac28bf960e01b81526001600160a01b038b81166004830152602482018a9052821690635ac28bf99060440160206040518083038186803b15801561390357600080fd5b505afa158015613917573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061393b9190614ee0565b6139459087615059565b9550600192506139db565b60405163ae318c4d60e01b81526001600160a01b0382169063ae318c4d9061397e908d908b90600401614ec5565b60206040518083038186803b15801561399657600080fd5b505afa1580156139aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139ce9190614ee0565b6139d89087615059565b95505b50806139e681614fa7565b91505061387c565b5080158015613a025750613a028789613765565b15613a9457604051635ac28bf960e01b81526001600160a01b03898116600483015260248201889052881690635ac28bf99060440160206040518083038186803b158015613a4f57600080fd5b505afa158015613a63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a879190614ee0565b613a919085615059565b93505b505050949350505050565b600080613aab84613b6e565b905060005b81811015613b65576000613ac48683613b78565b60405163ae318c4d60e01b81529091506001600160a01b0382169063ae318c4d90613af5908a908990600401614ec5565b60206040518083038186803b158015613b0d57600080fd5b505afa158015613b21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b459190614ee0565b613b4f9085615059565b9350508080613b5d90614fa7565b915050613ab0565b50509392505050565b60006117b9825490565b60006117b683836142da565b6001600160a01b0381166000908152606b6020908152604091829020825160c081018452905460ff80821615801580855261010084048316151595850195909552620100008304821615159584019590955263010000008204811615156060840152600160201b8204811615156080840152600160281b90910416151560a082015291613c1257508060a001515b613c4d5760405162461bcd60e51b815260206004820152600c60248201526b13125457d11254d05093115160a21b60448201526064016108a9565b505050565b6001600160a01b038216600090815260696020526040812081613c7482613b6e565b905060005b81811015611caf576000613c8d8483613b78565b9050613c998188613765565b15613d295760405163ae318c4d60e01b81526001600160a01b0382169063ae318c4d90613ccc908a908a90600401614ec5565b60206040518083038186803b158015613ce457600080fd5b505afa158015613cf8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d1c9190614ee0565b613d269086615059565b94505b5080613d3481614fa7565b915050613c79565b600080613d4886613b6e565b90506000805b82811015613eb1576000613d628983613b78565b9050806001600160a01b0316886001600160a01b03161415613e1357604051635ac28bf960e01b81526001600160a01b038b8116600483015260248201899052821690635ac28bf99060440160206040518083038186803b158015613dc657600080fd5b505afa158015613dda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dfe9190614ee0565b613e089086615059565b945060019250613e9e565b60405163ae318c4d60e01b81526001600160a01b0382169063ae318c4d90613e41908d908a90600401614ec5565b60206040518083038186803b158015613e5957600080fd5b505afa158015613e6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e919190614ee0565b613e9b9086615059565b94505b5080613ea981614fa7565b915050613d4e565b5080613f4457604051635ac28bf960e01b81526001600160a01b03898116600483015260248201879052871690635ac28bf99060440160206040518083038186803b158015613eff57600080fd5b505afa158015613f13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f379190614ee0565b613f419084615059565b92505b505095945050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006117b6836001600160a01b038416614304565b60008054610100900460ff1615613ffd578160ff166001148015613fd95750303b155b613ff55760405162461bcd60e51b81526004016108a99061512c565b506000919050565b60005460ff8084169116106140245760405162461bcd60e51b81526004016108a99061512c565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff1661406a5760405162461bcd60e51b81526004016108a99061517a565b6120dc6143f7565b610960846323b872dd60e01b858585604051602401614093939291906150e3565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614427565b8015806141535750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561411957600080fd5b505afa15801561412d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141519190614ee0565b155b6141be5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016108a9565b6040516001600160a01b038316602482015260448101829052613c4d90849063095ea7b360e01b90606401614093565b826001600160a01b031663f213159c846001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561423657600080fd5b505afa15801561424a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061426e919061503c565b84846040518463ffffffff1660e01b815260040161428e939291906150e3565b600060405180830381600087803b1580156142a857600080fd5b505af11580156142bc573d6000803e3d6000fd5b50505050505050565b60006117b6836001600160a01b0384166144f9565b60008260000182815481106142f1576142f1615071565b9060005260206000200154905092915050565b600081815260018301602052604081205480156143ed576000614328600183614fc2565b855490915060009061433c90600190614fc2565b90508181146143a157600086600001828154811061435c5761435c615071565b906000526020600020015490508087600001848154811061437f5761437f615071565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806143b2576143b26151c5565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506117b9565b60009150506117b9565b600054610100900460ff1661441e5760405162461bcd60e51b81526004016108a99061517a565b6120dc33613f4f565b600061447c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166145489092919063ffffffff16565b805190915015613c4d578080602001905181019061449a91906150c6565b613c4d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108a9565b6000818152600183016020526040812054614540575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556117b9565b5060006117b9565b60606145578484600085614561565b90505b9392505050565b6060824710156145c25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016108a9565b843b6146105760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108a9565b600080866001600160a01b0316858760405161462c91906151db565b60006040518083038185875af1925050503d8060008114614669576040519150601f19603f3d011682016040523d82523d6000602084013e61466e565b606091505b509150915061467e82828661468b565b925050505b949350505050565b6060831561469a57508161455a565b8251156146aa5782518084602001fd5b8160405162461bcd60e51b81526004016108a991906151f7565b6001600160a01b038116811461222857600080fd5b6000806000606084860312156146ee57600080fd5b83356146f9816146c4565b92506020840135614709816146c4565b929592945050506040919091013590565b6000806040838503121561472d57600080fd5b8235614738816146c4565b91506020830135614748816146c4565b809150509250929050565b803561ffff8116811461403e57600080fd5b6000806000806080858703121561477b57600080fd5b8435614786816146c4565b93506020850135614796816146c4565b92506147a460408601614753565b91506147b260608601614753565b905092959194509250565b801515811461222857600080fd5b600080604083850312156147de57600080fd5b82356147e9816146c4565b91506020830135614748816147bd565b60008060006040848603121561480e57600080fd5b8335614819816146c4565b9250602084013567ffffffffffffffff8082111561483657600080fd5b818601915086601f83011261484a57600080fd5b81358181111561485957600080fd5b87602082850101111561486b57600080fd5b6020830194508093505050509250925092565b60006020828403121561489057600080fd5b813561455a816146c4565b600080600080608085870312156148b157600080fd5b84356148bc816146c4565b935060208501356148cc816146c4565b92506040850135915060608501356148e3816147bd565b939692955090935050565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff81118282101715614927576149276148ee565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715614956576149566148ee565b604052919050565b600067ffffffffffffffff821115614978576149786148ee565b5060051b60200190565b600082601f83011261499357600080fd5b813560206149a86149a38361495e565b61492d565b82815260059290921b840181019181810190868411156149c757600080fd5b8286015b848110156149f0578035600381106149e35760008081fd5b83529183019183016149cb565b509695505050505050565b60008060408385031215614a0e57600080fd5b823567ffffffffffffffff80821115614a2657600080fd5b818501915085601f830112614a3a57600080fd5b81356020614a4a6149a38361495e565b82815260059290921b84018101918181019089841115614a6957600080fd5b948201945b83861015614a90578535614a81816146c4565b82529482019490820190614a6e565b96505086013592505080821115614aa657600080fd5b50614ab385828601614982565b9150509250929050565b600060208284031215614acf57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60038110614b0a57634e487b7160e01b600052602160045260246000fd5b9052565b602081016117b98284614aec565b60008082840360e0811215614b3057600080fd5b8335614b3b816146c4565b925060c0601f1982011215614b4f57600080fd5b50614b58614904565b6020840135614b66816147bd565b81526040840135614b76816147bd565b60208201526060840135614b89816147bd565b60408201526080840135614b9c816147bd565b606082015260a0840135614baf816147bd565b608082015260c0840135614bc2816147bd565b60a0820152919491935090915050565b600060208284031215614be457600080fd5b813561455a816147bd565b600080600060608486031215614c0457600080fd5b8335614c0f816146c4565b92506020840135614709816147bd565b600060e08201905060018060a01b03841682528251151560208301526020830151151560408301526040830151151560608301526060830151151560808301526080830151151560a083015260a0830151151560c08301529392505050565b60008083601f840112614c9057600080fd5b50813567ffffffffffffffff811115614ca857600080fd5b6020830191508360208260051b8501011115614cc357600080fd5b9250929050565b60008060008060008060808789031215614ce357600080fd5b8635614cee816146c4565b95506020870135614cfe816146c4565b9450604087013567ffffffffffffffff80821115614d1b57600080fd5b614d278a838b01614c7e565b90965094506060890135915080821115614d4057600080fd5b50614d4d89828a01614c7e565b979a9699509497509295939492505050565b60008060008060608587031215614d7557600080fd5b8435614d80816146c4565b93506020850135614d90816146c4565b9250604085013567ffffffffffffffff811115614dac57600080fd5b614db887828801614c7e565b95989497509550505050565b60008060408385031215614dd757600080fd5b8235614de2816146c4565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b60008083128015600160ff1b850184121615614e2457614e24614df0565b6001600160ff1b0384018313811615614e3f57614e3f614df0565b50500390565b6000816000190483118215151615614e5f57614e5f614df0565b500290565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526012908201527124b73b30b634b2103634b8bab4b230ba37b960711b604082015260600190565b6001600160a01b039290921682521515602082015260400190565b600060208284031215614ef257600080fd5b5051919050565b60005b83811015614f14578181015183820152602001614efc565b838111156109605750506000910152565b60008151808452614f3d816020860160208601614ef9565b601f01601f19169290920160200192915050565b6001600160a01b03848116825283166020820152606060408201819052600090614f7d90830184614f25565b95945050505050565b6001600160a01b039390931683526020830191909152604082015260600190565b6000600019821415614fbb57614fbb614df0565b5060010190565b600082821015614fd457614fd4614df0565b500390565b6001600160a01b0385811682528416602082015260606040820181905281018290526000828460808401376000608084840101526080601f19601f850116830101905095945050505050565b60008161503457615034614df0565b506000190190565b60006020828403121561504e57600080fd5b815161455a816146c4565b6000821982111561506c5761506c614df0565b500190565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03831681526040810161455a6020830184614aec565b6000826150c157634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156150d857600080fd5b815161455a816147bd565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03848116825283166020820152606081016146836040830184614aec565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052603160045260246000fd5b600082516151ed818460208701614ef9565b9190910192915050565b6020815260006117b66020830184614f2556fe007534de14ea9193847e0ffc37f145402749f07b3c792a421470da99278f1359a2646970667358221220551362e75341660a2d280e06b0b221342a577b32f6548eaa5c78a2b7cc21cc6264736f6c63430008090033496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102a05760003560e01c80636af2482d11610167578063b66d927a116100ce578063d7a6681c11610087578063d7a6681c14610773578063e26ec36a14610786578063f2fde38b14610799578063f7d22673146107ac578063f9009ee8146107bf578063fdeef046146107cc57600080fd5b8063b66d927a146106e6578063b74e8b05146106f9578063c4c004871461070c578063c5321fb01461071f578063c8b268b314610732578063d2786d451461074557600080fd5b80638da5cb5b116101205780638da5cb5b1461065c57806390a83dc21461066d57806396721753146106805780639c045f3e14610693578063aaace601146106b4578063ab27197e146106dd57600080fd5b80636af2482d146105ea5780636c459677146105fd578063715018a61461061057806379bf27b1146106185780638129fc1c1461062b57806383d576501461063357600080fd5b806338b204211161020b5780635911a1ae116101c45780635911a1ae146104e257806359e27fc4146104f55780635f49202f14610508578063624b5ed4146105945780636657fc67146105a75780636989725c146105d757600080fd5b806338b20421146103f557806339ebf8231461041d5780633dcecc2f1461045e57806346b45be7146104b357806354ab6269146104c657806358a6be1c146104d957600080fd5b8063149088161161025d57806314908816146103195780631a5ab4c91461032c5780631acd8c9c1461035f5780631e5160511461039c5780632b9553ce146103cf5780632ea87482146103e257600080fd5b8063054c1344146102a5578063095e377d146102ba57806309ba9b47146102cd5780630d37a290146102e05780630ebdee19146102f35780630eccd2c914610306575b600080fd5b6102b86102b33660046146d9565b6107df565b005b6102b86102c836600461471a565b610966565b6102b86102db3660046146d9565b610e0d565b6102b86102ee366004614765565b610eda565b6102b86103013660046147cb565b61107a565b6102b86103143660046147f9565b611106565b6102b861032736600461471a565b61135d565b61034c61033a36600461487e565b60726020526000908152604090205481565b6040519081526020015b60405180910390f35b61037261036d36600461487e565b61143c565b604080516001600160a01b03909416845261ffff9283166020850152911690820152606001610356565b6103bf6103aa36600461487e565b606f6020526000908152604090205460ff1681565b6040519015158152602001610356565b6102b86103dd3660046146d9565b61148f565b61034c6103f03660046147cb565b611768565b61040861040336600461489b565b6117bf565b60408051928352602083019190915201610356565b61044661042b36600461487e565b6066602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610356565b61047161046c36600461471a565b61181b565b604080516001600160a01b03978816815261ffff96871660208201529486169085015294909116606083015282166080820152911660a082015260c001610356565b6102b86104c13660046149fb565b61184e565b6102b86104d436600461487e565b611af3565b61034c606d5481565b61034c6104f036600461471a565b611baa565b6102b86105033660046146d9565b611cb8565b61055b61051636600461487e565b606b6020526000908152604090205460ff80821691610100810482169162010000820481169163010000008104821691600160201b8204811691600160281b90041686565b604080519615158752941515602087015292151593850193909352151560608401529015156080830152151560a082015260c001610356565b6102b86105a2366004614abd565b611e02565b6105ca6105b536600461487e565b60706020526000908152604090205460ff1681565b6040516103569190614b0e565b6102b86105e53660046146d9565b611e68565b6102b86105f8366004614b1c565b611f33565b6102b861060b366004614bd2565b61203d565b6102b86120a8565b6102b86106263660046147cb565b6120de565b6102b86121a1565b61044661064136600461487e565b6068602052600090815260409020546001600160a01b031681565b6033546001600160a01b0316610446565b6102b861067b3660046146d9565b61222b565b61040861068e36600461489b565b61239b565b6106a66106a1366004614bef565b6123aa565b604051610356929190614c1f565b6104466106c236600461487e565b6065602052600090815260409020546001600160a01b031681565b61034c606c5481565b6103bf6106f436600461487e565b6124b1565b6102b8610707366004614cca565b6124e8565b6102b861071a3660046147cb565b612aa4565b6102b861072d3660046149fb565b612baf565b6102b8610740366004614abd565b612e6c565b6105ca61075336600461471a565b607160209081526000928352604080842090915290825290205460ff1681565b6102b8610781366004614d5f565b612ecb565b6104086107943660046147cb565b6135b5565b6102b86107a736600461487e565b6135f2565b6104086107ba3660046147cb565b61368a565b606e546103bf9060ff1681565b6102b86107da366004614dc4565b6136b0565b6001600160a01b0382166000908152606b6020908152604091829020825160c081018452905460ff80821615801580855261010084048316151595850195909552620100008304821615159584019590955263010000008204811615156060840152600160201b8204811615156080840152600160281b90910416151560a08201529161086d575080604001515b6108b25760405162461bcd60e51b815260206004820152601160248201527015d2551211149055d7d11254d050931151607a1b60448201526064015b60405180910390fd5b6108bc8385613765565b156109605760006108d985856108d28685614e06565b6001613854565b6001600160a01b0386166000908152606a60205260408120919250906109029087906001613a9f565b9050606d54816109129190614e45565b61091e61271084614e45565b101561095d5760405162461bcd60e51b815260206004820152600e60248201526d1313d5d7d0d3d31310551154905360921b60448201526064016108a9565b50505b50505050565b6033546001600160a01b031633146109905760405162461bcd60e51b81526004016108a990614e64565b6001600160a01b0381166000908152606f602052604090205460ff166109c85760405162461bcd60e51b81526004016108a990614e99565b60408051600160208201526000910160408051601f198184030181529181526001600160a01b0385166000908152606a6020529081209192505b610a0b82613b6e565b811015610bed576000610a1e8383613b78565b90506000816001600160a01b031663ae318c4d8860006040518363ffffffff1660e01b8152600401610a51929190614ec5565b60206040518083038186803b158015610a6957600080fd5b505afa158015610a7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa19190614ee0565b90508015610ab0575050610bdb565b6040516354a5706f60e01b81526001600160a01b038881166004830152600091908416906354a5706f9060240160206040518083038186803b158015610af557600080fd5b505afa158015610b09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2d9190614ee0565b6040516374eb83c160e01b81529091506001600160a01b038416906374eb83c190610b60908a908c908b90600401614f51565b600060405180830381600087803b158015610b7a57600080fd5b505af1158015610b8e573d6000803e3d6000fd5b50505050876001600160a01b03167f7114e74d858e0dbdc24007f787fb65581d52fdcd4e8517d6f3a1f9448323428c848385604051610bcf93929190614f86565b60405180910390a25050505b80610be581614fa7565b915050610a02565b506001600160a01b0384166000908152606960205260408120905b610c1182613b6e565b81101561095d576000610c248383613b78565b90506000816001600160a01b031663ae318c4d8960006040518363ffffffff1660e01b8152600401610c57929190614ec5565b60206040518083038186803b158015610c6f57600080fd5b505afa158015610c83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca79190614ee0565b9050600081118015610cd65750731e3174c5757cf5457f8a3a8c3e4a35ed2d1383226001600160a01b03831614155b15610ce2575050610dfb565b60405163fc7e286d60e01b81526001600160a01b0389811660048301526000919084169063fc7e286d9060240160206040518083038186803b158015610d2757600080fd5b505afa158015610d3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5f9190614ee0565b6040516374eb83c160e01b81529091506001600160a01b038416906374eb83c190610d92908b908d908c90600401614f51565b600060405180830381600087803b158015610dac57600080fd5b505af1158015610dc0573d6000803e3d6000fd5b50505050886001600160a01b031660008051602061520b833981519152848385604051610def93929190614f86565b60405180910390a25050505b80610e0581614fa7565b915050610c08565b6001600160a01b0382166000908152606b6020908152604091829020825160c081018452905460ff80821615801580855261010084048316151595850195909552620100008304821615159584019590955263010000008204811615156060840152600160201b8204811615156080840152600160281b90910416151560a082015291610e9b575080602001515b6109605760405162461bcd60e51b815260206004820152601060248201526f4445504f534954455f44495341424c4560801b60448201526064016108a9565b6033546001600160a01b03163314610f045760405162461bcd60e51b81526004016108a990614e64565b6001600160a01b038316610f4b5760405162461bcd60e51b815260206004820152600e60248201526d494e56414c49445f4f5241434c4560901b60448201526064016108a9565b6127108261ffff161115610f935760405162461bcd60e51b815260206004820152600f60248201526e444953434f55545f544f4f5f42494760881b60448201526064016108a9565b6127108161ffff161015610fdd5760405162461bcd60e51b81526020600482015260116024820152701414915352555357d513d3d7d4d3505313607a1b60448201526064016108a9565b6001600160a01b0384811660008181526067602090815260409182902080549488166001600160b01b03199095168517600160a01b61ffff8981169182029290921761ffff60b01b1916600160b01b92891692830217835584519687529286019290925291840152917f7cb71f764a6240297d887d23473a61cf07ba9d34ccfbdd326620a5b896cd33469060600160405180910390a25050505050565b6033546001600160a01b031633146110a45760405162461bcd60e51b81526004016108a990614e64565b6001600160a01b0382166000908152606f602052604090819020805460ff1916831515179055517fd8949265082223b72749a7863e551684ee0df9a0c8ece536b9f14686b68425fc906110fa9084908490614ec5565b60405180910390a15050565b606e54339060ff168061113157506001600160a01b0381166000908152606f602052604090205460ff165b6111725760405162461bcd60e51b815260206004820152601260248201527124a72b20a624a22fa624a8aaa4a220aa27a960711b60448201526064016108a9565b61117b846124b1565b6111bb5760405162461bcd60e51b81526020600482015260116024820152700869e989882a88aa48298be8a9c9eaa8e9607b1b60448201526064016108a9565b6001600160a01b0384166000908152606960205260408120906111dd82613b6e565b9050805b80156112915760006111fe6111f7600184614fc2565b8590613b78565b905061120a8189613765565b1561127e576112198882613b84565b6040516374eb83c160e01b81526001600160a01b038216906374eb83c19061124b9088908c908c908c90600401614fd9565b600060405180830381600087803b15801561126557600080fd5b505af1158015611279573d6000803e3d6000fd5b505050505b508061128981615025565b9150506111e1565b506001600160a01b0386166000908152606a60205260408120906112b482613b6e565b9050805b80156113525760006112ce6111f7600184614fc2565b90506112da8a82613b84565b6040516374eb83c160e01b81526001600160a01b038216906374eb83c19061130c908a908e908e908e90600401614fd9565b600060405180830381600087803b15801561132657600080fd5b505af115801561133a573d6000803e3d6000fd5b5050505050808061134a90615025565b9150506112b8565b505050505050505050565b6033546001600160a01b031633146113875760405162461bcd60e51b81526004016108a990614e64565b6001600160a01b0381166113ce5760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa22a27a5a2a760911b60448201526064016108a9565b6001600160a01b0382811660008181526065602090815260409182902080548686166001600160a01b0319821681179092558351951680865291850152927fd5c0cad2a6b3eea813a7bdf548752779e26da201508f6e807ec5ec3d65d020d6910160405180910390a2505050565b6001600160a01b039081166000908152606760209081526040918290208251606081018452905493841680825261ffff600160a01b86048116938301849052600160b01b90950490941692018290529192565b6001600160a01b0382166000908152606b6020908152604091829020825160c081018452905460ff80821615801580855261010084048316151595850195909552620100008304821615159584019590955263010000008204811615156060840152600160201b8204811615156080840152600160281b90910416151560a08201529161151d575080606001515b61155b5760405162461bcd60e51b815260206004820152600f60248201526e1093d49493d5d7d11254d050931151608a1b60448201526064016108a9565b6001600160a01b0383166000818152607260209081526040808320548151636f307dc360e01b81529151909492636f307dc39260048082019391829003018186803b1580156115a957600080fd5b505afa1580156115bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e1919061503c565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561161957600080fd5b505afa15801561162d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116519190614ee0565b90508115806116695750816116668583615059565b11155b6116cb5760405162461bcd60e51b815260206004820152602d60248201527f417070436f6e74726f6c6c65723a20616d6f756e7420746f20626f72726f772060448201526c657863656564732071756f746160981b60648201526084016108a9565b60006116d8876001613c52565b6001600160a01b0388166000908152606a602052604081209192509061170390899089896001613d3c565b9050606d54816117139190614e45565b61171f61271084614e45565b101561175e5760405162461bcd60e51b815260206004820152600e60248201526d1313d5d7d0d3d31310551154905360921b60448201526064016108a9565b5050505050505050565b600081611795576001600160a01b0383166000908152606a6020526040902061179090613b6e565b6117b6565b6001600160a01b03831660009081526069602052604090206117b690613b6e565b90505b92915050565b6001600160a01b038416600090815260696020526040812081906117e7908790878787613d3c565b6001600160a01b0387166000908152606a60205260409020909250611810908790878787613d3c565b905094509492505050565b60008060008060008061182d8861143c565b9197509550935061183d8761143c565b979a96995094975095939492505050565b6033546001600160a01b031633146118785760405162461bcd60e51b81526004016108a990614e64565b81518151808214801561188a57508115155b6118c65760405162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f504152414d60981b60448201526064016108a9565b60005b82811015611aec576000607060008784815181106118e9576118e9615071565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16600281111561192157611921614ad6565b1461195e5760405162461bcd60e51b815260206004820152600d60248201526c5345545f4f4e4c595f4f4e434560981b60448201526064016108a9565b600284828151811061197257611972615071565b6020026020010151600281111561198b5761198b614ad6565b14806119c1575060018482815181106119a6576119a6615071565b602002602001015160028111156119bf576119bf614ad6565b145b6119fd5760405162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f56414c554560981b60448201526064016108a9565b838181518110611a0f57611a0f615071565b602002602001015160706000878481518110611a2d57611a2d615071565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19166001836002811115611a6a57611a6a614ad6565b02179055507f05334cade7d5051a457d6cddb92a76a5266e31459f3118a536c99b169beaa0f5858281518110611aa257611aa2615071565b6020026020010151858381518110611abc57611abc615071565b6020026020010151604051611ad2929190615087565b60405180910390a180611ae481614fa7565b9150506118c9565b5050505050565b6033546001600160a01b03163314611b1d5760405162461bcd60e51b81526004016108a990614e64565b6001600160a01b03808216600090815260666020908152604080832054815163429c145b60e11b8152915194169363853828b693600480840194938390030190829087803b158015611b6e57600080fd5b505af1158015611b82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba69190614ee0565b5050565b600080611bb8846001613c52565b6001600160a01b0385166000908152606a6020526040812091925090611be19086906001613a9f565b90506000606d5461271084611bf69190614e45565b611c0091906150a4565b905081811115611ca3576000611c168383614fc2565b60405163281aa7fd60e21b815260048101829052600160248201529091506001600160a01b0387169063a06a9ff49060440160206040518083038186803b158015611c6057600080fd5b505afa158015611c74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c989190614ee0565b9450505050506117b9565b600093505050506117b9565b50505092915050565b6033546001600160a01b03163314611ce25760405162461bcd60e51b81526004016108a990614e64565b816001600160a01b031663ba58591c6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d1b57600080fd5b505afa158015611d2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5391906150c6565b611d8f5760405162461bcd60e51b815260206004820152600d60248201526c1253959053125157d590531555609a1b60448201526064016108a9565b6001600160a01b038084166000818152606860205260409081902080548685166001600160a01b031982161790915590519216917f0ff9c79e47a5eed61bfb093d8315d37efcfa7f6679e507f608289c78941b0e5190611df4908490879087906150e3565b60405180910390a250505050565b6033546001600160a01b03163314611e2c5760405162461bcd60e51b81526004016108a990614e64565b606d8190556040518181527f13e612fc69e30b3adcca3cb6573fa94782e94f59261f9b32c96c34b90552b335906020015b60405180910390a150565b6001600160a01b0382166000908152606b6020908152604091829020825160c081018452905460ff80821615801580855261010084048316151595850195909552620100008304821615159584019590955263010000008204811615156060840152600160201b8204811615156080840152600160281b90910416151560a082015291611ef6575080608001515b6109605760405162461bcd60e51b815260206004820152600e60248201526d149154105657d11254d05093115160921b60448201526064016108a9565b6033546001600160a01b03163314611f5d5760405162461bcd60e51b81526004016108a990614e64565b6001600160a01b0382166000908152606b60209081526040918290208351815492850151858501516060870151608088015160a089015161ffff1990971694151561ff00191694909417610100931515939093029290921763ffff00001916620100009115159190910263ff0000001916176301000000911515919091021765ffff000000001916600160201b9115159190910265ff0000000000191617600160281b92151592909202919091179055517f0f86f36676a78407d88aa894e600955aca44b6b9eaff4740c81228e2fa75d628906110fa9084908490614c1f565b6033546001600160a01b031633146120675760405162461bcd60e51b81526004016108a990614e64565b606e805460ff19168215159081179091556040519081527fcfa23450328fe03391963dc3e54c19ebeecb28fd8a628b495b71ab8534d61c3290602001611e5d565b6033546001600160a01b031633146120d25760405162461bcd60e51b81526004016108a990614e64565b6120dc6000613f4f565b565b336000818152606b602052604090205460ff168061211b57506001600160a01b0381166000908152606b6020526040902054600160281b900460ff165b6121585760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa1a0a62622a960911b60448201526064016108a9565b60008261217c576001600160a01b0384166000908152606a60205260409020612195565b6001600160a01b03841660009081526069602052604090205b9050611aec8183613fa1565b60006121ad6001613fb6565b905080156121c5576000805461ff0019166101001790555b6121cd614043565b612af8606c556132c8606d55606e805460ff191660011790558015612228576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001611e5d565b50565b6033546001600160a01b031633146122555760405162461bcd60e51b81526004016108a990614e64565b6001600160a01b0382166122a15760405162461bcd60e51b815260206004820152601360248201527214dd1c985d1959da595cc8111a5cd8589b1959606a1b60448201526064016108a9565b6001600160a01b0380841660009081526066602052604090205416801561233757806001600160a01b031663853828b66040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156122fd57600080fd5b505af1158015612311573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123359190614ee0565b505b6001600160a01b038481166000818152606660205260409081902080546001600160a01b0319169387169390931790925590517fcc7d45f325309ae5b4940b5de638a482be2a51aa3a917326a84f65bcc2f7352390611df4908490879087906150e3565b6000806117e786868686613854565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081018290526000846123ff576001600160a01b0386166000908152606a60205260409020612418565b6001600160a01b03861660009081526069602052604090205b90506124248185613b78565b6001600160a01b0381166000908152606b6020908152604091829020825160c081018452905460ff8082161515835261010082048116151593830193909352620100008104831615159382019390935263010000008304821615156060820152600160201b8304821615156080820152600160281b90920416151560a08201529097909650945050505050565b60008060006124c18460016135b5565b91509150606c54816124d39190614e45565b6124df61271084614e45565b10949350505050565b6033546001600160a01b031633146125125760405162461bcd60e51b81526004016108a990614e64565b6001600160a01b0385166000908152606f602052604090205460ff1661254a5760405162461bcd60e51b81526004016108a990614e99565b826125895760405162461bcd60e51b815260206004820152600f60248201526e06e6f7468696e6720746f207377617608c1b60448201526064016108a9565b8281146125fe5760405162461bcd60e51b815260206004820152603a60248201527f6c656e677468206f6620736f757263655661756c74735f2073686f756c64206260448201527f6520657175616c20746f207461726765745661756c74735f277300000000000060648201526084016108a9565b604080516001602082015260009101604051602081830303815290604052905060005b8481101561175e57600086868381811061263d5761263d615071565b9050602002016020810190612652919061487e565b9050600085858481811061266857612668615071565b905060200201602081019061267d919061487e565b90506000826001600160a01b031663ae318c4d8c60006040518363ffffffff1660e01b81526004016126b0929190614ec5565b60206040518083038186803b1580156126c857600080fd5b505afa1580156126dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127009190614ee0565b60405163fc7e286d60e01b81526001600160a01b038d8116600483015291925060009185169063fc7e286d9060240160206040518083038186803b15801561274757600080fd5b505afa15801561275b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277f9190614ee0565b9050836001600160a01b03166374eb83c18c8e896040518463ffffffff1660e01b81526004016127b193929190614f51565b600060405180830381600087803b1580156127cb57600080fd5b505af11580156127df573d6000803e3d6000fd5b505050506001600160a01b038416734527ba20f16f86525b6d174b6314502ca6d5256e141561281d57612816816301d2eb40614e45565b9150612853565b73c703fdad6ca5df56bd729fef24157e196a4810f86001600160a01b03851614156128535761285081630c0a4680614e45565b91505b600082116128645750505050612a92565b604051630eda25c760e11b8152670de0b6b3a76400006004820152600060248201819052906001600160a01b03851690631db44b8e9060440160206040518083038186803b1580156128b557600080fd5b505afa1580156128c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128ed9190614ee0565b9050600064e8d4a51000826129028683614e45565b61290c91906150a4565b61291691906150a4565b90506129a0333083886001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561295757600080fd5b505afa15801561296b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061298f919061503c565b6001600160a01b0316929190614072565b612a268582876001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156129de57600080fd5b505afa1580156129f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a16919061503c565b6001600160a01b031691906140ca565b612a31858f836141ee565b604080516001600160a01b038881168252602082018690528781169282019290925260608101839052908f16907fcba74a9a38e532ea920e947d3babe6efc7b838cb416f82d9b9d79f32744b34ca9060800160405180910390a25050505050505b80612a9c81614fa7565b915050612621565b336000818152606b602052604090205460ff1680612ae157506001600160a01b0381166000908152606b6020526040902054600160281b900460ff165b612b1e5760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa1a0a62622a960911b60448201526064016108a9565b600082612b42576001600160a01b0384166000908152606a60205260409020612b5b565b6001600160a01b03841660009081526069602052604090205b90506014612b6882613b6e565b10612ba55760405162461bcd60e51b815260206004820152600d60248201526c0949e929cbea89e9ebe9aaa869609b1b60448201526064016108a9565b611aec81836142c5565b815181513391908082148015612bc457508115155b612c005760405162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f504152414d60981b60448201526064016108a9565b60005b82811015612dac576002858281518110612c1f57612c1f615071565b60200260200101516002811115612c3857612c38614ad6565b1480612c6e57506001858281518110612c5357612c53615071565b60200260200101516002811115612c6c57612c6c614ad6565b145b612caa5760405162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f56414c554560981b60448201526064016108a9565b848181518110612cbc57612cbc615071565b602002602001015160716000888481518110612cda57612cda615071565b6020908102919091018101516001600160a01b039081168352828201939093526040918201600090812093891681529290529020805460ff19166001836002811115612d2857612d28614ad6565b02179055507f65d4763abdc1e045affaf50aed5fc2a1f4f466da45ee41ea701e0ad5029ff0b0868281518110612d6057612d60615071565b602002602001015185878481518110612d7b57612d7b615071565b6020026020010151604051612d9293929190615107565b60405180910390a180612da481614fa7565b915050612c03565b506000612dba846001613c52565b6001600160a01b0385166000908152606a6020526040812091925090612de39086906001613a9f565b90506000606d5461271084612df89190614e45565b612e0291906150a4565b9050606d5482612e129190614e45565b612e1e61271085614e45565b101561175e5760405162461bcd60e51b815260206004820152601d60248201527f53455456414c49445641554c543a204c4f575f434f4c4c41544552414c00000060448201526064016108a9565b6033546001600160a01b03163314612e965760405162461bcd60e51b81526004016108a990614e64565b606c8190556040518181527f138a4f81e91d7ed8109625537819aae162d22b1e4b5f73e1919d1f6e21bfbb4b90602001611e5d565b6033546001600160a01b03163314612ef55760405162461bcd60e51b81526004016108a990614e64565b6001600160a01b0383166000908152606f602052604090205460ff16612f2d5760405162461bcd60e51b81526004016108a990614e99565b6001600160a01b038416600090815260696020908152604080832081516001818501528251808203909401845282019091529190815b84811015613162576000868683818110612f7f57612f7f615071565b9050602002016020810190612f94919061487e565b90506000816001600160a01b031663ae318c4d8b60006040518363ffffffff1660e01b8152600401612fc7929190614ec5565b60206040518083038186803b158015612fdf57600080fd5b505afa158015612ff3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130179190614ee0565b6040516354a5706f60e01b81526001600160a01b038c811660048301529192506000918416906354a5706f9060240160206040518083038186803b15801561305e57600080fd5b505afa158015613072573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130969190614ee0565b90506130a28287615059565b6040516374eb83c160e01b81529096506001600160a01b038416906374eb83c1906130d5908d908f908a90600401614f51565b600060405180830381600087803b1580156130ef57600080fd5b505af1158015613103573d6000803e3d6000fd5b505050508a6001600160a01b03167f7114e74d858e0dbdc24007f787fb65581d52fdcd4e8517d6f3a1f9448323428c84838560405161314493929190614f86565b60405180910390a2505050808061315a90614fa7565b915050612f63565b506000821161317357505050610960565b60008061317f85613b6e565b90505b801561356657600061319f613198600184614fc2565b8790613b78565b90506131ab818b613765565b15806131d757506001600160a01b0381166000908152606b6020526040902054600160281b900460ff16155b156131e25750613554565b60405163ae318c4d60e01b81526000906001600160a01b0383169063ae318c4d90613213908e908590600401614ec5565b60206040518083038186803b15801561322b57600080fd5b505afa15801561323f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132639190614ee0565b905061326f8185615059565b60405163fc7e286d60e01b81526001600160a01b038d8116600483015291955060009184169063fc7e286d9060240160206040518083038186803b1580156132b657600080fd5b505afa1580156132ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132ee9190614ee0565b9050826001600160a01b03166374eb83c18c8e896040518463ffffffff1660e01b815260040161332093929190614f51565b600060405180830381600087803b15801561333a57600080fd5b505af115801561334e573d6000803e3d6000fd5b5050505086851415613395578b6001600160a01b031660008051602061520b83398151915284838560405161338593929190614f86565b60405180910390a2505050613566565b868510156133d8578b6001600160a01b031660008051602061520b8339815191528483856040516133c893929190614f86565b60405180910390a2505050613554565b60006133e48887614fc2565b90506305f5e10081101561342e578c6001600160a01b031660008051602061520b83398151915285848660405161341d93929190614f86565b60405180910390a250505050613566565b600064e8d4a51000846134418486614e45565b6134509064e8d4a51000614e45565b61345a91906150a4565b61346491906150a4565b9050828111156134715750815b6134b08d3083886001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561295757600080fd5b6134ee8582876001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156129de57600080fd5b6134f9858f836141ee565b6001600160a01b038e1660008051602061520b8339815191528661351d8487614fc2565b6135278689614fc2565b60405161353693929190614f86565b60405180910390a26135488288614fc2565b96505050505050613566565b8061355e81615025565b915050613182565b5060408051848152602081018390526001600160a01b038a16917f26e0bc17070eb8681630837613dc291e5976262044227decb74f578aee1eee5c910160405180910390a25050505050505050565b6000806135c28484613c52565b6001600160a01b0385166000908152606a602052604090209092506135e990859085613a9f565b90509250929050565b6033546001600160a01b0316331461361c5760405162461bcd60e51b81526004016108a990614e64565b6001600160a01b0381166136815760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016108a9565b61222881613f4f565b6001600160a01b038216600090815260696020526040812081906135c290859085613a9f565b6033546001600160a01b031633146136da5760405162461bcd60e51b81526004016108a990614e64565b6001600160a01b03821660008181526072602090815260409182902054825193845233918401919091528282015260608201839052517f3293d79c25c2df19fbbce583d677755d261349535e2ac61d5a06e6524fcbed759181900360800190a16001600160a01b03909116600090815260726020526040902055565b6001600160a01b03163b151590565b6001600160a01b03808316600090815260716020908152604080832093851683529290529081205460ff1681808260028111156137a4576137a4614ad6565b146137af57816137cc565b6001600160a01b03851660009081526070602052604090205460ff165b905060008160028111156137e2576137e2614ad6565b14156138245760405162461bcd60e51b81526020600482015260116024820152701590531251159055531517d55392539255607a1b60448201526064016108a9565b600281600281111561383857613838614ad6565b1415613849576001925050506117b9565b506000949350505050565b6001600160a01b03841660009081526069602052604081208161387682613b6e565b90506000805b828110156139ee5760006138908583613b78565b905061389c818b613765565b156139db57806001600160a01b0316896001600160a01b0316141561395057604051635ac28bf960e01b81526001600160a01b038b81166004830152602482018a9052821690635ac28bf99060440160206040518083038186803b15801561390357600080fd5b505afa158015613917573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061393b9190614ee0565b6139459087615059565b9550600192506139db565b60405163ae318c4d60e01b81526001600160a01b0382169063ae318c4d9061397e908d908b90600401614ec5565b60206040518083038186803b15801561399657600080fd5b505afa1580156139aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139ce9190614ee0565b6139d89087615059565b95505b50806139e681614fa7565b91505061387c565b5080158015613a025750613a028789613765565b15613a9457604051635ac28bf960e01b81526001600160a01b03898116600483015260248201889052881690635ac28bf99060440160206040518083038186803b158015613a4f57600080fd5b505afa158015613a63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a879190614ee0565b613a919085615059565b93505b505050949350505050565b600080613aab84613b6e565b905060005b81811015613b65576000613ac48683613b78565b60405163ae318c4d60e01b81529091506001600160a01b0382169063ae318c4d90613af5908a908990600401614ec5565b60206040518083038186803b158015613b0d57600080fd5b505afa158015613b21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b459190614ee0565b613b4f9085615059565b9350508080613b5d90614fa7565b915050613ab0565b50509392505050565b60006117b9825490565b60006117b683836142da565b6001600160a01b0381166000908152606b6020908152604091829020825160c081018452905460ff80821615801580855261010084048316151595850195909552620100008304821615159584019590955263010000008204811615156060840152600160201b8204811615156080840152600160281b90910416151560a082015291613c1257508060a001515b613c4d5760405162461bcd60e51b815260206004820152600c60248201526b13125457d11254d05093115160a21b60448201526064016108a9565b505050565b6001600160a01b038216600090815260696020526040812081613c7482613b6e565b905060005b81811015611caf576000613c8d8483613b78565b9050613c998188613765565b15613d295760405163ae318c4d60e01b81526001600160a01b0382169063ae318c4d90613ccc908a908a90600401614ec5565b60206040518083038186803b158015613ce457600080fd5b505afa158015613cf8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d1c9190614ee0565b613d269086615059565b94505b5080613d3481614fa7565b915050613c79565b600080613d4886613b6e565b90506000805b82811015613eb1576000613d628983613b78565b9050806001600160a01b0316886001600160a01b03161415613e1357604051635ac28bf960e01b81526001600160a01b038b8116600483015260248201899052821690635ac28bf99060440160206040518083038186803b158015613dc657600080fd5b505afa158015613dda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dfe9190614ee0565b613e089086615059565b945060019250613e9e565b60405163ae318c4d60e01b81526001600160a01b0382169063ae318c4d90613e41908d908a90600401614ec5565b60206040518083038186803b158015613e5957600080fd5b505afa158015613e6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e919190614ee0565b613e9b9086615059565b94505b5080613ea981614fa7565b915050613d4e565b5080613f4457604051635ac28bf960e01b81526001600160a01b03898116600483015260248201879052871690635ac28bf99060440160206040518083038186803b158015613eff57600080fd5b505afa158015613f13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f379190614ee0565b613f419084615059565b92505b505095945050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006117b6836001600160a01b038416614304565b60008054610100900460ff1615613ffd578160ff166001148015613fd95750303b155b613ff55760405162461bcd60e51b81526004016108a99061512c565b506000919050565b60005460ff8084169116106140245760405162461bcd60e51b81526004016108a99061512c565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff1661406a5760405162461bcd60e51b81526004016108a99061517a565b6120dc6143f7565b610960846323b872dd60e01b858585604051602401614093939291906150e3565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614427565b8015806141535750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561411957600080fd5b505afa15801561412d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141519190614ee0565b155b6141be5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016108a9565b6040516001600160a01b038316602482015260448101829052613c4d90849063095ea7b360e01b90606401614093565b826001600160a01b031663f213159c846001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561423657600080fd5b505afa15801561424a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061426e919061503c565b84846040518463ffffffff1660e01b815260040161428e939291906150e3565b600060405180830381600087803b1580156142a857600080fd5b505af11580156142bc573d6000803e3d6000fd5b50505050505050565b60006117b6836001600160a01b0384166144f9565b60008260000182815481106142f1576142f1615071565b9060005260206000200154905092915050565b600081815260018301602052604081205480156143ed576000614328600183614fc2565b855490915060009061433c90600190614fc2565b90508181146143a157600086600001828154811061435c5761435c615071565b906000526020600020015490508087600001848154811061437f5761437f615071565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806143b2576143b26151c5565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506117b9565b60009150506117b9565b600054610100900460ff1661441e5760405162461bcd60e51b81526004016108a99061517a565b6120dc33613f4f565b600061447c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166145489092919063ffffffff16565b805190915015613c4d578080602001905181019061449a91906150c6565b613c4d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108a9565b6000818152600183016020526040812054614540575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556117b9565b5060006117b9565b60606145578484600085614561565b90505b9392505050565b6060824710156145c25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016108a9565b843b6146105760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108a9565b600080866001600160a01b0316858760405161462c91906151db565b60006040518083038185875af1925050503d8060008114614669576040519150601f19603f3d011682016040523d82523d6000602084013e61466e565b606091505b509150915061467e82828661468b565b925050505b949350505050565b6060831561469a57508161455a565b8251156146aa5782518084602001fd5b8160405162461bcd60e51b81526004016108a991906151f7565b6001600160a01b038116811461222857600080fd5b6000806000606084860312156146ee57600080fd5b83356146f9816146c4565b92506020840135614709816146c4565b929592945050506040919091013590565b6000806040838503121561472d57600080fd5b8235614738816146c4565b91506020830135614748816146c4565b809150509250929050565b803561ffff8116811461403e57600080fd5b6000806000806080858703121561477b57600080fd5b8435614786816146c4565b93506020850135614796816146c4565b92506147a460408601614753565b91506147b260608601614753565b905092959194509250565b801515811461222857600080fd5b600080604083850312156147de57600080fd5b82356147e9816146c4565b91506020830135614748816147bd565b60008060006040848603121561480e57600080fd5b8335614819816146c4565b9250602084013567ffffffffffffffff8082111561483657600080fd5b818601915086601f83011261484a57600080fd5b81358181111561485957600080fd5b87602082850101111561486b57600080fd5b6020830194508093505050509250925092565b60006020828403121561489057600080fd5b813561455a816146c4565b600080600080608085870312156148b157600080fd5b84356148bc816146c4565b935060208501356148cc816146c4565b92506040850135915060608501356148e3816147bd565b939692955090935050565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff81118282101715614927576149276148ee565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715614956576149566148ee565b604052919050565b600067ffffffffffffffff821115614978576149786148ee565b5060051b60200190565b600082601f83011261499357600080fd5b813560206149a86149a38361495e565b61492d565b82815260059290921b840181019181810190868411156149c757600080fd5b8286015b848110156149f0578035600381106149e35760008081fd5b83529183019183016149cb565b509695505050505050565b60008060408385031215614a0e57600080fd5b823567ffffffffffffffff80821115614a2657600080fd5b818501915085601f830112614a3a57600080fd5b81356020614a4a6149a38361495e565b82815260059290921b84018101918181019089841115614a6957600080fd5b948201945b83861015614a90578535614a81816146c4565b82529482019490820190614a6e565b96505086013592505080821115614aa657600080fd5b50614ab385828601614982565b9150509250929050565b600060208284031215614acf57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60038110614b0a57634e487b7160e01b600052602160045260246000fd5b9052565b602081016117b98284614aec565b60008082840360e0811215614b3057600080fd5b8335614b3b816146c4565b925060c0601f1982011215614b4f57600080fd5b50614b58614904565b6020840135614b66816147bd565b81526040840135614b76816147bd565b60208201526060840135614b89816147bd565b60408201526080840135614b9c816147bd565b606082015260a0840135614baf816147bd565b608082015260c0840135614bc2816147bd565b60a0820152919491935090915050565b600060208284031215614be457600080fd5b813561455a816147bd565b600080600060608486031215614c0457600080fd5b8335614c0f816146c4565b92506020840135614709816147bd565b600060e08201905060018060a01b03841682528251151560208301526020830151151560408301526040830151151560608301526060830151151560808301526080830151151560a083015260a0830151151560c08301529392505050565b60008083601f840112614c9057600080fd5b50813567ffffffffffffffff811115614ca857600080fd5b6020830191508360208260051b8501011115614cc357600080fd5b9250929050565b60008060008060008060808789031215614ce357600080fd5b8635614cee816146c4565b95506020870135614cfe816146c4565b9450604087013567ffffffffffffffff80821115614d1b57600080fd5b614d278a838b01614c7e565b90965094506060890135915080821115614d4057600080fd5b50614d4d89828a01614c7e565b979a9699509497509295939492505050565b60008060008060608587031215614d7557600080fd5b8435614d80816146c4565b93506020850135614d90816146c4565b9250604085013567ffffffffffffffff811115614dac57600080fd5b614db887828801614c7e565b95989497509550505050565b60008060408385031215614dd757600080fd5b8235614de2816146c4565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b60008083128015600160ff1b850184121615614e2457614e24614df0565b6001600160ff1b0384018313811615614e3f57614e3f614df0565b50500390565b6000816000190483118215151615614e5f57614e5f614df0565b500290565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526012908201527124b73b30b634b2103634b8bab4b230ba37b960711b604082015260600190565b6001600160a01b039290921682521515602082015260400190565b600060208284031215614ef257600080fd5b5051919050565b60005b83811015614f14578181015183820152602001614efc565b838111156109605750506000910152565b60008151808452614f3d816020860160208601614ef9565b601f01601f19169290920160200192915050565b6001600160a01b03848116825283166020820152606060408201819052600090614f7d90830184614f25565b95945050505050565b6001600160a01b039390931683526020830191909152604082015260600190565b6000600019821415614fbb57614fbb614df0565b5060010190565b600082821015614fd457614fd4614df0565b500390565b6001600160a01b0385811682528416602082015260606040820181905281018290526000828460808401376000608084840101526080601f19601f850116830101905095945050505050565b60008161503457615034614df0565b506000190190565b60006020828403121561504e57600080fd5b815161455a816146c4565b6000821982111561506c5761506c614df0565b500190565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03831681526040810161455a6020830184614aec565b6000826150c157634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156150d857600080fd5b815161455a816147bd565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03848116825283166020820152606081016146836040830184614aec565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052603160045260246000fd5b600082516151ed818460208701614ef9565b9190910192915050565b6020815260006117b66020830184614f2556fe007534de14ea9193847e0ffc37f145402749f07b3c792a421470da99278f1359a2646970667358221220551362e75341660a2d280e06b0b221342a577b32f6548eaa5c78a2b7cc21cc6264736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "beforeBorrow(address,address,uint256)": {
        "params": {
          "_amount": "loan amount",
          "_user": "borrower",
          "_vault": "address of loan market"
        }
      },
      "beforeDeposit(address,address,uint256)": {
        "params": {
          "_vault": "address of deposit market param  _amount deposit amount"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "userPendingValues(address,address,int256,bool)": {
        "params": {
          "_amount": "the amount of deposits or withdrawals",
          "_dp": "discount or premium",
          "_user": "depositors",
          "_vault": "target vault"
        }
      },
      "userTotalPendingValues(address,address,int256,bool)": {
        "params": {
          "_amount": "the amount of deposits or withdrawals",
          "_dp": "discount or premium",
          "_user": "depositors",
          "_vault": "target vault"
        }
      },
      "userTotalValues(address,bool)": {
        "params": {
          "_dp": "discount or premium",
          "_user": "depositors"
        }
      },
      "userValues(address,bool)": {
        "params": {
          "_dp": "discount or premium",
          "_user": "depositors"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "beforeBorrow(address,address,uint256)": {
        "notice": "Risk control check before borrowing"
      },
      "beforeDeposit(address,address,uint256)": {
        "notice": "Risk control check before deposit param _user depositors"
      },
      "isNeedLiquidate(address)": {
        "notice": "determine whether the borrower needs to be liquidated"
      },
      "maxBorrow(address,address)": {
        "notice": "maximum that a user can borrow from a Vault"
      },
      "userPendingValues(address,address,int256,bool)": {
        "notice": "predict total valid vault value after the user operating vault (i.e., Vault of deposit only counts collateral)"
      },
      "userTotalPendingValues(address,address,int256,bool)": {
        "notice": "predict total vault value after the user operating Vault"
      },
      "userTotalValues(address,bool)": {
        "notice": "Get user total Vault value"
      },
      "userValues(address,bool)": {
        "notice": "Get user total valid Vault value (i.e., Vault of deposit only counts collateral)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 188,
        "contract": "contracts/AppController.sol:AppController",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 191,
        "contract": "contracts/AppController.sol:AppController",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1640,
        "contract": "contracts/AppController.sol:AppController",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 68,
        "contract": "contracts/AppController.sol:AppController",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 180,
        "contract": "contracts/AppController.sol:AppController",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5807,
        "contract": "contracts/AppController.sol:AppController",
        "label": "dyTokens",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 5811,
        "contract": "contracts/AppController.sol:AppController",
        "label": "strategies",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 5823,
        "contract": "contracts/AppController.sol:AppController",
        "label": "valueConfs",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_address,t_struct(ValueConf)5818_storage)"
      },
      {
        "astId": 5828,
        "contract": "contracts/AppController.sol:AppController",
        "label": "dyTokenVaults",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 5833,
        "contract": "contracts/AppController.sol:AppController",
        "label": "userJoinedDepositVaults",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_address,t_struct(AddressSet)5179_storage)"
      },
      {
        "astId": 5838,
        "contract": "contracts/AppController.sol:AppController",
        "label": "userJoinedBorrowVaults",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_struct(AddressSet)5179_storage)"
      },
      {
        "astId": 5856,
        "contract": "contracts/AppController.sol:AppController",
        "label": "vaultStates",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_address,t_struct(VaultState)5851_storage)"
      },
      {
        "astId": 5858,
        "contract": "contracts/AppController.sol:AppController",
        "label": "liquidateRate",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 5860,
        "contract": "contracts/AppController.sol:AppController",
        "label": "collateralRate",
        "offset": 0,
        "slot": "109",
        "type": "t_uint256"
      },
      {
        "astId": 5862,
        "contract": "contracts/AppController.sol:AppController",
        "label": "isOpenLiquidate",
        "offset": 0,
        "slot": "110",
        "type": "t_bool"
      },
      {
        "astId": 5866,
        "contract": "contracts/AppController.sol:AppController",
        "label": "allowedLiquidator",
        "offset": 0,
        "slot": "111",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5872,
        "contract": "contracts/AppController.sol:AppController",
        "label": "validVaults",
        "offset": 0,
        "slot": "112",
        "type": "t_mapping(t_address,t_enum(ValidVault)16866)"
      },
      {
        "astId": 5880,
        "contract": "contracts/AppController.sol:AppController",
        "label": "validVaultsOfUser",
        "offset": 0,
        "slot": "113",
        "type": "t_mapping(t_address,t_mapping(t_address,t_enum(ValidVault)16866))"
      },
      {
        "astId": 5884,
        "contract": "contracts/AppController.sol:AppController",
        "label": "vaultsBorrowQuota",
        "offset": 0,
        "slot": "114",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(ValidVault)16866": {
        "encoding": "inplace",
        "label": "enum IController.ValidVault",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_enum(ValidVault)16866)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum IController.ValidVault)",
        "numberOfBytes": "32",
        "value": "t_enum(ValidVault)16866"
      },
      "t_mapping(t_address,t_mapping(t_address,t_enum(ValidVault)16866))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => enum IController.ValidVault))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_enum(ValidVault)16866)"
      },
      "t_mapping(t_address,t_struct(AddressSet)5179_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)5179_storage"
      },
      "t_mapping(t_address,t_struct(ValueConf)5818_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AppController.ValueConf)",
        "numberOfBytes": "32",
        "value": "t_struct(ValueConf)5818_storage"
      },
      "t_mapping(t_address,t_struct(VaultState)5851_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AppController.VaultState)",
        "numberOfBytes": "32",
        "value": "t_struct(VaultState)5851_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)5179_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 5178,
            "contract": "contracts/AppController.sol:AppController",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4878_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)4878_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 4873,
            "contract": "contracts/AppController.sol:AppController",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4877,
            "contract": "contracts/AppController.sol:AppController",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ValueConf)5818_storage": {
        "encoding": "inplace",
        "label": "struct AppController.ValueConf",
        "members": [
          {
            "astId": 5813,
            "contract": "contracts/AppController.sol:AppController",
            "label": "oracle",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5815,
            "contract": "contracts/AppController.sol:AppController",
            "label": "dr",
            "offset": 20,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 5817,
            "contract": "contracts/AppController.sol:AppController",
            "label": "pr",
            "offset": 22,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(VaultState)5851_storage": {
        "encoding": "inplace",
        "label": "struct AppController.VaultState",
        "members": [
          {
            "astId": 5840,
            "contract": "contracts/AppController.sol:AppController",
            "label": "enabled",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5842,
            "contract": "contracts/AppController.sol:AppController",
            "label": "enableDeposit",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5844,
            "contract": "contracts/AppController.sol:AppController",
            "label": "enableWithdraw",
            "offset": 2,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5846,
            "contract": "contracts/AppController.sol:AppController",
            "label": "enableBorrow",
            "offset": 3,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5848,
            "contract": "contracts/AppController.sol:AppController",
            "label": "enableRepay",
            "offset": 4,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5850,
            "contract": "contracts/AppController.sol:AppController",
            "label": "enableLiquidate",
            "offset": 5,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}