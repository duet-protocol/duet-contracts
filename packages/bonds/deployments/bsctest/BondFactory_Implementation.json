{
  "address": "0x8e1d9be324C17D9a2F27d5a7470281f7FAAD8470",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "bondToken",
          "type": "address"
        }
      ],
      "name": "BondCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "kind",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousImplementation",
          "type": "address"
        }
      ],
      "name": "BondImplementationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "bondToken",
          "type": "address"
        }
      ],
      "name": "BondRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bondToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousPrice",
          "type": "uint256"
        }
      ],
      "name": "PriceUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PERCENTAGE_FACTOR",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "bondImplementations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bondKinds",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bondPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ask",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdated",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bondSeries",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "kind_",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "tradingAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "kind_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ask",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdated",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBondFactory.BondPrice",
          "name": "initialPrice_",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "initialGrant_",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "series_",
          "type": "string"
        },
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "underlyingToken_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturity_",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "isin_",
          "type": "string"
        }
      ],
      "name": "createBond",
      "outputs": [
        {
          "internalType": "address",
          "name": "bondTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBondKinds",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBondSeries",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "kind_",
          "type": "string"
        }
      ],
      "name": "getKindBondLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bondToken_",
          "type": "address"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ask",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdated",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBondFactory.BondPrice",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "series_",
          "type": "string"
        }
      ],
      "name": "getSeriesBondLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bondToken_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "grant",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "isinBondMapping",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "kindBondsMapping",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceDecimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBond",
          "name": "bondToken_",
          "type": "address"
        }
      ],
      "name": "removeBond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "seriesBondsMapping",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "kind_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "impl_",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "upgradeDeployed_",
          "type": "bool"
        }
      ],
      "name": "setBondImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bondToken_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ask",
          "type": "uint256"
        }
      ],
      "name": "setPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bondToken_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "underlyingOut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ask",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdated",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBondFactory.BondPrice",
          "name": "price",
          "type": "tuple"
        }
      ],
      "name": "verifyPrice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "bid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ask",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdated",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBondFactory.BondPrice",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe340f20875534cb5fa091b7079b7c56b12f22ea447ba7633bba64de052df481f",
  "receipt": {
    "to": null,
    "from": "0xe7a2b8C8feD53713F69227e6c3d2384E80CF88a6",
    "contractAddress": "0x8e1d9be324C17D9a2F27d5a7470281f7FAAD8470",
    "transactionIndex": 19,
    "gasUsed": "2916806",
    "logsBloom": "0x
    "blockHash": "0x47713078c863b5b0634e6ea411124c1d5d210e2f18877e7b61d8b951e70e119c",
    "transactionHash": "0xe340f20875534cb5fa091b7079b7c56b12f22ea447ba7633bba64de052df481f",
    "logs": [],
    "blockNumber": 25186788,
    "cumulativeGasUsed": "5460289",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 9,
  "solcInputHash": "6a13f6e055440a5408c02b9e5d62636b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bondToken\",\"type\":\"address\"}],\"name\":\"BondCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"kind\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousImplementation\",\"type\":\"address\"}],\"name\":\"BondImplementationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bondToken\",\"type\":\"address\"}],\"name\":\"BondRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bondToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousPrice\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERCENTAGE_FACTOR\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"bondImplementations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bondKinds\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bondPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ask\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bondSeries\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"kind_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tradingAmount\",\"type\":\"uint256\"}],\"name\":\"calculateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"kind_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ask\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"}],\"internalType\":\"struct IBondFactory.BondPrice\",\"name\":\"initialPrice_\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"initialGrant_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"series_\",\"type\":\"string\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"underlyingToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"isin_\",\"type\":\"string\"}],\"name\":\"createBond\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bondTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBondKinds\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBondSeries\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"kind_\",\"type\":\"string\"}],\"name\":\"getKindBondLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bondToken_\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ask\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"}],\"internalType\":\"struct IBondFactory.BondPrice\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"series_\",\"type\":\"string\"}],\"name\":\"getSeriesBondLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bondToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"grant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"isinBondMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"kindBondsMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBond\",\"name\":\"bondToken_\",\"type\":\"address\"}],\"name\":\"removeBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"seriesBondsMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"kind_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"impl_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"upgradeDeployed_\",\"type\":\"bool\"}],\"name\":\"setBondImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bondToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ask\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bondToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"underlyingOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ask\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"}],\"internalType\":\"struct IBondFactory.BondPrice\",\"name\":\"price\",\"type\":\"tuple\"}],\"name\":\"verifyPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ask\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"}],\"internalType\":\"struct IBondFactory.BondPrice\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"}},\"stateVariables\":{\"PERCENTAGE_FACTOR\":{\"details\":\"factor for percentage that described in integer. It makes 10000 means 100%, and 20 means 0.2%;      Calculation formula: x * percentage / PERCENTAGE_FACTOR\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BondFactory.sol\":\"BondFactory\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0x6309f9f39dc6f4f45a24f296543867aa358e32946cd6b2874627a996d606b3a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/TransparentUpgradeableProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable ERC1967Proxy(_logic, _data) {\\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0x140055a64cf579d622e04f5a198595832bf2cb193cd0005f4f2d4d61ca906253\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"contracts/BondFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./interfaces/IBondFactory.sol\\\";\\nimport \\\"./interfaces/IBond.sol\\\";\\nimport \\\"./libs/Adminable.sol\\\";\\nimport \\\"./libs/DuetTransparentUpgradeableProxy.sol\\\";\\n\\ncontract BondFactory is IBondFactory, Initializable, Adminable {\\n    /**\\n     * @dev factor for percentage that described in integer. It makes 10000 means 100%, and 20 means 0.2%;\\n     *      Calculation formula: x * percentage / PERCENTAGE_FACTOR\\n     */\\n    uint16 public constant PERCENTAGE_FACTOR = 10000;\\n    // kind => impl\\n    mapping(string => address) public bondImplementations;\\n    // kind => bond addresses\\n    mapping(string => address[]) public kindBondsMapping;\\n    // series => bond addresses\\n    mapping(string => address[]) public seriesBondsMapping;\\n    string[] public bondKinds;\\n    string[] public bondSeries;\\n\\n    // isin => bond address\\n    mapping(string => address) public isinBondMapping;\\n\\n    // bond => price\\n    mapping(address => BondPrice) public bondPrices;\\n\\n    event PriceUpdated(address indexed bondToken, uint256 price, uint256 previousPrice);\\n    event BondImplementationUpdated(string kind, address implementation, address previousImplementation);\\n    event BondCreated(address bondToken);\\n    event BondRemoved(address bondToken);\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(address admin_) public initializer {\\n        _setAdmin(admin_);\\n    }\\n\\n    function verifyPrice(BondPrice memory price) public view returns (BondPrice memory) {\\n        require(\\n            price.price > 0 && price.bid > 0 && price.ask > 0 && price.ask >= price.bid,\\n            \\\"BondFactory: INVALID_PRICE\\\"\\n        );\\n        return price;\\n    }\\n\\n    function createBond(\\n        string memory kind_,\\n        string memory name_,\\n        string memory symbol_,\\n        BondPrice calldata initialPrice_,\\n        uint256 initialGrant_,\\n        string memory series_,\\n        IERC20Upgradeable underlyingToken_,\\n        uint256 maturity_,\\n        string memory isin_\\n    ) external onlyAdmin returns (address bondTokenAddress) {\\n        address proxyAdmin = address(this);\\n        address bondImpl = bondImplementations[kind_];\\n        require(bondImpl != address(0), \\\"BondFactory: Invalid bond implementation\\\");\\n        require(isinBondMapping[isin_] == address(0), \\\"A bond for this isin already exists\\\");\\n        verifyPrice(initialPrice_);\\n        bytes memory proxyData;\\n        DuetTransparentUpgradeableProxy proxy = new DuetTransparentUpgradeableProxy(bondImpl, proxyAdmin, proxyData);\\n        bondTokenAddress = address(proxy);\\n        IBond(bondTokenAddress).initialize(name_, symbol_, series_, address(this), underlyingToken_, maturity_, isin_);\\n        isinBondMapping[isin_] = bondTokenAddress;\\n\\n        if (seriesBondsMapping[series_].length == 0) {\\n            bondSeries.push(series_);\\n        }\\n        setPrice(bondTokenAddress, initialPrice_.price, initialPrice_.bid, initialPrice_.ask);\\n        if (initialGrant_ > 0) {\\n            grant(bondTokenAddress, initialGrant_);\\n        }\\n        seriesBondsMapping[series_].push(bondTokenAddress);\\n        kindBondsMapping[kind_].push(bondTokenAddress);\\n        emit BondCreated(bondTokenAddress);\\n    }\\n\\n    function getBondKinds() external view returns (string[] memory) {\\n        return bondKinds;\\n    }\\n\\n    function getKindBondLength(string memory kind_) external view returns (uint256) {\\n        return kindBondsMapping[kind_].length;\\n    }\\n\\n    function getBondSeries() external view returns (string[] memory) {\\n        return bondSeries;\\n    }\\n\\n    function getSeriesBondLength(string memory series_) external view returns (uint256) {\\n        return seriesBondsMapping[series_].length;\\n    }\\n\\n    function setBondImplementation(\\n        string calldata kind_,\\n        address impl_,\\n        bool upgradeDeployed_\\n    ) external onlyAdmin {\\n        if (bondImplementations[kind_] == address(0)) {\\n            bondKinds.push(kind_);\\n        }\\n        emit BondImplementationUpdated(kind_, impl_, bondImplementations[kind_]);\\n        bondImplementations[kind_] = impl_;\\n        if (!upgradeDeployed_) {\\n            return;\\n        }\\n        for (uint256 i = 0; i < kindBondsMapping[kind_].length; i++) {\\n            DuetTransparentUpgradeableProxy(payable(kindBondsMapping[kind_][i])).upgradeTo(impl_);\\n        }\\n    }\\n\\n    function setPrice(\\n        address bondToken_,\\n        uint256 price,\\n        uint256 bid,\\n        uint256 ask\\n    ) public onlyAdmin {\\n        emit PriceUpdated(bondToken_, price, bondPrices[bondToken_].price);\\n        bondPrices[bondToken_] = BondPrice({ price: price, bid: bid, ask: ask, lastUpdated: block.timestamp });\\n    }\\n\\n    function getPrice(address bondToken_) public view returns (BondPrice memory) {\\n        BondPrice memory price = bondPrices[bondToken_];\\n        verifyPrice(price);\\n        return price;\\n    }\\n\\n    function priceDecimals() public view returns (uint256) {\\n        return 8;\\n    }\\n\\n    function priceFactor() public view returns (uint256) {\\n        return 10**priceDecimals();\\n    }\\n\\n    function underlyingOut(address bondToken_, uint256 amount_) external onlyAdmin {\\n        IBond(bondToken_).underlyingOut(amount_, msg.sender);\\n    }\\n\\n    function grant(address bondToken_, uint256 amount_) public onlyAdmin {\\n        IBond(bondToken_).grant(amount_);\\n    }\\n\\n    function removeBond(IBond bondToken_) external onlyAdmin {\\n        require(bondToken_.totalSupply() <= 0, \\\"BondFactory: CANT_REMOVE\\\");\\n        string memory kind = bondToken_.kind();\\n        string memory series = bondToken_.series();\\n        address bondTokenAddress = address(bondToken_);\\n\\n        uint256 kindBondLength = kindBondsMapping[kind].length;\\n        for (uint256 i = 0; i < kindBondLength; i++) {\\n            if (kindBondsMapping[kind][i] != bondTokenAddress) {\\n                continue;\\n            }\\n            kindBondsMapping[kind][i] = kindBondsMapping[kind][kindBondLength - 1];\\n            kindBondsMapping[kind].pop();\\n            break;\\n        }\\n\\n        uint256 seriesBondLength = seriesBondsMapping[series].length;\\n        for (uint256 j = 0; j < seriesBondLength; j++) {\\n            if (seriesBondsMapping[series][j] != bondTokenAddress) {\\n                continue;\\n            }\\n            seriesBondsMapping[series][j] = seriesBondsMapping[series][seriesBondLength - 1];\\n            seriesBondsMapping[series].pop();\\n            break;\\n        }\\n\\n        delete isinBondMapping[bondToken_.isin()];\\n\\n        emit BondRemoved(bondTokenAddress);\\n    }\\n\\n    function calculateFee(string memory kind_, uint256 tradingAmount) public view returns (uint256) {\\n        // TODO\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xeeb587f2981a53a9196e5f6718dad71a312bf5d0a2766b83a49dc6e3cd5392f0\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IBond.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IBond is IERC20Upgradeable {\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory series,\\n        address factory_,\\n        IERC20Upgradeable underlyingToken_,\\n        uint256 maturity_,\\n        string memory isin_\\n    ) external;\\n\\n    function kind() external returns (string memory);\\n\\n    function series() external returns (string memory);\\n\\n    function isin() external returns (string memory);\\n\\n    function underlyingOut(uint256 amount_, address to_) external;\\n\\n    function grant(uint256 amount_) external;\\n\\n    function faceValue(uint256 bondAmount_) external view returns (uint256);\\n\\n    function amountToUnderlying(uint256 bondAmount_) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe62bb491085455e9fdfff5f7be1b910a84c827d350eee7ba0b75b517ff440b76\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IBondFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\ninterface IBondFactory {\\n    struct BondPrice {\\n        uint256 price;\\n        uint256 bid;\\n        uint256 ask;\\n        uint256 lastUpdated;\\n    }\\n\\n    function priceFactor() external view returns (uint256);\\n\\n    function getPrice(address bondToken_) external view returns (BondPrice memory price);\\n}\\n\",\"keccak256\":\"0xa790c14699d29d50822772d6f03aef5a2f31e27b161bda85ebc0736369eeba02\",\"license\":\"GPL-3.0\"},\"contracts/libs/Adminable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nabstract contract Adminable {\\n    event AdminUpdated(address indexed user, address indexed newAdmin);\\n\\n    address public admin;\\n\\n    modifier onlyAdmin() virtual {\\n        require(msg.sender == admin, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    function setAdmin(address newAdmin) public virtual onlyAdmin {\\n        _setAdmin(newAdmin);\\n    }\\n\\n    function _setAdmin(address newAdmin) internal {\\n        require(newAdmin != address(0), \\\"Can not set admin to zero address\\\");\\n        admin = newAdmin;\\n\\n        emit AdminUpdated(msg.sender, newAdmin);\\n    }\\n}\\n\",\"keccak256\":\"0xe47c97c0e3edad2d1df3e664376a7bb46e1aaf51b4c4acc73c4a2cfdc747185f\",\"license\":\"GPL-3.0\"},\"contracts/libs/DuetTransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\nimport \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\n\\ncontract DuetTransparentUpgradeableProxy is TransparentUpgradeableProxy {\\n    constructor(\\n        address _logic,\\n        address admin_,\\n        bytes memory _data\\n    ) payable TransparentUpgradeableProxy(_logic, admin_, _data) {}\\n\\n    /**\\n     * @dev override parent behavior to manage bonds fully in Factory\\n     *\\n     */\\n    function _beforeFallback() internal virtual override {}\\n}\\n\",\"keccak256\":\"0xe59f85b113777531c6519e0cd2bedbc35844ca809a153b10a9f17840042978b1\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b62000152565b6200002e60ff62000031565b50565b60008054610100900460ff1615620000ca578160ff1660011480156200006a575062000068306200014360201b620018b51760201c565b155b620000c25760405162461bcd60e51b815260206004820152602e6024820152600080516020620034d483398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b506000919050565b60005460ff808416911610620001295760405162461bcd60e51b815260206004820152602e6024820152600080516020620034d483398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620000b9565b506000805460ff191660ff92909216919091179055600190565b6001600160a01b03163b151590565b61337280620001626000396000f3fe60806040523480156200001157600080fd5b5060043610620001af5760003560e01c8063b67afd8811620000f0578063ee01e5e711620000a3578063f21c5563116200007a578063f21c5563146200047c578063f851a4401462000493578063f920ea5414620004ad578063fd5b909214620004c457600080fd5b8063ee01e5e71462000410578063ef0cef6c146200042e578063efc51bca146200044557600080fd5b8063b67afd88146200033e578063c4d66de81462000397578063dfb2866d14620003ae578063e44c8c1b14620003b8578063e804c9f614620003cf578063e988b66f146200040657600080fd5b80636016338b1162000166578063704b6c02116200013d578063704b6c0214620002e257806373f7e98a14620002f95780637c33d3d8146200031057806380a4f74c146200032757600080fd5b80636016338b146200028c5780636141380214620002a55780636370920e14620002cb57600080fd5b80630450d53e14620001b457806305300b2814620001cd5780630f988f7014620001e357806326eb508514620001fa578063381bac33146200022a57806341976e091462000241575b600080fd5b620001cb620001c536600462001b53565b620004db565b005b60085b6040519081526020015b60405180910390f35b620001cb620001f436600462001b91565b620005bc565b620002116200020b36600462001c91565b62000656565b6040516001600160a01b039091168152602001620001da565b620001d06200023b36600462001cda565b6200069e565b620002586200025236600462001d1b565b620006c8565b604051620001da91908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b6200029662000751565b604051620001da919062001d9f565b620002bc620002b636600462001e05565b62000834565b604051620001da919062001e1f565b620001cb620002dc36600462001b91565b620008e9565b620001cb620002f336600462001d1b565b6200094a565b620001d06200030a36600462001c91565b6200098b565b620002116200032136600462001c91565b62000994565b620002116200033836600462001e5a565b620009c0565b620003766200034f36600462001d1b565b60076020526000908152604090208054600182015460028301546003909301549192909184565b604080519485526020850193909352918301526060820152608001620001da565b620001cb620003a836600462001d1b565b62000db1565b620001d062000e2e565b62000258620003c936600462001f79565b62000e43565b62000211620003e036600462001cda565b80516020818301810180516006825292820191909301209152546001600160a01b031681565b6200029662000efc565b6200041a61271081565b60405161ffff9091168152602001620001da565b620002bc6200043f36600462001e05565b62000fd6565b620002116200045636600462001cda565b80516020818301810180516001825292820191909301209152546001600160a01b031681565b620001d06200048d36600462001cda565b62000fe7565b60005462000211906201000090046001600160a01b031681565b620001cb620004be36600462001fe3565b62000ffb565b620001cb620004d536600462001d1b565b62001255565b6000546201000090046001600160a01b03163314620005175760405162461bcd60e51b81526004016200050e9062002084565b60405180910390fd5b6001600160a01b038416600081815260076020908152604091829020548251878152918201527fb556fac599c3c70efb9ab1fa725ecace6c81cc48d1455f886607def065f3e0c0910160405180910390a260408051608081018252938452602080850193845284820192835242606086019081526001600160a01b03909616600090815260079091522092518355905160018301555160028201559051600390910155565b6000546201000090046001600160a01b03163314620005ef5760405162461bcd60e51b81526004016200050e9062002084565b604051633f78aea360e21b8152600481018290523360248201526001600160a01b0383169063fde2ba8c906044015b600060405180830381600087803b1580156200063957600080fd5b505af11580156200064e573d6000803e3d6000fd5b505050505050565b815160208184018101805160038252928201918501919091209190528054829081106200068257600080fd5b6000918252602090912001546001600160a01b03169150829050565b6000600282604051620006b29190620020aa565b9081526040519081900360200190205492915050565b620006f46040518060800160405280600081526020016000815260200160008152602001600081525090565b6001600160a01b03821660009081526007602090815260409182902082516080810184528154815260018201549281019290925260028101549282019290925260039091015460608201526200074a8162000e43565b5092915050565b60606004805480602002602001604051908101604052809291908181526020016000905b828210156200082b5783829060005260206000200180546200079790620020c8565b80601f0160208091040260200160405190810160405280929190818152602001828054620007c590620020c8565b8015620008165780601f10620007ea5761010080835404028352916020019162000816565b820191906000526020600020905b815481529060010190602001808311620007f857829003601f168201915b50505050508152602001906001019062000775565b50505050905090565b600581815481106200084557600080fd5b9060005260206000200160009150905080546200086290620020c8565b80601f01602080910402602001604051908101604052809291908181526020018280546200089090620020c8565b8015620008e15780601f10620008b557610100808354040283529160200191620008e1565b820191906000526020600020905b815481529060010190602001808311620008c357829003601f168201915b505050505081565b6000546201000090046001600160a01b031633146200091c5760405162461bcd60e51b81526004016200050e9062002084565b60405163160e3f3d60e01b8152600481018290526001600160a01b0383169063160e3f3d906024016200061e565b6000546201000090046001600160a01b031633146200097d5760405162461bcd60e51b81526004016200050e9062002084565b6200098881620018c4565b50565b60005b92915050565b815160208184018101805160028252928201918501919091209190528054829081106200068257600080fd5b600080546201000090046001600160a01b03163314620009f45760405162461bcd60e51b81526004016200050e9062002084565b6000309050600060018c60405162000a0d9190620020aa565b908152604051908190036020019020546001600160a01b031690508062000a885760405162461bcd60e51b815260206004820152602860248201527f426f6e64466163746f72793a20496e76616c696420626f6e6420696d706c656d60448201526732b73a30ba34b7b760c11b60648201526084016200050e565b60006001600160a01b031660068560405162000aa59190620020aa565b908152604051908190036020019020546001600160a01b03161462000b195760405162461bcd60e51b815260206004820152602360248201527f4120626f6e6420666f722074686973206973696e20616c72656164792065786960448201526273747360e81b60648201526084016200050e565b62000b2e620003c9368b90038b018b62001f79565b506060600082848360405162000b449062001a10565b62000b5293929190620020ff565b604051809103906000f08015801562000b6f573d6000803e3d6000fd5b509050809450846001600160a01b031663df776b2d8e8e8c308d8d8d6040518863ffffffff1660e01b815260040162000baf979695949392919062002136565b600060405180830381600087803b15801562000bca57600080fd5b505af115801562000bdf573d6000803e3d6000fd5b505050508460068760405162000bf69190620020aa565b90815260405190819003602001812080546001600160a01b03939093166001600160a01b03199093169290921790915560039062000c36908b90620020aa565b9081526040519081900360200190205462000c925760058054600181018255600091909152895162000c90917f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0019060208c019062001a1e565b505b62000ca9858c3560208e013560408f0135620004db565b891562000cbc5762000cbc858b620008e9565b60038960405162000cce9190620020aa565b9081526020016040518091039020859080600181540180825580915050600190039060005260206000200160009091909190916101000a8154816001600160a01b0302191690836001600160a01b0316021790555060028e60405162000d359190620020aa565b9081526040516020918190038201812080546001810182556000918252908390200180546001600160a01b0319166001600160a01b03891690811790915581527f607dd1c5b5447c9bd5a6d83ea5b7aeeb40f4090e1363840bd8cf024eb33f86e2910160405180910390a1505050509998505050505050505050565b600062000dbf60016200197b565b9050801562000dd8576000805461ff0019166101001790555b62000de382620018c4565b801562000e2a576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b600062000e3e6008600a620022ca565b905090565b62000e6f6040518060800160405280600081526020016000815260200160008152602001600081525090565b81511580159062000e84575060008260200151115b801562000e95575060008260400151115b801562000eaa57508160200151826040015110155b62000ef85760405162461bcd60e51b815260206004820152601a60248201527f426f6e64466163746f72793a20494e56414c49445f505249434500000000000060448201526064016200050e565b5090565b60606005805480602002602001604051908101604052809291908181526020016000905b828210156200082b57838290600052602060002001805462000f4290620020c8565b80601f016020809104026020016040519081016040528092919081815260200182805462000f7090620020c8565b801562000fc15780601f1062000f955761010080835404028352916020019162000fc1565b820191906000526020600020905b81548152906001019060200180831162000fa357829003601f168201915b50505050508152602001906001019062000f20565b600481815481106200084557600080fd5b6000600382604051620006b29190620020aa565b6000546201000090046001600160a01b031633146200102e5760405162461bcd60e51b81526004016200050e9062002084565b60006001600160a01b0316600185856040516200104d929190620022d8565b908152604051908190036020019020546001600160a01b03161415620010ae5760048054600181018255600091909152620010ac907f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01858562001aa9565b505b7fe562b1204ef3c8cf86ddccbb5b4fe6ca6cea7d4c1721e54d179f2b76720be16684848460018888604051620010e6929190620022d8565b9081526040519081900360200181205462001110949392916001600160a01b0390911690620022e8565b60405180910390a181600185856040516200112d929190620022d8565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b03199092169190911790558062001168576200124f565b60005b600285856040516200117f929190620022d8565b908152604051908190036020019020548110156200124d5760028585604051620011ab929190620022d8565b90815260200160405180910390208181548110620011cd57620011cd6200232f565b600091825260209091200154604051631b2ce7f360e11b81526001600160a01b03858116600483015290911690633659cfe690602401600060405180830381600087803b1580156200121e57600080fd5b505af115801562001233573d6000803e3d6000fd5b505050508080620012449062002345565b9150506200116b565b505b50505050565b6000546201000090046001600160a01b03163314620012885760405162461bcd60e51b81526004016200050e9062002084565b6000816001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015620012c457600080fd5b505afa158015620012d9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012ff919062002363565b11156200134f5760405162461bcd60e51b815260206004820152601860248201527f426f6e64466163746f72793a2043414e545f52454d4f5645000000000000000060448201526064016200050e565b6000816001600160a01b03166304baa00b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200138d57600080fd5b505af1158015620013a2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620013cc91908101906200237d565b90506000826001600160a01b031663f12d870f6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200140c57600080fd5b505af115801562001421573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200144b91908101906200237d565b905060008390506000600284604051620014669190620020aa565b90815260405190819003602001902054905060005b818110156200160e57826001600160a01b0316600286604051620014a09190620020aa565b90815260200160405180910390208281548110620014c257620014c26200232f565b6000918252602090912001546001600160a01b031614620014e357620015f9565b600285604051620014f59190620020aa565b90815260405190819003602001902062001511600184620023f4565b815481106200152457620015246200232f565b6000918252602090912001546040516001600160a01b03909116906002906200154f908890620020aa565b908152602001604051809103902082815481106200157157620015716200232f565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600285604051620015b19190620020aa565b9081526020016040518091039020805480620015d157620015d16200240e565b600082815260209020810160001990810180546001600160a01b03191690550190556200160e565b80620016058162002345565b9150506200147b565b506000600384604051620016239190620020aa565b90815260405190819003602001902054905060005b81811015620017cb57836001600160a01b03166003866040516200165d9190620020aa565b908152602001604051809103902082815481106200167f576200167f6200232f565b6000918252602090912001546001600160a01b031614620016a057620017b6565b600385604051620016b29190620020aa565b908152604051908190036020019020620016ce600184620023f4565b81548110620016e157620016e16200232f565b6000918252602090912001546040516001600160a01b03909116906003906200170c908890620020aa565b908152602001604051809103902082815481106200172e576200172e6200232f565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506003856040516200176e9190620020aa565b90815260200160405180910390208054806200178e576200178e6200240e565b600082815260209020810160001990810180546001600160a01b0319169055019055620017cb565b80620017c28162002345565b91505062001638565b506006866001600160a01b03166382d5a60d6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200180a57600080fd5b505af11580156200181f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200184991908101906200237d565b604051620018589190620020aa565b9081526040516020918190038201812080546001600160a01b03191690556001600160a01b03851681527fff88a3b6ae790816ff4f385e4c1acba5a2f5abd3972c4a3c99aa212d8a46f6c3910160405180910390a1505050505050565b6001600160a01b03163b151590565b6001600160a01b038116620019265760405162461bcd60e51b815260206004820152602160248201527f43616e206e6f74207365742061646d696e20746f207a65726f206164647265736044820152607360f81b60648201526084016200050e565b6000805462010000600160b01b031916620100006001600160a01b038416908102919091178255604051909133917f101b8081ff3b56bbf45deb824d86a3b0fd38b7e3dd42421105cf8abe9106db0b9190a350565b60008054610100900460ff1615620019c7578160ff166001148015620019a05750303b155b620019bf5760405162461bcd60e51b81526004016200050e9062002424565b506000919050565b60005460ff808416911610620019f15760405162461bcd60e51b81526004016200050e9062002424565b506000805460ff191660ff92909216919091179055600190565b919050565b610eca806200247383390190565b82805462001a2c90620020c8565b90600052602060002090601f01602090048101928262001a50576000855562001a9b565b82601f1062001a6b57805160ff191683800117855562001a9b565b8280016001018555821562001a9b579182015b8281111562001a9b57825182559160200191906001019062001a7e565b5062000ef892915062001b26565b82805462001ab790620020c8565b90600052602060002090601f01602090048101928262001adb576000855562001a9b565b82601f1062001af65782800160ff1982351617855562001a9b565b8280016001018555821562001a9b579182015b8281111562001a9b57823582559160200191906001019062001b09565b5b8082111562000ef8576000815560010162001b27565b6001600160a01b03811681146200098857600080fd5b6000806000806080858703121562001b6a57600080fd5b843562001b778162001b3d565b966020860135965060408601359560600135945092505050565b6000806040838503121562001ba557600080fd5b823562001bb28162001b3d565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171562001c025762001c0262001bc0565b604052919050565b600067ffffffffffffffff82111562001c275762001c2762001bc0565b50601f01601f191660200190565b600082601f83011262001c4757600080fd5b813562001c5e62001c588262001c0a565b62001bd6565b81815284602083860101111562001c7457600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121562001ca557600080fd5b823567ffffffffffffffff81111562001cbd57600080fd5b62001ccb8582860162001c35565b95602094909401359450505050565b60006020828403121562001ced57600080fd5b813567ffffffffffffffff81111562001d0557600080fd5b62001d138482850162001c35565b949350505050565b60006020828403121562001d2e57600080fd5b813562001d3b8162001b3d565b9392505050565b60005b8381101562001d5f57818101518382015260200162001d45565b838111156200124f5750506000910152565b6000815180845262001d8b81602086016020860162001d42565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101562001df857603f1988860301845262001de585835162001d71565b9450928501929085019060010162001dc6565b5092979650505050505050565b60006020828403121562001e1857600080fd5b5035919050565b60208152600062001d3b602083018462001d71565b60006080828403121562001e4757600080fd5b50919050565b803562001a0b8162001b3d565b60008060008060008060008060006101808a8c03121562001e7a57600080fd5b893567ffffffffffffffff8082111562001e9357600080fd5b62001ea18d838e0162001c35565b9a5060208c013591508082111562001eb857600080fd5b62001ec68d838e0162001c35565b995060408c013591508082111562001edd57600080fd5b62001eeb8d838e0162001c35565b985062001efc8d60608e0162001e34565b975060e08c013596506101008c013591508082111562001f1b57600080fd5b62001f298d838e0162001c35565b955062001f3a6101208d0162001e4d565b94506101408c013593506101608c013591508082111562001f5a57600080fd5b5062001f698c828d0162001c35565b9150509295985092959850929598565b60006080828403121562001f8c57600080fd5b6040516080810181811067ffffffffffffffff8211171562001fb25762001fb262001bc0565b8060405250823581526020830135602082015260408301356040820152606083013560608201528091505092915050565b6000806000806060858703121562001ffa57600080fd5b843567ffffffffffffffff808211156200201357600080fd5b818701915087601f8301126200202857600080fd5b8135818111156200203857600080fd5b8860208285010111156200204b57600080fd5b60209283019650945050850135620020638162001b3d565b9150604085013580151581146200207957600080fd5b939692955090935050565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b60008251620020be81846020870162001d42565b9190910192915050565b600181811c90821680620020dd57607f821691505b6020821081141562001e4757634e487b7160e01b600052602260045260246000fd5b6001600160a01b038481168252831660208201526060604082018190526000906200212d9083018462001d71565b95945050505050565b60e0815260006200214b60e083018a62001d71565b82810360208401526200215f818a62001d71565b9050828103604084015262002175818962001d71565b6001600160a01b0388811660608601528716608085015260a0840186905283810360c08501529050620021a9818562001d71565b9a9950505050505050505050565b634e487b7160e01b600052601160045260246000fd5b600181815b808511156200220e578160001904821115620021f257620021f2620021b7565b808516156200220057918102915b93841c9390800290620021d2565b509250929050565b60008262002227575060016200098e565b8162002236575060006200098e565b81600181146200224f57600281146200225a576200227a565b60019150506200098e565b60ff8411156200226e576200226e620021b7565b50506001821b6200098e565b5060208310610133831016604e8410600b84101617156200229f575081810a6200098e565b620022ab8383620021cd565b8060001904821115620022c257620022c2620021b7565b029392505050565b600062001d3b838362002216565b8183823760009101908152919050565b6060815283606082015283856080830137600060808583018101919091526001600160a01b039384166020830152919092166040830152601f909201601f19160101919050565b634e487b7160e01b600052603260045260246000fd5b60006000198214156200235c576200235c620021b7565b5060010190565b6000602082840312156200237657600080fd5b5051919050565b6000602082840312156200239057600080fd5b815167ffffffffffffffff811115620023a857600080fd5b8201601f81018413620023ba57600080fd5b8051620023cb62001c588262001c0a565b818152856020838501011115620023e157600080fd5b6200212d82602083016020860162001d42565b600082821015620024095762002409620021b7565b500390565b634e487b7160e01b600052603160045260246000fd5b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b60608201526080019056fe608060405260405162000eca38038062000eca83398101604081905262000026916200051f565b82828282816200005860017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd620005ff565b60008051602062000e838339815191521462000078576200007862000625565b6200008682826000620000ed565b50620000b6905060017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6104620005ff565b60008051602062000e6383398151915214620000d657620000d662000625565b620000e1826200012a565b5050505050506200068e565b620000f88362000185565b600082511180620001065750805b156200012557620001238383620001c760201b620002581760201c565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f62000155620001f6565b604080516001600160a01b03928316815291841660208301520160405180910390a162000182816200022f565b50565b6200019081620002e4565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060620001ef838360405180606001604052806027815260200162000ea36027913962000387565b9392505050565b60006200022060008051602062000e6383398151915260001b6200046d60201b620002001760201c565b546001600160a01b0316919050565b6001600160a01b0381166200029a5760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b80620002c360008051602062000e6383398151915260001b6200046d60201b620002001760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b620002fa816200047060201b620002841760201c565b6200035e5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840162000291565b80620002c360008051602062000e8383398151915260001b6200046d60201b620002001760201c565b60606001600160a01b0384163b620003f15760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840162000291565b600080856001600160a01b0316856040516200040e91906200063b565b600060405180830381855af49150503d80600081146200044b576040519150601f19603f3d011682016040523d82523d6000602084013e62000450565b606091505b509092509050620004638282866200047f565b9695505050505050565b90565b6001600160a01b03163b151590565b6060831562000490575081620001ef565b825115620004a15782518084602001fd5b8160405162461bcd60e51b815260040162000291919062000659565b80516001600160a01b0381168114620004d557600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200050d578181015183820152602001620004f3565b83811115620001235750506000910152565b6000806000606084860312156200053557600080fd5b6200054084620004bd565b92506200055060208501620004bd565b60408501519092506001600160401b03808211156200056e57600080fd5b818601915086601f8301126200058357600080fd5b815181811115620005985762000598620004da565b604051601f8201601f19908116603f01168101908382118183101715620005c357620005c3620004da565b81604052828152896020848701011115620005dd57600080fd5b620005f0836020830160208801620004f0565b80955050505050509250925092565b6000828210156200062057634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b600082516200064f818460208701620004f0565b9190910192915050565b60208152600082518060208401526200067a816040850160208701620004f0565b601f01601f19169190910160400192915050565b6107c5806200069e6000396000f3fe60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b61008036600461064f565b610110565b61005b61009336600461066a565b610157565b3480156100a457600080fd5b506100ad6101c8565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e436600461064f565b610203565b3480156100f557600080fd5b506100ad61022d565b61010e610109610293565b61029d565b565b6101186102c1565b6001600160a01b0316336001600160a01b0316141561014f5761014c816040518060200160405280600081525060006102f4565b50565b61014c6100fe565b61015f6102c1565b6001600160a01b0316336001600160a01b031614156101c0576101bb8383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250600192506102f4915050565b505050565b6101bb6100fe565b60006101d26102c1565b6001600160a01b0316336001600160a01b031614156101f8576101f3610293565b905090565b6102006100fe565b90565b61020b6102c1565b6001600160a01b0316336001600160a01b0316141561014f5761014c8161031f565b60006102376102c1565b6001600160a01b0316336001600160a01b031614156101f8576101f36102c1565b606061027d838360405180606001604052806027815260200161076960279139610373565b9392505050565b6001600160a01b03163b151590565b60006101f3610455565b3660008037600080366000845af43d6000803e8080156102bc573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b6102fd8361047d565b60008251118061030a5750805b156101bb576103198383610258565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103486102c1565b604080516001600160a01b03928316815291841660208301520160405180910390a161014c816104bd565b60606001600160a01b0384163b6103e05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084015b60405180910390fd5b600080856001600160a01b0316856040516103fb9190610719565b600060405180830381855af49150503d8060008114610436576040519150601f19603f3d011682016040523d82523d6000602084013e61043b565b606091505b509150915061044b828286610566565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6102e5565b6104868161059f565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105225760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084016103d7565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060831561057557508161027d565b8251156105855782518084602001fd5b8160405162461bcd60e51b81526004016103d79190610735565b6001600160a01b0381163b61060c5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016103d7565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610545565b80356001600160a01b038116811461064a57600080fd5b919050565b60006020828403121561066157600080fd5b61027d82610633565b60008060006040848603121561067f57600080fd5b61068884610633565b9250602084013567ffffffffffffffff808211156106a557600080fd5b818601915086601f8301126106b957600080fd5b8135818111156106c857600080fd5b8760208285010111156106da57600080fd5b6020830194508093505050509250925092565b60005b838110156107085781810151838201526020016106f0565b838111156103195750506000910152565b6000825161072b8184602087016106ed565b9190910192915050565b60208152600082518060208401526107548160408501602087016106ed565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220c9e1fbe41895f8bf7249337aca83abf16214aebbd0a1f744a3df3f57c9c8a4e264736f6c63430008090033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220f32d533117001fbd247139ee3d0bed1ef03feb487c8a1cdcc92f8a7ceb3e165f64736f6c63430008090033496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620001af5760003560e01c8063b67afd8811620000f0578063ee01e5e711620000a3578063f21c5563116200007a578063f21c5563146200047c578063f851a4401462000493578063f920ea5414620004ad578063fd5b909214620004c457600080fd5b8063ee01e5e71462000410578063ef0cef6c146200042e578063efc51bca146200044557600080fd5b8063b67afd88146200033e578063c4d66de81462000397578063dfb2866d14620003ae578063e44c8c1b14620003b8578063e804c9f614620003cf578063e988b66f146200040657600080fd5b80636016338b1162000166578063704b6c02116200013d578063704b6c0214620002e257806373f7e98a14620002f95780637c33d3d8146200031057806380a4f74c146200032757600080fd5b80636016338b146200028c5780636141380214620002a55780636370920e14620002cb57600080fd5b80630450d53e14620001b457806305300b2814620001cd5780630f988f7014620001e357806326eb508514620001fa578063381bac33146200022a57806341976e091462000241575b600080fd5b620001cb620001c536600462001b53565b620004db565b005b60085b6040519081526020015b60405180910390f35b620001cb620001f436600462001b91565b620005bc565b620002116200020b36600462001c91565b62000656565b6040516001600160a01b039091168152602001620001da565b620001d06200023b36600462001cda565b6200069e565b620002586200025236600462001d1b565b620006c8565b604051620001da91908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b6200029662000751565b604051620001da919062001d9f565b620002bc620002b636600462001e05565b62000834565b604051620001da919062001e1f565b620001cb620002dc36600462001b91565b620008e9565b620001cb620002f336600462001d1b565b6200094a565b620001d06200030a36600462001c91565b6200098b565b620002116200032136600462001c91565b62000994565b620002116200033836600462001e5a565b620009c0565b620003766200034f36600462001d1b565b60076020526000908152604090208054600182015460028301546003909301549192909184565b604080519485526020850193909352918301526060820152608001620001da565b620001cb620003a836600462001d1b565b62000db1565b620001d062000e2e565b62000258620003c936600462001f79565b62000e43565b62000211620003e036600462001cda565b80516020818301810180516006825292820191909301209152546001600160a01b031681565b6200029662000efc565b6200041a61271081565b60405161ffff9091168152602001620001da565b620002bc6200043f36600462001e05565b62000fd6565b620002116200045636600462001cda565b80516020818301810180516001825292820191909301209152546001600160a01b031681565b620001d06200048d36600462001cda565b62000fe7565b60005462000211906201000090046001600160a01b031681565b620001cb620004be36600462001fe3565b62000ffb565b620001cb620004d536600462001d1b565b62001255565b6000546201000090046001600160a01b03163314620005175760405162461bcd60e51b81526004016200050e9062002084565b60405180910390fd5b6001600160a01b038416600081815260076020908152604091829020548251878152918201527fb556fac599c3c70efb9ab1fa725ecace6c81cc48d1455f886607def065f3e0c0910160405180910390a260408051608081018252938452602080850193845284820192835242606086019081526001600160a01b03909616600090815260079091522092518355905160018301555160028201559051600390910155565b6000546201000090046001600160a01b03163314620005ef5760405162461bcd60e51b81526004016200050e9062002084565b604051633f78aea360e21b8152600481018290523360248201526001600160a01b0383169063fde2ba8c906044015b600060405180830381600087803b1580156200063957600080fd5b505af11580156200064e573d6000803e3d6000fd5b505050505050565b815160208184018101805160038252928201918501919091209190528054829081106200068257600080fd5b6000918252602090912001546001600160a01b03169150829050565b6000600282604051620006b29190620020aa565b9081526040519081900360200190205492915050565b620006f46040518060800160405280600081526020016000815260200160008152602001600081525090565b6001600160a01b03821660009081526007602090815260409182902082516080810184528154815260018201549281019290925260028101549282019290925260039091015460608201526200074a8162000e43565b5092915050565b60606004805480602002602001604051908101604052809291908181526020016000905b828210156200082b5783829060005260206000200180546200079790620020c8565b80601f0160208091040260200160405190810160405280929190818152602001828054620007c590620020c8565b8015620008165780601f10620007ea5761010080835404028352916020019162000816565b820191906000526020600020905b815481529060010190602001808311620007f857829003601f168201915b50505050508152602001906001019062000775565b50505050905090565b600581815481106200084557600080fd5b9060005260206000200160009150905080546200086290620020c8565b80601f01602080910402602001604051908101604052809291908181526020018280546200089090620020c8565b8015620008e15780601f10620008b557610100808354040283529160200191620008e1565b820191906000526020600020905b815481529060010190602001808311620008c357829003601f168201915b505050505081565b6000546201000090046001600160a01b031633146200091c5760405162461bcd60e51b81526004016200050e9062002084565b60405163160e3f3d60e01b8152600481018290526001600160a01b0383169063160e3f3d906024016200061e565b6000546201000090046001600160a01b031633146200097d5760405162461bcd60e51b81526004016200050e9062002084565b6200098881620018c4565b50565b60005b92915050565b815160208184018101805160028252928201918501919091209190528054829081106200068257600080fd5b600080546201000090046001600160a01b03163314620009f45760405162461bcd60e51b81526004016200050e9062002084565b6000309050600060018c60405162000a0d9190620020aa565b908152604051908190036020019020546001600160a01b031690508062000a885760405162461bcd60e51b815260206004820152602860248201527f426f6e64466163746f72793a20496e76616c696420626f6e6420696d706c656d60448201526732b73a30ba34b7b760c11b60648201526084016200050e565b60006001600160a01b031660068560405162000aa59190620020aa565b908152604051908190036020019020546001600160a01b03161462000b195760405162461bcd60e51b815260206004820152602360248201527f4120626f6e6420666f722074686973206973696e20616c72656164792065786960448201526273747360e81b60648201526084016200050e565b62000b2e620003c9368b90038b018b62001f79565b506060600082848360405162000b449062001a10565b62000b5293929190620020ff565b604051809103906000f08015801562000b6f573d6000803e3d6000fd5b509050809450846001600160a01b031663df776b2d8e8e8c308d8d8d6040518863ffffffff1660e01b815260040162000baf979695949392919062002136565b600060405180830381600087803b15801562000bca57600080fd5b505af115801562000bdf573d6000803e3d6000fd5b505050508460068760405162000bf69190620020aa565b90815260405190819003602001812080546001600160a01b03939093166001600160a01b03199093169290921790915560039062000c36908b90620020aa565b9081526040519081900360200190205462000c925760058054600181018255600091909152895162000c90917f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0019060208c019062001a1e565b505b62000ca9858c3560208e013560408f0135620004db565b891562000cbc5762000cbc858b620008e9565b60038960405162000cce9190620020aa565b9081526020016040518091039020859080600181540180825580915050600190039060005260206000200160009091909190916101000a8154816001600160a01b0302191690836001600160a01b0316021790555060028e60405162000d359190620020aa565b9081526040516020918190038201812080546001810182556000918252908390200180546001600160a01b0319166001600160a01b03891690811790915581527f607dd1c5b5447c9bd5a6d83ea5b7aeeb40f4090e1363840bd8cf024eb33f86e2910160405180910390a1505050509998505050505050505050565b600062000dbf60016200197b565b9050801562000dd8576000805461ff0019166101001790555b62000de382620018c4565b801562000e2a576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b600062000e3e6008600a620022ca565b905090565b62000e6f6040518060800160405280600081526020016000815260200160008152602001600081525090565b81511580159062000e84575060008260200151115b801562000e95575060008260400151115b801562000eaa57508160200151826040015110155b62000ef85760405162461bcd60e51b815260206004820152601a60248201527f426f6e64466163746f72793a20494e56414c49445f505249434500000000000060448201526064016200050e565b5090565b60606005805480602002602001604051908101604052809291908181526020016000905b828210156200082b57838290600052602060002001805462000f4290620020c8565b80601f016020809104026020016040519081016040528092919081815260200182805462000f7090620020c8565b801562000fc15780601f1062000f955761010080835404028352916020019162000fc1565b820191906000526020600020905b81548152906001019060200180831162000fa357829003601f168201915b50505050508152602001906001019062000f20565b600481815481106200084557600080fd5b6000600382604051620006b29190620020aa565b6000546201000090046001600160a01b031633146200102e5760405162461bcd60e51b81526004016200050e9062002084565b60006001600160a01b0316600185856040516200104d929190620022d8565b908152604051908190036020019020546001600160a01b03161415620010ae5760048054600181018255600091909152620010ac907f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01858562001aa9565b505b7fe562b1204ef3c8cf86ddccbb5b4fe6ca6cea7d4c1721e54d179f2b76720be16684848460018888604051620010e6929190620022d8565b9081526040519081900360200181205462001110949392916001600160a01b0390911690620022e8565b60405180910390a181600185856040516200112d929190620022d8565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b03199092169190911790558062001168576200124f565b60005b600285856040516200117f929190620022d8565b908152604051908190036020019020548110156200124d5760028585604051620011ab929190620022d8565b90815260200160405180910390208181548110620011cd57620011cd6200232f565b600091825260209091200154604051631b2ce7f360e11b81526001600160a01b03858116600483015290911690633659cfe690602401600060405180830381600087803b1580156200121e57600080fd5b505af115801562001233573d6000803e3d6000fd5b505050508080620012449062002345565b9150506200116b565b505b50505050565b6000546201000090046001600160a01b03163314620012885760405162461bcd60e51b81526004016200050e9062002084565b6000816001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015620012c457600080fd5b505afa158015620012d9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012ff919062002363565b11156200134f5760405162461bcd60e51b815260206004820152601860248201527f426f6e64466163746f72793a2043414e545f52454d4f5645000000000000000060448201526064016200050e565b6000816001600160a01b03166304baa00b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200138d57600080fd5b505af1158015620013a2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620013cc91908101906200237d565b90506000826001600160a01b031663f12d870f6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200140c57600080fd5b505af115801562001421573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200144b91908101906200237d565b905060008390506000600284604051620014669190620020aa565b90815260405190819003602001902054905060005b818110156200160e57826001600160a01b0316600286604051620014a09190620020aa565b90815260200160405180910390208281548110620014c257620014c26200232f565b6000918252602090912001546001600160a01b031614620014e357620015f9565b600285604051620014f59190620020aa565b90815260405190819003602001902062001511600184620023f4565b815481106200152457620015246200232f565b6000918252602090912001546040516001600160a01b03909116906002906200154f908890620020aa565b908152602001604051809103902082815481106200157157620015716200232f565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600285604051620015b19190620020aa565b9081526020016040518091039020805480620015d157620015d16200240e565b600082815260209020810160001990810180546001600160a01b03191690550190556200160e565b80620016058162002345565b9150506200147b565b506000600384604051620016239190620020aa565b90815260405190819003602001902054905060005b81811015620017cb57836001600160a01b03166003866040516200165d9190620020aa565b908152602001604051809103902082815481106200167f576200167f6200232f565b6000918252602090912001546001600160a01b031614620016a057620017b6565b600385604051620016b29190620020aa565b908152604051908190036020019020620016ce600184620023f4565b81548110620016e157620016e16200232f565b6000918252602090912001546040516001600160a01b03909116906003906200170c908890620020aa565b908152602001604051809103902082815481106200172e576200172e6200232f565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506003856040516200176e9190620020aa565b90815260200160405180910390208054806200178e576200178e6200240e565b600082815260209020810160001990810180546001600160a01b0319169055019055620017cb565b80620017c28162002345565b91505062001638565b506006866001600160a01b03166382d5a60d6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200180a57600080fd5b505af11580156200181f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200184991908101906200237d565b604051620018589190620020aa565b9081526040516020918190038201812080546001600160a01b03191690556001600160a01b03851681527fff88a3b6ae790816ff4f385e4c1acba5a2f5abd3972c4a3c99aa212d8a46f6c3910160405180910390a1505050505050565b6001600160a01b03163b151590565b6001600160a01b038116620019265760405162461bcd60e51b815260206004820152602160248201527f43616e206e6f74207365742061646d696e20746f207a65726f206164647265736044820152607360f81b60648201526084016200050e565b6000805462010000600160b01b031916620100006001600160a01b038416908102919091178255604051909133917f101b8081ff3b56bbf45deb824d86a3b0fd38b7e3dd42421105cf8abe9106db0b9190a350565b60008054610100900460ff1615620019c7578160ff166001148015620019a05750303b155b620019bf5760405162461bcd60e51b81526004016200050e9062002424565b506000919050565b60005460ff808416911610620019f15760405162461bcd60e51b81526004016200050e9062002424565b506000805460ff191660ff92909216919091179055600190565b919050565b610eca806200247383390190565b82805462001a2c90620020c8565b90600052602060002090601f01602090048101928262001a50576000855562001a9b565b82601f1062001a6b57805160ff191683800117855562001a9b565b8280016001018555821562001a9b579182015b8281111562001a9b57825182559160200191906001019062001a7e565b5062000ef892915062001b26565b82805462001ab790620020c8565b90600052602060002090601f01602090048101928262001adb576000855562001a9b565b82601f1062001af65782800160ff1982351617855562001a9b565b8280016001018555821562001a9b579182015b8281111562001a9b57823582559160200191906001019062001b09565b5b8082111562000ef8576000815560010162001b27565b6001600160a01b03811681146200098857600080fd5b6000806000806080858703121562001b6a57600080fd5b843562001b778162001b3d565b966020860135965060408601359560600135945092505050565b6000806040838503121562001ba557600080fd5b823562001bb28162001b3d565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171562001c025762001c0262001bc0565b604052919050565b600067ffffffffffffffff82111562001c275762001c2762001bc0565b50601f01601f191660200190565b600082601f83011262001c4757600080fd5b813562001c5e62001c588262001c0a565b62001bd6565b81815284602083860101111562001c7457600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121562001ca557600080fd5b823567ffffffffffffffff81111562001cbd57600080fd5b62001ccb8582860162001c35565b95602094909401359450505050565b60006020828403121562001ced57600080fd5b813567ffffffffffffffff81111562001d0557600080fd5b62001d138482850162001c35565b949350505050565b60006020828403121562001d2e57600080fd5b813562001d3b8162001b3d565b9392505050565b60005b8381101562001d5f57818101518382015260200162001d45565b838111156200124f5750506000910152565b6000815180845262001d8b81602086016020860162001d42565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101562001df857603f1988860301845262001de585835162001d71565b9450928501929085019060010162001dc6565b5092979650505050505050565b60006020828403121562001e1857600080fd5b5035919050565b60208152600062001d3b602083018462001d71565b60006080828403121562001e4757600080fd5b50919050565b803562001a0b8162001b3d565b60008060008060008060008060006101808a8c03121562001e7a57600080fd5b893567ffffffffffffffff8082111562001e9357600080fd5b62001ea18d838e0162001c35565b9a5060208c013591508082111562001eb857600080fd5b62001ec68d838e0162001c35565b995060408c013591508082111562001edd57600080fd5b62001eeb8d838e0162001c35565b985062001efc8d60608e0162001e34565b975060e08c013596506101008c013591508082111562001f1b57600080fd5b62001f298d838e0162001c35565b955062001f3a6101208d0162001e4d565b94506101408c013593506101608c013591508082111562001f5a57600080fd5b5062001f698c828d0162001c35565b9150509295985092959850929598565b60006080828403121562001f8c57600080fd5b6040516080810181811067ffffffffffffffff8211171562001fb25762001fb262001bc0565b8060405250823581526020830135602082015260408301356040820152606083013560608201528091505092915050565b6000806000806060858703121562001ffa57600080fd5b843567ffffffffffffffff808211156200201357600080fd5b818701915087601f8301126200202857600080fd5b8135818111156200203857600080fd5b8860208285010111156200204b57600080fd5b60209283019650945050850135620020638162001b3d565b9150604085013580151581146200207957600080fd5b939692955090935050565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b60008251620020be81846020870162001d42565b9190910192915050565b600181811c90821680620020dd57607f821691505b6020821081141562001e4757634e487b7160e01b600052602260045260246000fd5b6001600160a01b038481168252831660208201526060604082018190526000906200212d9083018462001d71565b95945050505050565b60e0815260006200214b60e083018a62001d71565b82810360208401526200215f818a62001d71565b9050828103604084015262002175818962001d71565b6001600160a01b0388811660608601528716608085015260a0840186905283810360c08501529050620021a9818562001d71565b9a9950505050505050505050565b634e487b7160e01b600052601160045260246000fd5b600181815b808511156200220e578160001904821115620021f257620021f2620021b7565b808516156200220057918102915b93841c9390800290620021d2565b509250929050565b60008262002227575060016200098e565b8162002236575060006200098e565b81600181146200224f57600281146200225a576200227a565b60019150506200098e565b60ff8411156200226e576200226e620021b7565b50506001821b6200098e565b5060208310610133831016604e8410600b84101617156200229f575081810a6200098e565b620022ab8383620021cd565b8060001904821115620022c257620022c2620021b7565b029392505050565b600062001d3b838362002216565b8183823760009101908152919050565b6060815283606082015283856080830137600060808583018101919091526001600160a01b039384166020830152919092166040830152601f909201601f19160101919050565b634e487b7160e01b600052603260045260246000fd5b60006000198214156200235c576200235c620021b7565b5060010190565b6000602082840312156200237657600080fd5b5051919050565b6000602082840312156200239057600080fd5b815167ffffffffffffffff811115620023a857600080fd5b8201601f81018413620023ba57600080fd5b8051620023cb62001c588262001c0a565b818152856020838501011115620023e157600080fd5b6200212d82602083016020860162001d42565b600082821015620024095762002409620021b7565b500390565b634e487b7160e01b600052603160045260246000fd5b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b60608201526080019056fe608060405260405162000eca38038062000eca83398101604081905262000026916200051f565b82828282816200005860017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd620005ff565b60008051602062000e838339815191521462000078576200007862000625565b6200008682826000620000ed565b50620000b6905060017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6104620005ff565b60008051602062000e6383398151915214620000d657620000d662000625565b620000e1826200012a565b5050505050506200068e565b620000f88362000185565b600082511180620001065750805b156200012557620001238383620001c760201b620002581760201c565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f62000155620001f6565b604080516001600160a01b03928316815291841660208301520160405180910390a162000182816200022f565b50565b6200019081620002e4565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060620001ef838360405180606001604052806027815260200162000ea36027913962000387565b9392505050565b60006200022060008051602062000e6383398151915260001b6200046d60201b620002001760201c565b546001600160a01b0316919050565b6001600160a01b0381166200029a5760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b80620002c360008051602062000e6383398151915260001b6200046d60201b620002001760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b620002fa816200047060201b620002841760201c565b6200035e5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840162000291565b80620002c360008051602062000e8383398151915260001b6200046d60201b620002001760201c565b60606001600160a01b0384163b620003f15760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840162000291565b600080856001600160a01b0316856040516200040e91906200063b565b600060405180830381855af49150503d80600081146200044b576040519150601f19603f3d011682016040523d82523d6000602084013e62000450565b606091505b509092509050620004638282866200047f565b9695505050505050565b90565b6001600160a01b03163b151590565b6060831562000490575081620001ef565b825115620004a15782518084602001fd5b8160405162461bcd60e51b815260040162000291919062000659565b80516001600160a01b0381168114620004d557600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200050d578181015183820152602001620004f3565b83811115620001235750506000910152565b6000806000606084860312156200053557600080fd5b6200054084620004bd565b92506200055060208501620004bd565b60408501519092506001600160401b03808211156200056e57600080fd5b818601915086601f8301126200058357600080fd5b815181811115620005985762000598620004da565b604051601f8201601f19908116603f01168101908382118183101715620005c357620005c3620004da565b81604052828152896020848701011115620005dd57600080fd5b620005f0836020830160208801620004f0565b80955050505050509250925092565b6000828210156200062057634e487b7160e01b600052601160045260246000fd5b500390565b634e487b7160e01b600052600160045260246000fd5b600082516200064f818460208701620004f0565b9190910192915050565b60208152600082518060208401526200067a816040850160208701620004f0565b601f01601f19169190910160400192915050565b6107c5806200069e6000396000f3fe60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b61008036600461064f565b610110565b61005b61009336600461066a565b610157565b3480156100a457600080fd5b506100ad6101c8565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e436600461064f565b610203565b3480156100f557600080fd5b506100ad61022d565b61010e610109610293565b61029d565b565b6101186102c1565b6001600160a01b0316336001600160a01b0316141561014f5761014c816040518060200160405280600081525060006102f4565b50565b61014c6100fe565b61015f6102c1565b6001600160a01b0316336001600160a01b031614156101c0576101bb8383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250600192506102f4915050565b505050565b6101bb6100fe565b60006101d26102c1565b6001600160a01b0316336001600160a01b031614156101f8576101f3610293565b905090565b6102006100fe565b90565b61020b6102c1565b6001600160a01b0316336001600160a01b0316141561014f5761014c8161031f565b60006102376102c1565b6001600160a01b0316336001600160a01b031614156101f8576101f36102c1565b606061027d838360405180606001604052806027815260200161076960279139610373565b9392505050565b6001600160a01b03163b151590565b60006101f3610455565b3660008037600080366000845af43d6000803e8080156102bc573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b6102fd8361047d565b60008251118061030a5750805b156101bb576103198383610258565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103486102c1565b604080516001600160a01b03928316815291841660208301520160405180910390a161014c816104bd565b60606001600160a01b0384163b6103e05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084015b60405180910390fd5b600080856001600160a01b0316856040516103fb9190610719565b600060405180830381855af49150503d8060008114610436576040519150601f19603f3d011682016040523d82523d6000602084013e61043b565b606091505b509150915061044b828286610566565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6102e5565b6104868161059f565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166105225760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084016103d7565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060831561057557508161027d565b8251156105855782518084602001fd5b8160405162461bcd60e51b81526004016103d79190610735565b6001600160a01b0381163b61060c5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016103d7565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610545565b80356001600160a01b038116811461064a57600080fd5b919050565b60006020828403121561066157600080fd5b61027d82610633565b60008060006040848603121561067f57600080fd5b61068884610633565b9250602084013567ffffffffffffffff808211156106a557600080fd5b818601915086601f8301126106b957600080fd5b8135818111156106c857600080fd5b8760208285010111156106da57600080fd5b6020830194508093505050509250925092565b60005b838110156107085781810151838201526020016106f0565b838111156103195750506000910152565b6000825161072b8184602087016106ed565b9190910192915050565b60208152600082518060208401526107548160408501602087016106ed565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220c9e1fbe41895f8bf7249337aca83abf16214aebbd0a1f744a3df3f57c9c8a4e264736f6c63430008090033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220f32d533117001fbd247139ee3d0bed1ef03feb487c8a1cdcc92f8a7ceb3e165f64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      }
    },
    "stateVariables": {
      "PERCENTAGE_FACTOR": {
        "details": "factor for percentage that described in integer. It makes 10000 means 100%, and 20 means 0.2%;      Calculation formula: x * percentage / PERCENTAGE_FACTOR"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/BondFactory.sol:BondFactory",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/BondFactory.sol:BondFactory",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3907,
        "contract": "contracts/BondFactory.sol:BondFactory",
        "label": "admin",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2518,
        "contract": "contracts/BondFactory.sol:BondFactory",
        "label": "bondImplementations",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 2523,
        "contract": "contracts/BondFactory.sol:BondFactory",
        "label": "kindBondsMapping",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 2528,
        "contract": "contracts/BondFactory.sol:BondFactory",
        "label": "seriesBondsMapping",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 2531,
        "contract": "contracts/BondFactory.sol:BondFactory",
        "label": "bondKinds",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 2534,
        "contract": "contracts/BondFactory.sol:BondFactory",
        "label": "bondSeries",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 2538,
        "contract": "contracts/BondFactory.sol:BondFactory",
        "label": "isinBondMapping",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 2543,
        "contract": "contracts/BondFactory.sol:BondFactory",
        "label": "bondPrices",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(BondPrice)3883_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(BondPrice)3883_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IBondFactory.BondPrice)",
        "numberOfBytes": "32",
        "value": "t_struct(BondPrice)3883_storage"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(BondPrice)3883_storage": {
        "encoding": "inplace",
        "label": "struct IBondFactory.BondPrice",
        "members": [
          {
            "astId": 3876,
            "contract": "contracts/BondFactory.sol:BondFactory",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3878,
            "contract": "contracts/BondFactory.sol:BondFactory",
            "label": "bid",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3880,
            "contract": "contracts/BondFactory.sol:BondFactory",
            "label": "ask",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3882,
            "contract": "contracts/BondFactory.sol:BondFactory",
            "label": "lastUpdated",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}