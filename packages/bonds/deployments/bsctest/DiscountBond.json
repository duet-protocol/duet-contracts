{
  "address": "0x8b90EF85FeAC96E7A2453FE14D5Cb331C2baD374",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inventoryAmount",
          "type": "uint256"
        }
      ],
      "name": "BondGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bondAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "underlyingAmount",
          "type": "uint256"
        }
      ],
      "name": "BondMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BondRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bondAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "underlyingAmount",
          "type": "uint256"
        }
      ],
      "name": "BondSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MIN_TRADING_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bondAmount_",
          "type": "uint256"
        }
      ],
      "name": "amountToUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bondAmount_",
          "type": "uint256"
        }
      ],
      "name": "faceValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IBondFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "grant",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "series_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "factory_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "underlyingToken_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturity_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inventoryAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kind",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maturity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "bondAmount_",
          "type": "uint256"
        }
      ],
      "name": "mintByBondAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "underlyingAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "underlyingAmount_",
          "type": "uint256"
        }
      ],
      "name": "mintByUnderlyingAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bondAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bondAmount_",
          "type": "uint256"
        }
      ],
      "name": "previewMintByBondAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "underlyingAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "underlyingAmount_",
          "type": "uint256"
        }
      ],
      "name": "previewMintByUnderlyingAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bondAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bondAmount_",
          "type": "uint256"
        }
      ],
      "name": "previewSellByBondAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "underlyingAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bondAmount_",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "bondAmount_",
          "type": "uint256"
        }
      ],
      "name": "redeemFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bondAmount_",
          "type": "uint256"
        }
      ],
      "name": "sellByBondAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "underlyingAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "series",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        }
      ],
      "name": "underlyingOut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingToken",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3783086ac5181a6b97b0de64f21f9da3e9f65c6f6025e2941d978e9dd3dbb066",
  "receipt": {
    "to": null,
    "from": "0xe7a2b8C8feD53713F69227e6c3d2384E80CF88a6",
    "contractAddress": "0x8b90EF85FeAC96E7A2453FE14D5Cb331C2baD374",
    "transactionIndex": 4,
    "gasUsed": "1975262",
    "logsBloom": "0x
    "blockHash": "0x83b0df5d6be26e9dd7a11d8cbe313911617e7c68c8148119812e154ebabc1ce5",
    "transactionHash": "0x3783086ac5181a6b97b0de64f21f9da3e9f65c6f6025e2941d978e9dd3dbb066",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 24229784,
        "transactionHash": "0x3783086ac5181a6b97b0de64f21f9da3e9f65c6f6025e2941d978e9dd3dbb066",
        "address": "0x8b90EF85FeAC96E7A2453FE14D5Cb331C2baD374",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 6,
        "blockHash": "0x83b0df5d6be26e9dd7a11d8cbe313911617e7c68c8148119812e154ebabc1ce5"
      }
    ],
    "blockNumber": 24229784,
    "cumulativeGasUsed": "6199426",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 8,
  "solcInputHash": "86b5d7bad88174195e885f97b1fed94c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inventoryAmount\",\"type\":\"uint256\"}],\"name\":\"BondGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"}],\"name\":\"BondMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BondRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"}],\"name\":\"BondSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_TRADING_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bondAmount_\",\"type\":\"uint256\"}],\"name\":\"amountToUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bondAmount_\",\"type\":\"uint256\"}],\"name\":\"faceValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IBondFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"grant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"series_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"factory_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"underlyingToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inventoryAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kind\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maturity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bondAmount_\",\"type\":\"uint256\"}],\"name\":\"mintByBondAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingAmount_\",\"type\":\"uint256\"}],\"name\":\"mintByUnderlyingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bondAmount_\",\"type\":\"uint256\"}],\"name\":\"previewMintByBondAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingAmount_\",\"type\":\"uint256\"}],\"name\":\"previewMintByUnderlyingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bondAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bondAmount_\",\"type\":\"uint256\"}],\"name\":\"previewSellByBondAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bondAmount_\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bondAmount_\",\"type\":\"uint256\"}],\"name\":\"redeemFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bondAmount_\",\"type\":\"uint256\"}],\"name\":\"sellByBondAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"series\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"underlyingOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"grant(uint256)\":{\"details\":\"grant specific amount of bond for user mint.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DiscountBond.sol\":\"DiscountBond\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb71b875e7f1b8ad082eb6ff83bca4bfa7d050476cc98fd39295826b654edfb46\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/DiscountBond.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./interfaces/IBond.sol\\\";\\nimport \\\"./interfaces/IBondFactory.sol\\\";\\n\\ncontract DiscountBond is ERC20Upgradeable, ReentrancyGuardUpgradeable, IBond {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    string public constant kind = \\\"Discount\\\";\\n    uint256 public constant MIN_TRADING_AMOUNT = 1e12;\\n\\n    IBondFactory public factory;\\n    IERC20Upgradeable public underlyingToken;\\n    uint256 public maturity;\\n    string public series;\\n    uint256 public inventoryAmount;\\n    uint256 public redeemedAmount;\\n\\n    event BondMinted(address indexed account, uint256 bondAmount, uint256 underlyingAmount);\\n    event BondSold(address indexed account, uint256 bondAmount, uint256 underlyingAmount);\\n    event BondRedeemed(address indexed account, uint256 amount);\\n    event BondGranted(uint256 amount, uint256 inventoryAmount);\\n\\n    constructor() initializer {}\\n\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory series_,\\n        address factory_,\\n        IERC20Upgradeable underlyingToken_,\\n        uint256 maturity_\\n    ) external initializer {\\n        __ERC20_init(name_, symbol_);\\n        __ReentrancyGuard_init();\\n        require(\\n            maturity_ > block.timestamp && maturity_ <= block.timestamp + (20 * 365 days),\\n            \\\"DiscountBond: INVALID_MATURITY\\\"\\n        );\\n        series = series_;\\n        underlyingToken = underlyingToken_;\\n        factory = IBondFactory(factory_);\\n        maturity = maturity_;\\n    }\\n\\n    modifier beforeMaturity() {\\n        require(block.timestamp < maturity, \\\"DiscountBond: MUST_BEFORE_MATURITY\\\");\\n        _;\\n    }\\n\\n    modifier afterMaturity() {\\n        require(block.timestamp >= maturity, \\\"DiscountBond: MUST_AFTER_MATURITY\\\");\\n        _;\\n    }\\n\\n    modifier tradingGuard() {\\n        require(getPrice() > 0, \\\"INVALID_PRICE\\\");\\n        _;\\n    }\\n\\n    modifier onlyFactory() {\\n        require(msg.sender == address(factory), \\\"DiscountBond: UNAUTHORIZED\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev grant specific amount of bond for user mint.\\n     */\\n    function grant(uint256 amount_) external onlyFactory {\\n        inventoryAmount += amount_;\\n        emit BondGranted(amount_, inventoryAmount);\\n    }\\n\\n    function getPrice() public view returns (uint256) {\\n        return factory.getPrice(address(this));\\n    }\\n\\n    function mintByUnderlyingAmount(address account_, uint256 underlyingAmount_)\\n        external\\n        beforeMaturity\\n        returns (uint256 bondAmount)\\n    {\\n        underlyingToken.safeTransferFrom(msg.sender, address(this), underlyingAmount_);\\n        bondAmount = previewMintByUnderlyingAmount(underlyingAmount_);\\n        inventoryAmount -= bondAmount;\\n        _mint(account_, bondAmount);\\n        emit BondMinted(account_, bondAmount, underlyingAmount_);\\n    }\\n\\n    function previewMintByUnderlyingAmount(uint256 underlyingAmount_)\\n        public\\n        view\\n        beforeMaturity\\n        tradingGuard\\n        returns (uint256 bondAmount)\\n    {\\n        require(underlyingAmount_ >= MIN_TRADING_AMOUNT, \\\"DiscountBond: AMOUNT_TOO_LOW\\\");\\n        bondAmount = (underlyingAmount_ * factory.priceFactor()) / getPrice();\\n        require(inventoryAmount >= bondAmount, \\\"DiscountBond: INSUFFICIENT_LIQUIDITY\\\");\\n    }\\n\\n    function mintByBondAmount(address account_, uint256 bondAmount_)\\n        external\\n        beforeMaturity\\n        returns (uint256 underlyingAmount)\\n    {\\n        underlyingAmount = previewMintByBondAmount(bondAmount_);\\n        underlyingToken.safeTransferFrom(msg.sender, address(this), underlyingAmount);\\n        inventoryAmount -= bondAmount_;\\n        _mint(account_, bondAmount_);\\n        emit BondMinted(account_, bondAmount_, underlyingAmount);\\n    }\\n\\n    function previewMintByBondAmount(uint256 bondAmount_)\\n        public\\n        view\\n        beforeMaturity\\n        tradingGuard\\n        returns (uint256 underlyingAmount)\\n    {\\n        require(bondAmount_ >= MIN_TRADING_AMOUNT, \\\"DiscountBond: AMOUNT_TOO_LOW\\\");\\n        require(inventoryAmount >= bondAmount_, \\\"DiscountBond: INSUFFICIENT_LIQUIDITY\\\");\\n        underlyingAmount = (bondAmount_ * getPrice()) / factory.priceFactor();\\n    }\\n\\n    function sellByBondAmount(uint256 bondAmount_)\\n        public\\n        beforeMaturity\\n        tradingGuard\\n        returns (uint256 underlyingAmount)\\n    {\\n        underlyingAmount = previewSellByBondAmount(bondAmount_);\\n        _burn(msg.sender, bondAmount_);\\n        inventoryAmount += bondAmount_;\\n        underlyingToken.safeTransfer(msg.sender, underlyingAmount);\\n        emit BondSold(msg.sender, bondAmount_, underlyingAmount);\\n    }\\n\\n    function previewSellByBondAmount(uint256 bondAmount_)\\n        public\\n        view\\n        beforeMaturity\\n        tradingGuard\\n        returns (uint256 underlyingAmount)\\n    {\\n        require(bondAmount_ >= MIN_TRADING_AMOUNT, \\\"DiscountBond: AMOUNT_TOO_LOW\\\");\\n        require(balanceOf(msg.sender) >= bondAmount_, \\\"DiscountBond: EXCEEDS_BALANCE\\\");\\n        underlyingAmount = (bondAmount_ * getPrice()) / factory.priceFactor();\\n        require(underlyingToken.balanceOf(address(this)) >= underlyingAmount, \\\"DiscountBond: INSUFFICIENT_LIQUIDITY\\\");\\n    }\\n\\n    function redeem(uint256 bondAmount_) public {\\n        redeemFor(msg.sender, bondAmount_);\\n    }\\n\\n    function faceValue(uint256 bondAmount_) public view returns (uint256) {\\n        return bondAmount_;\\n    }\\n\\n    function amountToUnderlying(uint256 bondAmount_) public view returns (uint256) {\\n        if (block.timestamp >= maturity) {\\n            return faceValue(bondAmount_);\\n        }\\n        return (bondAmount_ * getPrice()) / factory.priceFactor();\\n    }\\n\\n    function redeemFor(address account_, uint256 bondAmount_) public afterMaturity {\\n        require(balanceOf(msg.sender) >= bondAmount_, \\\"DiscountBond: EXCEEDS_BALANCE\\\");\\n        _burn(msg.sender, bondAmount_);\\n        redeemedAmount += bondAmount_;\\n        underlyingToken.safeTransfer(account_, bondAmount_);\\n        emit BondRedeemed(account_, bondAmount_);\\n    }\\n\\n    /**\\n     * @notice\\n     */\\n    function underlyingOut(uint256 amount_, address to_) external onlyFactory {\\n        underlyingToken.safeTransfer(to_, amount_);\\n    }\\n\\n    function emergencyWithdraw(\\n        IERC20Upgradeable token_,\\n        address to_,\\n        uint256 amount_\\n    ) external onlyFactory {\\n        token_.safeTransfer(to_, amount_);\\n    }\\n}\\n\",\"keccak256\":\"0x41f040faf64c8bc5073db251b6bb0a5a50ecf3183232dc5277dcc641f6759771\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IBond.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IBond is IERC20Upgradeable {\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory series,\\n        address factory_,\\n        IERC20Upgradeable underlyingToken_,\\n        uint256 maturity_\\n    ) external;\\n\\n    function kind() external returns (string memory);\\n\\n    function series() external returns (string memory);\\n\\n    function underlyingOut(uint256 amount_, address to_) external;\\n\\n    function grant(uint256 amount_) external;\\n\\n    function faceValue(uint256 bondAmount_) external view returns (uint256);\\n\\n    function amountToUnderlying(uint256 bondAmount_) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2e6653c949a3ae433a1e7ed6c7fd37b3886cd073be18d9c5e9402358cf36e8ff\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IBondFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.9;\\n\\ninterface IBondFactory {\\n    function priceFactor() external view returns (uint256);\\n\\n    function getPrice(address bondToken_) external view returns (uint256 price);\\n}\\n\",\"keccak256\":\"0x43ebf47455cddb545064cb42203f7973492dbf15c1e7204d5c0fefbd8aea8e23\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600062000020600162000087565b9050801562000039576000805461ff0019166101001790555b801562000080576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50620001a8565b60008054610100900460ff161562000120578160ff166001148015620000c05750620000be306200019960201b620011c11760201c565b155b620001185760405162461bcd60e51b815260206004820152602e6024820152600080516020620023e083398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b506000919050565b60005460ff8084169116106200017f5760405162461bcd60e51b815260206004820152602e6024820152600080516020620023e083398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016200010f565b506000805460ff191660ff92909216919091179055600190565b6001600160a01b03163b151590565b61222880620001b86000396000f3fe608060405234801561001057600080fd5b50600436106102065760003560e01c806395d89b411161011a578063c45a0155116100ad578063e63ea4081161007c578063e63ea40814610455578063f12d870f14610468578063fc48e64214610470578063fde2ba8c14610483578063fe8dbd8e1461049657600080fd5b8063c45a015514610409578063da7b038b1461041c578063db006a751461042f578063dd62ed3e1461044257600080fd5b8063a457c2d7116100e9578063a457c2d7146103c7578063a7731842146103da578063a9059cbb146103e3578063c0da2885146103f657600080fd5b806395d89b411461039157806396e35cea1461039957806398d5fdca146103ac57806398ecd688146103b457600080fd5b806323b872dd1161019d578063395093511161016c578063395093511461031c5780633ce896b81461032f5780634cb4bdc91461034257806370a08231146103555780637a82a1981461037e57600080fd5b806323b872dd146102c65780632491510a146102d95780632495a599146102e2578063313ce5671461030d57600080fd5b80630d6c2618116101d95780630d6c261814610294578063160e3f3d146102a057806318160ddd146102b5578063204f83f9146102bd57600080fd5b806304baa00b1461020b57806306d914061461024857806306fdde0314610269578063095ea7b314610271575b600080fd5b61023260405180604001604052806008815260200167111a5cd8dbdd5b9d60c21b81525081565b60405161023f9190611c82565b60405180910390f35b61025b610256366004611cca565b6104a7565b60405190815260200161023f565b610232610563565b61028461027f366004611cca565b6105f5565b604051901515815260200161023f565b61025b64e8d4a5100081565b6102b36102ae366004611cf6565b61060d565b005b60355461025b565b61025b60995481565b6102846102d4366004611d0f565b61068e565b61025b609b5481565b6098546102f5906001600160a01b031681565b6040516001600160a01b03909116815260200161023f565b6040516012815260200161023f565b61028461032a366004611cca565b6106b4565b61025b61033d366004611cca565b6106d6565b61025b610350366004611cf6565b610780565b61025b610363366004611d50565b6001600160a01b031660009081526033602052604090205490565b6102b361038c366004611cca565b610993565b610232610acd565b6102b36103a7366004611e10565b610adc565b61025b610c12565b61025b6103c2366004611cf6565b610c93565b6102846103d5366004611cca565b610d60565b61025b609c5481565b6102846103f1366004611cca565b610de6565b61025b610404366004611cf6565b610df4565b6097546102f5906001600160a01b031681565b61025b61042a366004611cf6565b610f2d565b6102b361043d366004611cf6565b610f3e565b61025b610450366004611ec8565b610f4b565b6102b3610463366004611d0f565b610f76565b610232610fb9565b61025b61047e366004611cf6565b611047565b6102b3610491366004611f01565b61117c565b61025b6104a4366004611cf6565b90565b600060995442106104d35760405162461bcd60e51b81526004016104ca90611f26565b60405180910390fd5b6098546104eb906001600160a01b03163330856111d0565b6104f482611047565b905080609b60008282546105089190611f7e565b9091555061051890508382611241565b60408051828152602081018490526001600160a01b038516917f877d49304b52a404e1f7fe620a933370ab38d3d49a4daf24591f8750848310ca91015b60405180910390a292915050565b60606036805461057290611f95565b80601f016020809104026020016040519081016040528092919081815260200182805461059e90611f95565b80156105eb5780601f106105c0576101008083540402835291602001916105eb565b820191906000526020600020905b8154815290600101906020018083116105ce57829003601f168201915b5050505050905090565b600033610603818585611320565b5060019392505050565b6097546001600160a01b031633146106375760405162461bcd60e51b81526004016104ca90611fd0565b80609b60008282546106499190612007565b9091555050609b546040805183815260208101929092527f632d02909e5759576f4a85e32a3793720a7ca5319576cc41010c4217ddbad0e9910160405180910390a150565b60003361069c858285611444565b6106a78585856114b8565b60019150505b9392505050565b6000336106038185856106c78383610f4b565b6106d19190612007565b611320565b600060995442106106f95760405162461bcd60e51b81526004016104ca90611f26565b61070282610df4565b60985490915061071d906001600160a01b03163330846111d0565b81609b600082825461072f9190611f7e565b9091555061073f90508383611241565b60408051838152602081018390526001600160a01b038516917f877d49304b52a404e1f7fe620a933370ab38d3d49a4daf24591f8750848310ca9101610555565b600060995442106107a35760405162461bcd60e51b81526004016104ca90611f26565b60006107ad610c12565b116107ca5760405162461bcd60e51b81526004016104ca9061201f565b64e8d4a510008210156107ef5760405162461bcd60e51b81526004016104ca90612046565b3360009081526033602052604090205482111561084e5760405162461bcd60e51b815260206004820152601d60248201527f446973636f756e74426f6e643a20455843454544535f42414c414e434500000060448201526064016104ca565b609760009054906101000a90046001600160a01b03166001600160a01b031663dfb2866d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561089c57600080fd5b505afa1580156108b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d4919061207d565b6108dc610c12565b6108e69084612096565b6108f091906120b5565b6098546040516370a0823160e01b815230600482015291925082916001600160a01b03909116906370a082319060240160206040518083038186803b15801561093857600080fd5b505afa15801561094c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610970919061207d565b101561098e5760405162461bcd60e51b81526004016104ca906120d7565b919050565b6099544210156109ef5760405162461bcd60e51b815260206004820152602160248201527f446973636f756e74426f6e643a204d5553545f41465445525f4d4154555249546044820152605960f81b60648201526084016104ca565b33600090815260336020526040902054811115610a4e5760405162461bcd60e51b815260206004820152601d60248201527f446973636f756e74426f6e643a20455843454544535f42414c414e434500000060448201526064016104ca565b610a583382611686565b80609c6000828254610a6a9190612007565b9091555050609854610a86906001600160a01b031683836117d4565b816001600160a01b03167fbbb59c50b3cd05fe4982a9bc1fbab45bd421ac707f4fba6b080522e3a9cc03b382604051610ac191815260200190565b60405180910390a25050565b60606037805461057290611f95565b6000610ae86001611804565b90508015610b00576000805461ff0019166101001790555b610b0a878761188c565b610b126118bd565b4282118015610b2e5750610b2a426325980600612007565b8211155b610b7a5760405162461bcd60e51b815260206004820152601e60248201527f446973636f756e74426f6e643a20494e56414c49445f4d41545552495459000060448201526064016104ca565b8451610b8d90609a906020880190611bbd565b50609880546001600160a01b038086166001600160a01b031992831617909255609780549287169290911691909117905560998290558015610c09576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b6097546040516341976e0960e01b81523060048201526000916001600160a01b0316906341976e099060240160206040518083038186803b158015610c5657600080fd5b505afa158015610c6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8e919061207d565b905090565b60006099544210610cb65760405162461bcd60e51b81526004016104ca90611f26565b6000610cc0610c12565b11610cdd5760405162461bcd60e51b81526004016104ca9061201f565b610ce682610780565b9050610cf23383611686565b81609b6000828254610d049190612007565b9091555050609854610d20906001600160a01b031633836117d4565b604080518381526020810183905233917f3dbe987d8c318f20a1d550dd52db9a8a20cc25aab2f175c7ccafb306ee48d210910160405180910390a2919050565b60003381610d6e8286610f4b565b905083811015610dce5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016104ca565b610ddb8286868403611320565b506001949350505050565b6000336106038185856114b8565b60006099544210610e175760405162461bcd60e51b81526004016104ca90611f26565b6000610e21610c12565b11610e3e5760405162461bcd60e51b81526004016104ca9061201f565b64e8d4a51000821015610e635760405162461bcd60e51b81526004016104ca90612046565b81609b541015610e855760405162461bcd60e51b81526004016104ca906120d7565b609760009054906101000a90046001600160a01b03166001600160a01b031663dfb2866d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ed357600080fd5b505afa158015610ee7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0b919061207d565b610f13610c12565b610f1d9084612096565b610f2791906120b5565b92915050565b60006099544210610e855781610f27565b610f483382610993565b50565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6097546001600160a01b03163314610fa05760405162461bcd60e51b81526004016104ca90611fd0565b610fb46001600160a01b03841683836117d4565b505050565b609a8054610fc690611f95565b80601f0160208091040260200160405190810160405280929190818152602001828054610ff290611f95565b801561103f5780601f106110145761010080835404028352916020019161103f565b820191906000526020600020905b81548152906001019060200180831161102257829003601f168201915b505050505081565b6000609954421061106a5760405162461bcd60e51b81526004016104ca90611f26565b6000611074610c12565b116110915760405162461bcd60e51b81526004016104ca9061201f565b64e8d4a510008210156110b65760405162461bcd60e51b81526004016104ca90612046565b6110be610c12565b609760009054906101000a90046001600160a01b03166001600160a01b031663dfb2866d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561110c57600080fd5b505afa158015611120573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611144919061207d565b61114e9084612096565b61115891906120b5565b905080609b54101561098e5760405162461bcd60e51b81526004016104ca906120d7565b6097546001600160a01b031633146111a65760405162461bcd60e51b81526004016104ca90611fd0565b6098546111bd906001600160a01b031682846117d4565b5050565b6001600160a01b03163b151590565b6040516001600160a01b038085166024830152831660448201526064810182905261123b9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526118ee565b50505050565b6001600160a01b0382166112975760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016104ca565b80603560008282546112a99190612007565b90915550506001600160a01b038216600090815260336020526040812080548392906112d6908490612007565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0383166113825760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104ca565b6001600160a01b0382166113e35760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104ca565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006114508484610f4b565b9050600019811461123b57818110156114ab5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016104ca565b61123b8484848403611320565b6001600160a01b03831661151c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104ca565b6001600160a01b03821661157e5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104ca565b6001600160a01b038316600090815260336020526040902054818110156115f65760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016104ca565b6001600160a01b0380851660009081526033602052604080822085850390559185168152908120805484929061162d908490612007565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161167991815260200190565b60405180910390a361123b565b6001600160a01b0382166116e65760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016104ca565b6001600160a01b0382166000908152603360205260409020548181101561175a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016104ca565b6001600160a01b0383166000908152603360205260408120838303905560358054849290611789908490611f7e565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6040516001600160a01b038316602482015260448101829052610fb490849063a9059cbb60e01b90606401611204565b60008054610100900460ff161561184b578160ff1660011480156118275750303b155b6118435760405162461bcd60e51b81526004016104ca9061211b565b506000919050565b60005460ff8084169116106118725760405162461bcd60e51b81526004016104ca9061211b565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff166118b35760405162461bcd60e51b81526004016104ca90612169565b6111bd82826119c0565b600054610100900460ff166118e45760405162461bcd60e51b81526004016104ca90612169565b6118ec611a0e565b565b6000611943826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611a3c9092919063ffffffff16565b805190915015610fb4578080602001905181019061196191906121b4565b610fb45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104ca565b600054610100900460ff166119e75760405162461bcd60e51b81526004016104ca90612169565b81516119fa906036906020850190611bbd565b508051610fb4906037906020840190611bbd565b600054610100900460ff16611a355760405162461bcd60e51b81526004016104ca90612169565b6001606555565b6060611a4b8484600085611a53565b949350505050565b606082471015611ab45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104ca565b6001600160a01b0385163b611b0b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104ca565b600080866001600160a01b03168587604051611b2791906121d6565b60006040518083038185875af1925050503d8060008114611b64576040519150601f19603f3d011682016040523d82523d6000602084013e611b69565b606091505b5091509150611b79828286611b84565b979650505050505050565b60608315611b935750816106ad565b825115611ba35782518084602001fd5b8160405162461bcd60e51b81526004016104ca9190611c82565b828054611bc990611f95565b90600052602060002090601f016020900481019282611beb5760008555611c31565b82601f10611c0457805160ff1916838001178555611c31565b82800160010185558215611c31579182015b82811115611c31578251825591602001919060010190611c16565b50611c3d929150611c41565b5090565b5b80821115611c3d5760008155600101611c42565b60005b83811015611c71578181015183820152602001611c59565b8381111561123b5750506000910152565b6020815260008251806020840152611ca1816040850160208701611c56565b601f01601f19169190910160400192915050565b6001600160a01b0381168114610f4857600080fd5b60008060408385031215611cdd57600080fd5b8235611ce881611cb5565b946020939093013593505050565b600060208284031215611d0857600080fd5b5035919050565b600080600060608486031215611d2457600080fd5b8335611d2f81611cb5565b92506020840135611d3f81611cb5565b929592945050506040919091013590565b600060208284031215611d6257600080fd5b81356106ad81611cb5565b634e487b7160e01b600052604160045260246000fd5b600082601f830112611d9457600080fd5b813567ffffffffffffffff80821115611daf57611daf611d6d565b604051601f8301601f19908116603f01168101908282118183101715611dd757611dd7611d6d565b81604052838152866020858801011115611df057600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060c08789031215611e2957600080fd5b863567ffffffffffffffff80821115611e4157600080fd5b611e4d8a838b01611d83565b97506020890135915080821115611e6357600080fd5b611e6f8a838b01611d83565b96506040890135915080821115611e8557600080fd5b50611e9289828a01611d83565b9450506060870135611ea381611cb5565b92506080870135611eb381611cb5565b8092505060a087013590509295509295509295565b60008060408385031215611edb57600080fd5b8235611ee681611cb5565b91506020830135611ef681611cb5565b809150509250929050565b60008060408385031215611f1457600080fd5b823591506020830135611ef681611cb5565b60208082526022908201527f446973636f756e74426f6e643a204d5553545f4245464f52455f4d4154555249604082015261545960f01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600082821015611f9057611f90611f68565b500390565b600181811c90821680611fa957607f821691505b60208210811415611fca57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601a908201527f446973636f756e74426f6e643a20554e415554484f52495a4544000000000000604082015260600190565b6000821982111561201a5761201a611f68565b500190565b6020808252600d908201526c494e56414c49445f505249434560981b604082015260600190565b6020808252601c908201527f446973636f756e74426f6e643a20414d4f554e545f544f4f5f4c4f5700000000604082015260600190565b60006020828403121561208f57600080fd5b5051919050565b60008160001904831182151516156120b0576120b0611f68565b500290565b6000826120d257634e487b7160e01b600052601260045260246000fd5b500490565b60208082526024908201527f446973636f756e74426f6e643a20494e53554646494349454e545f4c495155496040820152634449545960e01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000602082840312156121c657600080fd5b815180151581146106ad57600080fd5b600082516121e8818460208701611c56565b919091019291505056fea26469706673582212200271260375176e7f9e8b338e9e48b6eaa2d859cdce139e2cd0ea55af762055b064736f6c63430008090033496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102065760003560e01c806395d89b411161011a578063c45a0155116100ad578063e63ea4081161007c578063e63ea40814610455578063f12d870f14610468578063fc48e64214610470578063fde2ba8c14610483578063fe8dbd8e1461049657600080fd5b8063c45a015514610409578063da7b038b1461041c578063db006a751461042f578063dd62ed3e1461044257600080fd5b8063a457c2d7116100e9578063a457c2d7146103c7578063a7731842146103da578063a9059cbb146103e3578063c0da2885146103f657600080fd5b806395d89b411461039157806396e35cea1461039957806398d5fdca146103ac57806398ecd688146103b457600080fd5b806323b872dd1161019d578063395093511161016c578063395093511461031c5780633ce896b81461032f5780634cb4bdc91461034257806370a08231146103555780637a82a1981461037e57600080fd5b806323b872dd146102c65780632491510a146102d95780632495a599146102e2578063313ce5671461030d57600080fd5b80630d6c2618116101d95780630d6c261814610294578063160e3f3d146102a057806318160ddd146102b5578063204f83f9146102bd57600080fd5b806304baa00b1461020b57806306d914061461024857806306fdde0314610269578063095ea7b314610271575b600080fd5b61023260405180604001604052806008815260200167111a5cd8dbdd5b9d60c21b81525081565b60405161023f9190611c82565b60405180910390f35b61025b610256366004611cca565b6104a7565b60405190815260200161023f565b610232610563565b61028461027f366004611cca565b6105f5565b604051901515815260200161023f565b61025b64e8d4a5100081565b6102b36102ae366004611cf6565b61060d565b005b60355461025b565b61025b60995481565b6102846102d4366004611d0f565b61068e565b61025b609b5481565b6098546102f5906001600160a01b031681565b6040516001600160a01b03909116815260200161023f565b6040516012815260200161023f565b61028461032a366004611cca565b6106b4565b61025b61033d366004611cca565b6106d6565b61025b610350366004611cf6565b610780565b61025b610363366004611d50565b6001600160a01b031660009081526033602052604090205490565b6102b361038c366004611cca565b610993565b610232610acd565b6102b36103a7366004611e10565b610adc565b61025b610c12565b61025b6103c2366004611cf6565b610c93565b6102846103d5366004611cca565b610d60565b61025b609c5481565b6102846103f1366004611cca565b610de6565b61025b610404366004611cf6565b610df4565b6097546102f5906001600160a01b031681565b61025b61042a366004611cf6565b610f2d565b6102b361043d366004611cf6565b610f3e565b61025b610450366004611ec8565b610f4b565b6102b3610463366004611d0f565b610f76565b610232610fb9565b61025b61047e366004611cf6565b611047565b6102b3610491366004611f01565b61117c565b61025b6104a4366004611cf6565b90565b600060995442106104d35760405162461bcd60e51b81526004016104ca90611f26565b60405180910390fd5b6098546104eb906001600160a01b03163330856111d0565b6104f482611047565b905080609b60008282546105089190611f7e565b9091555061051890508382611241565b60408051828152602081018490526001600160a01b038516917f877d49304b52a404e1f7fe620a933370ab38d3d49a4daf24591f8750848310ca91015b60405180910390a292915050565b60606036805461057290611f95565b80601f016020809104026020016040519081016040528092919081815260200182805461059e90611f95565b80156105eb5780601f106105c0576101008083540402835291602001916105eb565b820191906000526020600020905b8154815290600101906020018083116105ce57829003601f168201915b5050505050905090565b600033610603818585611320565b5060019392505050565b6097546001600160a01b031633146106375760405162461bcd60e51b81526004016104ca90611fd0565b80609b60008282546106499190612007565b9091555050609b546040805183815260208101929092527f632d02909e5759576f4a85e32a3793720a7ca5319576cc41010c4217ddbad0e9910160405180910390a150565b60003361069c858285611444565b6106a78585856114b8565b60019150505b9392505050565b6000336106038185856106c78383610f4b565b6106d19190612007565b611320565b600060995442106106f95760405162461bcd60e51b81526004016104ca90611f26565b61070282610df4565b60985490915061071d906001600160a01b03163330846111d0565b81609b600082825461072f9190611f7e565b9091555061073f90508383611241565b60408051838152602081018390526001600160a01b038516917f877d49304b52a404e1f7fe620a933370ab38d3d49a4daf24591f8750848310ca9101610555565b600060995442106107a35760405162461bcd60e51b81526004016104ca90611f26565b60006107ad610c12565b116107ca5760405162461bcd60e51b81526004016104ca9061201f565b64e8d4a510008210156107ef5760405162461bcd60e51b81526004016104ca90612046565b3360009081526033602052604090205482111561084e5760405162461bcd60e51b815260206004820152601d60248201527f446973636f756e74426f6e643a20455843454544535f42414c414e434500000060448201526064016104ca565b609760009054906101000a90046001600160a01b03166001600160a01b031663dfb2866d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561089c57600080fd5b505afa1580156108b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d4919061207d565b6108dc610c12565b6108e69084612096565b6108f091906120b5565b6098546040516370a0823160e01b815230600482015291925082916001600160a01b03909116906370a082319060240160206040518083038186803b15801561093857600080fd5b505afa15801561094c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610970919061207d565b101561098e5760405162461bcd60e51b81526004016104ca906120d7565b919050565b6099544210156109ef5760405162461bcd60e51b815260206004820152602160248201527f446973636f756e74426f6e643a204d5553545f41465445525f4d4154555249546044820152605960f81b60648201526084016104ca565b33600090815260336020526040902054811115610a4e5760405162461bcd60e51b815260206004820152601d60248201527f446973636f756e74426f6e643a20455843454544535f42414c414e434500000060448201526064016104ca565b610a583382611686565b80609c6000828254610a6a9190612007565b9091555050609854610a86906001600160a01b031683836117d4565b816001600160a01b03167fbbb59c50b3cd05fe4982a9bc1fbab45bd421ac707f4fba6b080522e3a9cc03b382604051610ac191815260200190565b60405180910390a25050565b60606037805461057290611f95565b6000610ae86001611804565b90508015610b00576000805461ff0019166101001790555b610b0a878761188c565b610b126118bd565b4282118015610b2e5750610b2a426325980600612007565b8211155b610b7a5760405162461bcd60e51b815260206004820152601e60248201527f446973636f756e74426f6e643a20494e56414c49445f4d41545552495459000060448201526064016104ca565b8451610b8d90609a906020880190611bbd565b50609880546001600160a01b038086166001600160a01b031992831617909255609780549287169290911691909117905560998290558015610c09576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b6097546040516341976e0960e01b81523060048201526000916001600160a01b0316906341976e099060240160206040518083038186803b158015610c5657600080fd5b505afa158015610c6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8e919061207d565b905090565b60006099544210610cb65760405162461bcd60e51b81526004016104ca90611f26565b6000610cc0610c12565b11610cdd5760405162461bcd60e51b81526004016104ca9061201f565b610ce682610780565b9050610cf23383611686565b81609b6000828254610d049190612007565b9091555050609854610d20906001600160a01b031633836117d4565b604080518381526020810183905233917f3dbe987d8c318f20a1d550dd52db9a8a20cc25aab2f175c7ccafb306ee48d210910160405180910390a2919050565b60003381610d6e8286610f4b565b905083811015610dce5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016104ca565b610ddb8286868403611320565b506001949350505050565b6000336106038185856114b8565b60006099544210610e175760405162461bcd60e51b81526004016104ca90611f26565b6000610e21610c12565b11610e3e5760405162461bcd60e51b81526004016104ca9061201f565b64e8d4a51000821015610e635760405162461bcd60e51b81526004016104ca90612046565b81609b541015610e855760405162461bcd60e51b81526004016104ca906120d7565b609760009054906101000a90046001600160a01b03166001600160a01b031663dfb2866d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ed357600080fd5b505afa158015610ee7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0b919061207d565b610f13610c12565b610f1d9084612096565b610f2791906120b5565b92915050565b60006099544210610e855781610f27565b610f483382610993565b50565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6097546001600160a01b03163314610fa05760405162461bcd60e51b81526004016104ca90611fd0565b610fb46001600160a01b03841683836117d4565b505050565b609a8054610fc690611f95565b80601f0160208091040260200160405190810160405280929190818152602001828054610ff290611f95565b801561103f5780601f106110145761010080835404028352916020019161103f565b820191906000526020600020905b81548152906001019060200180831161102257829003601f168201915b505050505081565b6000609954421061106a5760405162461bcd60e51b81526004016104ca90611f26565b6000611074610c12565b116110915760405162461bcd60e51b81526004016104ca9061201f565b64e8d4a510008210156110b65760405162461bcd60e51b81526004016104ca90612046565b6110be610c12565b609760009054906101000a90046001600160a01b03166001600160a01b031663dfb2866d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561110c57600080fd5b505afa158015611120573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611144919061207d565b61114e9084612096565b61115891906120b5565b905080609b54101561098e5760405162461bcd60e51b81526004016104ca906120d7565b6097546001600160a01b031633146111a65760405162461bcd60e51b81526004016104ca90611fd0565b6098546111bd906001600160a01b031682846117d4565b5050565b6001600160a01b03163b151590565b6040516001600160a01b038085166024830152831660448201526064810182905261123b9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526118ee565b50505050565b6001600160a01b0382166112975760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016104ca565b80603560008282546112a99190612007565b90915550506001600160a01b038216600090815260336020526040812080548392906112d6908490612007565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b0383166113825760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104ca565b6001600160a01b0382166113e35760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104ca565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006114508484610f4b565b9050600019811461123b57818110156114ab5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016104ca565b61123b8484848403611320565b6001600160a01b03831661151c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104ca565b6001600160a01b03821661157e5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104ca565b6001600160a01b038316600090815260336020526040902054818110156115f65760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016104ca565b6001600160a01b0380851660009081526033602052604080822085850390559185168152908120805484929061162d908490612007565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161167991815260200190565b60405180910390a361123b565b6001600160a01b0382166116e65760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016104ca565b6001600160a01b0382166000908152603360205260409020548181101561175a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016104ca565b6001600160a01b0383166000908152603360205260408120838303905560358054849290611789908490611f7e565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6040516001600160a01b038316602482015260448101829052610fb490849063a9059cbb60e01b90606401611204565b60008054610100900460ff161561184b578160ff1660011480156118275750303b155b6118435760405162461bcd60e51b81526004016104ca9061211b565b506000919050565b60005460ff8084169116106118725760405162461bcd60e51b81526004016104ca9061211b565b506000805460ff191660ff92909216919091179055600190565b600054610100900460ff166118b35760405162461bcd60e51b81526004016104ca90612169565b6111bd82826119c0565b600054610100900460ff166118e45760405162461bcd60e51b81526004016104ca90612169565b6118ec611a0e565b565b6000611943826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611a3c9092919063ffffffff16565b805190915015610fb4578080602001905181019061196191906121b4565b610fb45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104ca565b600054610100900460ff166119e75760405162461bcd60e51b81526004016104ca90612169565b81516119fa906036906020850190611bbd565b508051610fb4906037906020840190611bbd565b600054610100900460ff16611a355760405162461bcd60e51b81526004016104ca90612169565b6001606555565b6060611a4b8484600085611a53565b949350505050565b606082471015611ab45760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104ca565b6001600160a01b0385163b611b0b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104ca565b600080866001600160a01b03168587604051611b2791906121d6565b60006040518083038185875af1925050503d8060008114611b64576040519150601f19603f3d011682016040523d82523d6000602084013e611b69565b606091505b5091509150611b79828286611b84565b979650505050505050565b60608315611b935750816106ad565b825115611ba35782518084602001fd5b8160405162461bcd60e51b81526004016104ca9190611c82565b828054611bc990611f95565b90600052602060002090601f016020900481019282611beb5760008555611c31565b82601f10611c0457805160ff1916838001178555611c31565b82800160010185558215611c31579182015b82811115611c31578251825591602001919060010190611c16565b50611c3d929150611c41565b5090565b5b80821115611c3d5760008155600101611c42565b60005b83811015611c71578181015183820152602001611c59565b8381111561123b5750506000910152565b6020815260008251806020840152611ca1816040850160208701611c56565b601f01601f19169190910160400192915050565b6001600160a01b0381168114610f4857600080fd5b60008060408385031215611cdd57600080fd5b8235611ce881611cb5565b946020939093013593505050565b600060208284031215611d0857600080fd5b5035919050565b600080600060608486031215611d2457600080fd5b8335611d2f81611cb5565b92506020840135611d3f81611cb5565b929592945050506040919091013590565b600060208284031215611d6257600080fd5b81356106ad81611cb5565b634e487b7160e01b600052604160045260246000fd5b600082601f830112611d9457600080fd5b813567ffffffffffffffff80821115611daf57611daf611d6d565b604051601f8301601f19908116603f01168101908282118183101715611dd757611dd7611d6d565b81604052838152866020858801011115611df057600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060c08789031215611e2957600080fd5b863567ffffffffffffffff80821115611e4157600080fd5b611e4d8a838b01611d83565b97506020890135915080821115611e6357600080fd5b611e6f8a838b01611d83565b96506040890135915080821115611e8557600080fd5b50611e9289828a01611d83565b9450506060870135611ea381611cb5565b92506080870135611eb381611cb5565b8092505060a087013590509295509295509295565b60008060408385031215611edb57600080fd5b8235611ee681611cb5565b91506020830135611ef681611cb5565b809150509250929050565b60008060408385031215611f1457600080fd5b823591506020830135611ef681611cb5565b60208082526022908201527f446973636f756e74426f6e643a204d5553545f4245464f52455f4d4154555249604082015261545960f01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600082821015611f9057611f90611f68565b500390565b600181811c90821680611fa957607f821691505b60208210811415611fca57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601a908201527f446973636f756e74426f6e643a20554e415554484f52495a4544000000000000604082015260600190565b6000821982111561201a5761201a611f68565b500190565b6020808252600d908201526c494e56414c49445f505249434560981b604082015260600190565b6020808252601c908201527f446973636f756e74426f6e643a20414d4f554e545f544f4f5f4c4f5700000000604082015260600190565b60006020828403121561208f57600080fd5b5051919050565b60008160001904831182151516156120b0576120b0611f68565b500290565b6000826120d257634e487b7160e01b600052601260045260246000fd5b500490565b60208082526024908201527f446973636f756e74426f6e643a20494e53554646494349454e545f4c495155496040820152634449545960e01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000602082840312156121c657600080fd5b815180151581146106ad57600080fd5b600082516121e8818460208701611c56565b919091019291505056fea26469706673582212200271260375176e7f9e8b338e9e48b6eaa2d859cdce139e2cd0ea55af762055b064736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "grant(uint256)": {
        "details": "grant specific amount of bond for user mint."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/DiscountBond.sol:DiscountBond",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/DiscountBond.sol:DiscountBond",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1533,
        "contract": "contracts/DiscountBond.sol:DiscountBond",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 330,
        "contract": "contracts/DiscountBond.sol:DiscountBond",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 336,
        "contract": "contracts/DiscountBond.sol:DiscountBond",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 338,
        "contract": "contracts/DiscountBond.sol:DiscountBond",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 340,
        "contract": "contracts/DiscountBond.sol:DiscountBond",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 342,
        "contract": "contracts/DiscountBond.sol:DiscountBond",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 921,
        "contract": "contracts/DiscountBond.sol:DiscountBond",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 266,
        "contract": "contracts/DiscountBond.sol:DiscountBond",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 310,
        "contract": "contracts/DiscountBond.sol:DiscountBond",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3097,
        "contract": "contracts/DiscountBond.sol:DiscountBond",
        "label": "factory",
        "offset": 0,
        "slot": "151",
        "type": "t_contract(IBondFactory)3756"
      },
      {
        "astId": 3100,
        "contract": "contracts/DiscountBond.sol:DiscountBond",
        "label": "underlyingToken",
        "offset": 0,
        "slot": "152",
        "type": "t_contract(IERC20Upgradeable)1000"
      },
      {
        "astId": 3102,
        "contract": "contracts/DiscountBond.sol:DiscountBond",
        "label": "maturity",
        "offset": 0,
        "slot": "153",
        "type": "t_uint256"
      },
      {
        "astId": 3104,
        "contract": "contracts/DiscountBond.sol:DiscountBond",
        "label": "series",
        "offset": 0,
        "slot": "154",
        "type": "t_string_storage"
      },
      {
        "astId": 3106,
        "contract": "contracts/DiscountBond.sol:DiscountBond",
        "label": "inventoryAmount",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 3108,
        "contract": "contracts/DiscountBond.sol:DiscountBond",
        "label": "redeemedAmount",
        "offset": 0,
        "slot": "156",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBondFactory)3756": {
        "encoding": "inplace",
        "label": "contract IBondFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Upgradeable)1000": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}