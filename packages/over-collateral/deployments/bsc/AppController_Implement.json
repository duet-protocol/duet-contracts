{
  "address": "0xFFBFEE7113DEce5E65EF6af2FD1e13482d2f6f84",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "AllowedLiquidatorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralRate",
          "type": "uint256"
        }
      ],
      "name": "CollateralRateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "dToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldVault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newVault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vtype",
          "type": "uint256"
        }
      ],
      "name": "DTokenVaultChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum IController.ValidVault",
          "name": "state",
          "type": "uint8"
        }
      ],
      "name": "InitValidVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidateRate",
          "type": "uint256"
        }
      ],
      "name": "LiquidateRateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "open",
          "type": "bool"
        }
      ],
      "name": "OpenLiquidateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReleaseAdvance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "liqudator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReleaseByBorrowLiquidation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "liqudator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReleaseByDepositLiquidation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReleaseWithDebit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReleaseWithPayback",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum IController.ValidVault",
          "name": "state",
          "type": "uint8"
        }
      ],
      "name": "SetValidVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "enabled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableDeposit",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableWithdraw",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableBorrow",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableRepay",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableLiquidate",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct AppController.VaultState",
          "name": "state",
          "type": "tuple"
        }
      ],
      "name": "SetVaultStates",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldDToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newDToken",
          "type": "address"
        }
      ],
      "name": "UnderlyingDTokenChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldStrage",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newDToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stype",
          "type": "uint256"
        }
      ],
      "name": "UnderlyingStrategyChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "discount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "premium",
          "type": "uint256"
        }
      ],
      "name": "ValueConfChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedLiquidator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "beforeBorrow",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "beforeDeposit",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_repayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "beforeRepay",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "beforeWithdraw",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "dyTokenVaults",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "dyTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        }
      ],
      "name": "emergencyWithdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isDepositVault",
          "type": "bool"
        }
      ],
      "name": "exitVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        }
      ],
      "name": "getValueConf",
      "outputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "dr",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "pr",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        }
      ],
      "name": "getValueConfs",
      "outputs": [
        {
          "internalType": "address",
          "name": "oracle0",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "dr0",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "pr0",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "oracle1",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "dr1",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "pr1",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "globalVaultState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "enableDeposit",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "enableWithdraw",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "enableBorrow",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "enableRepay",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "enableLiquidate",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_vault",
          "type": "address[]"
        },
        {
          "internalType": "enum IController.ValidVault[]",
          "name": "_state",
          "type": "uint8[]"
        }
      ],
      "name": "initValidVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "isNeedLiquidate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOpenLiquidate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isDepositVault",
          "type": "bool"
        }
      ],
      "name": "joinVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidateRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "maxBorrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user_",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "borrowVaults_",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "liquidator_",
          "type": "address"
        }
      ],
      "name": "releaseVaultFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "users_",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "borrowVaults_",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "liquidator_",
          "type": "address"
        }
      ],
      "name": "releaseVaults",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_collateralRate",
          "type": "uint256"
        }
      ],
      "name": "setCollateralRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dToken",
          "type": "address"
        }
      ],
      "name": "setDYToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "enabled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableDeposit",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableWithdraw",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableBorrow",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableRepay",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableLiquidate",
              "type": "bool"
            }
          ],
          "internalType": "struct AppController.VaultState",
          "name": "_state",
          "type": "tuple"
        }
      ],
      "name": "setGlobalVaultState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_liquidateRate",
          "type": "uint256"
        }
      ],
      "name": "setLiquidateRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_open",
          "type": "bool"
        }
      ],
      "name": "setOpenLiquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_discount",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_premium",
          "type": "uint16"
        }
      ],
      "name": "setOracles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stype",
          "type": "uint256"
        }
      ],
      "name": "setStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_vault",
          "type": "address[]"
        },
        {
          "internalType": "enum IController.ValidVault[]",
          "name": "_state",
          "type": "uint8[]"
        }
      ],
      "name": "setValidVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dyToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "vtype",
          "type": "uint256"
        }
      ],
      "name": "setVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "enabled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableDeposit",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableWithdraw",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableBorrow",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableRepay",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableLiquidate",
              "type": "bool"
            }
          ],
          "internalType": "struct AppController.VaultState",
          "name": "_state",
          "type": "tuple"
        }
      ],
      "name": "setVaultStates",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "strategies",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "updateAllowedLiquidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isDepositVault",
          "type": "bool"
        }
      ],
      "name": "userJoinedVaultCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isDepositVault",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "userJoinedVaultInfoAt",
      "outputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "enabled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableDeposit",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableWithdraw",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableBorrow",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableRepay",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "enableLiquidate",
              "type": "bool"
            }
          ],
          "internalType": "struct AppController.VaultState",
          "name": "state",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "contract IVault",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "_amount",
          "type": "int256"
        },
        {
          "internalType": "bool",
          "name": "_dp",
          "type": "bool"
        }
      ],
      "name": "userPendingValues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pendingDepositValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingBrorowValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "contract IVault",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "_amount",
          "type": "int256"
        },
        {
          "internalType": "bool",
          "name": "_dp",
          "type": "bool"
        }
      ],
      "name": "userTotalPendingValues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pendingDepositValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingBrorowValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_dp",
          "type": "bool"
        }
      ],
      "name": "userTotalValues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalDepositValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalBorrowValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_dp",
          "type": "bool"
        }
      ],
      "name": "userValues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalDepositValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalBorrowValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "validVaults",
      "outputs": [
        {
          "internalType": "enum IController.ValidVault",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "validVaultsOfUser",
      "outputs": [
        {
          "internalType": "enum IController.ValidVault",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vaultStates",
      "outputs": [
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "enableDeposit",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "enableWithdraw",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "enableBorrow",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "enableRepay",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "enableLiquidate",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe7665422dd7d9098e044a08c91ea120a38dc1bcc90c8d4bb4ea347faed07bc31",
  "receipt": {
    "to": null,
    "from": "0x1b0466be45419bC3aF1A1d73Eac3C80D7b88b2dC",
    "contractAddress": "0xFFBFEE7113DEce5E65EF6af2FD1e13482d2f6f84",
    "transactionIndex": 0,
    "gasUsed": "4228759",
    "logsBloom": "0x
    "blockHash": "0xeb0f06c4bd6e69681a08dbbba3aa5bfa4ea7b9f46e19bc498202dc294bdcb09c",
    "transactionHash": "0xe7665422dd7d9098e044a08c91ea120a38dc1bcc90c8d4bb4ea347faed07bc31",
    "logs": [],
    "blockNumber": 20104552,
    "cumulativeGasUsed": "4228759",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "5914f88f5afd653fffc52737d2239b96",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"AllowedLiquidatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralRate\",\"type\":\"uint256\"}],\"name\":\"CollateralRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vtype\",\"type\":\"uint256\"}],\"name\":\"DTokenVaultChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IController.ValidVault\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"InitValidVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidateRate\",\"type\":\"uint256\"}],\"name\":\"LiquidateRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"}],\"name\":\"OpenLiquidateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReleaseAdvance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liqudator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReleaseByBorrowLiquidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liqudator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReleaseByDepositLiquidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReleaseWithDebit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReleaseWithPayback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IController.ValidVault\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"SetValidVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableDeposit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableWithdraw\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableBorrow\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableRepay\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableLiquidate\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct AppController.VaultState\",\"name\":\"state\",\"type\":\"tuple\"}],\"name\":\"SetVaultStates\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldDToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDToken\",\"type\":\"address\"}],\"name\":\"UnderlyingDTokenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldStrage\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stype\",\"type\":\"uint256\"}],\"name\":\"UnderlyingStrategyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"discount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"}],\"name\":\"ValueConfChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedLiquidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"beforeBorrow\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"beforeDeposit\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_repayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"beforeRepay\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"beforeWithdraw\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dyTokenVaults\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dyTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"}],\"name\":\"emergencyWithdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDepositVault\",\"type\":\"bool\"}],\"name\":\"exitVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"}],\"name\":\"getValueConf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"dr\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"pr\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"getValueConfs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oracle0\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"dr0\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"pr0\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"oracle1\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"dr1\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"pr1\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalVaultState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableDeposit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableWithdraw\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableBorrow\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableRepay\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableLiquidate\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_vault\",\"type\":\"address[]\"},{\"internalType\":\"enum IController.ValidVault[]\",\"name\":\"_state\",\"type\":\"uint8[]\"}],\"name\":\"initValidVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"isNeedLiquidate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOpenLiquidate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDepositVault\",\"type\":\"bool\"}],\"name\":\"joinVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidateRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"maxBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"borrowVaults_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"liquidator_\",\"type\":\"address\"}],\"name\":\"releaseVaultFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users_\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"borrowVaults_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"liquidator_\",\"type\":\"address\"}],\"name\":\"releaseVaults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collateralRate\",\"type\":\"uint256\"}],\"name\":\"setCollateralRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dToken\",\"type\":\"address\"}],\"name\":\"setDYToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableDeposit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableWithdraw\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableBorrow\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableRepay\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableLiquidate\",\"type\":\"bool\"}],\"internalType\":\"struct AppController.VaultState\",\"name\":\"_state\",\"type\":\"tuple\"}],\"name\":\"setGlobalVaultState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidateRate\",\"type\":\"uint256\"}],\"name\":\"setLiquidateRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_open\",\"type\":\"bool\"}],\"name\":\"setOpenLiquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_discount\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_premium\",\"type\":\"uint16\"}],\"name\":\"setOracles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stype\",\"type\":\"uint256\"}],\"name\":\"setStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_vault\",\"type\":\"address[]\"},{\"internalType\":\"enum IController.ValidVault[]\",\"name\":\"_state\",\"type\":\"uint8[]\"}],\"name\":\"setValidVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vtype\",\"type\":\"uint256\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableDeposit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableWithdraw\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableBorrow\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableRepay\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableLiquidate\",\"type\":\"bool\"}],\"internalType\":\"struct AppController.VaultState\",\"name\":\"_state\",\"type\":\"tuple\"}],\"name\":\"setVaultStates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"updateAllowedLiquidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDepositVault\",\"type\":\"bool\"}],\"name\":\"userJoinedVaultCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDepositVault\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"userJoinedVaultInfoAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableDeposit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableWithdraw\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableBorrow\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableRepay\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableLiquidate\",\"type\":\"bool\"}],\"internalType\":\"struct AppController.VaultState\",\"name\":\"state\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"contract IVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"_amount\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"_dp\",\"type\":\"bool\"}],\"name\":\"userPendingValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingDepositValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingBrorowValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"contract IVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"_amount\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"_dp\",\"type\":\"bool\"}],\"name\":\"userTotalPendingValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingDepositValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingBrorowValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_dp\",\"type\":\"bool\"}],\"name\":\"userTotalValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalDepositValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_dp\",\"type\":\"bool\"}],\"name\":\"userValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalDepositValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"validVaults\",\"outputs\":[{\"internalType\":\"enum IController.ValidVault\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"validVaultsOfUser\",\"outputs\":[{\"internalType\":\"enum IController.ValidVault\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultStates\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableDeposit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableWithdraw\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableBorrow\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableRepay\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enableLiquidate\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"beforeBorrow(address,address,uint256)\":{\"params\":{\"_amount\":\"loan amount\",\"_user\":\"borrower\",\"_vault\":\"address of loan market\"}},\"beforeDeposit(address,address,uint256)\":{\"params\":{\"_vault\":\"address of deposit market param  _amount deposit amount\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"userPendingValues(address,address,int256,bool)\":{\"params\":{\"_amount\":\"the amount of deposits or withdrawals\",\"_dp\":\"discount or premium\",\"_user\":\"depositors\",\"_vault\":\"target vault\"}},\"userTotalPendingValues(address,address,int256,bool)\":{\"params\":{\"_amount\":\"the amount of deposits or withdrawals\",\"_dp\":\"discount or premium\",\"_user\":\"depositors\",\"_vault\":\"target vault\"}},\"userTotalValues(address,bool)\":{\"params\":{\"_dp\":\"discount or premium\",\"_user\":\"depositors\"}},\"userValues(address,bool)\":{\"params\":{\"_dp\":\"discount or premium\",\"_user\":\"depositors\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"beforeBorrow(address,address,uint256)\":{\"notice\":\"Risk control check before borrowing\"},\"beforeDeposit(address,address,uint256)\":{\"notice\":\"Risk control check before deposit param _user depositors\"},\"isNeedLiquidate(address)\":{\"notice\":\"determine whether the borrower needs to be liquidated\"},\"maxBorrow(address,address)\":{\"notice\":\"maximum that a user can borrow from a Vault\"},\"userPendingValues(address,address,int256,bool)\":{\"notice\":\"predict total valid vault value after the user operating vault (i.e., Vault of deposit only counts collateral)\"},\"userTotalPendingValues(address,address,int256,bool)\":{\"notice\":\"predict total vault value after the user operating Vault\"},\"userTotalValues(address,bool)\":{\"notice\":\"Get user total Vault value\"},\"userValues(address,bool)\":{\"notice\":\"Get user total valid Vault value (i.e., Vault of deposit only counts collateral)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AppController.sol\":\"AppController\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/AppController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./interfaces/IDepositVault.sol\\\";\\nimport \\\"./interfaces/IMintVault.sol\\\";\\nimport \\\"./interfaces/IController.sol\\\";\\nimport \\\"./interfaces/IStrategy.sol\\\";\\nimport \\\"./interfaces/IUSDOracle.sol\\\";\\nimport \\\"./interfaces/IDYToken.sol\\\";\\nimport \\\"./Constants.sol\\\";\\n\\n// import \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract AppController is Constants, IController, OwnableUpgradeable {\\n\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n  using SafeERC20 for IERC20;\\n\\n  uint constant JOINED_VAULT_LIMIT = 20;\\n\\n  // underlying => dToken\\n  mapping(address => address) public override dyTokens;\\n  // underlying => IStratege\\n  mapping(address => address) public strategies;\\n\\n  struct ValueConf {\\n    address oracle;\\n    uint16 dr;  // discount rate\\n    uint16 pr;  // premium rate\\n  }\\n\\n  // underlying => orcale\\n  mapping(address => ValueConf ) internal valueConfs;\\n\\n  //  dyToken => vault\\n  mapping(address => address) public override dyTokenVaults;\\n\\n  // user => vaults\\n  mapping(address => EnumerableSet.AddressSet) internal userJoinedDepositVaults;\\n\\n  mapping(address => EnumerableSet.AddressSet) internal userJoinedBorrowVaults;\\n\\n  // manage Vault state for risk control\\n  struct VaultState {\\n    bool enabled;\\n    bool enableDeposit;\\n    bool enableWithdraw;\\n    bool enableBorrow;\\n    bool enableRepay;\\n    bool enableLiquidate;\\n  }\\n\\n  // Vault => VaultStatus\\n  mapping(address => VaultState) public vaultStates;\\n\\n\\n  // depost value / borrow value >= liquidateRate\\n  uint public liquidateRate;\\n  uint public collateralRate;\\n\\n  // is anyone can call Liquidate.\\n  bool public isOpenLiquidate;\\n\\n  mapping(address => bool) public allowedLiquidator;\\n\\n  // vault => ValidVault\\n  // Initialize once\\n  mapping(address => ValidVault) public override validVaults;\\n\\n  // vault => user => ValidVault\\n  // set by user\\n  mapping(address => mapping(address => ValidVault)) public override validVaultsOfUser;\\n\\n  // global risk control\\n  VaultState public globalVaultState;\\n\\n  // EVENT\\n  event UnderlyingDTokenChanged(address indexed underlying, address oldDToken, address newDToken);\\n  event UnderlyingStrategyChanged(address indexed underlying, address oldStrage, address newDToken, uint stype);\\n  event DTokenVaultChanged(address indexed dToken, address oldVault, address newVault, uint vtype);\\n\\n  event ValueConfChanged(address indexed underlying, address oracle, uint discount, uint premium);\\n\\n  event LiquidateRateChanged(uint liquidateRate);\\n  event CollateralRateChanged(uint collateralRate);\\n\\n  event OpenLiquidateChanged(bool open);\\n  event AllowedLiquidatorChanged(address liquidator, bool allowed);\\n\\n  event SetVaultStates(address vault, VaultState state);\\n\\n  event InitValidVault(address vault, ValidVault state);\\n  event SetValidVault(address vault, address user, ValidVault state);\\n\\n  event ReleaseAdvance(address user, uint amount); // amount as USD\\n  event ReleaseWithDebit(address user, uint amount); // amount as USD\\n  event ReleaseWithPayback(address user, address underlying, address vault, uint amount); // amount as USD\\n  event ReleaseByBorrowLiquidation(address user, address liqudator, address vault, uint amount); // amount as underlying\\n  event ReleaseByDepositLiquidation(address user, address liqudator, address vault, uint amount); // amount as underlying\\n  // event DebugMessage(string message);\\n\\n  constructor() {\\n  }\\n\\n  function initialize() external initializer {\\n    OwnableUpgradeable.__Ownable_init();\\n    liquidateRate  = 11000;  // PercentBase * 1.1;\\n    collateralRate = 13000;  // PercentBase * 1.3;\\n    isOpenLiquidate = true;\\n  }\\n\\n  // ======  yield =======\\n  function setDYToken(address _underlying, address _dToken) external onlyOwner {\\n    require(_dToken != address(0), \\\"INVALID_DTOKEN\\\");\\n    address oldDToken = dyTokens[_underlying];\\n    dyTokens[_underlying] = _dToken;\\n    emit UnderlyingDTokenChanged(_underlying, oldDToken, _dToken);\\n  }\\n\\n\\n  // set or update strategy\\n  // stype: 1: pancakeswap\\n  function setStrategy(address _underlying, address _strategy, uint stype) external onlyOwner {\\n    require(_strategy != address(0), \\\"Strategies Disabled\\\");\\n\\n    address _current = strategies[_underlying];\\n    if (_current != address(0)) {\\n      IStrategy(_current).withdrawAll();\\n    }\\n    strategies[_underlying] = _strategy;\\n\\n    emit UnderlyingStrategyChanged(_underlying, _current, _strategy, stype);\\n  }\\n\\n  function emergencyWithdrawAll(address _underlying) public onlyOwner {\\n    IStrategy(strategies[_underlying]).withdrawAll();\\n  }\\n\\n  // ======  vault  =======\\n  function setOpenLiquidate(bool _open) external onlyOwner {\\n    isOpenLiquidate = _open;\\n    emit OpenLiquidateChanged(_open);\\n  }\\n\\n  function updateAllowedLiquidator(address liquidator, bool allowed) external onlyOwner {\\n    allowedLiquidator[liquidator] = allowed;\\n    emit AllowedLiquidatorChanged(liquidator, allowed);\\n  }\\n\\n  function setLiquidateRate(uint _liquidateRate) external onlyOwner {\\n    liquidateRate = _liquidateRate;\\n    emit LiquidateRateChanged(liquidateRate);\\n  }\\n\\n  function setCollateralRate(uint _collateralRate) external onlyOwner {\\n    collateralRate = _collateralRate;\\n    emit CollateralRateChanged(collateralRate);\\n  }\\n\\n  // @dev set different oracle\\u3001 discount rate and premium rate for each underlying asset\\n  function setOracles(address _underlying, address _oracle, uint16 _discount, uint16 _premium) external onlyOwner {\\n    require(_oracle != address(0), \\\"INVALID_ORACLE\\\");\\n    require(_discount <= PercentBase, \\\"DISCOUT_TOO_BIG\\\");\\n    require(_premium >= PercentBase, \\\"PREMIUM_TOO_SMALL\\\");\\n\\n    ValueConf storage conf = valueConfs[_underlying];\\n    conf.oracle = _oracle;\\n    conf.dr = _discount;\\n    conf.pr = _premium;\\n\\n    emit ValueConfChanged(_underlying, _oracle, _discount, _premium);\\n  }\\n\\n  function getValueConfs(address token0, address token1) external view returns (\\n    address oracle0, uint16 dr0, uint16 pr0,\\n    address oracle1, uint16 dr1, uint16 pr1) {\\n      (oracle0, dr0, pr0) = getValueConf(token0);\\n      (oracle1, dr1, pr1) = getValueConf(token1);\\n  }\\n\\n  // get DiscountRate and PremiumRate\\n  function getValueConf(address _underlying) public view returns (address oracle, uint16 dr, uint16 pr) {\\n    ValueConf memory conf = valueConfs[_underlying];\\n    oracle = conf.oracle;\\n    dr = conf.dr;\\n    pr = conf.pr;\\n  }\\n\\n  // vtype 1 : for deposit vault 2: for mint vault\\n  function setVault(address _dyToken, address _vault, uint vtype) external onlyOwner {\\n    require(IVault(_vault).isDuetVault(), \\\"INVALIE_VALUT\\\");\\n    address old = dyTokenVaults[_dyToken];\\n    dyTokenVaults[_dyToken] = _vault;\\n    emit DTokenVaultChanged(_dyToken, old, _vault, vtype);\\n  }\\n\\n  function joinVault(address _user, bool isDepositVault) external {\\n    address vault = msg.sender;\\n    require(vaultStates[vault].enabled, \\\"VAULT_DISABLED\\\");\\n\\n    EnumerableSet.AddressSet storage set = isDepositVault ? userJoinedDepositVaults[_user] : userJoinedBorrowVaults[_user];\\n    require(set.length() < JOINED_VAULT_LIMIT, \\\"JOIN_TOO_MUCH\\\");\\n    set.add(vault);\\n  }\\n\\n  function exitVault(address _user, bool isDepositVault) external {\\n    address vault = msg.sender;\\n    require(vaultStates[vault].enabled, \\\"VAULT_DISABLED\\\");\\n\\n    EnumerableSet.AddressSet storage set = isDepositVault ? userJoinedDepositVaults[_user] : userJoinedBorrowVaults[_user];\\n    set.remove(vault);\\n  }\\n\\n  function setVaultStates(address _vault, VaultState memory _state) external onlyOwner {\\n    vaultStates[_vault] = _state;\\n    emit SetVaultStates(_vault, _state);\\n  }\\n\\n  function setGlobalVaultState(VaultState memory _state) external onlyOwner {\\n    globalVaultState = _state;\\n  }\\n\\n  function initValidVault(address[] memory _vault, ValidVault[] memory _state) external onlyOwner {\\n    uint len1 = _vault.length;\\n    uint len2 = _state.length;\\n    require(len1 == len2 && len1 != 0, \\\"INVALID_PARAM\\\");\\n    for (uint i = 0; i < len1; i++) {\\n        require(validVaults[_vault[i]] == ValidVault.UnInit, \\\"SET_ONLY_ONCE\\\");\\n        require(_state[i] == ValidVault.Yes || _state[i] == ValidVault.No, \\\"INVALID_VALUE\\\");\\n        validVaults[_vault[i]] = _state[i];\\n        emit InitValidVault(_vault[i], _state[i]);\\n    }\\n  }\\n\\n  function setValidVault(address[] memory _vault, ValidVault[] memory _state) external {\\n    address user = msg.sender;\\n    uint len1 = _vault.length;\\n    uint len2 = _state.length;\\n    require(len1 == len2 && len1 != 0, \\\"INVALID_PARAM\\\");\\n    for (uint i = 0; i < len1; i++) {\\n        require(_state[i] == ValidVault.Yes || _state[i] == ValidVault.No, \\\"INVALID_VALUE\\\");\\n        validVaultsOfUser[_vault[i]][user] = _state[i];\\n        emit SetValidVault(_vault[i], user, _state[i]);\\n    }\\n\\n    uint totalDepositValue = accValidVaultVaule(user, true);\\n    uint totalBorrowValue = accVaultVaule(user, userJoinedBorrowVaults[user], true);\\n    uint validValue = totalDepositValue * PercentBase / collateralRate;\\n    require(totalDepositValue * PercentBase >= totalBorrowValue * collateralRate, \\\"SETVALIDVAULT: LOW_COLLATERAL\\\");\\n  }\\n\\n  function userJoinedVaultInfoAt(address _user, bool isDepositVault, uint256 index) external view returns (address vault, VaultState memory state) {\\n    EnumerableSet.AddressSet storage set = isDepositVault ? userJoinedDepositVaults[_user] : userJoinedBorrowVaults[_user];\\n    vault = set.at(index);\\n    state = vaultStates[vault];\\n  }\\n\\n  function userJoinedVaultCount(address _user, bool isDepositVault) external view returns (uint256) {\\n    return isDepositVault ? userJoinedDepositVaults[_user].length() : userJoinedBorrowVaults[_user].length();\\n  }\\n\\n  /**\\n  * @notice  maximum that a user can borrow from a Vault\\n  */\\n  function maxBorrow(address _user, address vault) public view returns(uint) {\\n    uint totalDepositValue = accValidVaultVaule(_user, true);\\n    uint totalBorrowValue = accVaultVaule( _user, userJoinedBorrowVaults[_user], true);\\n\\n    uint validValue = totalDepositValue * PercentBase / collateralRate;\\n    if (validValue > totalBorrowValue) {\\n      uint canBorrowValue = validValue - totalBorrowValue;\\n      return IMintVault(vault).valueToAmount(canBorrowValue, true);\\n    } else {\\n      return 0;\\n    }\\n\\n  }\\n\\n  /**\\n    * @notice Get user total valid Vault value (i.e., Vault of deposit only counts collateral)\\n    * @param  _user depositors\\n    * @param _dp  discount or premium\\n    */\\n  function userValues(address _user, bool _dp) public view override returns (uint totalDepositValue, uint totalBorrowValue) {\\n    totalDepositValue = accValidVaultVaule(_user, _dp);\\n    totalBorrowValue = accVaultVaule( _user, userJoinedBorrowVaults[_user], _dp);\\n  }\\n\\n  /**\\n    * @notice  Get user total Vault value\\n    * @param  _user depositors\\n    * @param _dp  discount or premium\\n    */\\n  function userTotalValues(address _user, bool _dp) public view returns (uint totalDepositValue, uint totalBorrowValue) {\\n    totalDepositValue = accVaultVaule(_user, userJoinedDepositVaults[_user], _dp);\\n    totalBorrowValue = accVaultVaule( _user, userJoinedBorrowVaults[_user], _dp);\\n  }\\n\\n  /**\\n    * @notice predict total valid vault value after the user operating vault (i.e., Vault of deposit only counts collateral)\\n    * @param  _user depositors\\n    * @param  _vault target vault\\n    * @param  _amount the amount of deposits or withdrawals\\n    * @param _dp  discount or premium\\n    */\\n  function userPendingValues(address _user, IVault _vault, int _amount, bool _dp) public view returns (uint pendingDepositValue, uint pendingBrorowValue) {\\n    pendingDepositValue = accValidPendingValue(_user, _vault, _amount, _dp);\\n    pendingBrorowValue = accPendingValue(_user, userJoinedBorrowVaults[_user], _vault, _amount, _dp);\\n  }\\n\\n  /**\\n    * @notice  predict total vault value after the user operating Vault\\n    * @param  _user depositors\\n    * @param  _vault target vault\\n    * @param  _amount the amount of deposits or withdrawals\\n    * @param _dp  discount or premium\\n    */\\n  function userTotalPendingValues(address _user, IVault _vault, int _amount, bool _dp) public view returns (uint pendingDepositValue, uint pendingBrorowValue) {\\n    pendingDepositValue = accPendingValue(_user, userJoinedDepositVaults[_user], _vault, _amount, _dp);\\n    pendingBrorowValue = accPendingValue(_user, userJoinedBorrowVaults[_user], _vault, _amount, _dp);\\n  }\\n\\n  /**\\n  * @notice  determine whether the borrower needs to be liquidated\\n  */\\n  function isNeedLiquidate(address _borrower) public view returns (bool) {\\n    (uint totalDepositValue, uint totalBorrowValue) = userValues(_borrower, true);\\n    return totalDepositValue * PercentBase < totalBorrowValue * liquidateRate;\\n  }\\n\\n  /**\\n  * @dev return total value of vault\\n  *\\n  * @param _user address of user\\n  * @param set all address of vault\\n  * @param _dp Discount or Premium\\n  */\\n  function accVaultVaule(address _user, EnumerableSet.AddressSet storage set, bool _dp) internal view returns (uint totalValue) {\\n    uint len = set.length();\\n    for (uint256 i = 0; i < len; i++) {\\n      address vault = set.at(i);\\n      totalValue += IVault(vault).userValue(_user, _dp);\\n    }\\n  }\\n\\n  /**\\n  * @dev return total deposit collateral's value of vault\\n  *\\n  * @param _user address of user\\n  * @param _dp Discount or Premium\\n  */\\n  function accValidVaultVaule(address _user, bool _dp) internal view returns (uint totalValue) {\\n    EnumerableSet.AddressSet storage set = userJoinedDepositVaults[_user];\\n    uint len = set.length();\\n    for (uint256 i = 0; i < len; i++) {\\n      address vault = set.at(i);\\n      if(isCollateralizedVault(vault, _user)) {\\n        totalValue += IVault(vault).userValue(_user, _dp);\\n      }\\n    }\\n  }\\n\\n  function accPendingValue(\\n    address _user,\\n    EnumerableSet.AddressSet storage set,\\n    IVault vault,\\n    int amount,\\n    bool _dp\\n  ) internal view returns(uint totalValue) {\\n    uint len = set.length();\\n    bool existVault = false;\\n\\n    for (uint256 i = 0; i < len; i++) {\\n      IVault _vault = IVault(set.at(i));\\n\\n      if (vault == _vault) {\\n        totalValue += _vault.pendingValue(_user, amount);\\n        existVault = true;\\n      } else {\\n        totalValue += _vault.userValue(_user, _dp);\\n      }\\n    }\\n\\n    if (!existVault) {\\n      totalValue += vault.pendingValue(_user, amount);\\n    }\\n\\n  }\\n\\n  function accValidPendingValue(\\n    address _user,\\n    IVault vault,\\n    int amount,\\n    bool _dp\\n  ) internal view returns (uint totalValue) {\\n    EnumerableSet.AddressSet storage set = userJoinedDepositVaults[_user];\\n    uint len = set.length();\\n    bool existVault = false;\\n\\n    for (uint256 i = 0; i < len; i++) {\\n      IVault _vault = IVault(set.at(i));\\n\\n      if(isCollateralizedVault(address(_vault), _user)) {\\n        if (vault == _vault) {\\n          totalValue += _vault.pendingValue(_user, amount);\\n          existVault = true;\\n        } else {\\n          totalValue += _vault.userValue(_user, _dp);\\n        }\\n      }\\n    }\\n\\n    if (!existVault && isCollateralizedVault(address(vault), _user)) {\\n      totalValue += vault.pendingValue(_user, amount);\\n    }\\n  }\\n\\n\\n  /**\\n    * @notice return bool, true means the vault is as collateral to user, false is opposite\\n    * @param  _vault address of vault\\n    * @param _user   address of user\\n    */\\n  function isCollateralizedVault(address _vault, address _user) internal view returns (bool) {\\n    ValidVault _state = validVaultsOfUser[_vault][_user];\\n    ValidVault state = _state == ValidVault.UnInit? validVaults[_vault] : _state;\\n    require(state != ValidVault.UnInit, \\\"VALIDVAULT_UNINIT\\\");\\n\\n    if(state == ValidVault.Yes) return true; // vault can be collateralized\\n    return false;\\n  }\\n\\n  /**\\n    * @notice Risk control check before deposit\\n    * param _user depositors\\n    * @param _vault address of deposit market\\n    * param  _amount deposit amount\\n    */\\n  function beforeDeposit(address , address _vault, uint) external view {\\n    VaultState memory state =  vaultStates[_vault];\\n    require(\\n      owner() == _msgSender() ||\\n      globalVaultState.enabled && globalVaultState.enableDeposit &&\\n      state.enabled && state.enableDeposit,\\n      \\\"DEPOSITE_DISABLE\\\"\\n    );\\n\\n    address underlying = IVault(_vault).underlying();\\n    (address oracle, , ) = getValueConf(underlying);\\n    uint price = IUSDOracle(oracle).getPrice(underlying);\\n    require(price > 0, \\\"NOT_ACCPET_ZERO_PRICE_TOKEN\\\");\\n  }\\n\\n  /**\\n    * @notice Risk control check before borrowing\\n    * @param  _user borrower\\n    * @param _vault address of loan market\\n    * @param  _amount loan amount\\n    */\\n  function beforeBorrow(address _user, address _vault, uint256 _amount) external view {\\n    VaultState memory state =  vaultStates[_vault];\\n    require(\\n      owner() == _msgSender() ||\\n      globalVaultState.enabled && globalVaultState.enableBorrow &&\\n      state.enabled && state.enableBorrow,\\n      \\\"BORROW_DISABLED\\\"\\n    );\\n\\n    address underlying = IVault(_vault).underlying();\\n    (address oracle, , ) = getValueConf(underlying);\\n    uint price = IUSDOracle(oracle).getPrice(underlying);\\n    require(price > 0, \\\"NOT_ACCPET_ZERO_PRICE_TOKEN\\\");\\n\\n    uint totalDepositValue = accValidVaultVaule(_user, true);\\n    uint pendingBrorowValue = accPendingValue(_user, userJoinedBorrowVaults[_user], IVault(_vault), int(_amount), true);\\n    require(totalDepositValue * PercentBase >= pendingBrorowValue * collateralRate, \\\"LOW_COLLATERAL\\\");\\n  }\\n\\n  function beforeWithdraw(address _user, address _vault, uint256 _amount) external view {\\n    VaultState memory state = vaultStates[_vault];\\n    require(\\n      owner() == _msgSender() ||\\n      globalVaultState.enabled && globalVaultState.enableWithdraw &&\\n      state.enabled && state.enableWithdraw,\\n      \\\"WITHDRAW_DISABLED\\\"\\n    );\\n\\n    if(isCollateralizedVault(_vault, _user)) {\\n      uint pendingDepositValidValue = accValidPendingValue(_user, IVault(_vault), int(0) - int(_amount), true);\\n      uint totalBorrowValue = accVaultVaule(_user, userJoinedBorrowVaults[_user], true);\\n      require(pendingDepositValidValue * PercentBase >= totalBorrowValue * collateralRate, \\\"LOW_COLLATERAL\\\");\\n    }\\n  }\\n\\n  function beforeRepay(address _repayer, address _vault, uint256 _amount) external view {\\n    VaultState memory state =  vaultStates[_vault];\\n    require(\\n      owner() == _msgSender() ||\\n      globalVaultState.enabled && globalVaultState.enableRepay &&\\n      state.enabled && state.enableRepay,\\n      \\\"REPAY_DISABLED\\\"\\n    );\\n  }\\n\\n  function liquidate(address _borrower, bytes calldata data) external {\\n    address liquidator = msg.sender;\\n\\n    require(isOpenLiquidate || allowedLiquidator[liquidator], \\\"INVALID_LIQUIDATOR\\\");\\n    require(isNeedLiquidate(_borrower),  \\\"COLLATERAL_ENOUGH\\\");\\n\\n    EnumerableSet.AddressSet storage set = userJoinedDepositVaults[_borrower];\\n    uint len = set.length();\\n\\n    for (uint256 i = len; i > 0; i--) {\\n      IVault v = IVault(set.at(i-1));\\n      // liquidate valid vault\\n      if(isCollateralizedVault(address(v), _borrower)) {\\n        beforeLiquidate(_borrower, address(v));\\n        v.liquidate(liquidator, _borrower, data);\\n      }\\n    }\\n\\n    EnumerableSet.AddressSet storage set2 = userJoinedBorrowVaults[_borrower];\\n    uint len2 = set2.length();\\n\\n    for (uint256 i = len2; i > 0; i--) {\\n      IVault v = IVault(set2.at(i-1));\\n      beforeLiquidate(_borrower, address(v));\\n      v.liquidate(liquidator, _borrower, data);\\n    }\\n  }\\n\\n  function beforeLiquidate(address _borrower, address _vault) internal view {\\n    VaultState memory state =  vaultStates[_vault];\\n    require(\\n      owner() == _msgSender() ||\\n      globalVaultState.enabled && globalVaultState.enableLiquidate &&\\n      state.enabled && state.enableLiquidate,\\n      \\\"LIQ_DISABLED\\\"\\n    );\\n  }\\n\\n  // @NOTE make sure FeeConf [liq_fee=0]\\n  function releaseVaults(\\n    address[] calldata users_, address[] calldata borrowVaults_,\\n    address liquidator_\\n  ) public onlyOwner {\\n    for (uint i = 0; i < users_.length; i++) {\\n      releaseVaultFor(users_[i], borrowVaults_, liquidator_);\\n    }\\n  }\\n\\n  // @NOTE make sure [liq_fee=0]\\n  function releaseVaultFor(\\n    address user_, address[] calldata borrowVaults_,\\n    address liquidator_\\n  ) public onlyOwner {\\n    uint advance;\\n\\n    for (uint i = 0; i < borrowVaults_.length; i ++) {\\n      address vaultAddress = borrowVaults_[i];\\n      if (!userJoinedBorrowVaults[user_].contains(vaultAddress)) continue;\\n      // emit DebugMessage(string(abi.encodePacked(\\n      //   \\\"joined borrow vault: \\\",\\n      //   Strings.toString(i)\\n      // )));\\n\\n      uint debit = releaseBorrowVaultFor(user_, vaultAddress, liquidator_);\\n      // emit DebugMessage(string(abi.encodePacked(\\n      //   \\\"debit: \\\",\\n      //   Strings.toString(debit)\\n      // )));\\n\\n      require(!userJoinedBorrowVaults[user_].contains(vaultAddress), 'NOT COMPLELTELY REPAIED MINT VAULT');\\n      advance += debit;\\n    }\\n    if (advance <= 0) return;\\n    emit ReleaseAdvance(user_, advance);\\n\\n    EnumerableSet.AddressSet storage depositVaults = userJoinedDepositVaults[user_];\\n    for (uint i = depositVaults.length(); advance > 0 && i > 0; i --) {\\n      address vaultAddress = depositVaults.at(i - 1);\\n      if (!canBeLiquidatedForVaultReleasing(user_, vaultAddress)) continue;\\n\\n      uint collateral = releaseDespoitVaultFor(user_, vaultAddress, advance, liquidator_);\\n      // emit DebugMessage(string(abi.encodePacked(\\n      //   \\\"collateral: \\\",\\n      //   Strings.toString(collateral)\\n      // )));\\n      advance -= collateral;\\n    }\\n    if (advance > 0) emit ReleaseWithDebit(user_, advance);\\n\\n  }\\n\\n  function canBeLiquidatedForVaultReleasing(address user_, address vault_) view internal returns (bool) {\\n    (, uint dr, ) = getValueConf(IVault(vault_).underlying());\\n    if (dr <= 0) return false;\\n    if (!isCollateralizedVault(vault_, user_)) return false;\\n    return true;\\n  }\\n\\n  function releaseBorrowVaultFor(\\n    address user_, address vault_,\\n    address liquidator_\\n  ) internal returns (uint debit) {\\n    debit = IVault(vault_).userValue(user_, false);\\n    uint amount = IMintVault(vault_).borrows(user_);\\n\\n    bool originalEnabled = vaultStates[vault_].enabled;\\n    bool originalEnableLiquidate = vaultStates[vault_].enableLiquidate;\\n    vaultStates[vault_].enabled = true;\\n    vaultStates[vault_].enableLiquidate = true;\\n\\n    IVault(vault_).liquidate(liquidator_, user_, \\\"0x01\\\");\\n    emit ReleaseByBorrowLiquidation(user_, liquidator_, vault_, amount);\\n\\n    vaultStates[vault_].enabled = originalEnabled;\\n    vaultStates[vault_].enableLiquidate = originalEnableLiquidate;\\n  }\\n\\n  function releaseDespoitVaultFor(\\n    address user_, address vault_, uint advance_,\\n    address liquidator_\\n  ) internal returns (uint collateral) {\\n    collateral = IVault(vault_).userValue(user_, false);\\n    uint amount = IDepositVault(vault_).deposits(user_);\\n\\n    bool originalEnabled = vaultStates[vault_].enabled;\\n    bool originalEnableLiquidate = vaultStates[vault_].enableLiquidate;\\n    vaultStates[vault_].enabled = true;\\n    vaultStates[vault_].enableLiquidate = true;\\n\\n    IVault(vault_).liquidate(liquidator_, user_, \\\"0x01\\\");\\n    emit ReleaseByDepositLiquidation(user_, liquidator_, vault_, amount);\\n\\n    if (collateral > advance_) {\\n      uint offset = collateral - advance_;\\n      uint payback = amount * offset * 1e12 / collateral / 1e12;\\n      repayWhileReleasingVaultFor(user_, vault_, liquidator_, payback);\\n      emit ReleaseWithPayback(user_, IVault(vault_).underlying(), vault_, offset);\\n      collateral = advance_;\\n    }\\n\\n    vaultStates[vault_].enabled = originalEnabled;\\n    vaultStates[vault_].enableLiquidate = originalEnableLiquidate;\\n  }\\n\\n  function repayWhileReleasingVaultFor(\\n    address user_, address vault_, address liquidator_,\\n    uint amount_\\n  ) internal {\\n    IDYToken dytoken = IDYToken(IVault(vault_).underlying());\\n    IERC20(dytoken.underlying()).safeTransferFrom(liquidator_, address(this), amount_);\\n    IDepositVault(vault_).depositTo(address(dytoken), user_, amount_);\\n  }\\n\\n\\n  //  ======   vault end =======\\n\\n}\\n\",\"keccak256\":\"0xf0b673c7b1f21d7c948a7803a2648be353bf726367cdac66e16381ea91ea3017\",\"license\":\"MIT\"},\"contracts/Constants.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\ncontract Constants {\\n  uint internal constant PercentBase = 10000;\\n}\",\"keccak256\":\"0x5769daf8aabd51393211ff1f2b7e1681008e2e6bf9941b7f637e2563afa769dd\",\"license\":\"MIT\"},\"contracts/interfaces/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IController {\\n  function dyTokens(address) external view returns (address);\\n  function getValueConf(address _underlying) external view returns (address oracle, uint16 dr, uint16 pr);\\n  function getValueConfs(address token0, address token1) external view returns (address oracle0, uint16 dr0, uint16 pr0, address oracle1, uint16 dr1, uint16 pr1);\\n\\n  function strategies(address) external view returns (address);\\n  function dyTokenVaults(address) external view returns (address);\\n\\n  function beforeDeposit(address , address _vault, uint) external view;\\n  function beforeBorrow(address _borrower, address _vault, uint256 _amount) external view;\\n  function beforeWithdraw(address _redeemer, address _vault, uint256 _amount) external view;\\n  function beforeRepay(address _repayer , address _vault, uint256 _amount) external view;\\n\\n  function joinVault(address _user, bool isDeposit) external;\\n  function exitVault(address _user, bool isDeposit) external;\\n\\n  function userValues(address _user, bool _dp) external view returns(uint totalDepositValue, uint totalBorrowValue);\\n  function userTotalValues(address _user, bool _dp) external view returns(uint totalDepositValue, uint totalBorrowValue);\\n\\n  function liquidate(address _borrower, bytes calldata data) external;\\n\\n  // ValidVault 0: uninitialized, default value\\n  // ValidVault 1: No, vault can not be collateralized\\n  // ValidVault 2: Yes, vault can be collateralized\\n  enum ValidVault { UnInit, No, Yes }\\n  function validVaults(address _vault) external view returns(ValidVault);\\n  function validVaultsOfUser(address _vault, address _user) external view returns(ValidVault);\\n\\n}\",\"keccak256\":\"0x98083d9afaba89dbdd5c3a1c25ad664f4c4545bf055f72732c4c8e19e7540fc2\",\"license\":\"MIT\"},\"contracts/interfaces/IDYToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n\\ninterface IDYToken {\\n  function deposit(uint _amount, address _toVault) external;\\n  function depositTo(address _to, uint _amount, address _toVault) external;\\n  function depositCoin(address to, address _toVault) external payable;\\n\\n  function withdraw(address _to, uint _shares, bool needWETH) external;\\n  function underlyingTotal() external view returns (uint);\\n\\n  function underlying() external view returns(address);\\n  function balanceOfUnderlying(address _user) external view returns (uint);\\n  function underlyingAmount(uint amount) external view returns (uint);\\n}\",\"keccak256\":\"0x07cd7098e2f8e67830ec51d39be20ec7a9151458629d16d0fd7e918bfe6aef6d\",\"license\":\"MIT\"},\"contracts/interfaces/IDepositVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IDepositVault {\\n\\n  function deposits(address user) external view returns(uint amount);\\n  function deposit(address dtoken, uint256 amount) external;\\n  function depositTo(address dtoken, address to, uint256 amount) external;\\n  function syncDeposit(address dtoken, uint256 amount, address user) external;\\n\\n  function withdraw(uint256 amount, bool unpack) external;\\n  function withdrawTo(address to, uint256 amount, bool unpack) external;\\n\\n}\",\"keccak256\":\"0xd975e5e0999770ecf088eb0a83a575ff2988408a360582692dad37e4a346d76d\",\"license\":\"MIT\"},\"contracts/interfaces/IMintVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IMintVault {\\n\\n  function borrows(address user) external view returns(uint amount);\\n  function borrow(uint256 amount) external;\\n  function repay(uint256 amount) external;\\n  function repayTo(address to, uint256 amount) external;\\n\\n  function valueToAmount(uint value, bool dp) external view returns(uint amount);\\n\\n}\",\"keccak256\":\"0x0a365d475a099d551aef919eba5771f5694dc1d3e14566b69ea557c0c49ea1e1\",\"license\":\"MIT\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.8.0;\\n\\ninterface IStrategy {\\n\\n    function controller() external view returns (address);\\n    function getWant() external view returns (address);\\n    function deposit() external;\\n    function harvest() external;\\n    function withdraw(uint) external;\\n    function withdrawAll() external returns (uint256);\\n    function balanceOf() external view returns (uint256);\\n    function pendingOutput() external view returns (uint256);\\n    function minHarvestAmount() external view returns (uint256);\\n    function output() external view returns (address);\\n}\",\"keccak256\":\"0x702de5fcaecf97e5774b9734a8c79e492632eb7a5d88e16be2e1b116403cdbea\",\"license\":\"MIT\"},\"contracts/interfaces/IUSDOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\ninterface IUSDOracle {\\n  // Must 8 dec, same as chainlink decimals.\\n  function getPrice(address token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb2d61b8e116a91ee462037152382f40dda542cb4d40bbd2891472dff6dd057ef\",\"license\":\"MIT\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IVault {\\n  // call from controller must impl.\\n  function underlying() external view returns (address);\\n  function isDuetVault() external view returns (bool);\\n  function liquidate(address liquidator, address borrower, bytes calldata data) external;\\n  function userValue(address user, bool dp) external view returns(uint);\\n  function pendingValue(address user, int pending) external view returns(uint);\\n  function underlyingAmountValue(uint amount, bool dp) external view returns(uint value);\\n}\",\"keccak256\":\"0xb713c3e19b97f7018acc1c34cadd92ff78200bbf90f3b68a7b55597f18cb8e33\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614b8b806100206000396000f3fe608060405234801561001057600080fd5b50600436106102955760003560e01c80636c45967711610167578063ace664b4116100ce578063dc95785a11610087578063dc95785a14610748578063e26ec36a14610785578063f2fde38b14610798578063f610c281146107ab578063f7d22673146107be578063f9009ee8146107d157600080fd5b8063ace664b4146106bb578063b66d927a146106ce578063c4c00487146106e1578063c5321fb0146106f4578063c8b268b314610707578063d2786d451461071a57600080fd5b80638da5cb5b116101205780638da5cb5b1461063157806390a83dc21461064257806396721753146106555780639c045f3e14610668578063aaace60114610689578063ab27197e146106b257600080fd5b80636c459677146105bf578063715018a6146105d257806379bf27b1146105da5780637e7cd29e146105ed5780638129fc1c1461060057806383d576501461060857600080fd5b806339ebf8231161020b57806359e27fc4116101c457806359e27fc4146104b75780635f49202f146104ca578063624b5ed4146105565780636657fc67146105695780636989725c146105995780636af2482d146105ac57600080fd5b806339ebf823146103df5780633dcecc2f1461042057806346b45be71461047557806354ab62691461048857806358a6be1c1461049b5780635911a1ae146104a457600080fd5b8063149088161161025d57806314908816146102fb5780631acd8c9c1461030e5780631e516051146103505780632b9553ce146103835780632ea874821461039657806338b20421146103b757600080fd5b8063054c13441461029a57806309ba9b47146102af5780630d37a290146102c25780630ebdee19146102d55780630eccd2c9146102e8575b600080fd5b6102ad6102a836600461407e565b6107de565b005b6102ad6102bd36600461407e565b6109b4565b6102ad6102d03660046140d1565b610c2b565b6102ad6102e3366004614137565b610dcb565b6102ad6102f6366004614170565b610e57565b6102ad6103093660046141f5565b6110ae565b61032161031c366004614223565b61118d565b604080516001600160a01b03909416845261ffff92831660208501529116908201526060015b60405180910390f35b61037361035e366004614223565b606f6020526000908152604090205460ff1681565b6040519015158152602001610347565b6102ad61039136600461407e565b6111e0565b6103a96103a4366004614137565b6114e2565b604051908152602001610347565b6103ca6103c5366004614240565b611539565b60408051928352602083019190915201610347565b6104086103ed366004614223565b6066602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610347565b61043361042e3660046141f5565b611595565b604080516001600160a01b03978816815261ffff96871660208201529486169085015294909116606083015282166080820152911660a082015260c001610347565b6102ad610483366004614377565b6115c8565b6102ad610496366004614223565b61186d565b6103a9606d5481565b6103a96104b23660046141f5565b611924565b6102ad6104c536600461407e565b611a32565b61051d6104d8366004614223565b606b6020526000908152604090205460ff80821691610100810482169162010000820481169163010000008104821691600160201b8204811691600160281b90041686565b604080519615158752941515602087015292151593850193909352151560608401529015156080830152151560a082015260c001610347565b6102ad610564366004614439565b611b7c565b61058c610577366004614223565b60706020526000908152604090205460ff1681565b604051610347919061448a565b6102ad6105a736600461407e565b611be2565b6102ad6105ba366004614547565b611cfd565b6102ad6105cd366004614574565b611e05565b6102ad611e70565b6102ad6105e8366004614137565b611ea6565b6102ad6105fb3660046145dd565b611f3f565b6102ad611fb8565b610408610616366004614223565b6068602052600090815260409020546001600160a01b031681565b6033546001600160a01b0316610408565b6102ad61065036600461407e565b612042565b6103ca610663366004614240565b6121b2565b61067b610676366004614661565b6121c1565b604051610347929190614691565b610408610697366004614223565b6065602052600090815260409020546001600160a01b031681565b6103a9606c5481565b6102ad6106c93660046146f0565b6122c8565b6103736106dc366004614223565b61238e565b6102ad6106ef366004614137565b6123c5565b6102ad610702366004614377565b6124a6565b6102ad610715366004614439565b61276d565b61058c6107283660046141f5565b607160209081526000928352604080842090915290825290205460ff1681565b60725461051d9060ff80821691610100810482169162010000820481169163010000008104821691600160201b8204811691600160281b90041686565b6103ca610793366004614137565b6127cc565b6102ad6107a6366004614223565b612809565b6102ad6107b936600461470c565b6128a1565b6103ca6107cc366004614137565b612b14565b606e546103739060ff1681565b6001600160a01b0382166000908152606b6020908152604091829020825160c081018452905460ff8082161515835261010082048116151593830193909352620100008104831615159382019390935263010000008304821615156060820152600160201b8304821615156080820152600160281b90920416151560a0820152336001600160a01b031661087a6033546001600160a01b031690565b6001600160a01b031614806108bb575060725460ff1680156108a4575060725462010000900460ff165b80156108ae575080515b80156108bb575080604001515b6109005760405162461bcd60e51b815260206004820152601160248201527015d2551211149055d7d11254d050931151607a1b60448201526064015b60405180910390fd5b61090a8385612b3a565b156109ae5760006109278585610920868561477f565b6001612c29565b6001600160a01b0386166000908152606a60205260408120919250906109509087906001612e74565b9050606d548161096091906147be565b61096c612710846147be565b10156109ab5760405162461bcd60e51b815260206004820152600e60248201526d1313d5d7d0d3d31310551154905360921b60448201526064016108f7565b50505b50505050565b6001600160a01b0382166000908152606b6020908152604091829020825160c081018452905460ff8082161515835261010082048116151593830193909352620100008104831615159382019390935263010000008304821615156060820152600160201b8304821615156080820152600160281b90920416151560a0820152336001600160a01b0316610a506033546001600160a01b031690565b6001600160a01b03161480610a90575060725460ff168015610a795750607254610100900460ff165b8015610a83575080515b8015610a90575080602001515b610acf5760405162461bcd60e51b815260206004820152601060248201526f4445504f534954455f44495341424c4560801b60448201526064016108f7565b6000836001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015610b0a57600080fd5b505afa158015610b1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4291906147dd565b90506000610b4f8261118d565b50506040516341976e0960e01b81526001600160a01b0384811660048301529192506000918316906341976e099060240160206040518083038186803b158015610b9857600080fd5b505afa158015610bac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd091906147fa565b905060008111610c225760405162461bcd60e51b815260206004820152601b60248201527f4e4f545f4143435045545f5a45524f5f50524943455f544f4b454e000000000060448201526064016108f7565b50505050505050565b6033546001600160a01b03163314610c555760405162461bcd60e51b81526004016108f790614813565b6001600160a01b038316610c9c5760405162461bcd60e51b815260206004820152600e60248201526d494e56414c49445f4f5241434c4560901b60448201526064016108f7565b6127108261ffff161115610ce45760405162461bcd60e51b815260206004820152600f60248201526e444953434f55545f544f4f5f42494760881b60448201526064016108f7565b6127108161ffff161015610d2e5760405162461bcd60e51b81526020600482015260116024820152701414915352555357d513d3d7d4d3505313607a1b60448201526064016108f7565b6001600160a01b0384811660008181526067602090815260409182902080549488166001600160b01b03199095168517600160a01b61ffff8981169182029290921761ffff60b01b1916600160b01b92891692830217835584519687529286019290925291840152917f7cb71f764a6240297d887d23473a61cf07ba9d34ccfbdd326620a5b896cd33469060600160405180910390a25050505050565b6033546001600160a01b03163314610df55760405162461bcd60e51b81526004016108f790614813565b6001600160a01b0382166000908152606f602052604090819020805460ff1916831515179055517fd8949265082223b72749a7863e551684ee0df9a0c8ece536b9f14686b68425fc90610e4b9084908490614848565b60405180910390a15050565b606e54339060ff1680610e8257506001600160a01b0381166000908152606f602052604090205460ff165b610ec35760405162461bcd60e51b815260206004820152601260248201527124a72b20a624a22fa624a8aaa4a220aa27a960711b60448201526064016108f7565b610ecc8461238e565b610f0c5760405162461bcd60e51b81526020600482015260116024820152700869e989882a88aa48298be8a9c9eaa8e9607b1b60448201526064016108f7565b6001600160a01b038416600090815260696020526040812090610f2e82612f43565b9050805b8015610fe2576000610f4f610f48600184614863565b8590612f4d565b9050610f5b8189612b3a565b15610fcf57610f6a8882612f59565b6040516374eb83c160e01b81526001600160a01b038216906374eb83c190610f9c9088908c908c908c9060040161487a565b600060405180830381600087803b158015610fb657600080fd5b505af1158015610fca573d6000803e3d6000fd5b505050505b5080610fda816148c6565b915050610f32565b506001600160a01b0386166000908152606a602052604081209061100582612f43565b9050805b80156110a357600061101f610f48600184614863565b905061102b8a82612f59565b6040516374eb83c160e01b81526001600160a01b038216906374eb83c19061105d908a908e908e908e9060040161487a565b600060405180830381600087803b15801561107757600080fd5b505af115801561108b573d6000803e3d6000fd5b5050505050808061109b906148c6565b915050611009565b505050505050505050565b6033546001600160a01b031633146110d85760405162461bcd60e51b81526004016108f790614813565b6001600160a01b03811661111f5760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa22a27a5a2a760911b60448201526064016108f7565b6001600160a01b0382811660008181526065602090815260409182902080548686166001600160a01b0319821681179092558351951680865291850152927fd5c0cad2a6b3eea813a7bdf548752779e26da201508f6e807ec5ec3d65d020d6910160405180910390a2505050565b6001600160a01b039081166000908152606760209081526040918290208251606081018452905493841680825261ffff600160a01b86048116938301849052600160b01b90950490941692018290529192565b6001600160a01b0382166000908152606b6020908152604091829020825160c081018452905460ff8082161515835261010082048116151593830193909352620100008104831615159382019390935263010000008304821615156060820152600160201b8304821615156080820152600160281b90920416151560a0820152336001600160a01b031661127c6033546001600160a01b031690565b6001600160a01b031614806112be575060725460ff1680156112a757506072546301000000900460ff165b80156112b1575080515b80156112be575080606001515b6112fc5760405162461bcd60e51b815260206004820152600f60248201526e1093d49493d5d7d11254d050931151608a1b60448201526064016108f7565b6000836001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561133757600080fd5b505afa15801561134b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061136f91906147dd565b9050600061137c8261118d565b50506040516341976e0960e01b81526001600160a01b0384811660048301529192506000918316906341976e099060240160206040518083038186803b1580156113c557600080fd5b505afa1580156113d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113fd91906147fa565b90506000811161144f5760405162461bcd60e51b815260206004820152601b60248201527f4e4f545f4143435045545f5a45524f5f50524943455f544f4b454e000000000060448201526064016108f7565b600061145c886001613077565b6001600160a01b0389166000908152606a6020526040812091925090611487908a908a8a6001613161565b9050606d548161149791906147be565b6114a3612710846147be565b10156110a35760405162461bcd60e51b815260206004820152600e60248201526d1313d5d7d0d3d31310551154905360921b60448201526064016108f7565b60008161150f576001600160a01b0383166000908152606a6020526040902061150a90612f43565b611530565b6001600160a01b038316600090815260696020526040902061153090612f43565b90505b92915050565b6001600160a01b03841660009081526069602052604081208190611561908790878787613161565b6001600160a01b0387166000908152606a6020526040902090925061158a908790878787613161565b905094509492505050565b6000806000806000806115a78861118d565b919750955093506115b78761118d565b979a96995094975095939492505050565b6033546001600160a01b031633146115f25760405162461bcd60e51b81526004016108f790614813565b81518151808214801561160457508115155b6116405760405162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f504152414d60981b60448201526064016108f7565b60005b8281101561186657600060706000878481518110611663576116636148dd565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16600281111561169b5761169b614452565b146116d85760405162461bcd60e51b815260206004820152600d60248201526c5345545f4f4e4c595f4f4e434560981b60448201526064016108f7565b60028482815181106116ec576116ec6148dd565b6020026020010151600281111561170557611705614452565b148061173b57506001848281518110611720576117206148dd565b6020026020010151600281111561173957611739614452565b145b6117775760405162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f56414c554560981b60448201526064016108f7565b838181518110611789576117896148dd565b6020026020010151607060008784815181106117a7576117a76148dd565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191660018360028111156117e4576117e4614452565b02179055507f05334cade7d5051a457d6cddb92a76a5266e31459f3118a536c99b169beaa0f585828151811061181c5761181c6148dd565b6020026020010151858381518110611836576118366148dd565b602002602001015160405161184c9291906148f3565b60405180910390a18061185e81614910565b915050611643565b5050505050565b6033546001600160a01b031633146118975760405162461bcd60e51b81526004016108f790614813565b6001600160a01b03808216600090815260666020908152604080832054815163429c145b60e11b8152915194169363853828b693600480840194938390030190829087803b1580156118e857600080fd5b505af11580156118fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192091906147fa565b5050565b600080611932846001613077565b6001600160a01b0385166000908152606a602052604081209192509061195b9086906001612e74565b90506000606d546127108461197091906147be565b61197a919061492b565b905081811115611a1d5760006119908383614863565b60405163281aa7fd60e21b815260048101829052600160248201529091506001600160a01b0387169063a06a9ff49060440160206040518083038186803b1580156119da57600080fd5b505afa1580156119ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1291906147fa565b945050505050611533565b60009350505050611533565b50505092915050565b6033546001600160a01b03163314611a5c5760405162461bcd60e51b81526004016108f790614813565b816001600160a01b031663ba58591c6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a9557600080fd5b505afa158015611aa9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611acd919061494d565b611b095760405162461bcd60e51b815260206004820152600d60248201526c1253959053125157d590531555609a1b60448201526064016108f7565b6001600160a01b038084166000818152606860205260409081902080548685166001600160a01b031982161790915590519216917f0ff9c79e47a5eed61bfb093d8315d37efcfa7f6679e507f608289c78941b0e5190611b6e9084908790879061496a565b60405180910390a250505050565b6033546001600160a01b03163314611ba65760405162461bcd60e51b81526004016108f790614813565b606d8190556040518181527f13e612fc69e30b3adcca3cb6573fa94782e94f59261f9b32c96c34b90552b335906020015b60405180910390a150565b6001600160a01b0382166000908152606b6020908152604091829020825160c081018452905460ff8082161515835261010082048116151593830193909352620100008104831615159382019390935263010000008304821615156060820152600160201b8304821615156080820152600160281b90920416151560a0820152336001600160a01b0316611c7e6033546001600160a01b031690565b6001600160a01b03161480611cc0575060725460ff168015611ca95750607254600160201b900460ff165b8015611cb3575080515b8015611cc0575080608001515b6109ae5760405162461bcd60e51b815260206004820152600e60248201526d149154105657d11254d05093115160921b60448201526064016108f7565b6033546001600160a01b03163314611d275760405162461bcd60e51b81526004016108f790614813565b6001600160a01b0382166000908152606b60209081526040918290208351815492850151858501516060870151608088015160a089015161ffff1990971694151561ff00191694909417610100931515939093029290921763ffff00001916620100009115159190910263ff0000001916176301000000911515919091021765ffff000000001916600160201b9115159190910260ff60281b191617600160281b92151592909202919091179055517f0f86f36676a78407d88aa894e600955aca44b6b9eaff4740c81228e2fa75d62890610e4b9084908490614691565b6033546001600160a01b03163314611e2f5760405162461bcd60e51b81526004016108f790614813565b606e805460ff19168215159081179091556040519081527fcfa23450328fe03391963dc3e54c19ebeecb28fd8a628b495b71ab8534d61c3290602001611bd7565b6033546001600160a01b03163314611e9a5760405162461bcd60e51b81526004016108f790614813565b611ea46000613374565b565b336000818152606b602052604090205460ff16611ef65760405162461bcd60e51b815260206004820152600e60248201526d159055531517d11254d05093115160921b60448201526064016108f7565b600082611f1a576001600160a01b0384166000908152606a60205260409020611f33565b6001600160a01b03841660009081526069602052604090205b905061186681836133c6565b6033546001600160a01b03163314611f695760405162461bcd60e51b81526004016108f790614813565b60005b848110156109ab57611fa6868683818110611f8957611f896148dd565b9050602002016020810190611f9e9190614223565b8585856128a1565b80611fb081614910565b915050611f6c565b6000611fc460016133db565b90508015611fdc576000805461ff0019166101001790555b611fe4613468565b612af8606c556132c8606d55606e805460ff19166001179055801561203f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001611bd7565b50565b6033546001600160a01b0316331461206c5760405162461bcd60e51b81526004016108f790614813565b6001600160a01b0382166120b85760405162461bcd60e51b815260206004820152601360248201527214dd1c985d1959da595cc8111a5cd8589b1959606a1b60448201526064016108f7565b6001600160a01b0380841660009081526066602052604090205416801561214e57806001600160a01b031663853828b66040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561211457600080fd5b505af1158015612128573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214c91906147fa565b505b6001600160a01b038481166000818152606660205260409081902080546001600160a01b0319169387169390931790925590517fcc7d45f325309ae5b4940b5de638a482be2a51aa3a917326a84f65bcc2f7352390611b6e9084908790879061496a565b60008061156186868686612c29565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a08101829052600084612216576001600160a01b0386166000908152606a6020526040902061222f565b6001600160a01b03861660009081526069602052604090205b905061223b8185612f4d565b6001600160a01b0381166000908152606b6020908152604091829020825160c081018452905460ff8082161515835261010082048116151593830193909352620100008104831615159382019390935263010000008304821615156060820152600160201b8304821615156080820152600160281b90920416151560a08201529097909650945050505050565b6033546001600160a01b031633146122f25760405162461bcd60e51b81526004016108f790614813565b805160728054602084015160408501516060860151608087015160a09097015161ffff1990941695151561ff00191695909517610100921515929092029190911763ffff00001916620100009115159190910263ff0000001916176301000000931515939093029290921765ffff000000001916600160201b9315159390930260ff60281b191692909217600160281b91151591909102179055565b600080600061239e8460016127cc565b91509150606c54816123b091906147be565b6123bc612710846147be565b10949350505050565b336000818152606b602052604090205460ff166124155760405162461bcd60e51b815260206004820152600e60248201526d159055531517d11254d05093115160921b60448201526064016108f7565b600082612439576001600160a01b0384166000908152606a60205260409020612452565b6001600160a01b03841660009081526069602052604090205b9050601461245f82612f43565b1061249c5760405162461bcd60e51b815260206004820152600d60248201526c0949e929cbea89e9ebe9aaa869609b1b60448201526064016108f7565b6118668183613497565b8151815133919080821480156124bb57508115155b6124f75760405162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f504152414d60981b60448201526064016108f7565b60005b828110156126a3576002858281518110612516576125166148dd565b6020026020010151600281111561252f5761252f614452565b14806125655750600185828151811061254a5761254a6148dd565b6020026020010151600281111561256357612563614452565b145b6125a15760405162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f56414c554560981b60448201526064016108f7565b8481815181106125b3576125b36148dd565b6020026020010151607160008884815181106125d1576125d16148dd565b6020908102919091018101516001600160a01b039081168352828201939093526040918201600090812093891681529290529020805460ff1916600183600281111561261f5761261f614452565b02179055507f65d4763abdc1e045affaf50aed5fc2a1f4f466da45ee41ea701e0ad5029ff0b0868281518110612657576126576148dd565b602002602001015185878481518110612672576126726148dd565b60200260200101516040516126899392919061498e565b60405180910390a18061269b81614910565b9150506124fa565b5060006126b1846001613077565b6001600160a01b0385166000908152606a60205260408120919250906126da9086906001612e74565b90506000606d54612710846126ef91906147be565b6126f9919061492b565b9050606d548261270991906147be565b612715612710856147be565b10156127635760405162461bcd60e51b815260206004820152601d60248201527f53455456414c49445641554c543a204c4f575f434f4c4c41544552414c00000060448201526064016108f7565b5050505050505050565b6033546001600160a01b031633146127975760405162461bcd60e51b81526004016108f790614813565b606c8190556040518181527f138a4f81e91d7ed8109625537819aae162d22b1e4b5f73e1919d1f6e21bfbb4b90602001611bd7565b6000806127d98484613077565b6001600160a01b0385166000908152606a6020526040902090925061280090859085612e74565b90509250929050565b6033546001600160a01b031633146128335760405162461bcd60e51b81526004016108f790614813565b6001600160a01b0381166128985760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016108f7565b61203f81613374565b6033546001600160a01b031633146128cb5760405162461bcd60e51b81526004016108f790614813565b6000805b838110156129da5760008585838181106128eb576128eb6148dd565b90506020020160208101906129009190614223565b6001600160a01b0388166000908152606a6020526040902090915061292590826134ac565b61292f57506129c8565b600061293c8883876134ce565b6001600160a01b0389166000908152606a6020526040902090915061296190836134ac565b156129b95760405162461bcd60e51b815260206004820152602260248201527f4e4f5420434f4d504c454c54454c592052455041494544204d494e5420564155604482015261131560f21b60648201526084016108f7565b6129c381856149b3565b935050505b806129d281614910565b9150506128cf565b50600081116129e957506109ae565b604080516001600160a01b0387168152602081018390527fd23fb662f88318206dd1d4f312c79cc8f6cad84d6791f16248ea48286d1f75fd910160405180910390a16001600160a01b038516600090815260696020526040812090612a4d82612f43565b90505b600083118015612a605750600081115b15612ac3576000612a7c612a75600184614863565b8490612f4d565b9050612a8888826136ef565b612a925750612ab1565b6000612aa0898387896137a2565b9050612aac8186614863565b945050505b80612abb816148c6565b915050612a50565b5081156109ab57604080516001600160a01b0388168152602081018490527fc649b38f60b165ec8c5a2f8f05cabe175203f0b0d407c4e071ed9ae73935a106910160405180910390a1505050505050565b6001600160a01b038216600090815260696020526040812081906127d990859085612e74565b6001600160a01b03808316600090815260716020908152604080832093851683529290529081205460ff168180826002811115612b7957612b79614452565b14612b845781612ba1565b6001600160a01b03851660009081526070602052604090205460ff165b90506000816002811115612bb757612bb7614452565b1415612bf95760405162461bcd60e51b81526020600482015260116024820152701590531251159055531517d55392539255607a1b60448201526064016108f7565b6002816002811115612c0d57612c0d614452565b1415612c1e57600192505050611533565b506000949350505050565b6001600160a01b038416600090815260696020526040812081612c4b82612f43565b90506000805b82811015612dc3576000612c658583612f4d565b9050612c71818b612b3a565b15612db057806001600160a01b0316896001600160a01b03161415612d2557604051635ac28bf960e01b81526001600160a01b038b81166004830152602482018a9052821690635ac28bf99060440160206040518083038186803b158015612cd857600080fd5b505afa158015612cec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d1091906147fa565b612d1a90876149b3565b955060019250612db0565b60405163ae318c4d60e01b81526001600160a01b0382169063ae318c4d90612d53908d908b90600401614848565b60206040518083038186803b158015612d6b57600080fd5b505afa158015612d7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612da391906147fa565b612dad90876149b3565b95505b5080612dbb81614910565b915050612c51565b5080158015612dd75750612dd78789612b3a565b15612e6957604051635ac28bf960e01b81526001600160a01b03898116600483015260248201889052881690635ac28bf99060440160206040518083038186803b158015612e2457600080fd5b505afa158015612e38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e5c91906147fa565b612e6690856149b3565b93505b505050949350505050565b600080612e8084612f43565b905060005b81811015612f3a576000612e998683612f4d565b60405163ae318c4d60e01b81529091506001600160a01b0382169063ae318c4d90612eca908a908990600401614848565b60206040518083038186803b158015612ee257600080fd5b505afa158015612ef6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f1a91906147fa565b612f2490856149b3565b9350508080612f3290614910565b915050612e85565b50509392505050565b6000611533825490565b60006115308383613ad1565b6001600160a01b0381166000908152606b6020908152604091829020825160c081018452905460ff8082161515835261010082048116151593830193909352620100008104831615159382019390935263010000008304821615156060820152600160201b8304821615156080820152600160281b90920416151560a0820152336001600160a01b0316612ff56033546001600160a01b031690565b6001600160a01b03161480613037575060725460ff1680156130205750607254600160281b900460ff165b801561302a575080515b801561303757508060a001515b6130725760405162461bcd60e51b815260206004820152600c60248201526b13125457d11254d05093115160a21b60448201526064016108f7565b505050565b6001600160a01b03821660009081526069602052604081208161309982612f43565b905060005b81811015611a295760006130b28483612f4d565b90506130be8188612b3a565b1561314e5760405163ae318c4d60e01b81526001600160a01b0382169063ae318c4d906130f1908a908a90600401614848565b60206040518083038186803b15801561310957600080fd5b505afa15801561311d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061314191906147fa565b61314b90866149b3565b94505b508061315981614910565b91505061309e565b60008061316d86612f43565b90506000805b828110156132d65760006131878983612f4d565b9050806001600160a01b0316886001600160a01b0316141561323857604051635ac28bf960e01b81526001600160a01b038b8116600483015260248201899052821690635ac28bf99060440160206040518083038186803b1580156131eb57600080fd5b505afa1580156131ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061322391906147fa565b61322d90866149b3565b9450600192506132c3565b60405163ae318c4d60e01b81526001600160a01b0382169063ae318c4d90613266908d908a90600401614848565b60206040518083038186803b15801561327e57600080fd5b505afa158015613292573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132b691906147fa565b6132c090866149b3565b94505b50806132ce81614910565b915050613173565b508061336957604051635ac28bf960e01b81526001600160a01b03898116600483015260248201879052871690635ac28bf99060440160206040518083038186803b15801561332457600080fd5b505afa158015613338573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061335c91906147fa565b61336690846149b3565b92505b505095945050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000611530836001600160a01b038416613afb565b60008054610100900460ff1615613422578160ff1660011480156133fe5750303b155b61341a5760405162461bcd60e51b81526004016108f7906149cb565b506000919050565b60005460ff8084169116106134495760405162461bcd60e51b81526004016108f7906149cb565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff1661348f5760405162461bcd60e51b81526004016108f790614a19565b611ea4613bee565b6000611530836001600160a01b038416613c1e565b6001600160a01b03811660009081526001830160205260408120541515611530565b60405163ae318c4d60e01b81526000906001600160a01b0384169063ae318c4d906134ff9087908590600401614848565b60206040518083038186803b15801561351757600080fd5b505afa15801561352b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061354f91906147fa565b6040516354a5706f60e01b81526001600160a01b0386811660048301529192506000918516906354a5706f9060240160206040518083038186803b15801561359657600080fd5b505afa1580156135aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135ce91906147fa565b6001600160a01b0385166000818152606b60205260409081902080546501000000000165ff00000000ff1982161790915590516374eb83c160e01b815292935060ff80821693600160281b9092041691906374eb83c1906136359088908b90600401614a64565b600060405180830381600087803b15801561364f57600080fd5b505af1158015613663573d6000803e3d6000fd5b505050507f28b242d231f0362c6d85b9b8f7dfe0350a65dbfda98e750dd4c9aa9bcb63f5f98786888660405161369c9493929190614a9a565b60405180910390a16001600160a01b039095166000908152606b602052604090208054951515600160281b0260ff60281b199215159290921665ff00000000ff1990961695909517179093559392505050565b600080613766836001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561372e57600080fd5b505afa158015613742573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031c91906147dd565b5061ffff1691505060008111613780576000915050611533565b61378a8385612b3a565b613798576000915050611533565b5060019392505050565b60405163ae318c4d60e01b81526000906001600160a01b0385169063ae318c4d906137d39088908590600401614848565b60206040518083038186803b1580156137eb57600080fd5b505afa1580156137ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061382391906147fa565b60405163fc7e286d60e01b81526001600160a01b03878116600483015291925060009186169063fc7e286d9060240160206040518083038186803b15801561386a57600080fd5b505afa15801561387e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138a291906147fa565b6001600160a01b0386166000818152606b60205260409081902080546501000000000165ff00000000ff1982161790915590516374eb83c160e01b815292935060ff80821693600160281b9092041691906374eb83c1906139099088908c90600401614a64565b600060405180830381600087803b15801561392357600080fd5b505af1158015613937573d6000803e3d6000fd5b505050507f7249982a4b91c89507451d210662acd32a485a89541cc4b45c036e61ab021b8e888689866040516139709493929190614a9a565b60405180910390a185841115613a8557600061398c8786614863565b9050600064e8d4a51000866139a184886147be565b6139b09064e8d4a510006147be565b6139ba919061492b565b6139c4919061492b565b90506139d28a8a8984613c6d565b7ffa8d7300586ff156c1dd943ffeb03da352c20d8a536676d2ba78b92e4762fe808a8a6001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015613a2d57600080fd5b505afa158015613a41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a6591906147dd565b8b85604051613a779493929190614a9a565b60405180910390a187955050505b6001600160a01b039096166000908152606b602052604090208054961515600160281b0260ff60281b199215159290921665ff00000000ff199097169690961717909455949350505050565b6000826000018281548110613ae857613ae86148dd565b9060005260206000200154905092915050565b60008181526001830160205260408120548015613be4576000613b1f600183614863565b8554909150600090613b3390600190614863565b9050818114613b98576000866000018281548110613b5357613b536148dd565b9060005260206000200154905080876000018481548110613b7657613b766148dd565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613ba957613ba9614ac4565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050611533565b6000915050611533565b600054610100900460ff16613c155760405162461bcd60e51b81526004016108f790614a19565b611ea433613374565b6000818152600183016020526040812054613c6557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611533565b506000611533565b6000836001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015613ca857600080fd5b505afa158015613cbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ce091906147dd565b9050613d6a833084846001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015613d2157600080fd5b505afa158015613d35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d5991906147dd565b6001600160a01b0316929190613dc8565b604051633c84c56760e21b81526001600160a01b0385169063f213159c90613d9a9084908990879060040161496a565b600060405180830381600087803b158015613db457600080fd5b505af11580156110a3573d6000803e3d6000fd5b6109ae846323b872dd60e01b858585604051602401613de99392919061496a565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526000613e70826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613eed9092919063ffffffff16565b8051909150156130725780806020019051810190613e8e919061494d565b6130725760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108f7565b6060613efc8484600085613f06565b90505b9392505050565b606082471015613f675760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016108f7565b843b613fb55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108f7565b600080866001600160a01b03168587604051613fd19190614b06565b60006040518083038185875af1925050503d806000811461400e576040519150601f19603f3d011682016040523d82523d6000602084013e614013565b606091505b5091509150614023828286614030565b925050505b949350505050565b6060831561403f575081613eff565b82511561404f5782518084602001fd5b8160405162461bcd60e51b81526004016108f79190614b22565b6001600160a01b038116811461203f57600080fd5b60008060006060848603121561409357600080fd5b833561409e81614069565b925060208401356140ae81614069565b929592945050506040919091013590565b803561ffff8116811461346357600080fd5b600080600080608085870312156140e757600080fd5b84356140f281614069565b9350602085013561410281614069565b9250614110604086016140bf565b915061411e606086016140bf565b905092959194509250565b801515811461203f57600080fd5b6000806040838503121561414a57600080fd5b823561415581614069565b9150602083013561416581614129565b809150509250929050565b60008060006040848603121561418557600080fd5b833561419081614069565b9250602084013567ffffffffffffffff808211156141ad57600080fd5b818601915086601f8301126141c157600080fd5b8135818111156141d057600080fd5b8760208285010111156141e257600080fd5b6020830194508093505050509250925092565b6000806040838503121561420857600080fd5b823561421381614069565b9150602083013561416581614069565b60006020828403121561423557600080fd5b8135613eff81614069565b6000806000806080858703121561425657600080fd5b843561426181614069565b9350602085013561427181614069565b925060408501359150606085013561428881614129565b939692955090935050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156142d2576142d2614293565b604052919050565b600067ffffffffffffffff8211156142f4576142f4614293565b5060051b60200190565b600082601f83011261430f57600080fd5b8135602061432461431f836142da565b6142a9565b82815260059290921b8401810191818101908684111561434357600080fd5b8286015b8481101561436c5780356003811061435f5760008081fd5b8352918301918301614347565b509695505050505050565b6000806040838503121561438a57600080fd5b823567ffffffffffffffff808211156143a257600080fd5b818501915085601f8301126143b657600080fd5b813560206143c661431f836142da565b82815260059290921b840181019181810190898411156143e557600080fd5b948201945b8386101561440c5785356143fd81614069565b825294820194908201906143ea565b9650508601359250508082111561442257600080fd5b5061442f858286016142fe565b9150509250929050565b60006020828403121561444b57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6003811061448657634e487b7160e01b600052602160045260246000fd5b9052565b602081016115338284614468565b600060c082840312156144aa57600080fd5b60405160c0810181811067ffffffffffffffff821117156144cd576144cd614293565b60405290508082356144de81614129565b815260208301356144ee81614129565b6020820152604083013561450181614129565b6040820152606083013561451481614129565b6060820152608083013561452781614129565b608082015260a083013561453a81614129565b60a0919091015292915050565b60008060e0838503121561455a57600080fd5b823561456581614069565b91506128008460208501614498565b60006020828403121561458657600080fd5b8135613eff81614129565b60008083601f8401126145a357600080fd5b50813567ffffffffffffffff8111156145bb57600080fd5b6020830191508360208260051b85010111156145d657600080fd5b9250929050565b6000806000806000606086880312156145f557600080fd5b853567ffffffffffffffff8082111561460d57600080fd5b61461989838a01614591565b9097509550602088013591508082111561463257600080fd5b5061463f88828901614591565b909450925050604086013561465381614069565b809150509295509295909350565b60008060006060848603121561467657600080fd5b833561468181614069565b925060208401356140ae81614129565b600060e08201905060018060a01b03841682528251151560208301526020830151151560408301526040830151151560608301526060830151151560808301526080830151151560a083015260a0830151151560c08301529392505050565b600060c0828403121561470257600080fd5b6115308383614498565b6000806000806060858703121561472257600080fd5b843561472d81614069565b9350602085013567ffffffffffffffff81111561474957600080fd5b61475587828801614591565b909450925050604085013561428881614069565b634e487b7160e01b600052601160045260246000fd5b60008083128015600160ff1b85018412161561479d5761479d614769565b6001600160ff1b03840183138116156147b8576147b8614769565b50500390565b60008160001904831182151516156147d8576147d8614769565b500290565b6000602082840312156147ef57600080fd5b8151613eff81614069565b60006020828403121561480c57600080fd5b5051919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6001600160a01b039290921682521515602082015260400190565b60008282101561487557614875614769565b500390565b6001600160a01b0385811682528416602082015260606040820181905281018290526000828460808401376000608084840101526080601f19601f850116830101905095945050505050565b6000816148d5576148d5614769565b506000190190565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b038316815260408101613eff6020830184614468565b600060001982141561492457614924614769565b5060010190565b60008261494857634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561495f57600080fd5b8151613eff81614129565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03848116825283166020820152606081016140286040830184614468565b600082198211156149c6576149c6614769565b500190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6001600160a01b03928316815291166020820152606060408201819052600490820152633078303160e01b608082015260a00190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b634e487b7160e01b600052603160045260246000fd5b60005b83811015614af5578181015183820152602001614add565b838111156109ae5750506000910152565b60008251614b18818460208701614ada565b9190910192915050565b6020815260008251806020840152614b41816040850160208701614ada565b601f01601f1916919091016040019291505056fea264697066735822122003de67d8513a6ef7d7d76b2acad80ba416abb2caa826aca526b6d80ee84893fd64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102955760003560e01c80636c45967711610167578063ace664b4116100ce578063dc95785a11610087578063dc95785a14610748578063e26ec36a14610785578063f2fde38b14610798578063f610c281146107ab578063f7d22673146107be578063f9009ee8146107d157600080fd5b8063ace664b4146106bb578063b66d927a146106ce578063c4c00487146106e1578063c5321fb0146106f4578063c8b268b314610707578063d2786d451461071a57600080fd5b80638da5cb5b116101205780638da5cb5b1461063157806390a83dc21461064257806396721753146106555780639c045f3e14610668578063aaace60114610689578063ab27197e146106b257600080fd5b80636c459677146105bf578063715018a6146105d257806379bf27b1146105da5780637e7cd29e146105ed5780638129fc1c1461060057806383d576501461060857600080fd5b806339ebf8231161020b57806359e27fc4116101c457806359e27fc4146104b75780635f49202f146104ca578063624b5ed4146105565780636657fc67146105695780636989725c146105995780636af2482d146105ac57600080fd5b806339ebf823146103df5780633dcecc2f1461042057806346b45be71461047557806354ab62691461048857806358a6be1c1461049b5780635911a1ae146104a457600080fd5b8063149088161161025d57806314908816146102fb5780631acd8c9c1461030e5780631e516051146103505780632b9553ce146103835780632ea874821461039657806338b20421146103b757600080fd5b8063054c13441461029a57806309ba9b47146102af5780630d37a290146102c25780630ebdee19146102d55780630eccd2c9146102e8575b600080fd5b6102ad6102a836600461407e565b6107de565b005b6102ad6102bd36600461407e565b6109b4565b6102ad6102d03660046140d1565b610c2b565b6102ad6102e3366004614137565b610dcb565b6102ad6102f6366004614170565b610e57565b6102ad6103093660046141f5565b6110ae565b61032161031c366004614223565b61118d565b604080516001600160a01b03909416845261ffff92831660208501529116908201526060015b60405180910390f35b61037361035e366004614223565b606f6020526000908152604090205460ff1681565b6040519015158152602001610347565b6102ad61039136600461407e565b6111e0565b6103a96103a4366004614137565b6114e2565b604051908152602001610347565b6103ca6103c5366004614240565b611539565b60408051928352602083019190915201610347565b6104086103ed366004614223565b6066602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610347565b61043361042e3660046141f5565b611595565b604080516001600160a01b03978816815261ffff96871660208201529486169085015294909116606083015282166080820152911660a082015260c001610347565b6102ad610483366004614377565b6115c8565b6102ad610496366004614223565b61186d565b6103a9606d5481565b6103a96104b23660046141f5565b611924565b6102ad6104c536600461407e565b611a32565b61051d6104d8366004614223565b606b6020526000908152604090205460ff80821691610100810482169162010000820481169163010000008104821691600160201b8204811691600160281b90041686565b604080519615158752941515602087015292151593850193909352151560608401529015156080830152151560a082015260c001610347565b6102ad610564366004614439565b611b7c565b61058c610577366004614223565b60706020526000908152604090205460ff1681565b604051610347919061448a565b6102ad6105a736600461407e565b611be2565b6102ad6105ba366004614547565b611cfd565b6102ad6105cd366004614574565b611e05565b6102ad611e70565b6102ad6105e8366004614137565b611ea6565b6102ad6105fb3660046145dd565b611f3f565b6102ad611fb8565b610408610616366004614223565b6068602052600090815260409020546001600160a01b031681565b6033546001600160a01b0316610408565b6102ad61065036600461407e565b612042565b6103ca610663366004614240565b6121b2565b61067b610676366004614661565b6121c1565b604051610347929190614691565b610408610697366004614223565b6065602052600090815260409020546001600160a01b031681565b6103a9606c5481565b6102ad6106c93660046146f0565b6122c8565b6103736106dc366004614223565b61238e565b6102ad6106ef366004614137565b6123c5565b6102ad610702366004614377565b6124a6565b6102ad610715366004614439565b61276d565b61058c6107283660046141f5565b607160209081526000928352604080842090915290825290205460ff1681565b60725461051d9060ff80821691610100810482169162010000820481169163010000008104821691600160201b8204811691600160281b90041686565b6103ca610793366004614137565b6127cc565b6102ad6107a6366004614223565b612809565b6102ad6107b936600461470c565b6128a1565b6103ca6107cc366004614137565b612b14565b606e546103739060ff1681565b6001600160a01b0382166000908152606b6020908152604091829020825160c081018452905460ff8082161515835261010082048116151593830193909352620100008104831615159382019390935263010000008304821615156060820152600160201b8304821615156080820152600160281b90920416151560a0820152336001600160a01b031661087a6033546001600160a01b031690565b6001600160a01b031614806108bb575060725460ff1680156108a4575060725462010000900460ff165b80156108ae575080515b80156108bb575080604001515b6109005760405162461bcd60e51b815260206004820152601160248201527015d2551211149055d7d11254d050931151607a1b60448201526064015b60405180910390fd5b61090a8385612b3a565b156109ae5760006109278585610920868561477f565b6001612c29565b6001600160a01b0386166000908152606a60205260408120919250906109509087906001612e74565b9050606d548161096091906147be565b61096c612710846147be565b10156109ab5760405162461bcd60e51b815260206004820152600e60248201526d1313d5d7d0d3d31310551154905360921b60448201526064016108f7565b50505b50505050565b6001600160a01b0382166000908152606b6020908152604091829020825160c081018452905460ff8082161515835261010082048116151593830193909352620100008104831615159382019390935263010000008304821615156060820152600160201b8304821615156080820152600160281b90920416151560a0820152336001600160a01b0316610a506033546001600160a01b031690565b6001600160a01b03161480610a90575060725460ff168015610a795750607254610100900460ff165b8015610a83575080515b8015610a90575080602001515b610acf5760405162461bcd60e51b815260206004820152601060248201526f4445504f534954455f44495341424c4560801b60448201526064016108f7565b6000836001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015610b0a57600080fd5b505afa158015610b1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4291906147dd565b90506000610b4f8261118d565b50506040516341976e0960e01b81526001600160a01b0384811660048301529192506000918316906341976e099060240160206040518083038186803b158015610b9857600080fd5b505afa158015610bac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd091906147fa565b905060008111610c225760405162461bcd60e51b815260206004820152601b60248201527f4e4f545f4143435045545f5a45524f5f50524943455f544f4b454e000000000060448201526064016108f7565b50505050505050565b6033546001600160a01b03163314610c555760405162461bcd60e51b81526004016108f790614813565b6001600160a01b038316610c9c5760405162461bcd60e51b815260206004820152600e60248201526d494e56414c49445f4f5241434c4560901b60448201526064016108f7565b6127108261ffff161115610ce45760405162461bcd60e51b815260206004820152600f60248201526e444953434f55545f544f4f5f42494760881b60448201526064016108f7565b6127108161ffff161015610d2e5760405162461bcd60e51b81526020600482015260116024820152701414915352555357d513d3d7d4d3505313607a1b60448201526064016108f7565b6001600160a01b0384811660008181526067602090815260409182902080549488166001600160b01b03199095168517600160a01b61ffff8981169182029290921761ffff60b01b1916600160b01b92891692830217835584519687529286019290925291840152917f7cb71f764a6240297d887d23473a61cf07ba9d34ccfbdd326620a5b896cd33469060600160405180910390a25050505050565b6033546001600160a01b03163314610df55760405162461bcd60e51b81526004016108f790614813565b6001600160a01b0382166000908152606f602052604090819020805460ff1916831515179055517fd8949265082223b72749a7863e551684ee0df9a0c8ece536b9f14686b68425fc90610e4b9084908490614848565b60405180910390a15050565b606e54339060ff1680610e8257506001600160a01b0381166000908152606f602052604090205460ff165b610ec35760405162461bcd60e51b815260206004820152601260248201527124a72b20a624a22fa624a8aaa4a220aa27a960711b60448201526064016108f7565b610ecc8461238e565b610f0c5760405162461bcd60e51b81526020600482015260116024820152700869e989882a88aa48298be8a9c9eaa8e9607b1b60448201526064016108f7565b6001600160a01b038416600090815260696020526040812090610f2e82612f43565b9050805b8015610fe2576000610f4f610f48600184614863565b8590612f4d565b9050610f5b8189612b3a565b15610fcf57610f6a8882612f59565b6040516374eb83c160e01b81526001600160a01b038216906374eb83c190610f9c9088908c908c908c9060040161487a565b600060405180830381600087803b158015610fb657600080fd5b505af1158015610fca573d6000803e3d6000fd5b505050505b5080610fda816148c6565b915050610f32565b506001600160a01b0386166000908152606a602052604081209061100582612f43565b9050805b80156110a357600061101f610f48600184614863565b905061102b8a82612f59565b6040516374eb83c160e01b81526001600160a01b038216906374eb83c19061105d908a908e908e908e9060040161487a565b600060405180830381600087803b15801561107757600080fd5b505af115801561108b573d6000803e3d6000fd5b5050505050808061109b906148c6565b915050611009565b505050505050505050565b6033546001600160a01b031633146110d85760405162461bcd60e51b81526004016108f790614813565b6001600160a01b03811661111f5760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa22a27a5a2a760911b60448201526064016108f7565b6001600160a01b0382811660008181526065602090815260409182902080548686166001600160a01b0319821681179092558351951680865291850152927fd5c0cad2a6b3eea813a7bdf548752779e26da201508f6e807ec5ec3d65d020d6910160405180910390a2505050565b6001600160a01b039081166000908152606760209081526040918290208251606081018452905493841680825261ffff600160a01b86048116938301849052600160b01b90950490941692018290529192565b6001600160a01b0382166000908152606b6020908152604091829020825160c081018452905460ff8082161515835261010082048116151593830193909352620100008104831615159382019390935263010000008304821615156060820152600160201b8304821615156080820152600160281b90920416151560a0820152336001600160a01b031661127c6033546001600160a01b031690565b6001600160a01b031614806112be575060725460ff1680156112a757506072546301000000900460ff165b80156112b1575080515b80156112be575080606001515b6112fc5760405162461bcd60e51b815260206004820152600f60248201526e1093d49493d5d7d11254d050931151608a1b60448201526064016108f7565b6000836001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561133757600080fd5b505afa15801561134b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061136f91906147dd565b9050600061137c8261118d565b50506040516341976e0960e01b81526001600160a01b0384811660048301529192506000918316906341976e099060240160206040518083038186803b1580156113c557600080fd5b505afa1580156113d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113fd91906147fa565b90506000811161144f5760405162461bcd60e51b815260206004820152601b60248201527f4e4f545f4143435045545f5a45524f5f50524943455f544f4b454e000000000060448201526064016108f7565b600061145c886001613077565b6001600160a01b0389166000908152606a6020526040812091925090611487908a908a8a6001613161565b9050606d548161149791906147be565b6114a3612710846147be565b10156110a35760405162461bcd60e51b815260206004820152600e60248201526d1313d5d7d0d3d31310551154905360921b60448201526064016108f7565b60008161150f576001600160a01b0383166000908152606a6020526040902061150a90612f43565b611530565b6001600160a01b038316600090815260696020526040902061153090612f43565b90505b92915050565b6001600160a01b03841660009081526069602052604081208190611561908790878787613161565b6001600160a01b0387166000908152606a6020526040902090925061158a908790878787613161565b905094509492505050565b6000806000806000806115a78861118d565b919750955093506115b78761118d565b979a96995094975095939492505050565b6033546001600160a01b031633146115f25760405162461bcd60e51b81526004016108f790614813565b81518151808214801561160457508115155b6116405760405162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f504152414d60981b60448201526064016108f7565b60005b8281101561186657600060706000878481518110611663576116636148dd565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16600281111561169b5761169b614452565b146116d85760405162461bcd60e51b815260206004820152600d60248201526c5345545f4f4e4c595f4f4e434560981b60448201526064016108f7565b60028482815181106116ec576116ec6148dd565b6020026020010151600281111561170557611705614452565b148061173b57506001848281518110611720576117206148dd565b6020026020010151600281111561173957611739614452565b145b6117775760405162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f56414c554560981b60448201526064016108f7565b838181518110611789576117896148dd565b6020026020010151607060008784815181106117a7576117a76148dd565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191660018360028111156117e4576117e4614452565b02179055507f05334cade7d5051a457d6cddb92a76a5266e31459f3118a536c99b169beaa0f585828151811061181c5761181c6148dd565b6020026020010151858381518110611836576118366148dd565b602002602001015160405161184c9291906148f3565b60405180910390a18061185e81614910565b915050611643565b5050505050565b6033546001600160a01b031633146118975760405162461bcd60e51b81526004016108f790614813565b6001600160a01b03808216600090815260666020908152604080832054815163429c145b60e11b8152915194169363853828b693600480840194938390030190829087803b1580156118e857600080fd5b505af11580156118fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192091906147fa565b5050565b600080611932846001613077565b6001600160a01b0385166000908152606a602052604081209192509061195b9086906001612e74565b90506000606d546127108461197091906147be565b61197a919061492b565b905081811115611a1d5760006119908383614863565b60405163281aa7fd60e21b815260048101829052600160248201529091506001600160a01b0387169063a06a9ff49060440160206040518083038186803b1580156119da57600080fd5b505afa1580156119ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1291906147fa565b945050505050611533565b60009350505050611533565b50505092915050565b6033546001600160a01b03163314611a5c5760405162461bcd60e51b81526004016108f790614813565b816001600160a01b031663ba58591c6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a9557600080fd5b505afa158015611aa9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611acd919061494d565b611b095760405162461bcd60e51b815260206004820152600d60248201526c1253959053125157d590531555609a1b60448201526064016108f7565b6001600160a01b038084166000818152606860205260409081902080548685166001600160a01b031982161790915590519216917f0ff9c79e47a5eed61bfb093d8315d37efcfa7f6679e507f608289c78941b0e5190611b6e9084908790879061496a565b60405180910390a250505050565b6033546001600160a01b03163314611ba65760405162461bcd60e51b81526004016108f790614813565b606d8190556040518181527f13e612fc69e30b3adcca3cb6573fa94782e94f59261f9b32c96c34b90552b335906020015b60405180910390a150565b6001600160a01b0382166000908152606b6020908152604091829020825160c081018452905460ff8082161515835261010082048116151593830193909352620100008104831615159382019390935263010000008304821615156060820152600160201b8304821615156080820152600160281b90920416151560a0820152336001600160a01b0316611c7e6033546001600160a01b031690565b6001600160a01b03161480611cc0575060725460ff168015611ca95750607254600160201b900460ff165b8015611cb3575080515b8015611cc0575080608001515b6109ae5760405162461bcd60e51b815260206004820152600e60248201526d149154105657d11254d05093115160921b60448201526064016108f7565b6033546001600160a01b03163314611d275760405162461bcd60e51b81526004016108f790614813565b6001600160a01b0382166000908152606b60209081526040918290208351815492850151858501516060870151608088015160a089015161ffff1990971694151561ff00191694909417610100931515939093029290921763ffff00001916620100009115159190910263ff0000001916176301000000911515919091021765ffff000000001916600160201b9115159190910260ff60281b191617600160281b92151592909202919091179055517f0f86f36676a78407d88aa894e600955aca44b6b9eaff4740c81228e2fa75d62890610e4b9084908490614691565b6033546001600160a01b03163314611e2f5760405162461bcd60e51b81526004016108f790614813565b606e805460ff19168215159081179091556040519081527fcfa23450328fe03391963dc3e54c19ebeecb28fd8a628b495b71ab8534d61c3290602001611bd7565b6033546001600160a01b03163314611e9a5760405162461bcd60e51b81526004016108f790614813565b611ea46000613374565b565b336000818152606b602052604090205460ff16611ef65760405162461bcd60e51b815260206004820152600e60248201526d159055531517d11254d05093115160921b60448201526064016108f7565b600082611f1a576001600160a01b0384166000908152606a60205260409020611f33565b6001600160a01b03841660009081526069602052604090205b905061186681836133c6565b6033546001600160a01b03163314611f695760405162461bcd60e51b81526004016108f790614813565b60005b848110156109ab57611fa6868683818110611f8957611f896148dd565b9050602002016020810190611f9e9190614223565b8585856128a1565b80611fb081614910565b915050611f6c565b6000611fc460016133db565b90508015611fdc576000805461ff0019166101001790555b611fe4613468565b612af8606c556132c8606d55606e805460ff19166001179055801561203f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001611bd7565b50565b6033546001600160a01b0316331461206c5760405162461bcd60e51b81526004016108f790614813565b6001600160a01b0382166120b85760405162461bcd60e51b815260206004820152601360248201527214dd1c985d1959da595cc8111a5cd8589b1959606a1b60448201526064016108f7565b6001600160a01b0380841660009081526066602052604090205416801561214e57806001600160a01b031663853828b66040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561211457600080fd5b505af1158015612128573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061214c91906147fa565b505b6001600160a01b038481166000818152606660205260409081902080546001600160a01b0319169387169390931790925590517fcc7d45f325309ae5b4940b5de638a482be2a51aa3a917326a84f65bcc2f7352390611b6e9084908790879061496a565b60008061156186868686612c29565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a08101829052600084612216576001600160a01b0386166000908152606a6020526040902061222f565b6001600160a01b03861660009081526069602052604090205b905061223b8185612f4d565b6001600160a01b0381166000908152606b6020908152604091829020825160c081018452905460ff8082161515835261010082048116151593830193909352620100008104831615159382019390935263010000008304821615156060820152600160201b8304821615156080820152600160281b90920416151560a08201529097909650945050505050565b6033546001600160a01b031633146122f25760405162461bcd60e51b81526004016108f790614813565b805160728054602084015160408501516060860151608087015160a09097015161ffff1990941695151561ff00191695909517610100921515929092029190911763ffff00001916620100009115159190910263ff0000001916176301000000931515939093029290921765ffff000000001916600160201b9315159390930260ff60281b191692909217600160281b91151591909102179055565b600080600061239e8460016127cc565b91509150606c54816123b091906147be565b6123bc612710846147be565b10949350505050565b336000818152606b602052604090205460ff166124155760405162461bcd60e51b815260206004820152600e60248201526d159055531517d11254d05093115160921b60448201526064016108f7565b600082612439576001600160a01b0384166000908152606a60205260409020612452565b6001600160a01b03841660009081526069602052604090205b9050601461245f82612f43565b1061249c5760405162461bcd60e51b815260206004820152600d60248201526c0949e929cbea89e9ebe9aaa869609b1b60448201526064016108f7565b6118668183613497565b8151815133919080821480156124bb57508115155b6124f75760405162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f504152414d60981b60448201526064016108f7565b60005b828110156126a3576002858281518110612516576125166148dd565b6020026020010151600281111561252f5761252f614452565b14806125655750600185828151811061254a5761254a6148dd565b6020026020010151600281111561256357612563614452565b145b6125a15760405162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f56414c554560981b60448201526064016108f7565b8481815181106125b3576125b36148dd565b6020026020010151607160008884815181106125d1576125d16148dd565b6020908102919091018101516001600160a01b039081168352828201939093526040918201600090812093891681529290529020805460ff1916600183600281111561261f5761261f614452565b02179055507f65d4763abdc1e045affaf50aed5fc2a1f4f466da45ee41ea701e0ad5029ff0b0868281518110612657576126576148dd565b602002602001015185878481518110612672576126726148dd565b60200260200101516040516126899392919061498e565b60405180910390a18061269b81614910565b9150506124fa565b5060006126b1846001613077565b6001600160a01b0385166000908152606a60205260408120919250906126da9086906001612e74565b90506000606d54612710846126ef91906147be565b6126f9919061492b565b9050606d548261270991906147be565b612715612710856147be565b10156127635760405162461bcd60e51b815260206004820152601d60248201527f53455456414c49445641554c543a204c4f575f434f4c4c41544552414c00000060448201526064016108f7565b5050505050505050565b6033546001600160a01b031633146127975760405162461bcd60e51b81526004016108f790614813565b606c8190556040518181527f138a4f81e91d7ed8109625537819aae162d22b1e4b5f73e1919d1f6e21bfbb4b90602001611bd7565b6000806127d98484613077565b6001600160a01b0385166000908152606a6020526040902090925061280090859085612e74565b90509250929050565b6033546001600160a01b031633146128335760405162461bcd60e51b81526004016108f790614813565b6001600160a01b0381166128985760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016108f7565b61203f81613374565b6033546001600160a01b031633146128cb5760405162461bcd60e51b81526004016108f790614813565b6000805b838110156129da5760008585838181106128eb576128eb6148dd565b90506020020160208101906129009190614223565b6001600160a01b0388166000908152606a6020526040902090915061292590826134ac565b61292f57506129c8565b600061293c8883876134ce565b6001600160a01b0389166000908152606a6020526040902090915061296190836134ac565b156129b95760405162461bcd60e51b815260206004820152602260248201527f4e4f5420434f4d504c454c54454c592052455041494544204d494e5420564155604482015261131560f21b60648201526084016108f7565b6129c381856149b3565b935050505b806129d281614910565b9150506128cf565b50600081116129e957506109ae565b604080516001600160a01b0387168152602081018390527fd23fb662f88318206dd1d4f312c79cc8f6cad84d6791f16248ea48286d1f75fd910160405180910390a16001600160a01b038516600090815260696020526040812090612a4d82612f43565b90505b600083118015612a605750600081115b15612ac3576000612a7c612a75600184614863565b8490612f4d565b9050612a8888826136ef565b612a925750612ab1565b6000612aa0898387896137a2565b9050612aac8186614863565b945050505b80612abb816148c6565b915050612a50565b5081156109ab57604080516001600160a01b0388168152602081018490527fc649b38f60b165ec8c5a2f8f05cabe175203f0b0d407c4e071ed9ae73935a106910160405180910390a1505050505050565b6001600160a01b038216600090815260696020526040812081906127d990859085612e74565b6001600160a01b03808316600090815260716020908152604080832093851683529290529081205460ff168180826002811115612b7957612b79614452565b14612b845781612ba1565b6001600160a01b03851660009081526070602052604090205460ff165b90506000816002811115612bb757612bb7614452565b1415612bf95760405162461bcd60e51b81526020600482015260116024820152701590531251159055531517d55392539255607a1b60448201526064016108f7565b6002816002811115612c0d57612c0d614452565b1415612c1e57600192505050611533565b506000949350505050565b6001600160a01b038416600090815260696020526040812081612c4b82612f43565b90506000805b82811015612dc3576000612c658583612f4d565b9050612c71818b612b3a565b15612db057806001600160a01b0316896001600160a01b03161415612d2557604051635ac28bf960e01b81526001600160a01b038b81166004830152602482018a9052821690635ac28bf99060440160206040518083038186803b158015612cd857600080fd5b505afa158015612cec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d1091906147fa565b612d1a90876149b3565b955060019250612db0565b60405163ae318c4d60e01b81526001600160a01b0382169063ae318c4d90612d53908d908b90600401614848565b60206040518083038186803b158015612d6b57600080fd5b505afa158015612d7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612da391906147fa565b612dad90876149b3565b95505b5080612dbb81614910565b915050612c51565b5080158015612dd75750612dd78789612b3a565b15612e6957604051635ac28bf960e01b81526001600160a01b03898116600483015260248201889052881690635ac28bf99060440160206040518083038186803b158015612e2457600080fd5b505afa158015612e38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e5c91906147fa565b612e6690856149b3565b93505b505050949350505050565b600080612e8084612f43565b905060005b81811015612f3a576000612e998683612f4d565b60405163ae318c4d60e01b81529091506001600160a01b0382169063ae318c4d90612eca908a908990600401614848565b60206040518083038186803b158015612ee257600080fd5b505afa158015612ef6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f1a91906147fa565b612f2490856149b3565b9350508080612f3290614910565b915050612e85565b50509392505050565b6000611533825490565b60006115308383613ad1565b6001600160a01b0381166000908152606b6020908152604091829020825160c081018452905460ff8082161515835261010082048116151593830193909352620100008104831615159382019390935263010000008304821615156060820152600160201b8304821615156080820152600160281b90920416151560a0820152336001600160a01b0316612ff56033546001600160a01b031690565b6001600160a01b03161480613037575060725460ff1680156130205750607254600160281b900460ff165b801561302a575080515b801561303757508060a001515b6130725760405162461bcd60e51b815260206004820152600c60248201526b13125457d11254d05093115160a21b60448201526064016108f7565b505050565b6001600160a01b03821660009081526069602052604081208161309982612f43565b905060005b81811015611a295760006130b28483612f4d565b90506130be8188612b3a565b1561314e5760405163ae318c4d60e01b81526001600160a01b0382169063ae318c4d906130f1908a908a90600401614848565b60206040518083038186803b15801561310957600080fd5b505afa15801561311d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061314191906147fa565b61314b90866149b3565b94505b508061315981614910565b91505061309e565b60008061316d86612f43565b90506000805b828110156132d65760006131878983612f4d565b9050806001600160a01b0316886001600160a01b0316141561323857604051635ac28bf960e01b81526001600160a01b038b8116600483015260248201899052821690635ac28bf99060440160206040518083038186803b1580156131eb57600080fd5b505afa1580156131ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061322391906147fa565b61322d90866149b3565b9450600192506132c3565b60405163ae318c4d60e01b81526001600160a01b0382169063ae318c4d90613266908d908a90600401614848565b60206040518083038186803b15801561327e57600080fd5b505afa158015613292573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132b691906147fa565b6132c090866149b3565b94505b50806132ce81614910565b915050613173565b508061336957604051635ac28bf960e01b81526001600160a01b03898116600483015260248201879052871690635ac28bf99060440160206040518083038186803b15801561332457600080fd5b505afa158015613338573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061335c91906147fa565b61336690846149b3565b92505b505095945050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000611530836001600160a01b038416613afb565b60008054610100900460ff1615613422578160ff1660011480156133fe5750303b155b61341a5760405162461bcd60e51b81526004016108f7906149cb565b506000919050565b60005460ff8084169116106134495760405162461bcd60e51b81526004016108f7906149cb565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff1661348f5760405162461bcd60e51b81526004016108f790614a19565b611ea4613bee565b6000611530836001600160a01b038416613c1e565b6001600160a01b03811660009081526001830160205260408120541515611530565b60405163ae318c4d60e01b81526000906001600160a01b0384169063ae318c4d906134ff9087908590600401614848565b60206040518083038186803b15801561351757600080fd5b505afa15801561352b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061354f91906147fa565b6040516354a5706f60e01b81526001600160a01b0386811660048301529192506000918516906354a5706f9060240160206040518083038186803b15801561359657600080fd5b505afa1580156135aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135ce91906147fa565b6001600160a01b0385166000818152606b60205260409081902080546501000000000165ff00000000ff1982161790915590516374eb83c160e01b815292935060ff80821693600160281b9092041691906374eb83c1906136359088908b90600401614a64565b600060405180830381600087803b15801561364f57600080fd5b505af1158015613663573d6000803e3d6000fd5b505050507f28b242d231f0362c6d85b9b8f7dfe0350a65dbfda98e750dd4c9aa9bcb63f5f98786888660405161369c9493929190614a9a565b60405180910390a16001600160a01b039095166000908152606b602052604090208054951515600160281b0260ff60281b199215159290921665ff00000000ff1990961695909517179093559392505050565b600080613766836001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561372e57600080fd5b505afa158015613742573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031c91906147dd565b5061ffff1691505060008111613780576000915050611533565b61378a8385612b3a565b613798576000915050611533565b5060019392505050565b60405163ae318c4d60e01b81526000906001600160a01b0385169063ae318c4d906137d39088908590600401614848565b60206040518083038186803b1580156137eb57600080fd5b505afa1580156137ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061382391906147fa565b60405163fc7e286d60e01b81526001600160a01b03878116600483015291925060009186169063fc7e286d9060240160206040518083038186803b15801561386a57600080fd5b505afa15801561387e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138a291906147fa565b6001600160a01b0386166000818152606b60205260409081902080546501000000000165ff00000000ff1982161790915590516374eb83c160e01b815292935060ff80821693600160281b9092041691906374eb83c1906139099088908c90600401614a64565b600060405180830381600087803b15801561392357600080fd5b505af1158015613937573d6000803e3d6000fd5b505050507f7249982a4b91c89507451d210662acd32a485a89541cc4b45c036e61ab021b8e888689866040516139709493929190614a9a565b60405180910390a185841115613a8557600061398c8786614863565b9050600064e8d4a51000866139a184886147be565b6139b09064e8d4a510006147be565b6139ba919061492b565b6139c4919061492b565b90506139d28a8a8984613c6d565b7ffa8d7300586ff156c1dd943ffeb03da352c20d8a536676d2ba78b92e4762fe808a8a6001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015613a2d57600080fd5b505afa158015613a41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a6591906147dd565b8b85604051613a779493929190614a9a565b60405180910390a187955050505b6001600160a01b039096166000908152606b602052604090208054961515600160281b0260ff60281b199215159290921665ff00000000ff199097169690961717909455949350505050565b6000826000018281548110613ae857613ae86148dd565b9060005260206000200154905092915050565b60008181526001830160205260408120548015613be4576000613b1f600183614863565b8554909150600090613b3390600190614863565b9050818114613b98576000866000018281548110613b5357613b536148dd565b9060005260206000200154905080876000018481548110613b7657613b766148dd565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613ba957613ba9614ac4565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050611533565b6000915050611533565b600054610100900460ff16613c155760405162461bcd60e51b81526004016108f790614a19565b611ea433613374565b6000818152600183016020526040812054613c6557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611533565b506000611533565b6000836001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015613ca857600080fd5b505afa158015613cbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ce091906147dd565b9050613d6a833084846001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015613d2157600080fd5b505afa158015613d35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d5991906147dd565b6001600160a01b0316929190613dc8565b604051633c84c56760e21b81526001600160a01b0385169063f213159c90613d9a9084908990879060040161496a565b600060405180830381600087803b158015613db457600080fd5b505af11580156110a3573d6000803e3d6000fd5b6109ae846323b872dd60e01b858585604051602401613de99392919061496a565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526000613e70826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613eed9092919063ffffffff16565b8051909150156130725780806020019051810190613e8e919061494d565b6130725760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108f7565b6060613efc8484600085613f06565b90505b9392505050565b606082471015613f675760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016108f7565b843b613fb55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108f7565b600080866001600160a01b03168587604051613fd19190614b06565b60006040518083038185875af1925050503d806000811461400e576040519150601f19603f3d011682016040523d82523d6000602084013e614013565b606091505b5091509150614023828286614030565b925050505b949350505050565b6060831561403f575081613eff565b82511561404f5782518084602001fd5b8160405162461bcd60e51b81526004016108f79190614b22565b6001600160a01b038116811461203f57600080fd5b60008060006060848603121561409357600080fd5b833561409e81614069565b925060208401356140ae81614069565b929592945050506040919091013590565b803561ffff8116811461346357600080fd5b600080600080608085870312156140e757600080fd5b84356140f281614069565b9350602085013561410281614069565b9250614110604086016140bf565b915061411e606086016140bf565b905092959194509250565b801515811461203f57600080fd5b6000806040838503121561414a57600080fd5b823561415581614069565b9150602083013561416581614129565b809150509250929050565b60008060006040848603121561418557600080fd5b833561419081614069565b9250602084013567ffffffffffffffff808211156141ad57600080fd5b818601915086601f8301126141c157600080fd5b8135818111156141d057600080fd5b8760208285010111156141e257600080fd5b6020830194508093505050509250925092565b6000806040838503121561420857600080fd5b823561421381614069565b9150602083013561416581614069565b60006020828403121561423557600080fd5b8135613eff81614069565b6000806000806080858703121561425657600080fd5b843561426181614069565b9350602085013561427181614069565b925060408501359150606085013561428881614129565b939692955090935050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156142d2576142d2614293565b604052919050565b600067ffffffffffffffff8211156142f4576142f4614293565b5060051b60200190565b600082601f83011261430f57600080fd5b8135602061432461431f836142da565b6142a9565b82815260059290921b8401810191818101908684111561434357600080fd5b8286015b8481101561436c5780356003811061435f5760008081fd5b8352918301918301614347565b509695505050505050565b6000806040838503121561438a57600080fd5b823567ffffffffffffffff808211156143a257600080fd5b818501915085601f8301126143b657600080fd5b813560206143c661431f836142da565b82815260059290921b840181019181810190898411156143e557600080fd5b948201945b8386101561440c5785356143fd81614069565b825294820194908201906143ea565b9650508601359250508082111561442257600080fd5b5061442f858286016142fe565b9150509250929050565b60006020828403121561444b57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6003811061448657634e487b7160e01b600052602160045260246000fd5b9052565b602081016115338284614468565b600060c082840312156144aa57600080fd5b60405160c0810181811067ffffffffffffffff821117156144cd576144cd614293565b60405290508082356144de81614129565b815260208301356144ee81614129565b6020820152604083013561450181614129565b6040820152606083013561451481614129565b6060820152608083013561452781614129565b608082015260a083013561453a81614129565b60a0919091015292915050565b60008060e0838503121561455a57600080fd5b823561456581614069565b91506128008460208501614498565b60006020828403121561458657600080fd5b8135613eff81614129565b60008083601f8401126145a357600080fd5b50813567ffffffffffffffff8111156145bb57600080fd5b6020830191508360208260051b85010111156145d657600080fd5b9250929050565b6000806000806000606086880312156145f557600080fd5b853567ffffffffffffffff8082111561460d57600080fd5b61461989838a01614591565b9097509550602088013591508082111561463257600080fd5b5061463f88828901614591565b909450925050604086013561465381614069565b809150509295509295909350565b60008060006060848603121561467657600080fd5b833561468181614069565b925060208401356140ae81614129565b600060e08201905060018060a01b03841682528251151560208301526020830151151560408301526040830151151560608301526060830151151560808301526080830151151560a083015260a0830151151560c08301529392505050565b600060c0828403121561470257600080fd5b6115308383614498565b6000806000806060858703121561472257600080fd5b843561472d81614069565b9350602085013567ffffffffffffffff81111561474957600080fd5b61475587828801614591565b909450925050604085013561428881614069565b634e487b7160e01b600052601160045260246000fd5b60008083128015600160ff1b85018412161561479d5761479d614769565b6001600160ff1b03840183138116156147b8576147b8614769565b50500390565b60008160001904831182151516156147d8576147d8614769565b500290565b6000602082840312156147ef57600080fd5b8151613eff81614069565b60006020828403121561480c57600080fd5b5051919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6001600160a01b039290921682521515602082015260400190565b60008282101561487557614875614769565b500390565b6001600160a01b0385811682528416602082015260606040820181905281018290526000828460808401376000608084840101526080601f19601f850116830101905095945050505050565b6000816148d5576148d5614769565b506000190190565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b038316815260408101613eff6020830184614468565b600060001982141561492457614924614769565b5060010190565b60008261494857634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561495f57600080fd5b8151613eff81614129565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03848116825283166020820152606081016140286040830184614468565b600082198211156149c6576149c6614769565b500190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6001600160a01b03928316815291166020820152606060408201819052600490820152633078303160e01b608082015260a00190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b634e487b7160e01b600052603160045260246000fd5b60005b83811015614af5578181015183820152602001614add565b838111156109ae5750506000910152565b60008251614b18818460208701614ada565b9190910192915050565b6020815260008251806020840152614b41816040850160208701614ada565b601f01601f1916919091016040019291505056fea264697066735822122003de67d8513a6ef7d7d76b2acad80ba416abb2caa826aca526b6d80ee84893fd64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "beforeBorrow(address,address,uint256)": {
        "params": {
          "_amount": "loan amount",
          "_user": "borrower",
          "_vault": "address of loan market"
        }
      },
      "beforeDeposit(address,address,uint256)": {
        "params": {
          "_vault": "address of deposit market param  _amount deposit amount"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "userPendingValues(address,address,int256,bool)": {
        "params": {
          "_amount": "the amount of deposits or withdrawals",
          "_dp": "discount or premium",
          "_user": "depositors",
          "_vault": "target vault"
        }
      },
      "userTotalPendingValues(address,address,int256,bool)": {
        "params": {
          "_amount": "the amount of deposits or withdrawals",
          "_dp": "discount or premium",
          "_user": "depositors",
          "_vault": "target vault"
        }
      },
      "userTotalValues(address,bool)": {
        "params": {
          "_dp": "discount or premium",
          "_user": "depositors"
        }
      },
      "userValues(address,bool)": {
        "params": {
          "_dp": "discount or premium",
          "_user": "depositors"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "beforeBorrow(address,address,uint256)": {
        "notice": "Risk control check before borrowing"
      },
      "beforeDeposit(address,address,uint256)": {
        "notice": "Risk control check before deposit param _user depositors"
      },
      "isNeedLiquidate(address)": {
        "notice": "determine whether the borrower needs to be liquidated"
      },
      "maxBorrow(address,address)": {
        "notice": "maximum that a user can borrow from a Vault"
      },
      "userPendingValues(address,address,int256,bool)": {
        "notice": "predict total valid vault value after the user operating vault (i.e., Vault of deposit only counts collateral)"
      },
      "userTotalPendingValues(address,address,int256,bool)": {
        "notice": "predict total vault value after the user operating Vault"
      },
      "userTotalValues(address,bool)": {
        "notice": "Get user total Vault value"
      },
      "userValues(address,bool)": {
        "notice": "Get user total valid Vault value (i.e., Vault of deposit only counts collateral)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 188,
        "contract": "contracts/AppController.sol:AppController",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 191,
        "contract": "contracts/AppController.sol:AppController",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1640,
        "contract": "contracts/AppController.sol:AppController",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 68,
        "contract": "contracts/AppController.sol:AppController",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 180,
        "contract": "contracts/AppController.sol:AppController",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5809,
        "contract": "contracts/AppController.sol:AppController",
        "label": "dyTokens",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 5813,
        "contract": "contracts/AppController.sol:AppController",
        "label": "strategies",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 5825,
        "contract": "contracts/AppController.sol:AppController",
        "label": "valueConfs",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_address,t_struct(ValueConf)5820_storage)"
      },
      {
        "astId": 5830,
        "contract": "contracts/AppController.sol:AppController",
        "label": "dyTokenVaults",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 5835,
        "contract": "contracts/AppController.sol:AppController",
        "label": "userJoinedDepositVaults",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_address,t_struct(AddressSet)5179_storage)"
      },
      {
        "astId": 5840,
        "contract": "contracts/AppController.sol:AppController",
        "label": "userJoinedBorrowVaults",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_struct(AddressSet)5179_storage)"
      },
      {
        "astId": 5858,
        "contract": "contracts/AppController.sol:AppController",
        "label": "vaultStates",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_address,t_struct(VaultState)5853_storage)"
      },
      {
        "astId": 5860,
        "contract": "contracts/AppController.sol:AppController",
        "label": "liquidateRate",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 5862,
        "contract": "contracts/AppController.sol:AppController",
        "label": "collateralRate",
        "offset": 0,
        "slot": "109",
        "type": "t_uint256"
      },
      {
        "astId": 5864,
        "contract": "contracts/AppController.sol:AppController",
        "label": "isOpenLiquidate",
        "offset": 0,
        "slot": "110",
        "type": "t_bool"
      },
      {
        "astId": 5868,
        "contract": "contracts/AppController.sol:AppController",
        "label": "allowedLiquidator",
        "offset": 0,
        "slot": "111",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5874,
        "contract": "contracts/AppController.sol:AppController",
        "label": "validVaults",
        "offset": 0,
        "slot": "112",
        "type": "t_mapping(t_address,t_enum(ValidVault)16620)"
      },
      {
        "astId": 5882,
        "contract": "contracts/AppController.sol:AppController",
        "label": "validVaultsOfUser",
        "offset": 0,
        "slot": "113",
        "type": "t_mapping(t_address,t_mapping(t_address,t_enum(ValidVault)16620))"
      },
      {
        "astId": 5885,
        "contract": "contracts/AppController.sol:AppController",
        "label": "globalVaultState",
        "offset": 0,
        "slot": "114",
        "type": "t_struct(VaultState)5853_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(ValidVault)16620": {
        "encoding": "inplace",
        "label": "enum IController.ValidVault",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_enum(ValidVault)16620)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum IController.ValidVault)",
        "numberOfBytes": "32",
        "value": "t_enum(ValidVault)16620"
      },
      "t_mapping(t_address,t_mapping(t_address,t_enum(ValidVault)16620))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => enum IController.ValidVault))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_enum(ValidVault)16620)"
      },
      "t_mapping(t_address,t_struct(AddressSet)5179_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)5179_storage"
      },
      "t_mapping(t_address,t_struct(ValueConf)5820_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AppController.ValueConf)",
        "numberOfBytes": "32",
        "value": "t_struct(ValueConf)5820_storage"
      },
      "t_mapping(t_address,t_struct(VaultState)5853_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AppController.VaultState)",
        "numberOfBytes": "32",
        "value": "t_struct(VaultState)5853_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)5179_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 5178,
            "contract": "contracts/AppController.sol:AppController",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4878_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)4878_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 4873,
            "contract": "contracts/AppController.sol:AppController",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4877,
            "contract": "contracts/AppController.sol:AppController",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ValueConf)5820_storage": {
        "encoding": "inplace",
        "label": "struct AppController.ValueConf",
        "members": [
          {
            "astId": 5815,
            "contract": "contracts/AppController.sol:AppController",
            "label": "oracle",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5817,
            "contract": "contracts/AppController.sol:AppController",
            "label": "dr",
            "offset": 20,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 5819,
            "contract": "contracts/AppController.sol:AppController",
            "label": "pr",
            "offset": 22,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(VaultState)5853_storage": {
        "encoding": "inplace",
        "label": "struct AppController.VaultState",
        "members": [
          {
            "astId": 5842,
            "contract": "contracts/AppController.sol:AppController",
            "label": "enabled",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5844,
            "contract": "contracts/AppController.sol:AppController",
            "label": "enableDeposit",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5846,
            "contract": "contracts/AppController.sol:AppController",
            "label": "enableWithdraw",
            "offset": 2,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5848,
            "contract": "contracts/AppController.sol:AppController",
            "label": "enableBorrow",
            "offset": 3,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5850,
            "contract": "contracts/AppController.sol:AppController",
            "label": "enableRepay",
            "offset": 4,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5852,
            "contract": "contracts/AppController.sol:AppController",
            "label": "enableLiquidate",
            "offset": 5,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}