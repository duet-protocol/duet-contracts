{
  "version": "3.2",
  "log": [
    {
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "0494caafde7a33d471335bdef8f4e28765819fe6730f09c79ee8a1d778f5ab2b",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "9f9e3d5e566efd34e6b54213508ca36289850d03b404c3d0d53c3830177c950e",
          "withoutMetadata": "7bce2aea0c90474c0d173327b6d945768166acc2900fe80e4bbdd99e6bca8dfc",
          "linkedWithoutMetadata": "7bce2aea0c90474c0d173327b6d945768166acc2900fe80e4bbdd99e6bca8dfc"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "a950d9c6a5eadd720a4d72997e8b230af2808ea7863b2ea81d712183b43f1150",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "19dc5168204fb6e28347fd736d2522ae638881767b3ae907ce74550dbb5dbc8e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "2affa743b89c98d8da9b7b467e982a870d78c4873a043387f63dc8c99e7c436e",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "8c930e3f0a25740f643b65d38fdee43201a1d6bd53bf4c64c8b7cdbff3b972a9",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ICakePool": {
        "src": "@private/shared/3rd/pancake/ICakePool.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalShares()",
          "withdrawFeePeriod()",
          "freeWithdrawFeeUsers(address)",
          "MAX_LOCK_DURATION()",
          "userInfo(address)",
          "deposit(uint256,uint256)",
          "withdrawByAmount(uint256)",
          "calculatePerformanceFee(address)",
          "calculateWithdrawFee(address,uint256)",
          "calculateOverdueFee(address)",
          "withdraw(uint256)",
          "withdrawAll()",
          "getPricePerFullShare()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IPancakePair": {
        "src": "@private/shared/3rd/pancake/IPancakePair.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IBondFarmingPool": {
        "src": "@private/shared/interfaces/ebcake/IBondFarmingPool.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "admin()",
          "amountToShares(uint256)",
          "bond()",
          "bondToken()",
          "claimBonuses()",
          "earnedToDate(address)",
          "initialize(address,address,address)",
          "lastUpdatedPoolAt()",
          "masterChef()",
          "masterChefPid()",
          "paused()",
          "pendingRewardsByShares(uint256)",
          "setAdmin(address)",
          "setMasterChef(address,uint256)",
          "setSiblingPool(address)",
          "sharesToBondAmount(uint256)",
          "siblingPool()",
          "stake(uint256)",
          "stakeForUser(address,uint256)",
          "totalPendingRewards()",
          "totalShares()",
          "underlyingAmount(bool)",
          "unstake(uint256)",
          "unstakeAll()",
          "unstakeByAmount(uint256)",
          "updatePool()",
          "usersInfo(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IBondLPFarmingPool": {
        "src": "@private/shared/interfaces/ebcake/IBondLPFarmingPool.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "ACC_REWARDS_PRECISION()",
          "accRewardPerShare()",
          "admin()",
          "bond()",
          "bondRewardsSuspended()",
          "bondToken()",
          "claimBonuses()",
          "getUserPendingRewards(address)",
          "initialize(address,address,address)",
          "lastUpdatedPoolAt()",
          "lpToken()",
          "masterChef()",
          "masterChefPid()",
          "paused()",
          "setAdmin(address)",
          "setBondRewardsSuspended(bool)",
          "setLpToken(address)",
          "setMasterChef(address,uint256)",
          "setSiblingPool(address)",
          "siblingPool()",
          "stake(uint256)",
          "stakeForUser(address,uint256)",
          "totalLpAmount()",
          "totalPendingRewards()",
          "unstake(uint256)",
          "unstakeAll()",
          "updatePool()",
          "usersInfo(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IBondToken": {
        "src": "@private/shared/interfaces/ebcake/IBondToken.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "allowance(address,address)",
          "approve(address,uint256)",
          "balanceOf(address)",
          "burnFrom(address,uint256)",
          "decimals()",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "mint(address,uint256)",
          "minter()",
          "name()",
          "owner()",
          "renounceOwnership()",
          "setMinter(address)",
          "symbol()",
          "totalSupply()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IExtendableBond": {
        "src": "@private/shared/interfaces/ebcake/IExtendableBond.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PERCENTAGE_FACTOR()",
          "addFeeSpec((string,uint16,address))",
          "admin()",
          "bondFarmingPool()",
          "bondLPFarmingPool()",
          "bondToken()",
          "burnBondToken(uint256)",
          "calculateFeeAmount(uint256)",
          "checkPoints()",
          "convert(uint256)",
          "convertAndStake(uint256)",
          "depositAllToRemote()",
          "depositToRemote(uint256)",
          "emergencyTransferUnderlyingTokens(address)",
          "feeSpecs(uint256)",
          "feeSpecsLength()",
          "initialize(address,address,address)",
          "keeper()",
          "mintBondTokenForRewards(address,uint256)",
          "pause()",
          "paused()",
          "redeem(uint256)",
          "redeemAll()",
          "remoteUnderlyingAmount()",
          "removeFeeSpec(uint256)",
          "setAdmin(address)",
          "setConvertable(bool)",
          "setFarmingPools(address,address)",
          "setFeeSpec(uint256,(string,uint16,address))",
          "setKeeper(address)",
          "setRedeemable(bool)",
          "totalBondTokenAmount()",
          "totalPendingRewards()",
          "totalUnderlyingAmount()",
          "underlyingAmount()",
          "underlyingToken()",
          "unpause()",
          "updateCheckPoints((bool,uint256,uint256,bool,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IMultiRewardsMasterChef": {
        "src": "@private/shared/interfaces/ebcake/IMultiRewardsMasterChef.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "add(uint256,address,address,bool)",
          "addRewardSpec(address,uint256,uint256,uint256)",
          "admin()",
          "deposit(uint256,uint256)",
          "depositForUser(uint256,uint256,address)",
          "emergencyWithdraw(uint256)",
          "getMultiplier(uint256,uint256,uint256)",
          "getRewardSpecsLength()",
          "getUserAmount(uint256,address)",
          "getUserClaimedRewards(uint256,address,uint256)",
          "getUserRewardDebt(uint256,address,uint256)",
          "initialize(address)",
          "massUpdatePools()",
          "migrate(uint256)",
          "migrator()",
          "pendingRewards(uint256,address)",
          "poolInfo(uint256)",
          "poolLength()",
          "poolsRewardsAccRewardsPerShare(uint256,uint256)",
          "previewSetRewardSpec(uint256,uint256,uint256,uint256)",
          "rewardSpecs(uint256)",
          "set(uint256,uint256,bool)",
          "setAdmin(address)",
          "setMigrator(address)",
          "setRewardSpec(uint256,uint256,uint256,uint256)",
          "totalAllocPoint()",
          "updatePool(uint256)",
          "userInfo(uint256,address)",
          "withdraw(uint256,uint256)",
          "withdrawForUser(uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IBondLPPancakeFarmingPool": {
        "src": "@private/shared/interfaces/ebcake/underlyings/pancake/IBondLPPancakeFarmingPool.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "ACC_REWARDS_PRECISION()",
          "accPancakeRewardsPerShares()",
          "accRewardPerShare()",
          "admin()",
          "bond()",
          "bondRewardsSuspended()",
          "bondToken()",
          "cakeToken()",
          "claimBonuses()",
          "getUserPendingRewards(address)",
          "initPancake(address,address,uint256)",
          "initialize(address,address,address)",
          "lastUpdatedPoolAt()",
          "lpToken()",
          "masterChef()",
          "masterChefPid()",
          "pancakeMasterChef()",
          "pancakeMasterChefPid()",
          "pancakeUsersInfo(address)",
          "paused()",
          "remoteEnable()",
          "remoteEnabled()",
          "setAdmin(address)",
          "setBondRewardsSuspended(bool)",
          "setLpToken(address)",
          "setMasterChef(address,uint256)",
          "setSiblingPool(address)",
          "siblingPool()",
          "stake(uint256)",
          "stakeForUser(address,uint256)",
          "totalLpAmount()",
          "totalPendingRewards()",
          "unstake(uint256)",
          "unstakeAll()",
          "updatePool()",
          "usersInfo(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IExtendableBondedCake": {
        "src": "@private/shared/interfaces/ebcake/underlyings/pancake/IExtendableBondedCake.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PERCENTAGE_FACTOR()",
          "addFeeSpec((string,uint16,address))",
          "admin()",
          "bondFarmingPool()",
          "bondLPFarmingPool()",
          "bondToken()",
          "burnBondToken(uint256)",
          "cakePool()",
          "calculateFeeAmount(uint256)",
          "checkPoints()",
          "convert(uint256)",
          "convertAndStake(uint256)",
          "depositAllToRemote()",
          "depositToRemote(uint256)",
          "emergencyTransferUnderlyingTokens(address)",
          "extendPancakeLockDuration(bool)",
          "feeSpecs(uint256)",
          "feeSpecsLength()",
          "initialize(address,address,address)",
          "keeper()",
          "mintBondTokenForRewards(address,uint256)",
          "pancakeUserInfo()",
          "pause()",
          "paused()",
          "redeem(uint256)",
          "redeemAll()",
          "remoteUnderlyingAmount()",
          "removeFeeSpec(uint256)",
          "secondsToPancakeLockExtend(bool)",
          "setAdmin(address)",
          "setCakePool(address)",
          "setConvertable(bool)",
          "setFarmingPools(address,address)",
          "setFeeSpec(uint256,(string,uint16,address))",
          "setKeeper(address)",
          "setRedeemable(bool)",
          "totalBondTokenAmount()",
          "totalPendingRewards()",
          "totalUnderlyingAmount()",
          "underlyingAmount()",
          "underlyingToken()",
          "unpause()",
          "updateCheckPoints((bool,uint256,uint256,bool,uint256,uint256,uint256))",
          "withdrawAllCakesFromPancake(bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Adminable": {
        "src": "@private/shared/libs/Adminable.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAdmin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "admin",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Adminable",
              "src": "@private/shared/libs/Adminable.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IBEP20": {
        "src": "@private/shared/libs/IBEP20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeBEP20": {
        "src": "@private/shared/libs/SafeBEP20.sol:17",
        "version": {
          "withMetadata": "b4bb8c9276e159622b4ca2cb2cf0638e58f635115efe0469a14dfd3bd3e61689",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IMasterChef": {
        "src": "@private/shared/mocks/pancake/MasterChefV2.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "enterStaking(uint256)",
          "leaveStaking(uint256)",
          "pendingCake(uint256,address)",
          "userInfo(uint256,address)",
          "emergencyWithdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "MasterChefV2": {
        "src": "@private/shared/mocks/pancake/MasterChefV2.sol:36",
        "version": {
          "withMetadata": "6378f7e330acaefd6aa663615832ce68d6183139ac70cbfc5f239fc1965c6729",
          "withoutMetadata": "54b775c60092ec2c1e23e064cc309027fb824eb1c52c713283104141d8486852",
          "linkedWithoutMetadata": "54b775c60092ec2c1e23e064cc309027fb824eb1c52c713283104141d8486852"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20"
        ],
        "methods": [
          "(address,address,uint256,address)",
          "init(address)",
          "poolLength()",
          "add(uint256,address,bool,bool)",
          "set(uint256,uint256,bool)",
          "pendingCake(uint256,address)",
          "massUpdatePools()",
          "cakePerBlock(bool)",
          "cakePerBlockToBurn()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "harvestFromMasterChef()",
          "emergencyWithdraw(uint256)",
          "burnCake(bool)",
          "updateCakeRate(uint256,uint256,uint256,bool)",
          "updateBurnAdmin(address)",
          "updateWhiteList(address,bool)",
          "updateBoostContract(address)",
          "updateBoostMultiplier(address,uint256,uint256)",
          "getBoostMultiplier(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MasterChefV2",
            "src": "@private/shared/mocks/pancake/MasterChefV2.sol:143"
          },
          {
            "kind": "state-variable-immutable",
            "name": "MASTER_CHEF",
            "src": "@private/shared/mocks/pancake/MasterChefV2.sol:80"
          },
          {
            "kind": "state-variable-immutable",
            "name": "CAKE",
            "src": "@private/shared/mocks/pancake/MasterChefV2.sol:82"
          },
          {
            "kind": "state-variable-immutable",
            "name": "MASTER_PID",
            "src": "@private/shared/mocks/pancake/MasterChefV2.sol:100"
          },
          {
            "kind": "state-variable-assignment",
            "name": "cakeRateToBurn",
            "src": "@private/shared/mocks/pancake/MasterChefV2.sol:117"
          },
          {
            "kind": "state-variable-assignment",
            "name": "cakeRateToRegularFarm",
            "src": "@private/shared/mocks/pancake/MasterChefV2.sol:119"
          },
          {
            "kind": "state-variable-assignment",
            "name": "cakeRateToSpecialFarm",
            "src": "@private/shared/mocks/pancake/MasterChefV2.sol:121"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "burnAdmin",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "MasterChefV2",
              "src": "@private/shared/mocks/pancake/MasterChefV2.sol:85"
            },
            {
              "label": "boostContract",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "MasterChefV2",
              "src": "@private/shared/mocks/pancake/MasterChefV2.sol:87"
            },
            {
              "label": "poolInfo",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_struct(PoolInfo)4383_storage)dyn_storage",
              "contract": "MasterChefV2",
              "src": "@private/shared/mocks/pancake/MasterChefV2.sol:90"
            },
            {
              "label": "lpToken",
              "offset": 0,
              "slot": "5",
              "type": "t_array(t_contract(IBEP20)4075)dyn_storage",
              "contract": "MasterChefV2",
              "src": "@private/shared/mocks/pancake/MasterChefV2.sol:92"
            },
            {
              "label": "userInfo",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4372_storage))",
              "contract": "MasterChefV2",
              "src": "@private/shared/mocks/pancake/MasterChefV2.sol:95"
            },
            {
              "label": "whiteList",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "MasterChefV2",
              "src": "@private/shared/mocks/pancake/MasterChefV2.sol:97"
            },
            {
              "label": "totalRegularAllocPoint",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "MasterChefV2",
              "src": "@private/shared/mocks/pancake/MasterChefV2.sol:102"
            },
            {
              "label": "totalSpecialAllocPoint",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "MasterChefV2",
              "src": "@private/shared/mocks/pancake/MasterChefV2.sol:104"
            },
            {
              "label": "cakeRateToBurn",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "MasterChefV2",
              "src": "@private/shared/mocks/pancake/MasterChefV2.sol:117"
            },
            {
              "label": "cakeRateToRegularFarm",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "MasterChefV2",
              "src": "@private/shared/mocks/pancake/MasterChefV2.sol:119"
            },
            {
              "label": "cakeRateToSpecialFarm",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "MasterChefV2",
              "src": "@private/shared/mocks/pancake/MasterChefV2.sol:121"
            },
            {
              "label": "lastBurnedBlock",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "MasterChefV2",
              "src": "@private/shared/mocks/pancake/MasterChefV2.sol:123"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(IBEP20)4075)dyn_storage": {
              "label": "contract IBEP20[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(PoolInfo)4383_storage)dyn_storage": {
              "label": "struct MasterChefV2.PoolInfo[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IBEP20)4075": {
              "label": "contract IBEP20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UserInfo)4372_storage)": {
              "label": "mapping(address => struct MasterChefV2.UserInfo)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4372_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChefV2.UserInfo))",
              "numberOfBytes": "32"
            },
            "t_struct(PoolInfo)4383_storage": {
              "label": "struct MasterChefV2.PoolInfo",
              "members": [
                {
                  "label": "accCakePerShare",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "totalBoostedShare",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "isRegular",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(UserInfo)4372_storage": {
              "label": "struct MasterChefV2.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "boostMultiplier",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ExtendableBondReader": {
        "src": "contracts/ExtendableBondReader.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "extendableBondPackagePublicInfo(address)",
          "extendableBondSingleStakePackageUserInfo(address)",
          "extendableBondLpStakePackageUserInfo(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ExtendableBondRegistry": {
        "src": "contracts/ExtendableBondRegistry.sol:11",
        "version": {
          "withMetadata": "4c60e7f50fc1f5960e9b566ac1a7f2a61254edeff71ff702eedcb952df492e04",
          "withoutMetadata": "d2f235e93e8792b017595cdd0cfb01524e0721c9ee4cd35b17e068438df287c0",
          "linkedWithoutMetadata": "d2f235e93e8792b017595cdd0cfb01524e0721c9ee4cd35b17e068438df287c0"
        },
        "inherit": [
          "Adminable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "groupNames()",
          "groupedAddresses(string)",
          "createGroup(string)",
          "destroyGroup(string)",
          "appendGroupItem(string,address)",
          "removeGroupItem(string,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "admin",
              "offset": 2,
              "slot": "0",
              "type": "t_address",
              "contract": "Adminable",
              "src": "@private/shared/libs/Adminable.sol:7"
            },
            {
              "label": "groups",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_string_storage)dyn_storage",
              "contract": "ExtendableBondRegistry",
              "src": "contracts/ExtendableBondRegistry.sol:13"
            },
            {
              "label": "groupedExtendableBonds",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_string_memory_ptr,t_array(t_address)dyn_storage)",
              "contract": "ExtendableBondRegistry",
              "src": "contracts/ExtendableBondRegistry.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_string_memory_ptr,t_array(t_address)dyn_storage)": {
              "label": "mapping(string => address[])",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ExtendableBondedReaderCake": {
        "src": "contracts/ExtendableBondedReaderCake.sol:21",
        "version": {
          "withMetadata": "e46ce0c1c30fe75c19b7f73f7cdb19694330327556cef9c1fcb9d5fb0acd1a68",
          "withoutMetadata": "ec495ea2b57f6472a8cace1399e3ada335e68655baa8b33973fc6453cf7c0525",
          "linkedWithoutMetadata": "ec495ea2b57f6472a8cace1399e3ada335e68655baa8b33973fc6453cf7c0525"
        },
        "inherit": [
          "Adminable",
          "Initializable",
          "ExtendableBondReader"
        ],
        "libraries": [
          "Math"
        ],
        "methods": [
          "initialize(address,address,address,address,address,address)",
          "updateReferences(address,address,address,address,address)",
          "addressBook(address)",
          "extendableBondGroupInfo(string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "admin",
              "offset": 2,
              "slot": "0",
              "type": "t_address",
              "contract": "Adminable",
              "src": "@private/shared/libs/Adminable.sol:7"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(ExtendableBondRegistry)7180",
              "contract": "ExtendableBondedReaderCake",
              "src": "contracts/ExtendableBondedReaderCake.sol:48"
            },
            {
              "label": "pancakePool",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(ICakePool)2240",
              "contract": "ExtendableBondedReaderCake",
              "src": "contracts/ExtendableBondedReaderCake.sol:49"
            },
            {
              "label": "pancakeMasterChef",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(MasterChefV2)6030",
              "contract": "ExtendableBondedReaderCake",
              "src": "contracts/ExtendableBondedReaderCake.sol:50"
            },
            {
              "label": "pairTokenAddress__CAKE_BUSD",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IPancakePair)2482",
              "contract": "ExtendableBondedReaderCake",
              "src": "contracts/ExtendableBondedReaderCake.sol:51"
            },
            {
              "label": "pairTokenAddress__DUET_anyUSD",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IPancakePair)2482",
              "contract": "ExtendableBondedReaderCake",
              "src": "contracts/ExtendableBondedReaderCake.sol:52"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ExtendableBondRegistry)7180": {
              "label": "contract ExtendableBondRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(ICakePool)2240": {
              "label": "contract ICakePool",
              "numberOfBytes": "20"
            },
            "t_contract(IPancakePair)2482": {
              "label": "contract IPancakePair",
              "numberOfBytes": "20"
            },
            "t_contract(MasterChefV2)6030": {
              "label": "contract MasterChefV2",
              "numberOfBytes": "20"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      }
    },
    {
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:57",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:9",
        "version": {
          "withMetadata": "a432f7caf44ab02f2a682a6a93fb715da95e454b162fb802962d612e73225c18",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35",
        "version": {
          "withMetadata": "3fc97e5ca5ee04731b7e31ed4bd33fb5120fc78ae7d5580ea1c7101a0cebf344",
          "withoutMetadata": "7bce2aea0c90474c0d173327b6d945768166acc2900fe80e4bbdd99e6bca8dfc",
          "linkedWithoutMetadata": "7bce2aea0c90474c0d173327b6d945768166acc2900fe80e4bbdd99e6bca8dfc"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:54"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_balances",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:36"
            },
            {
              "label": "_allowances",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:38"
            },
            {
              "label": "_totalSupply",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:40"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "4",
              "type": "t_string_storage",
              "contract": "ERC20",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:43"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:13",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "a814e66295b0f0ac258081aa7753fc9decc3c5795e43e796768a4149dedf14af",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:191"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "db47272bfef0f72442aa3f5c91f27b94dc904cf366c679b9bb8a63d1057bd54a",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "599ef4e6d41b51f4e93e4c8b991edb872a3106cb7f65d143f53523919f263304",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/utils/math/SafeMath.sol:16",
        "version": {
          "withMetadata": "835d8aded6a6819bbb8fb805b92065d1e945a9aefa5a9edcd28e9d365b97aa54",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ICakePool": {
        "src": "@private/shared/3rd/pancake/ICakePool.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalShares()",
          "withdrawFeePeriod()",
          "freeWithdrawFeeUsers(address)",
          "MAX_LOCK_DURATION()",
          "userInfo(address)",
          "deposit(uint256,uint256)",
          "withdrawByAmount(uint256)",
          "calculatePerformanceFee(address)",
          "calculateWithdrawFee(address,uint256)",
          "calculateOverdueFee(address)",
          "withdraw(uint256)",
          "withdrawAll()",
          "getPricePerFullShare()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IPancakePair": {
        "src": "@private/shared/3rd/pancake/IPancakePair.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "DOMAIN_SEPARATOR()",
          "PERMIT_TYPEHASH()",
          "nonces(address)",
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "MINIMUM_LIQUIDITY()",
          "factory()",
          "token0()",
          "token1()",
          "getReserves()",
          "price0CumulativeLast()",
          "price1CumulativeLast()",
          "kLast()",
          "mint(address)",
          "burn(address)",
          "swap(uint256,uint256,address,bytes)",
          "skim(address)",
          "sync()",
          "initialize(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IBondFarmingPool": {
        "src": "@private/shared/interfaces/ebcake/IBondFarmingPool.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "admin()",
          "amountToShares(uint256)",
          "bond()",
          "bondToken()",
          "claimBonuses()",
          "earnedToDate(address)",
          "initialize(address,address,address)",
          "lastUpdatedPoolAt()",
          "masterChef()",
          "masterChefPid()",
          "paused()",
          "pendingRewardsByShares(uint256)",
          "setAdmin(address)",
          "setMasterChef(address,uint256)",
          "setSiblingPool(address)",
          "sharesToBondAmount(uint256)",
          "siblingPool()",
          "stake(uint256)",
          "stakeForUser(address,uint256)",
          "totalPendingRewards()",
          "totalShares()",
          "underlyingAmount(bool)",
          "unstake(uint256)",
          "unstakeAll()",
          "unstakeByAmount(uint256)",
          "updatePool()",
          "usersInfo(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IBondLPFarmingPool": {
        "src": "@private/shared/interfaces/ebcake/IBondLPFarmingPool.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "ACC_REWARDS_PRECISION()",
          "accRewardPerShare()",
          "admin()",
          "bond()",
          "bondRewardsSuspended()",
          "bondToken()",
          "claimBonuses()",
          "getUserPendingRewards(address)",
          "initialize(address,address,address)",
          "lastUpdatedPoolAt()",
          "lpToken()",
          "masterChef()",
          "masterChefPid()",
          "paused()",
          "setAdmin(address)",
          "setBondRewardsSuspended(bool)",
          "setLpToken(address)",
          "setMasterChef(address,uint256)",
          "setSiblingPool(address)",
          "siblingPool()",
          "stake(uint256)",
          "stakeForUser(address,uint256)",
          "totalLpAmount()",
          "totalPendingRewards()",
          "unstake(uint256)",
          "unstakeAll()",
          "updatePool()",
          "usersInfo(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IBondToken": {
        "src": "@private/shared/interfaces/ebcake/IBondToken.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "allowance(address,address)",
          "approve(address,uint256)",
          "balanceOf(address)",
          "burnFrom(address,uint256)",
          "decimals()",
          "decreaseAllowance(address,uint256)",
          "increaseAllowance(address,uint256)",
          "mint(address,uint256)",
          "minter()",
          "name()",
          "owner()",
          "renounceOwnership()",
          "setMinter(address)",
          "symbol()",
          "totalSupply()",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IExtendableBond": {
        "src": "@private/shared/interfaces/ebcake/IExtendableBond.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PERCENTAGE_FACTOR()",
          "addFeeSpec((string,uint16,address))",
          "admin()",
          "bondFarmingPool()",
          "bondLPFarmingPool()",
          "bondToken()",
          "burnBondToken(uint256)",
          "calculateFeeAmount(uint256)",
          "checkPoints()",
          "convert(uint256)",
          "convertAndStake(uint256)",
          "depositAllToRemote()",
          "depositToRemote(uint256)",
          "emergencyTransferUnderlyingTokens(address)",
          "feeSpecs(uint256)",
          "feeSpecsLength()",
          "initialize(address,address,address)",
          "keeper()",
          "mintBondTokenForRewards(address,uint256)",
          "pause()",
          "paused()",
          "redeem(uint256)",
          "redeemAll()",
          "remoteUnderlyingAmount()",
          "removeFeeSpec(uint256)",
          "setAdmin(address)",
          "setConvertable(bool)",
          "setFarmingPools(address,address)",
          "setFeeSpec(uint256,(string,uint16,address))",
          "setKeeper(address)",
          "setRedeemable(bool)",
          "totalBondTokenAmount()",
          "totalPendingRewards()",
          "totalUnderlyingAmount()",
          "underlyingAmount()",
          "underlyingToken()",
          "unpause()",
          "updateCheckPoints((bool,uint256,uint256,bool,uint256,uint256,uint256))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IMultiRewardsMasterChef": {
        "src": "@private/shared/interfaces/ebcake/IMultiRewardsMasterChef.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "add(uint256,address,address,bool)",
          "addRewardSpec(address,uint256,uint256,uint256)",
          "admin()",
          "deposit(uint256,uint256)",
          "depositForUser(uint256,uint256,address)",
          "emergencyWithdraw(uint256)",
          "getMultiplier(uint256,uint256,uint256)",
          "getRewardSpecsLength()",
          "getUserAmount(uint256,address)",
          "getUserClaimedRewards(uint256,address,uint256)",
          "getUserRewardDebt(uint256,address,uint256)",
          "initialize(address)",
          "massUpdatePools()",
          "migrate(uint256)",
          "migrator()",
          "pendingRewards(uint256,address)",
          "poolInfo(uint256)",
          "poolLength()",
          "poolsRewardsAccRewardsPerShare(uint256,uint256)",
          "previewSetRewardSpec(uint256,uint256,uint256,uint256)",
          "rewardSpecs(uint256)",
          "set(uint256,uint256,bool)",
          "setAdmin(address)",
          "setMigrator(address)",
          "setRewardSpec(uint256,uint256,uint256,uint256)",
          "totalAllocPoint()",
          "updatePool(uint256)",
          "userInfo(uint256,address)",
          "withdraw(uint256,uint256)",
          "withdrawForUser(uint256,uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IBondLPPancakeFarmingPool": {
        "src": "@private/shared/interfaces/ebcake/underlyings/pancake/IBondLPPancakeFarmingPool.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "ACC_REWARDS_PRECISION()",
          "accPancakeRewardsPerShares()",
          "accRewardPerShare()",
          "admin()",
          "bond()",
          "bondRewardsSuspended()",
          "bondToken()",
          "cakeToken()",
          "claimBonuses()",
          "getUserPendingRewards(address)",
          "initPancake(address,address,uint256)",
          "initialize(address,address,address)",
          "lastUpdatedPoolAt()",
          "lpToken()",
          "masterChef()",
          "masterChefPid()",
          "pancakeMasterChef()",
          "pancakeMasterChefPid()",
          "pancakeUsersInfo(address)",
          "paused()",
          "remoteEnable()",
          "remoteEnabled()",
          "setAdmin(address)",
          "setBondRewardsSuspended(bool)",
          "setLpToken(address)",
          "setMasterChef(address,uint256)",
          "setSiblingPool(address)",
          "siblingPool()",
          "stake(uint256)",
          "stakeForUser(address,uint256)",
          "totalLpAmount()",
          "totalPendingRewards()",
          "unstake(uint256)",
          "unstakeAll()",
          "updatePool()",
          "usersInfo(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IExtendableBondedCake": {
        "src": "@private/shared/interfaces/ebcake/underlyings/pancake/IExtendableBondedCake.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "PERCENTAGE_FACTOR()",
          "addFeeSpec((string,uint16,address))",
          "admin()",
          "bondFarmingPool()",
          "bondLPFarmingPool()",
          "bondToken()",
          "burnBondToken(uint256)",
          "cakePool()",
          "calculateFeeAmount(uint256)",
          "checkPoints()",
          "convert(uint256)",
          "convertAndStake(uint256)",
          "depositAllToRemote()",
          "depositToRemote(uint256)",
          "emergencyTransferUnderlyingTokens(address)",
          "extendPancakeLockDuration(bool)",
          "feeSpecs(uint256)",
          "feeSpecsLength()",
          "initialize(address,address,address)",
          "keeper()",
          "mintBondTokenForRewards(address,uint256)",
          "pancakeUserInfo()",
          "pause()",
          "paused()",
          "redeem(uint256)",
          "redeemAll()",
          "remoteUnderlyingAmount()",
          "removeFeeSpec(uint256)",
          "secondsToPancakeLockExtend(bool)",
          "setAdmin(address)",
          "setCakePool(address)",
          "setConvertable(bool)",
          "setFarmingPools(address,address)",
          "setFeeSpec(uint256,(string,uint16,address))",
          "setKeeper(address)",
          "setRedeemable(bool)",
          "totalBondTokenAmount()",
          "totalPendingRewards()",
          "totalUnderlyingAmount()",
          "underlyingAmount()",
          "underlyingToken()",
          "unpause()",
          "updateCheckPoints((bool,uint256,uint256,bool,uint256,uint256,uint256))",
          "withdrawAllCakesFromPancake(bool)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "Adminable": {
        "src": "@private/shared/libs/Adminable.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setAdmin(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "admin",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Adminable",
              "src": "@private/shared/libs/Adminable.sol:7"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "IBEP20": {
        "src": "@private/shared/libs/IBEP20.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "decimals()",
          "symbol()",
          "name()",
          "getOwner()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "SafeBEP20": {
        "src": "@private/shared/libs/SafeBEP20.sol:17",
        "version": {
          "withMetadata": "b36015f58c692acbb2dcac42d77f844ad21dcf938c4aafff3fd957a50dc75583",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "IMasterChef": {
        "src": "@private/shared/mocks/pancake/MasterChefV2.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "enterStaking(uint256)",
          "leaveStaking(uint256)",
          "pendingCake(uint256,address)",
          "userInfo(uint256,address)",
          "emergencyWithdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "MasterChefV2": {
        "src": "@private/shared/mocks/pancake/MasterChefV2.sol:36",
        "version": {
          "withMetadata": "39f5bd675bb07bef5030c6b9697868680524e475aad8e252b09ba28be313f69e",
          "withoutMetadata": "41ce9324072952133b508cd418988a102930ba5d433610f8e21428758627b352",
          "linkedWithoutMetadata": "41ce9324072952133b508cd418988a102930ba5d433610f8e21428758627b352"
        },
        "inherit": [
          "ReentrancyGuard",
          "Ownable",
          "Context"
        ],
        "libraries": [
          "SafeMath",
          "SafeBEP20",
          "console",
          "Strings"
        ],
        "methods": [
          "(address,address,uint256,address)",
          "init(address)",
          "poolLength()",
          "add(uint256,address,bool,bool)",
          "set(uint256,uint256,bool)",
          "pendingCake(uint256,address)",
          "massUpdatePools()",
          "cakePerBlock(bool)",
          "cakePerBlockToBurn()",
          "updatePool(uint256)",
          "deposit(uint256,uint256)",
          "withdraw(uint256,uint256)",
          "harvestFromMasterChef()",
          "emergencyWithdraw(uint256)",
          "burnCake(bool)",
          "updateCakeRate(uint256,uint256,uint256,bool)",
          "updateBurnAdmin(address)",
          "updateWhiteList(address,bool)",
          "updateBoostContract(address)",
          "updateBoostMultiplier(address,uint256,uint256)",
          "getBoostMultiplier(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MasterChefV2",
            "src": "@private/shared/mocks/pancake/MasterChefV2.sol:143"
          },
          {
            "kind": "state-variable-immutable",
            "name": "MASTER_CHEF",
            "src": "@private/shared/mocks/pancake/MasterChefV2.sol:80"
          },
          {
            "kind": "state-variable-immutable",
            "name": "CAKE",
            "src": "@private/shared/mocks/pancake/MasterChefV2.sol:82"
          },
          {
            "kind": "state-variable-immutable",
            "name": "MASTER_PID",
            "src": "@private/shared/mocks/pancake/MasterChefV2.sol:100"
          },
          {
            "kind": "state-variable-assignment",
            "name": "cakeRateToBurn",
            "src": "@private/shared/mocks/pancake/MasterChefV2.sol:117"
          },
          {
            "kind": "state-variable-assignment",
            "name": "cakeRateToRegularFarm",
            "src": "@private/shared/mocks/pancake/MasterChefV2.sol:119"
          },
          {
            "kind": "state-variable-assignment",
            "name": "cakeRateToSpecialFarm",
            "src": "@private/shared/mocks/pancake/MasterChefV2.sol:121"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/security/ReentrancyGuard.sol:37"
            },
            {
              "label": "burnAdmin",
              "offset": 0,
              "slot": "2",
              "type": "t_address",
              "contract": "MasterChefV2",
              "src": "@private/shared/mocks/pancake/MasterChefV2.sol:85"
            },
            {
              "label": "boostContract",
              "offset": 0,
              "slot": "3",
              "type": "t_address",
              "contract": "MasterChefV2",
              "src": "@private/shared/mocks/pancake/MasterChefV2.sol:87"
            },
            {
              "label": "poolInfo",
              "offset": 0,
              "slot": "4",
              "type": "t_array(t_struct(PoolInfo)4384_storage)dyn_storage",
              "contract": "MasterChefV2",
              "src": "@private/shared/mocks/pancake/MasterChefV2.sol:90"
            },
            {
              "label": "lpToken",
              "offset": 0,
              "slot": "5",
              "type": "t_array(t_contract(IBEP20)4075)dyn_storage",
              "contract": "MasterChefV2",
              "src": "@private/shared/mocks/pancake/MasterChefV2.sol:92"
            },
            {
              "label": "userInfo",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4373_storage))",
              "contract": "MasterChefV2",
              "src": "@private/shared/mocks/pancake/MasterChefV2.sol:95"
            },
            {
              "label": "whiteList",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_bool)",
              "contract": "MasterChefV2",
              "src": "@private/shared/mocks/pancake/MasterChefV2.sol:97"
            },
            {
              "label": "totalRegularAllocPoint",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "MasterChefV2",
              "src": "@private/shared/mocks/pancake/MasterChefV2.sol:102"
            },
            {
              "label": "totalSpecialAllocPoint",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "MasterChefV2",
              "src": "@private/shared/mocks/pancake/MasterChefV2.sol:104"
            },
            {
              "label": "cakeRateToBurn",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "MasterChefV2",
              "src": "@private/shared/mocks/pancake/MasterChefV2.sol:117"
            },
            {
              "label": "cakeRateToRegularFarm",
              "offset": 0,
              "slot": "11",
              "type": "t_uint256",
              "contract": "MasterChefV2",
              "src": "@private/shared/mocks/pancake/MasterChefV2.sol:119"
            },
            {
              "label": "cakeRateToSpecialFarm",
              "offset": 0,
              "slot": "12",
              "type": "t_uint256",
              "contract": "MasterChefV2",
              "src": "@private/shared/mocks/pancake/MasterChefV2.sol:121"
            },
            {
              "label": "lastBurnedBlock",
              "offset": 0,
              "slot": "13",
              "type": "t_uint256",
              "contract": "MasterChefV2",
              "src": "@private/shared/mocks/pancake/MasterChefV2.sol:123"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_contract(IBEP20)4075)dyn_storage": {
              "label": "contract IBEP20[]",
              "numberOfBytes": "32"
            },
            "t_array(t_struct(PoolInfo)4384_storage)dyn_storage": {
              "label": "struct MasterChefV2.PoolInfo[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(IBEP20)4075": {
              "label": "contract IBEP20",
              "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_struct(UserInfo)4373_storage)": {
              "label": "mapping(address => struct MasterChefV2.UserInfo)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4373_storage))": {
              "label": "mapping(uint256 => mapping(address => struct MasterChefV2.UserInfo))",
              "numberOfBytes": "32"
            },
            "t_struct(PoolInfo)4384_storage": {
              "label": "struct MasterChefV2.PoolInfo",
              "members": [
                {
                  "label": "accCakePerShare",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "lastRewardBlock",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "allocPoint",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                },
                {
                  "label": "totalBoostedShare",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "isRegular",
                  "type": "t_bool",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(UserInfo)4373_storage": {
              "label": "struct MasterChefV2.UserInfo",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "rewardDebt",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "boostMultiplier",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "2"
                }
              ],
              "numberOfBytes": "96"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ExtendableBondReader": {
        "src": "contracts/ExtendableBondReader.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "extendableBondPackagePublicInfo(address)",
          "extendableBondSingleStakePackageUserInfo(address)",
          "extendableBondLpStakePackageUserInfo(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      },
      "ExtendableBondRegistry": {
        "src": "contracts/ExtendableBondRegistry.sol:11",
        "version": {
          "withMetadata": "084c9300e7be724d969b9f650ed093cd3b81430ca0c5e79090cccf9de46ec5ea",
          "withoutMetadata": "d2f235e93e8792b017595cdd0cfb01524e0721c9ee4cd35b17e068438df287c0",
          "linkedWithoutMetadata": "d2f235e93e8792b017595cdd0cfb01524e0721c9ee4cd35b17e068438df287c0"
        },
        "inherit": [
          "Adminable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address)",
          "groupNames()",
          "groupedAddresses(string)",
          "createGroup(string)",
          "destroyGroup(string)",
          "appendGroupItem(string,address)",
          "removeGroupItem(string,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "admin",
              "offset": 2,
              "slot": "0",
              "type": "t_address",
              "contract": "Adminable",
              "src": "@private/shared/libs/Adminable.sol:7"
            },
            {
              "label": "groups",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_string_storage)dyn_storage",
              "contract": "ExtendableBondRegistry",
              "src": "contracts/ExtendableBondRegistry.sol:13"
            },
            {
              "label": "groupedExtendableBonds",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_string_memory_ptr,t_array(t_address)dyn_storage)",
              "contract": "ExtendableBondRegistry",
              "src": "contracts/ExtendableBondRegistry.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]",
              "numberOfBytes": "32"
            },
            "t_array(t_string_storage)dyn_storage": {
              "label": "string[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_string_memory_ptr,t_array(t_address)dyn_storage)": {
              "label": "mapping(string => address[])",
              "numberOfBytes": "32"
            },
            "t_string_memory_ptr": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "ExtendableBondedReaderCake": {
        "src": "contracts/ExtendableBondedReaderCake.sol:21",
        "version": {
          "withMetadata": "e12826cfcea08df7e09b048ae1b9fff77964e21019a7476f09e2a43472ce73cc",
          "withoutMetadata": "ec495ea2b57f6472a8cace1399e3ada335e68655baa8b33973fc6453cf7c0525",
          "linkedWithoutMetadata": "ec495ea2b57f6472a8cace1399e3ada335e68655baa8b33973fc6453cf7c0525"
        },
        "inherit": [
          "Adminable",
          "Initializable",
          "ExtendableBondReader"
        ],
        "libraries": [
          "Math"
        ],
        "methods": [
          "initialize(address,address,address,address,address,address)",
          "updateReferences(address,address,address,address,address)",
          "addressBook(address)",
          "extendableBondGroupInfo(string)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_initialized",
              "offset": 0,
              "slot": "0",
              "type": "t_uint8",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
              "retypedFrom": "bool"
            },
            {
              "label": "_initializing",
              "offset": 1,
              "slot": "0",
              "type": "t_bool",
              "contract": "Initializable",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
            },
            {
              "label": "admin",
              "offset": 2,
              "slot": "0",
              "type": "t_address",
              "contract": "Adminable",
              "src": "@private/shared/libs/Adminable.sol:7"
            },
            {
              "label": "registry",
              "offset": 0,
              "slot": "1",
              "type": "t_contract(ExtendableBondRegistry)7211",
              "contract": "ExtendableBondedReaderCake",
              "src": "contracts/ExtendableBondedReaderCake.sol:48"
            },
            {
              "label": "pancakePool",
              "offset": 0,
              "slot": "2",
              "type": "t_contract(ICakePool)2240",
              "contract": "ExtendableBondedReaderCake",
              "src": "contracts/ExtendableBondedReaderCake.sol:49"
            },
            {
              "label": "pancakeMasterChef",
              "offset": 0,
              "slot": "3",
              "type": "t_contract(MasterChefV2)6061",
              "contract": "ExtendableBondedReaderCake",
              "src": "contracts/ExtendableBondedReaderCake.sol:50"
            },
            {
              "label": "pairTokenAddress__CAKE_BUSD",
              "offset": 0,
              "slot": "4",
              "type": "t_contract(IPancakePair)2482",
              "contract": "ExtendableBondedReaderCake",
              "src": "contracts/ExtendableBondedReaderCake.sol:51"
            },
            {
              "label": "pairTokenAddress__DUET_anyUSD",
              "offset": 0,
              "slot": "5",
              "type": "t_contract(IPancakePair)2482",
              "contract": "ExtendableBondedReaderCake",
              "src": "contracts/ExtendableBondedReaderCake.sol:52"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_contract(ExtendableBondRegistry)7211": {
              "label": "contract ExtendableBondRegistry",
              "numberOfBytes": "20"
            },
            "t_contract(ICakePool)2240": {
              "label": "contract ICakePool",
              "numberOfBytes": "20"
            },
            "t_contract(IPancakePair)2482": {
              "label": "contract IPancakePair",
              "numberOfBytes": "20"
            },
            "t_contract(MasterChefV2)6061": {
              "label": "contract MasterChefV2",
              "numberOfBytes": "20"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            }
          },
          "layoutVersion": "1.1",
          "flat": true
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "51055be82676c34077130f42c26e2c34d3d52f29e9327fa17b0f4608b9a21ca8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1",
          "flat": false
        }
      }
    }
  ]
}