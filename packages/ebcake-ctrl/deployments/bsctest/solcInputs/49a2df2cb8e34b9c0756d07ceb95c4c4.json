{
  "language": "Solidity",
  "sources": {
    "contracts/ExtendableBondedReaderCake.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nimport \"@private/shared/libs/Adminable.sol\";\nimport \"@private/shared/3rd/pancake/IPancakePair.sol\";\nimport \"@private/shared/3rd/pancake/ICakePool.sol\";\nimport \"@private/shared/mocks/pancake/MasterChefV2.sol\";\n\nimport \"@private/shared/interfaces/ebcake/IExtendableBond.sol\";\nimport \"@private/shared/interfaces/ebcake/underlyings/pancake/IExtendableBondedCake.sol\";\nimport \"@private/shared/interfaces/ebcake/underlyings/pancake/IBondLPPancakeFarmingPool.sol\";\n\nimport \"./ExtendableBondReader.sol\";\nimport \"./ExtendableBondRegistry.sol\";\n\n\ncontract ExtendableBondedReaderCake is ExtendableBondReader, Initializable, Adminable {\n    using Math for uint256;\n\n    uint constant WEI_PER_EHTER = 1e18;\n    uint constant PANCAKE_BOOST_WEIGHT = 2e13;\n    uint constant PANCAKE_DURATION_FACTOR = 365 * 24 * 60 * 60;\n    uint constant PANCAKE_PRECISION_FACTOR = 1e12;\n    uint constant PANCAKE_CAKE_POOL_ID = 0;\n\n    struct ExtendableBondGroupInfo {\n        uint256 allEbStacked;\n        uint256 ebCommonPriceAsUsd;\n        uint256 duetSideAPR;\n        uint256 underlyingSideAPR;\n    }\n\n    struct AddressBook {\n      address underlyingToken;\n      address bondToken;\n      address lpToken;\n      address bondFarmingPool;\n      address bondLpFarmingPool;\n      uint256 bondFarmingPoolId;\n      uint256 bondLpFarmingPoolId;\n      address pancakePool;\n    }\n\n    ExtendableBondRegistry public registry;\n    ICakePool public pancakePool;\n    MasterChefV2 public pancakeMasterChef;\n    IPancakePair public pairTokenAddress__CAKE_BUSD;\n    IPancakePair public pairTokenAddress__DUET_anyUSD;\n\n    function initialize(\n      address admin_,\n      address registry_,\n      address pancakePool_,\n      address pancakeMasterChef_,\n      address pairTokenAddress__CAKE_BUSD_,\n      address pairTokenAddress__DUET_anyUSD_\n    ) public initializer {\n      require(admin_ != address(0), \"Cant set admin to zero address\");\n      _setAdmin(admin_);\n      updateReferences(registry_, pancakePool_, pancakeMasterChef_, pairTokenAddress__CAKE_BUSD_, pairTokenAddress__DUET_anyUSD_);\n    }\n\n    function updateReferences(\n      address registry_,\n      address pancakePool_,\n      address pancakeMasterChef_,\n      address pairTokenAddress__CAKE_BUSD_,\n      address pairTokenAddress__DUET_anyUSD_\n    ) public onlyAdmin {\n      require(registry_ != address(0), \"Cant set Registry to zero address\");\n      registry = ExtendableBondRegistry(registry_);\n      require(pancakePool_ != address(0), \"Cant set PancakePool to zero address\");\n      pancakePool = ICakePool(pancakePool_);\n      require(pancakeMasterChef_ != address(0), \"Cant set PancakeMasterChef to zero address\");\n      pancakeMasterChef = MasterChefV2(pancakeMasterChef_);\n      require(pairTokenAddress__CAKE_BUSD_ != address(0), \"Cant set PairTokenAddress__CAKE_BUSD to zero address\");\n      pairTokenAddress__CAKE_BUSD = IPancakePair(pairTokenAddress__CAKE_BUSD_);\n      require(pairTokenAddress__DUET_anyUSD_ != address(0), \"Cant set pairTokenAddress__DUET_anyUSD to zero address\");\n      pairTokenAddress__DUET_anyUSD = IPancakePair(pairTokenAddress__DUET_anyUSD_);\n    }\n\n\n    function addressBook(IExtendableBondedCake eb_) view external returns (AddressBook memory book) {\n      IBondFarmingPool bondFarmingPool = IBondFarmingPool(eb_.bondFarmingPool());\n      IBondLPPancakeFarmingPool bondLpFarmingPool = IBondLPPancakeFarmingPool(eb_.bondLPFarmingPool());\n\n      book.underlyingToken = eb_.underlyingToken();\n      book.bondToken = eb_.bondToken();\n      book.lpToken = bondLpFarmingPool.lpToken();\n      book.bondFarmingPool = eb_.bondFarmingPool();\n      book.bondLpFarmingPool = eb_.bondLPFarmingPool();\n      book.bondFarmingPoolId = bondFarmingPool.masterChefPid();\n      book.bondLpFarmingPoolId = bondLpFarmingPool.masterChefPid();\n      book.pancakePool = eb_.cakePool();\n    }\n\n    // -------------\n\n    function extendableBondGroupInfo(string calldata groupName_) view external returns (ExtendableBondGroupInfo memory) {\n        uint256 allEbStacked;\n        uint256 sumCakePrices;\n        address[] memory addresses = registry.groupedAddresses(groupName_);\n        uint256 maxDuetSideAPR;\n        for (uint256 i; i < addresses.length; i++) {\n            address ebAddress = addresses[i];\n            IExtendableBond eb = IExtendableBond(ebAddress);\n            allEbStacked += eb.totalUnderlyingAmount();\n            sumCakePrices += _unsafely_getUnderlyingPriceAsUsd(eb);\n            uint256 underlyingAPY = _getUnderlyingAPY(eb);\n            uint256 extraMaxSideAPR = _getSingleStake_bDuetAPR(eb).max(_getLpStake_bDuetAPR(eb));\n            maxDuetSideAPR = maxDuetSideAPR.max(underlyingAPY + extraMaxSideAPR);\n        }\n        uint256 cakeCommonPrice = addresses.length > 0 ? sumCakePrices / addresses.length : 0;\n        uint256 underlyingSideAPR = _getPancakeSyrupAPR();\n\n        ExtendableBondGroupInfo memory ebGroupInfo = ExtendableBondGroupInfo({\n            allEbStacked: allEbStacked,\n            ebCommonPriceAsUsd: cakeCommonPrice,\n            duetSideAPR: maxDuetSideAPR,\n            underlyingSideAPR: underlyingSideAPR\n        });\n        return ebGroupInfo;\n    }\n\n    // -------------\n\n    /**\n     * Estimates token price by multi-fetching data from DEX.\n     * There are some issues like time-lag and precision problems.\n     * It's OK to do estimation but not for trading basis.\n     */\n    function _unsafely_getDuetPriceAsUsd(IExtendableBond eb_) view internal override returns (uint256) {\n        IBondLPPancakeFarmingPool pool = IBondLPPancakeFarmingPool(eb_.bondLPFarmingPool());\n        IPancakePair cakeWithEbCakeLpPairToken = IPancakePair(pool.lpToken());\n\n        uint256 ebCakeLpTotalSupply = cakeWithEbCakeLpPairToken.totalSupply();\n        if (ebCakeLpTotalSupply == 0) return 0;\n\n        ( uint256 duetReserve, uint256 usdReserve, ) = pairTokenAddress__DUET_anyUSD.getReserves();\n        if (usdReserve == 0 ) return 0;\n        return duetReserve / usdReserve * ebCakeLpTotalSupply;\n    }\n\n    /**\n     * Estimates token price by multi-fetching data from DEX.\n     * There are some issues like time-lag and precision problems.\n     * It's OK to do estimation but not for trading basis.\n     */\n    function _unsafely_getUnderlyingPriceAsUsd(IExtendableBond eb_) view internal override returns (uint256) {\n        IBondLPPancakeFarmingPool pool = IBondLPPancakeFarmingPool(eb_.bondLPFarmingPool());\n        IPancakePair cakeWithEbCakeLpPairToken = IPancakePair(pool.lpToken());\n\n        uint256 ebCakeLpTotalSupply = cakeWithEbCakeLpPairToken.totalSupply();\n        if (ebCakeLpTotalSupply == 0) return 0;\n        ( uint256 cakeReserve, uint256 busdReserve, ) = pairTokenAddress__CAKE_BUSD.getReserves();\n        if (busdReserve == 0 ) return 0;\n        return cakeReserve / busdReserve * ebCakeLpTotalSupply;\n    }\n\n    function _getBondPriceAsUnderlying(IExtendableBond eb_) view internal override returns (uint256) {\n        IBondLPPancakeFarmingPool pool = IBondLPPancakeFarmingPool(eb_.bondLPFarmingPool());\n        IPancakePair cakeWithEbCakeLpPairToken = IPancakePair(pool.lpToken());\n\n        ( uint256 cakeReserve, uint256 ebCakeReserve, ) = cakeWithEbCakeLpPairToken.getReserves();\n        if (ebCakeReserve == 0) return 0;\n        return cakeReserve / ebCakeReserve;\n    }\n\n    function _getLpStackedReserves(IExtendableBond eb_) view internal override returns (uint256 cakeReserve, uint256 ebCakeReserve) {\n        IBondLPPancakeFarmingPool pool = IBondLPPancakeFarmingPool(eb_.bondLPFarmingPool());\n        IPancakePair cakeWithEbCakeLpPairToken = IPancakePair(pool.lpToken());\n\n        ( cakeReserve, ebCakeReserve, ) = cakeWithEbCakeLpPairToken.getReserves();\n    }\n\n    function _getLpStackedTotalSupply(IExtendableBond eb_) view internal override returns (uint256) {\n        IBondLPPancakeFarmingPool pool = IBondLPPancakeFarmingPool(eb_.bondLPFarmingPool());\n        IPancakePair cakeWithEbCakeLpPairToken = IPancakePair(pool.lpToken());\n\n        return cakeWithEbCakeLpPairToken.totalSupply();\n    }\n\n    function _getEbFarmingPoolId(IExtendableBond eb_) view internal override returns (uint256) {\n        IBondLPPancakeFarmingPool pool = IBondLPPancakeFarmingPool(eb_.bondLPFarmingPool());\n        return pool.masterChefPid();\n    }\n\n    function _getUnderlyingAPY(IExtendableBond eb_) view internal override returns (uint256) {\n        IExtendableBondedCake eb = IExtendableBondedCake(address(eb_));\n        ICakePool pool = ICakePool(eb.cakePool());\n        ICakePool.UserInfo memory pui = pool.userInfo(eb.bondToken());\n\n        uint specialFarmsPerBlock = pancakeMasterChef.cakePerBlock(false);\n        ( , , uint allocPoint, , ) = pancakeMasterChef.poolInfo(PANCAKE_CAKE_POOL_ID);\n\n        uint totalSpecialAllocPoint = pancakeMasterChef.totalSpecialAllocPoint();\n        if (totalSpecialAllocPoint == 0) return 0;\n\n        uint cakePoolSharesInSpecialFarms = allocPoint / totalSpecialAllocPoint;\n        uint totalCakePoolEmissionPerYear = specialFarmsPerBlock * BLOCKS_PER_YEAR * cakePoolSharesInSpecialFarms;\n\n        uint pricePerFullShareAsEther = pancakePool.getPricePerFullShare();\n        uint totalSharesAsEther = pancakePool.totalShares();\n\n        uint flexibleApy = totalCakePoolEmissionPerYear * WEI_PER_EHTER / pricePerFullShareAsEther / totalSharesAsEther * 100;\n\n        uint256 duration = pui.lockEndTime - pui.lockStartTime;\n        uint boostFactor = PANCAKE_BOOST_WEIGHT * duration.max(0) / PANCAKE_DURATION_FACTOR / PANCAKE_PRECISION_FACTOR;\n\n        uint lockedAPY = flexibleApy * (boostFactor + 1);\n        return lockedAPY;\n    }\n\n    // function _getLpStake_extraAPR(IExtendableBond eb_) view internal override returns (uint256) {\n    //     ( , , uint allocPoint, , bool isRegular ) = pancakeMasterChef.poolInfo(PANCAKE_CAKE_POOL_ID);\n\n    //     uint totalAllocPoint = isRegular ? pancakeMasterChef.totalRegularAllocPoint() : pancakeMasterChef.totalSpecialAllocPoint();\n    //      if (totalAllocPoint == 0) return 0;\n\n    //     uint poolWeight = allocPoint / totalAllocPoint;\n    //     uint cakePerYear = pancakeMasterChef.cakePerBlock(isRegular) * BLOCKS_PER_YEAR;\n\n    //     uint yearlyCakeRewardAllocation = poolWeight * cakePerYear;\n    //     uint cakePrice = _unsafely_getUnderlyingPriceAsUsd(eb_);\n\n\n    //     IPancakePair cakeWithBusdLpPairToken = IPancakePair(pairTokenAddress__CAKE_BUSD);\n    //     uint lpShareRatio = cakeWithBusdLpPairToken.balanceOf(address(eb_.cakePool())) / cakeWithBusdLpPairToken.totalSupply();\n\n    //     uint liquidityUSD = farm.reserveUSD; <x>\n\n\n    //     uint poolLiquidityUsd = lpShareRatio * liquidityUSD;\n    //     return yearlyCakeRewardAllocation * cakePrice / WEI_PER_EHTER / poolLiquidityUsd * 100;\n    // }\n\n\n    // -------------\n\n    function _getPancakeSyrupAPR() view internal returns (uint256) {\n        ( , , uint allocPoint, , bool isRegular ) = pancakeMasterChef.poolInfo(PANCAKE_CAKE_POOL_ID);\n\n        uint totalAllocPoint = (isRegular ? pancakeMasterChef.totalRegularAllocPoint() : pancakeMasterChef.totalSpecialAllocPoint());\n        if (totalAllocPoint == 0) return 0;\n\n        uint poolWeight = allocPoint / totalAllocPoint;\n        uint farmsPerBlock = poolWeight * pancakeMasterChef.cakePerBlock(isRegular);\n\n        uint totalCakePoolEmissionPerYear = farmsPerBlock * BLOCKS_PER_YEAR * farmsPerBlock;\n\n        uint pricePerFullShare = pancakePool.getPricePerFullShare();\n        uint totalShares = pancakePool.totalShares();\n        uint sharesRatio = pricePerFullShare * totalShares / 100;\n        if (sharesRatio == 0) return 0;\n\n        uint flexibleAPY = totalCakePoolEmissionPerYear * WEI_PER_EHTER / sharesRatio;\n\n        uint performanceFeeAsDecimal = 2;\n        uint rewardPercentageNoFee = 1 - performanceFeeAsDecimal / 100;\n        return flexibleAPY * rewardPercentageNoFee;\n    }\n\n}\n\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized < version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n"
    },
    "@private/shared/libs/Adminable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\nabstract contract Adminable {\n    event AdminUpdated(address indexed user, address indexed newAdmin);\n\n    address public admin;\n\n    modifier onlyAdmin() virtual {\n        require(msg.sender == admin, \"UNAUTHORIZED\");\n\n        _;\n    }\n\n    function setAdmin(address newAdmin) public virtual onlyAdmin {\n        _setAdmin(newAdmin);\n    }\n\n    function _setAdmin(address newAdmin) internal {\n        require(newAdmin != address(0), \"Can not set admin to zero address\");\n        admin = newAdmin;\n\n        emit AdminUpdated(msg.sender, newAdmin);\n    }\n}\n"
    },
    "@private/shared/3rd/pancake/IPancakePair.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\ninterface IPancakePair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}"
    },
    "@private/shared/3rd/pancake/ICakePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface ICakePool {\n    function totalShares() external view returns (uint256);\n\n    struct UserInfo {\n        uint256 shares; // number of shares for a user.\n        uint256 lastDepositedTime; // keep track of deposited time for potential penalty.\n        uint256 cakeAtLastUserAction; // keep track of cake deposited at the last user action.\n        uint256 lastUserActionTime; // keep track of the last user action time.\n        uint256 lockStartTime; // lock start time.\n        uint256 lockEndTime; // lock end time.\n        uint256 userBoostedShare; // boost share, in order to give the user higher reward. The user only enjoys the reward, so the principal needs to be recorded as a debt.\n        bool locked; //lock status.\n        uint256 lockedAmount; // amount deposited during lock period.\n    }\n\n    function withdrawFeePeriod() external view returns (uint256);\n\n    function freeWithdrawFeeUsers(address user_) external view returns (bool);\n\n    function MAX_LOCK_DURATION() external view returns (uint256);\n\n    function userInfo(address user_) external view returns (UserInfo memory);\n\n    function deposit(uint256 _amount, uint256 _lockDuration) external;\n\n    function withdrawByAmount(uint256 _amount) external;\n\n    /**\n     * @notice Calculate Performance fee.\n     * @param _user: User address\n     * @return Returns Performance fee.\n     */\n    function calculatePerformanceFee(address _user) external view returns (uint256);\n\n    function calculateWithdrawFee(address _user, uint256 _shares) external view returns (uint256);\n\n    function calculateOverdueFee(address _user) external view returns (uint256);\n\n    /**\n     * @notice Withdraw funds from the Cake Pool.\n     * @param _shares: Number of shares to withdraw\n     */\n    function withdraw(uint256 _shares) external;\n\n    function withdrawAll() external;\n\n    function getPricePerFullShare() external view returns (uint256);\n}\n"
    },
    "@private/shared/mocks/pancake/MasterChefV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// copy from https://bscscan.com/address/0xa5f8C5Dbd5F286960b9d90548680aE5ebFf07652#code#F1#L1\n\npragma solidity 0.8.9;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"../../libs/SafeBEP20.sol\";\nimport \"../../libs/IBEP20.sol\";\n\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\ninterface IMasterChef {\n    function deposit(uint256 _pid, uint256 _amount) external;\n\n    function withdraw(uint256 _pid, uint256 _amount) external;\n\n    function enterStaking(uint256 _amount) external;\n\n    function leaveStaking(uint256 _amount) external;\n\n    function pendingCake(uint256 _pid, address _user) external view returns (uint256);\n\n    function userInfo(uint256 _pid, address _user) external view returns (uint256, uint256);\n\n    function emergencyWithdraw(uint256 _pid) external;\n}\n\n/// @notice The (older) MasterChef contract gives out a constant number of CAKE tokens per block.\n/// It is the only address with minting rights for CAKE.\n/// The idea for this MasterChef V2 (MCV2) contract is therefore to be the owner of a dummy token\n/// that is deposited into the MasterChef V1 (MCV1) contract.\n/// The allocation point for this pool on MCV1 is the total allocation point for all pools that receive incentives.\ncontract MasterChefV2 is Ownable, ReentrancyGuard {\n    using SafeMath for uint256;\n    using SafeBEP20 for IBEP20;\n\n    /// @notice Info of each MCV2 user.\n    /// `amount` LP token amount the user has provided.\n    /// `rewardDebt` Used to calculate the correct amount of rewards. See explanation below.\n    ///\n    /// We do some fancy math here. Basically, any point in time, the amount of CAKEs\n    /// entitled to a user but is pending to be distributed is:\n    ///\n    ///   pending reward = (user share * pool.accCakePerShare) - user.rewardDebt\n    ///\n    ///   Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\n    ///   1. The pool's `accCakePerShare` (and `lastRewardBlock`) gets updated.\n    ///   2. User receives the pending reward sent to his/her address.\n    ///   3. User's `amount` gets updated. Pool's `totalBoostedShare` gets updated.\n    ///   4. User's `rewardDebt` gets updated.\n    struct UserInfo {\n        uint256 amount;\n        uint256 rewardDebt;\n        uint256 boostMultiplier;\n    }\n\n    /// @notice Info of each MCV2 pool.\n    /// `allocPoint` The amount of allocation points assigned to the pool.\n    ///     Also known as the amount of \"multipliers\". Combined with `totalXAllocPoint`, it defines the % of\n    ///     CAKE rewards each pool gets.\n    /// `accCakePerShare` Accumulated CAKEs per share, times 1e12.\n    /// `lastRewardBlock` Last block number that pool update action is executed.\n    /// `isRegular` The flag to set pool is regular or special. See below:\n    ///     In MasterChef V2 farms are \"regular pools\". \"special pools\", which use a different sets of\n    ///     `allocPoint` and their own `totalSpecialAllocPoint` are designed to handle the distribution of\n    ///     the CAKE rewards to all the PancakeSwap products.\n    /// `totalBoostedShare` The total amount of user shares in each pool. After considering the share boosts.\n    struct PoolInfo {\n        uint256 accCakePerShare;\n        uint256 lastRewardBlock;\n        uint256 allocPoint;\n        uint256 totalBoostedShare;\n        bool isRegular;\n    }\n\n    /// @notice Address of MCV1 contract.\n    IMasterChef public immutable MASTER_CHEF;\n    /// @notice Address of CAKE contract.\n    IBEP20 public immutable CAKE;\n\n    /// @notice The only address can withdraw all the burn CAKE.\n    address public burnAdmin;\n    /// @notice The contract handles the share boosts.\n    address public boostContract;\n\n    /// @notice Info of each MCV2 pool.\n    PoolInfo[] public poolInfo;\n    /// @notice Address of the LP token for each MCV2 pool.\n    IBEP20[] public lpToken;\n\n    /// @notice Info of each pool user.\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n    /// @notice The whitelist of addresses allowed to deposit in special pools.\n    mapping(address => bool) public whiteList;\n\n    /// @notice The pool id of the MCV2 mock token pool in MCV1.\n    uint256 public immutable MASTER_PID;\n    /// @notice Total regular allocation points. Must be the sum of all regular pools' allocation points.\n    uint256 public totalRegularAllocPoint;\n    /// @notice Total special allocation points. Must be the sum of all special pools' allocation points.\n    uint256 public totalSpecialAllocPoint;\n    ///  @notice 40 cakes per block in MCV1\n    uint256 public constant MASTERCHEF_CAKE_PER_BLOCK = 40 * 1e18;\n    uint256 public constant ACC_CAKE_PRECISION = 1e18;\n\n    /// @notice Basic boost factor, none boosted user's boost factor\n    uint256 public constant BOOST_PRECISION = 100 * 1e10;\n    /// @notice Hard limit for maxmium boost factor, it must greater than BOOST_PRECISION\n    uint256 public constant MAX_BOOST_PRECISION = 200 * 1e10;\n    /// @notice total cake rate = toBurn + toRegular + toSpecial\n    uint256 public constant CAKE_RATE_TOTAL_PRECISION = 1e12;\n    /// @notice The last block number of CAKE burn action being executed.\n    /// @notice CAKE distribute % for burn\n    uint256 public cakeRateToBurn = 643750000000;\n    /// @notice CAKE distribute % for regular farm pool\n    uint256 public cakeRateToRegularFarm = 62847222222;\n    /// @notice CAKE distribute % for special pools\n    uint256 public cakeRateToSpecialFarm = 293402777778;\n\n    uint256 public lastBurnedBlock;\n\n    event Init();\n    event AddPool(uint256 indexed pid, uint256 allocPoint, IBEP20 indexed lpToken, bool isRegular);\n    event SetPool(uint256 indexed pid, uint256 allocPoint);\n    event UpdatePool(uint256 indexed pid, uint256 lastRewardBlock, uint256 lpSupply, uint256 accCakePerShare);\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n\n    event UpdateCakeRate(uint256 burnRate, uint256 regularFarmRate, uint256 specialFarmRate);\n    event UpdateBurnAdmin(address indexed oldAdmin, address indexed newAdmin);\n    event UpdateWhiteList(address indexed user, bool isValid);\n    event UpdateBoostContract(address indexed boostContract);\n    event UpdateBoostMultiplier(address indexed user, uint256 pid, uint256 oldMultiplier, uint256 newMultiplier);\n\n    /// @param _MASTER_CHEF The PancakeSwap MCV1 contract address.\n    /// @param _CAKE The CAKE token contract address.\n    /// @param _MASTER_PID The pool id of the dummy pool on the MCV1.\n    /// @param _burnAdmin The address of burn admin.\n    constructor(\n        IMasterChef _MASTER_CHEF,\n        IBEP20 _CAKE,\n        uint256 _MASTER_PID,\n        address _burnAdmin\n    ) {\n        MASTER_CHEF = _MASTER_CHEF;\n        CAKE = _CAKE;\n        MASTER_PID = _MASTER_PID;\n        burnAdmin = _burnAdmin;\n    }\n\n    /**\n     * @dev Throws if caller is not the boost contract.\n     */\n    modifier onlyBoostContract() {\n        require(boostContract == msg.sender, \"Ownable: caller is not the boost contract\");\n        _;\n    }\n\n    /// @notice Deposits a dummy token to `MASTER_CHEF` MCV1. This is required because MCV1 holds the minting permission of CAKE.\n    /// It will transfer all the `dummyToken` in the tx sender address.\n    /// The allocation point for the dummy pool on MCV1 should be equal to the total amount of allocPoint.\n    /// @param dummyToken The address of the BEP-20 token to be deposited into MCV1.\n    function init(IBEP20 dummyToken) external onlyOwner {\n        uint256 balance = dummyToken.balanceOf(msg.sender);\n        require(balance != 0, \"MasterChefV2: Balance must exceed 0\");\n        dummyToken.safeTransferFrom(msg.sender, address(this), balance);\n        dummyToken.approve(address(MASTER_CHEF), balance);\n        MASTER_CHEF.deposit(MASTER_PID, balance);\n        // MCV2 start to earn CAKE reward from current block in MCV1 pool\n        lastBurnedBlock = block.number;\n        emit Init();\n    }\n\n    /// @notice Returns the number of MCV2 pools.\n    function poolLength() public view returns (uint256 pools) {\n        pools = poolInfo.length;\n    }\n\n    /// @notice Add a new pool. Can only be called by the owner.\n    /// DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n    /// @param _allocPoint Number of allocation points for the new pool.\n    /// @param _lpToken Address of the LP BEP-20 token.\n    /// @param _isRegular Whether the pool is regular or special. LP farms are always \"regular\". \"Special\" pools are\n    /// @param _withUpdate Whether call \"massUpdatePools\" operation.\n    /// only for CAKE distributions within PancakeSwap products.\n    function add(\n        uint256 _allocPoint,\n        IBEP20 _lpToken,\n        bool _isRegular,\n        bool _withUpdate\n    ) external onlyOwner {\n        require(_lpToken.balanceOf(address(this)) >= 0, \"None BEP20 tokens\");\n        // stake CAKE token will cause staked token and reward token mixed up,\n        // may cause staked tokens withdraw as reward token,never do it.\n        require(_lpToken != CAKE, \"CAKE token can't be added to farm pools\");\n\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n\n        if (_isRegular) {\n            totalRegularAllocPoint = totalRegularAllocPoint.add(_allocPoint);\n        } else {\n            totalSpecialAllocPoint = totalSpecialAllocPoint.add(_allocPoint);\n        }\n        lpToken.push(_lpToken);\n\n        poolInfo.push(\n            PoolInfo({\n                allocPoint: _allocPoint,\n                lastRewardBlock: block.number,\n                accCakePerShare: 0,\n                isRegular: _isRegular,\n                totalBoostedShare: 0\n            })\n        );\n        emit AddPool(lpToken.length.sub(1), _allocPoint, _lpToken, _isRegular);\n    }\n\n    /// @notice Update the given pool's CAKE allocation point. Can only be called by the owner.\n    /// @param _pid The id of the pool. See `poolInfo`.\n    /// @param _allocPoint New number of allocation points for the pool.\n    /// @param _withUpdate Whether call \"massUpdatePools\" operation.\n    function set(\n        uint256 _pid,\n        uint256 _allocPoint,\n        bool _withUpdate\n    ) external onlyOwner {\n        // No matter _withUpdate is true or false, we need to execute updatePool once before set the pool parameters.\n        updatePool(_pid);\n\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n\n        if (poolInfo[_pid].isRegular) {\n            totalRegularAllocPoint = totalRegularAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\n        } else {\n            totalSpecialAllocPoint = totalSpecialAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\n        }\n        poolInfo[_pid].allocPoint = _allocPoint;\n        emit SetPool(_pid, _allocPoint);\n    }\n\n    /// @notice View function for checking pending CAKE rewards.\n    /// @param _pid The id of the pool. See `poolInfo`.\n    /// @param _user Address of the user.\n    function pendingCake(uint256 _pid, address _user) external view returns (uint256) {\n        PoolInfo memory pool = poolInfo[_pid];\n        UserInfo memory user = userInfo[_pid][_user];\n        uint256 accCakePerShare = pool.accCakePerShare;\n        uint256 lpSupply = pool.totalBoostedShare;\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\n            uint256 multiplier = block.number.sub(pool.lastRewardBlock);\n\n            uint256 cakeReward = multiplier.mul(cakePerBlock(pool.isRegular)).mul(pool.allocPoint).div(\n                (pool.isRegular ? totalRegularAllocPoint : totalSpecialAllocPoint)\n            );\n            accCakePerShare = accCakePerShare.add(cakeReward.mul(ACC_CAKE_PRECISION).div(lpSupply));\n        }\n\n        uint256 boostedAmount = user.amount.mul(getBoostMultiplier(_user, _pid)).div(BOOST_PRECISION);\n        return boostedAmount.mul(accCakePerShare).div(ACC_CAKE_PRECISION).sub(user.rewardDebt);\n    }\n\n    /// @notice Update cake reward for all the active pools. Be careful of gas spending!\n    function massUpdatePools() public {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            PoolInfo memory pool = poolInfo[pid];\n            if (pool.allocPoint != 0) {\n                updatePool(pid);\n            }\n        }\n    }\n\n    /// @notice Calculates and returns the `amount` of CAKE per block.\n    /// @param _isRegular If the pool belongs to regular or special.\n    function cakePerBlock(bool _isRegular) public view returns (uint256 amount) {\n        if (_isRegular) {\n            amount = MASTERCHEF_CAKE_PER_BLOCK.mul(cakeRateToRegularFarm).div(CAKE_RATE_TOTAL_PRECISION);\n        } else {\n            amount = MASTERCHEF_CAKE_PER_BLOCK.mul(cakeRateToSpecialFarm).div(CAKE_RATE_TOTAL_PRECISION);\n        }\n    }\n\n    /// @notice Calculates and returns the `amount` of CAKE per block to burn.\n    function cakePerBlockToBurn() public view returns (uint256 amount) {\n        amount = MASTERCHEF_CAKE_PER_BLOCK.mul(cakeRateToBurn).div(CAKE_RATE_TOTAL_PRECISION);\n    }\n\n    /// @notice Update reward variables for the given pool.\n    /// @param _pid The id of the pool. See `poolInfo`.\n    /// @return pool Returns the pool that was updated.\n    function updatePool(uint256 _pid) public returns (PoolInfo memory pool) {\n        pool = poolInfo[_pid];\n        if (block.number > pool.lastRewardBlock) {\n            uint256 lpSupply = pool.totalBoostedShare;\n            uint256 totalAllocPoint = (pool.isRegular ? totalRegularAllocPoint : totalSpecialAllocPoint);\n\n            if (lpSupply > 0 && totalAllocPoint > 0) {\n                uint256 multiplier = block.number.sub(pool.lastRewardBlock);\n                uint256 cakeReward = multiplier.mul(cakePerBlock(pool.isRegular)).mul(pool.allocPoint).div(\n                    totalAllocPoint\n                );\n                pool.accCakePerShare = pool.accCakePerShare.add((cakeReward.mul(ACC_CAKE_PRECISION).div(lpSupply)));\n            }\n            pool.lastRewardBlock = block.number;\n            poolInfo[_pid] = pool;\n            emit UpdatePool(_pid, pool.lastRewardBlock, lpSupply, pool.accCakePerShare);\n        }\n    }\n\n    /// @notice Deposit LP tokens to pool.\n    /// @param _pid The id of the pool. See `poolInfo`.\n    /// @param _amount Amount of LP tokens to deposit.\n    function deposit(uint256 _pid, uint256 _amount) external nonReentrant {\n        PoolInfo memory pool = updatePool(_pid);\n        UserInfo storage user = userInfo[_pid][msg.sender];\n\n        require(\n            pool.isRegular || whiteList[msg.sender],\n            \"MasterChefV2: The address is not available to deposit in this pool\"\n        );\n\n        uint256 multiplier = getBoostMultiplier(msg.sender, _pid);\n\n        if (user.amount > 0) {\n            settlePendingCake(msg.sender, _pid, multiplier);\n        }\n\n        if (_amount > 0) {\n            uint256 before = lpToken[_pid].balanceOf(address(this));\n            lpToken[_pid].safeTransferFrom(msg.sender, address(this), _amount);\n            _amount = lpToken[_pid].balanceOf(address(this)).sub(before);\n            user.amount = user.amount.add(_amount);\n\n            // Update total boosted share.\n            pool.totalBoostedShare = pool.totalBoostedShare.add(_amount.mul(multiplier).div(BOOST_PRECISION));\n        }\n\n        user.rewardDebt = user.amount.mul(multiplier).div(BOOST_PRECISION).mul(pool.accCakePerShare).div(\n            ACC_CAKE_PRECISION\n        );\n        poolInfo[_pid] = pool;\n\n        emit Deposit(msg.sender, _pid, _amount);\n    }\n\n    /// @notice Withdraw LP tokens from pool.\n    /// @param _pid The id of the pool. See `poolInfo`.\n    /// @param _amount Amount of LP tokens to withdraw.\n    function withdraw(uint256 _pid, uint256 _amount) external nonReentrant {\n        PoolInfo memory pool = updatePool(_pid);\n        UserInfo storage user = userInfo[_pid][msg.sender];\n\n        require(user.amount >= _amount, \"withdraw: Insufficient\");\n\n        uint256 multiplier = getBoostMultiplier(msg.sender, _pid);\n\n        settlePendingCake(msg.sender, _pid, multiplier);\n\n        if (_amount > 0) {\n            user.amount = user.amount.sub(_amount);\n            lpToken[_pid].safeTransfer(msg.sender, _amount);\n        }\n\n        user.rewardDebt = user.amount.mul(multiplier).div(BOOST_PRECISION).mul(pool.accCakePerShare).div(\n            ACC_CAKE_PRECISION\n        );\n        poolInfo[_pid].totalBoostedShare = poolInfo[_pid].totalBoostedShare.sub(\n            _amount.mul(multiplier).div(BOOST_PRECISION)\n        );\n\n        emit Withdraw(msg.sender, _pid, _amount);\n    }\n\n    /// @notice Harvests CAKE from `MASTER_CHEF` MCV1 and pool `MASTER_PID` to MCV2.\n    function harvestFromMasterChef() public {\n        MASTER_CHEF.deposit(MASTER_PID, 0);\n    }\n\n    /// @notice Withdraw without caring about the rewards. EMERGENCY ONLY.\n    /// @param _pid The id of the pool. See `poolInfo`.\n    function emergencyWithdraw(uint256 _pid) external nonReentrant {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n\n        uint256 amount = user.amount;\n        user.amount = 0;\n        user.rewardDebt = 0;\n        uint256 boostedAmount = amount.mul(getBoostMultiplier(msg.sender, _pid)).div(BOOST_PRECISION);\n        pool.totalBoostedShare = pool.totalBoostedShare > boostedAmount ? pool.totalBoostedShare.sub(boostedAmount) : 0;\n\n        // Note: transfer can fail or succeed if `amount` is zero.\n        lpToken[_pid].safeTransfer(msg.sender, amount);\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\n    }\n\n    /// @notice Send CAKE pending for burn to `burnAdmin`.\n    /// @param _withUpdate Whether call \"massUpdatePools\" operation.\n    function burnCake(bool _withUpdate) public onlyOwner {\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n\n        uint256 multiplier = block.number.sub(lastBurnedBlock);\n        uint256 pendingCakeToBurn = multiplier.mul(cakePerBlockToBurn());\n\n        // SafeTransfer CAKE\n        _safeTransfer(burnAdmin, pendingCakeToBurn);\n        lastBurnedBlock = block.number;\n    }\n\n    /// @notice Update the % of CAKE distributions for burn, regular pools and special pools.\n    /// @param _burnRate The % of CAKE to burn each block.\n    /// @param _regularFarmRate The % of CAKE to regular pools each block.\n    /// @param _specialFarmRate The % of CAKE to special pools each block.\n    /// @param _withUpdate Whether call \"massUpdatePools\" operation.\n    function updateCakeRate(\n        uint256 _burnRate,\n        uint256 _regularFarmRate,\n        uint256 _specialFarmRate,\n        bool _withUpdate\n    ) external onlyOwner {\n        require(\n            _burnRate > 0 && _regularFarmRate > 0 && _specialFarmRate > 0,\n            \"MasterChefV2: Cake rate must be greater than 0\"\n        );\n        require(\n            _burnRate.add(_regularFarmRate).add(_specialFarmRate) == CAKE_RATE_TOTAL_PRECISION,\n            \"MasterChefV2: Total rate must be 1e12\"\n        );\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        // burn cake base on old burn cake rate\n        burnCake(false);\n\n        cakeRateToBurn = _burnRate;\n        cakeRateToRegularFarm = _regularFarmRate;\n        cakeRateToSpecialFarm = _specialFarmRate;\n\n        emit UpdateCakeRate(_burnRate, _regularFarmRate, _specialFarmRate);\n    }\n\n    /// @notice Update burn admin address.\n    /// @param _newAdmin The new burn admin address.\n    function updateBurnAdmin(address _newAdmin) external onlyOwner {\n        require(_newAdmin != address(0), \"MasterChefV2: Burn admin address must be valid\");\n        require(_newAdmin != burnAdmin, \"MasterChefV2: Burn admin address is the same with current address\");\n        address _oldAdmin = burnAdmin;\n        burnAdmin = _newAdmin;\n        emit UpdateBurnAdmin(_oldAdmin, _newAdmin);\n    }\n\n    /// @notice Update whitelisted addresses for special pools.\n    /// @param _user The address to be updated.\n    /// @param _isValid The flag for valid or invalid.\n    function updateWhiteList(address _user, bool _isValid) external onlyOwner {\n        require(_user != address(0), \"MasterChefV2: The white list address must be valid\");\n\n        whiteList[_user] = _isValid;\n        emit UpdateWhiteList(_user, _isValid);\n    }\n\n    /// @notice Update boost contract address and max boost factor.\n    /// @param _newBoostContract The new address for handling all the share boosts.\n    function updateBoostContract(address _newBoostContract) external onlyOwner {\n        require(\n            _newBoostContract != address(0) && _newBoostContract != boostContract,\n            \"MasterChefV2: New boost contract address must be valid\"\n        );\n\n        boostContract = _newBoostContract;\n        emit UpdateBoostContract(_newBoostContract);\n    }\n\n    /// @notice Update user boost factor.\n    /// @param _user The user address for boost factor updates.\n    /// @param _pid The pool id for the boost factor updates.\n    /// @param _newMultiplier New boost multiplier.\n    function updateBoostMultiplier(\n        address _user,\n        uint256 _pid,\n        uint256 _newMultiplier\n    ) external onlyBoostContract nonReentrant {\n        require(_user != address(0), \"MasterChefV2: The user address must be valid\");\n        require(poolInfo[_pid].isRegular, \"MasterChefV2: Only regular farm could be boosted\");\n        require(\n            _newMultiplier >= BOOST_PRECISION && _newMultiplier <= MAX_BOOST_PRECISION,\n            \"MasterChefV2: Invalid new boost multiplier\"\n        );\n\n        PoolInfo memory pool = updatePool(_pid);\n        UserInfo storage user = userInfo[_pid][_user];\n\n        uint256 prevMultiplier = getBoostMultiplier(_user, _pid);\n        settlePendingCake(_user, _pid, prevMultiplier);\n\n\n\n\n\n\n        user.rewardDebt = user.amount.mul(_newMultiplier).div(BOOST_PRECISION).mul(pool.accCakePerShare).div(\n            ACC_CAKE_PRECISION\n        );\n        pool.totalBoostedShare = pool.totalBoostedShare.sub(user.amount.mul(prevMultiplier).div(BOOST_PRECISION)).add(\n            user.amount.mul(_newMultiplier).div(BOOST_PRECISION)\n        );\n        poolInfo[_pid] = pool;\n        userInfo[_pid][_user].boostMultiplier = _newMultiplier;\n\n        emit UpdateBoostMultiplier(_user, _pid, prevMultiplier, _newMultiplier);\n    }\n\n    /// @notice Get user boost multiplier for specific pool id.\n    /// @param _user The user address.\n    /// @param _pid The pool id.\n    function getBoostMultiplier(address _user, uint256 _pid) public view returns (uint256) {\n        uint256 multiplier = userInfo[_pid][_user].boostMultiplier;\n        return multiplier > BOOST_PRECISION ? multiplier : BOOST_PRECISION;\n    }\n\n    /// @notice Settles, distribute the pending CAKE rewards for given user.\n    /// @param _user The user address for settling rewards.\n    /// @param _pid The pool id.\n    /// @param _boostMultiplier The user boost multiplier in specific pool id.\n    function settlePendingCake(\n        address _user,\n        uint256 _pid,\n        uint256 _boostMultiplier\n    ) internal {\n        UserInfo memory user = userInfo[_pid][_user];\n\n        uint256 boostedAmount = user.amount.mul(_boostMultiplier).div(BOOST_PRECISION);\n        uint256 accCake = boostedAmount.mul(poolInfo[_pid].accCakePerShare).div(ACC_CAKE_PRECISION);\n        uint256 pending = accCake.sub(user.rewardDebt);\n        // SafeTransfer CAKE\n        _safeTransfer(_user, pending);\n    }\n\n    /// @notice Safe Transfer CAKE.\n    /// @param _to The CAKE receiver address.\n    /// @param _amount transfer CAKE amounts.\n    function _safeTransfer(address _to, uint256 _amount) internal {\n        if (_amount > 0) {\n            // Check whether MCV2 has enough CAKE. If not, harvest from MCV1.\n            if (CAKE.balanceOf(address(this)) < _amount) {\n                harvestFromMasterChef();\n            }\n            uint256 balance = CAKE.balanceOf(address(this));\n            if (balance < _amount) {\n                _amount = balance;\n            }\n            CAKE.safeTransfer(_to, _amount);\n        }\n    }\n}\n"
    },
    "@private/shared/interfaces/ebcake/IExtendableBond.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\ninterface IExtendableBond {\n  struct FeeSpec { string desc; uint16 rate; address receiver; }\n  struct CheckPoints { bool convertable; uint256 convertableFrom; uint256 convertableEnd; bool redeemable; uint256 redeemableFrom; uint256 redeemableEnd; uint256 maturity; }\n  function PERCENTAGE_FACTOR (  ) external view returns ( uint16  );\n  function addFeeSpec ( FeeSpec calldata feeSpec_ ) external;\n  function admin (  ) external view returns ( address  );\n  function bondFarmingPool (  ) external view returns ( address  );\n  function bondLPFarmingPool (  ) external view returns ( address  );\n  function bondToken (  ) external view returns ( address  );\n  function burnBondToken ( uint256 amount_ ) external;\n  function calculateFeeAmount ( uint256 amount_ ) external view returns ( uint256  );\n  function checkPoints (  ) external view returns ( bool convertable, uint256 convertableFrom, uint256 convertableEnd, bool redeemable, uint256 redeemableFrom, uint256 redeemableEnd, uint256 maturity );\n  function convert ( uint256 amount_ ) external;\n  function convertAndStake ( uint256 amount_ ) external;\n  function depositAllToRemote (  ) external;\n  function depositToRemote ( uint256 amount_ ) external;\n  function emergencyTransferUnderlyingTokens ( address to_ ) external;\n  function feeSpecs ( uint256  ) external view returns ( string calldata desc, uint16 rate, address receiver );\n  function feeSpecsLength (  ) external view returns ( uint256  );\n  function initialize ( address bondToken_, address underlyingToken_, address admin_ ) external;\n  function keeper (  ) external view returns ( address  );\n  function mintBondTokenForRewards ( address to_, uint256 amount_ ) external returns ( uint256 totalFeeAmount );\n  function pause (  ) external;\n  function paused (  ) external view returns ( bool  );\n  function redeem ( uint256 amount_ ) external;\n  function redeemAll (  ) external;\n  function remoteUnderlyingAmount (  ) external view returns ( uint256  );\n  function removeFeeSpec ( uint256 feeSpecIndex_ ) external;\n  function setAdmin ( address newAdmin ) external;\n  function setConvertable ( bool convertable_ ) external;\n  function setFarmingPools ( address bondPool_, address lpPool_ ) external;\n  function setFeeSpec ( uint256 feeId_, FeeSpec calldata feeSpec_ ) external;\n  function setKeeper ( address newKeeper ) external;\n  function setRedeemable ( bool redeemable_ ) external;\n  function totalBondTokenAmount (  ) external view returns ( uint256  );\n  function totalPendingRewards (  ) external view returns ( uint256  );\n  function totalUnderlyingAmount (  ) external view returns ( uint256  );\n  function underlyingAmount (  ) external view returns ( uint256  );\n  function underlyingToken (  ) external view returns ( address  );\n  function unpause (  ) external;\n  function updateCheckPoints ( CheckPoints calldata checkPoints_ ) external;\n}\n"
    },
    "@private/shared/interfaces/ebcake/underlyings/pancake/IExtendableBondedCake.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\ninterface IExtendableBondedCake {\n  struct FeeSpec { string desc; uint16 rate; address receiver; }\n  struct UserInfo { uint256 shares; uint256 lastDepositedTime; uint256 cakeAtLastUserAction; uint256 lastUserActionTime; uint256 lockStartTime; uint256 lockEndTime; uint256 userBoostedShare; bool locked; uint256 lockedAmount; }\n  struct CheckPoints { bool convertable; uint256 convertableFrom; uint256 convertableEnd; bool redeemable; uint256 redeemableFrom; uint256 redeemableEnd; uint256 maturity; }\n  function PERCENTAGE_FACTOR (  ) external view returns ( uint16  );\n  function addFeeSpec ( FeeSpec calldata feeSpec_ ) external;\n  function admin (  ) external view returns ( address  );\n  function bondFarmingPool (  ) external view returns ( address  );\n  function bondLPFarmingPool (  ) external view returns ( address  );\n  function bondToken (  ) external view returns ( address  );\n  function burnBondToken ( uint256 amount_ ) external;\n  function cakePool (  ) external view returns ( address  );\n  function calculateFeeAmount ( uint256 amount_ ) external view returns ( uint256  );\n  function checkPoints (  ) external view returns ( bool convertable, uint256 convertableFrom, uint256 convertableEnd, bool redeemable, uint256 redeemableFrom, uint256 redeemableEnd, uint256 maturity );\n  function convert ( uint256 amount_ ) external;\n  function convertAndStake ( uint256 amount_ ) external;\n  function depositAllToRemote (  ) external;\n  function depositToRemote ( uint256 amount_ ) external;\n  function emergencyTransferUnderlyingTokens ( address to_ ) external;\n  function extendPancakeLockDuration ( bool force_ ) external;\n  function feeSpecs ( uint256  ) external view returns ( string calldata desc, uint16 rate, address receiver );\n  function feeSpecsLength (  ) external view returns ( uint256  );\n  function initialize ( address bondToken_, address underlyingToken_, address admin_ ) external;\n  function keeper (  ) external view returns ( address  );\n  function mintBondTokenForRewards ( address to_, uint256 amount_ ) external returns ( uint256 totalFeeAmount );\n  function pancakeUserInfo (  ) external view returns ( UserInfo memory  );\n  function pause (  ) external;\n  function paused (  ) external view returns ( bool  );\n  function redeem ( uint256 amount_ ) external;\n  function redeemAll (  ) external;\n  function remoteUnderlyingAmount (  ) external view returns ( uint256  );\n  function removeFeeSpec ( uint256 feeSpecIndex_ ) external;\n  function secondsToPancakeLockExtend ( bool deposit_ ) external view returns ( uint256 secondsToExtend );\n  function setAdmin ( address newAdmin ) external;\n  function setCakePool ( address cakePool_ ) external;\n  function setConvertable ( bool convertable_ ) external;\n  function setFarmingPools ( address bondPool_, address lpPool_ ) external;\n  function setFeeSpec ( uint256 feeId_, FeeSpec calldata feeSpec_ ) external;\n  function setKeeper ( address newKeeper ) external;\n  function setRedeemable ( bool redeemable_ ) external;\n  function totalBondTokenAmount (  ) external view returns ( uint256  );\n  function totalPendingRewards (  ) external view returns ( uint256  );\n  function totalUnderlyingAmount (  ) external view returns ( uint256  );\n  function underlyingAmount (  ) external view returns ( uint256  );\n  function underlyingToken (  ) external view returns ( address  );\n  function unpause (  ) external;\n  function updateCheckPoints ( CheckPoints calldata checkPoints_ ) external;\n  function withdrawAllCakesFromPancake ( bool makeRedeemable_ ) external;\n}\n"
    },
    "@private/shared/interfaces/ebcake/underlyings/pancake/IBondLPPancakeFarmingPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\ninterface IBondLPPancakeFarmingPool {\n  function ACC_REWARDS_PRECISION (  ) external view returns ( uint256  );\n  function accPancakeRewardsPerShares (  ) external view returns ( uint256  );\n  function accRewardPerShare (  ) external view returns ( uint256  );\n  function admin (  ) external view returns ( address  );\n  function bond (  ) external view returns ( address  );\n  function bondRewardsSuspended (  ) external view returns ( bool  );\n  function bondToken (  ) external view returns ( address  );\n  function cakeToken (  ) external view returns ( address  );\n  function claimBonuses (  ) external;\n  function getUserPendingRewards ( address user_ ) external view returns ( uint256  );\n  function initPancake ( address cakeToken_, address pancakeMasterChef_, uint256 pancakeMasterChefPid_ ) external;\n  function initialize ( address bondToken_, address bond_, address admin_ ) external;\n  function lastUpdatedPoolAt (  ) external view returns ( uint256  );\n  function lpToken (  ) external view returns ( address  );\n  function masterChef (  ) external view returns ( address  );\n  function masterChefPid (  ) external view returns ( uint256  );\n  function pancakeMasterChef (  ) external view returns ( address  );\n  function pancakeMasterChefPid (  ) external view returns ( uint256  );\n  function pancakeUsersInfo ( address  ) external view returns ( uint256 rewardDebt, uint256 pendingRewards, uint256 claimedRewards );\n  function paused (  ) external view returns ( bool  );\n  function remoteEnable (  ) external;\n  function remoteEnabled (  ) external view returns ( bool  );\n  function setAdmin ( address newAdmin ) external;\n  function setBondRewardsSuspended ( bool suspended_ ) external;\n  function setLpToken ( address lpToken_ ) external;\n  function setMasterChef ( address masterChef_, uint256 masterChefPid_ ) external;\n  function setSiblingPool ( address siblingPool_ ) external;\n  function siblingPool (  ) external view returns ( address  );\n  function stake ( uint256 amount_ ) external;\n  function stakeForUser ( address user_, uint256 amount_ ) external;\n  function totalLpAmount (  ) external view returns ( uint256  );\n  function totalPendingRewards (  ) external view returns ( uint256  );\n  function unstake ( uint256 amount_ ) external;\n  function unstakeAll (  ) external;\n  function updatePool (  ) external;\n  function usersInfo ( address  ) external view returns ( uint256 lpAmount, uint256 rewardDebt, uint256 pendingRewards, uint256 claimedRewards );\n}\n"
    },
    "contracts/ExtendableBondReader.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\nimport \"@private/shared/interfaces/ebcake/IBondToken.sol\";\nimport \"@private/shared/interfaces/ebcake/IExtendableBond.sol\";\nimport \"@private/shared/interfaces/ebcake/IMultiRewardsMasterChef.sol\";\nimport \"@private/shared/interfaces/ebcake/IBondFarmingPool.sol\";\nimport \"@private/shared/interfaces/ebcake/IBondLPFarmingPool.sol\";\n\n\nabstract contract ExtendableBondReader {\n\n    uint constant BLOCKS_PER_YEAR = (60 / 3) * 60 * 24 * 365;\n\n    struct ExtendableBondPackagePublicInfo {\n        string name;\n        string symbol;\n        uint8 decimals;\n\n        uint256 underlyingUsdPrice;\n        uint256 bondUnderlyingPrice;\n\n        bool convertable;\n        uint256 convertableFrom;\n        uint256 convertableEnd;\n        bool redeemable;\n        uint256 redeemableFrom;\n        uint256 redeemableEnd;\n        uint256 maturity;\n\n        uint256 underlyingAPY;\n        uint256 singleStake_totalStaked;\n        uint256 singleStake_bDuetAPR;\n        uint256 lpStake_totalStaked;\n        uint256 lpStake_bDuetAPR;\n        // uint256 lpStake_extraAPY;\n    }\n\n    struct ExtendableBondSingleStakePackageUserInfo {\n        int256 singleStake_staked;\n        int256 singleStake_ebEarnedToDate;\n        uint256 singleStake_bDuetPendingRewards;\n        uint256 singleStake_bDuetClaimedRewards;\n    }\n\n    struct ExtendableBondLpStakePackageUserInfo {\n        uint256 lpStake_underlyingStaked;\n        uint256 lpStake_bondStaked;\n        uint256 lpStake_lpStaked;\n        uint256 lpStake_ebPendingRewards;\n        uint256 lpStake_lpClaimedRewards;\n        uint256 lpStake_bDuetPendingRewards;\n        uint256 lpStake_bDuetClaimedRewards;\n    }\n\n    // -------------\n\n\n    function extendableBondPackagePublicInfo(IExtendableBond eb_) view external returns (ExtendableBondPackagePublicInfo memory) {\n        IBondFarmingPool bondFarmingPool = IBondFarmingPool(eb_.bondFarmingPool());\n        IBondLPFarmingPool bondLPFarmingPool = IBondLPFarmingPool(eb_.bondLPFarmingPool());\n        (\n            bool convertable,\n            uint256 convertableFrom,\n            uint256 convertableEnd,\n            bool redeemable,\n            uint256 redeemableFrom,\n            uint256 redeemableEnd,\n            uint256 maturity\n        ) = eb_.checkPoints();\n        ERC20 token = ERC20(eb_.bondToken());\n\n        ExtendableBondPackagePublicInfo memory packageInfo = ExtendableBondPackagePublicInfo({\n            name: token.name(),\n            symbol: token.symbol(),\n            decimals: token.decimals(),\n\n            underlyingUsdPrice: _unsafely_getUnderlyingPriceAsUsd(eb_),\n            bondUnderlyingPrice: _getBondPriceAsUnderlying(eb_),\n\n            convertable: convertable,\n            convertableFrom: convertableFrom,\n            convertableEnd: convertableEnd,\n            redeemable: redeemable,\n            redeemableFrom: redeemableFrom,\n            redeemableEnd: redeemableEnd,\n            maturity: maturity,\n\n            underlyingAPY: _getUnderlyingAPY(eb_),\n            singleStake_totalStaked: bondFarmingPool.underlyingAmount(false),\n            singleStake_bDuetAPR: _getSingleStake_bDuetAPR(eb_),\n            lpStake_totalStaked: bondLPFarmingPool.totalLpAmount(),\n            lpStake_bDuetAPR: _getLpStake_bDuetAPR(eb_)\n            // // lpStake_extraAPY: _getLpStake_extraAPR(eb_) ??\n        });\n        return packageInfo;\n    }\n\n    function extendableBondSingleStakePackageUserInfo(IExtendableBond eb_) view external returns (ExtendableBondSingleStakePackageUserInfo memory) {\n        address user = msg.sender;\n        require(user != address(0), \"Invalid sender address\");\n\n        IBondFarmingPool bondFarmingPool = IBondFarmingPool(eb_.bondFarmingPool());\n\n        ( uint256 bondFarmingUsershares, ) = bondFarmingPool.usersInfo(user);\n\n        uint256 singleStake_bDuetPendingRewards = _getPendingRewardsAmount(eb_, bondFarmingPool.masterChefPid(), user);\n        uint256 claimedRewardsAmount = _getUserClaimedRewardsAmount(eb_, bondFarmingPool.masterChefPid(), user);\n\n        ExtendableBondSingleStakePackageUserInfo memory packageInfo = ExtendableBondSingleStakePackageUserInfo({\n            singleStake_staked: int256(bondFarmingPool.sharesToBondAmount(bondFarmingUsershares)),\n            singleStake_ebEarnedToDate: bondFarmingPool.earnedToDate(user),\n            singleStake_bDuetPendingRewards: singleStake_bDuetPendingRewards,\n            singleStake_bDuetClaimedRewards: claimedRewardsAmount\n        });\n        return packageInfo;\n    }\n\n    function extendableBondLpStakePackageUserInfo(IExtendableBond eb_) view external returns (ExtendableBondLpStakePackageUserInfo memory) {\n        address user = msg.sender;\n        require(user != address(0), \"Invalid sender address\");\n\n        IBondLPFarmingPool bondLPFarmingPool = IBondLPFarmingPool(eb_.bondLPFarmingPool());\n        ( uint256 lpStake_lpStaked, , , uint256 lpClaimedRewards )\n            = bondLPFarmingPool.usersInfo(user);\n        ( uint256 lpStake_underlyingStaked, uint256 lpStake_bondStaked )\n            = _getLpStakeDetail(eb_, lpStake_lpStaked);\n\n        uint256 lpStake_bDuetPendingRewards = _getPendingRewardsAmount(eb_, _getEbFarmingPoolId(eb_), user);\n        uint256 lpStake_ebPendingRewards = bondLPFarmingPool.getUserPendingRewards(user);\n\n        uint256 bDuetClaimedRewardsAmount = _getUserClaimedRewardsAmount(eb_, _getEbFarmingPoolId(eb_), user);\n\n        ExtendableBondLpStakePackageUserInfo memory packageInfo = ExtendableBondLpStakePackageUserInfo({\n            lpStake_underlyingStaked: lpStake_underlyingStaked,\n            lpStake_bondStaked: lpStake_bondStaked,\n            lpStake_lpStaked: lpStake_lpStaked,\n            lpStake_ebPendingRewards: lpStake_ebPendingRewards,\n            lpStake_lpClaimedRewards: lpClaimedRewards,\n            lpStake_bDuetPendingRewards: lpStake_bDuetPendingRewards,\n            lpStake_bDuetClaimedRewards: bDuetClaimedRewardsAmount\n        });\n        return packageInfo;\n    }\n\n    // -------------\n\n    function _unsafely_getDuetPriceAsUsd(IExtendableBond eb_) view internal virtual returns (uint256) {}\n\n    function _unsafely_getUnderlyingPriceAsUsd(IExtendableBond eb_) view internal virtual returns (uint256) {}\n\n    function _getBondPriceAsUnderlying(IExtendableBond eb_) view internal virtual returns (uint256) {}\n\n    function _getLpStackedReserves(IExtendableBond eb_) view internal virtual returns (uint256, uint256) {}\n\n    function _getLpStackedTotalSupply(IExtendableBond eb_) view internal virtual returns (uint256) {}\n\n    function _getEbFarmingPoolId(IExtendableBond eb_) view internal virtual returns (uint256) {}\n\n    function _getUnderlyingAPY(IExtendableBond eb_) view internal virtual returns (uint256) {}\n\n    // function _getLpStake_extraAPR(IExtendableBond eb_) view internal virtual returns (uint256) {}\n\n    // -------------\n\n    function _getSingleStake_bDuetAPR(IExtendableBond eb_) view internal returns (uint256) {\n        IBondFarmingPool bondFarmingPool = IBondFarmingPool(eb_.bondFarmingPool());\n        return _getBDuetAPR(eb_, bondFarmingPool.masterChefPid());\n    }\n\n    function _getLpStake_bDuetAPR(IExtendableBond eb_) view internal returns (uint256) {\n        return _getBDuetAPR(eb_, _getEbFarmingPoolId(eb_));\n    }\n\n    // @TODO: extract as utils\n    function _getBDuetAPR(IExtendableBond eb_, uint256 pid_) view internal returns (uint256 apr) {\n        uint256 bondTokenBalance = IBondToken(eb_.bondToken()).totalSupply();\n        if (bondTokenBalance == 0) return apr;\n\n        IBondFarmingPool bondFarmingPool = IBondFarmingPool(eb_.bondFarmingPool());\n        IMultiRewardsMasterChef mMasterChef = IMultiRewardsMasterChef(bondFarmingPool.masterChef());\n\n        uint256 totalAllocPoint = mMasterChef.totalAllocPoint();\n        if (totalAllocPoint == 0) return apr;\n\n        uint256 unsafe_duetPriceAsUsd = _unsafely_getDuetPriceAsUsd(eb_);\n        uint256 underlyingPriceAsUsd = _unsafely_getUnderlyingPriceAsUsd(eb_);\n        if (underlyingPriceAsUsd == 0) return apr;\n\n        ( , uint256 allocPoint, , , ) = mMasterChef.poolInfo(pid_);\n        for (uint256 rewardId; rewardId < mMasterChef.getRewardSpecsLength(); rewardId++) {\n            ( , uint256 rewardPerBlock, , , ) = mMasterChef.rewardSpecs(rewardId);\n            apr += rewardPerBlock * 1e4 * allocPoint\n                    / totalAllocPoint\n                    * BLOCKS_PER_YEAR\n                    * unsafe_duetPriceAsUsd\n                    / (bondTokenBalance * underlyingPriceAsUsd);\n        }\n    }\n\n    function _getUserClaimedRewardsAmount(IExtendableBond eb_, uint pid_, address user_) view internal returns (uint256 amount) {\n        IBondFarmingPool bondFarmingPool = IBondFarmingPool(eb_.bondFarmingPool());\n        IMultiRewardsMasterChef mMasterChef = IMultiRewardsMasterChef(bondFarmingPool.masterChef());\n\n        for (uint256 rewardId; rewardId < mMasterChef.getRewardSpecsLength(); rewardId++) {\n            amount += mMasterChef.getUserClaimedRewards(pid_, user_, rewardId);\n        }\n    }\n\n    function _getPendingRewardsAmount(IExtendableBond eb_, uint pid_, address user_) view internal returns (uint256 amount) {\n        IBondFarmingPool bondFarmingPool = IBondFarmingPool(eb_.bondFarmingPool());\n        IMultiRewardsMasterChef mMasterChef = IMultiRewardsMasterChef(bondFarmingPool.masterChef());\n\n        IMultiRewardsMasterChef.RewardInfo[] memory rewardInfos = mMasterChef.pendingRewards(pid_, user_);\n        for (uint256 rewardId; rewardId < mMasterChef.getRewardSpecsLength(); rewardId++) {\n            amount += rewardInfos[rewardId].amount;\n        }\n    }\n\n     function _getLpStakeDetail(IExtendableBond eb_, uint256 lpStaked) view internal returns (\n        uint256 lpStake_underlyingStaked, uint256 lpStake_bondStaked\n    ) {\n        uint256 lpStackTotalSupply = _getLpStackedTotalSupply(eb_);\n\n        ( uint256 lpStake_underlyingReserve, uint256 lpStake_bondReserve ) = _getLpStackedReserves(eb_);\n        lpStake_underlyingStaked = lpStake_underlyingReserve * lpStaked / lpStackTotalSupply;\n        lpStake_bondStaked = lpStake_bondReserve * lpStaked / lpStackTotalSupply;\n    }\n\n}\n\n"
    },
    "contracts/ExtendableBondRegistry.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\npragma abicoder v2;\n\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nimport \"@private/shared/libs/Adminable.sol\";\n\n\ncontract ExtendableBondRegistry is Initializable, Adminable {\n\n    string[] private groups;\n    mapping(string => address[]) private groupedExtendableBonds;\n\n    event GroupCreated(string indexed groupTopic);\n    event GroupDestroyed(string indexed groupTopic);\n    event GroupItemAppended(string indexed groupTopic, address item);\n    event GroupItemRemoved(string indexed groupTopic, address item);\n\n    // --------------\n\n    function initialize(address admin_) public initializer {\n        require(admin_ != address(0), \"Cant set admin to zero address\");\n        _setAdmin(admin_);\n    }\n\n    function groupNames() view external returns (string[] memory) {\n        return groups;\n    }\n\n    function groupedAddresses(string calldata groupName_) view external returns (address[] memory) {\n        return groupedExtendableBonds[groupName_];\n    }\n\n    // --------------\n\n\n    function createGroup(\n        string calldata groupName_\n    ) external onlyAdmin {\n        for (uint256 i; i< groups.length; i++) {\n            if (keccak256(abi.encodePacked(groups[i])) == keccak256(abi.encodePacked(groupName_))) {\n                revert('Duplicate group name');\n            }\n        }\n        address[] memory newList;\n        groupedExtendableBonds[groupName_] = newList;\n        groups.push(groupName_);\n        emit GroupCreated(groupName_);\n    }\n\n    function destroyGroup(\n        string calldata groupName_\n    ) external onlyAdmin {\n        int256 indexOf = -1;\n        for (uint256 i; i< groups.length; i++) {\n            if (keccak256(abi.encodePacked(groups[i])) == keccak256(abi.encodePacked(groupName_))) {\n                indexOf = int256(i);\n                break;\n            }\n        }\n        if (indexOf < 0) revert('Unregistred group name');\n        groups[uint256(indexOf)] = groups[groups.length - 1];\n        groups.pop();\n        delete groupedExtendableBonds[groupName_];\n        emit GroupDestroyed(groupName_);\n    }\n\n    function appendGroupItem(\n        string calldata groupName_,\n        address itemAddress_\n    ) external onlyAdmin onlyGroupNameRegistered(groupName_) {\n        address[] storage group = groupedExtendableBonds[groupName_];\n        for (uint256 i; i < group.length; i++) {\n            if (group[i] == itemAddress_) revert('Duplicate address in group');\n        }\n        group.push(itemAddress_);\n        emit GroupItemAppended(groupName_, itemAddress_);\n    }\n\n\n    function removeGroupItem(\n        string calldata groupName_,\n        address itemAddress_\n    ) external onlyAdmin onlyGroupNameRegistered(groupName_) {\n        address[] storage group = groupedExtendableBonds[groupName_];\n        if (group.length == 0) return;\n        for (uint256 i = group.length - 1; i >= 0; i--) {\n            if (group[i] != itemAddress_) continue;\n            group[i] = group[group.length - 1];\n            group.pop();\n            emit GroupItemRemoved(groupName_, itemAddress_);\n            break;\n        }\n    }\n\n    // --------------\n\n\n    modifier onlyGroupNameRegistered(string calldata groupName_) virtual {\n        bool found;\n        for (uint256 i; i< groups.length; i++) {\n            if (keccak256(abi.encodePacked(groups[i])) == keccak256(abi.encodePacked(groupName_))) {\n                found = true;\n                break;\n            }\n        }\n        require(found, 'Unregistred group name');\n\n        _;\n    }\n\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@private/shared/libs/SafeBEP20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"./IBEP20.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\n/**\n * @title SafeBEP20\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeBEP20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(\n        IBEP20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IBEP20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IBEP20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IBEP20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeBEP20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IBEP20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IBEP20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\n            value,\n            \"SafeBEP20: decreased allowance below zero\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeBEP20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeBEP20: BEP20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@private/shared/libs/IBEP20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ninterface IBEP20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the token decimals.\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the token symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the token name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the bep token owner.\n     */\n    function getOwner() external view returns (address);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address _owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@private/shared/interfaces/ebcake/IBondToken.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\ninterface IBondToken {\n  function allowance ( address owner, address spender ) external view returns ( uint256  );\n  function approve ( address spender, uint256 amount ) external returns ( bool  );\n  function balanceOf ( address account ) external view returns ( uint256  );\n  function burnFrom ( address account_, uint256 amount_ ) external;\n  function decimals (  ) external view returns ( uint8  );\n  function decreaseAllowance ( address spender, uint256 subtractedValue ) external returns ( bool  );\n  function increaseAllowance ( address spender, uint256 addedValue ) external returns ( bool  );\n  function mint ( address to_, uint256 amount_ ) external;\n  function minter (  ) external view returns ( address  );\n  function name (  ) external view returns ( string calldata  );\n  function owner (  ) external view returns ( address  );\n  function renounceOwnership (  ) external;\n  function setMinter ( address minter_ ) external;\n  function symbol (  ) external view returns ( string calldata  );\n  function totalSupply (  ) external view returns ( uint256  );\n  function transfer ( address to, uint256 amount ) external returns ( bool  );\n  function transferFrom ( address from, address to, uint256 amount ) external returns ( bool  );\n  function transferOwnership ( address newOwner ) external;\n}\n"
    },
    "@private/shared/interfaces/ebcake/IMultiRewardsMasterChef.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\ninterface IMultiRewardsMasterChef {\n  struct RewardInfo { address token; uint256 amount; }\n  function add ( uint256 _allocPoint, address _lpToken, address _proxyFarmer, bool _withUpdate ) external returns ( uint256 pid );\n  function addRewardSpec ( address token, uint256 rewardPerBlock, uint256 startedAtBlock, uint256 endedAtBlock ) external returns ( uint256 rewardId );\n  function admin (  ) external view returns ( address  );\n  function deposit ( uint256 _pid, uint256 _amount ) external;\n  function depositForUser ( uint256 _pid, uint256 _amount, address user_ ) external;\n  function emergencyWithdraw ( uint256 _pid ) external;\n  function getMultiplier ( uint256 _from, uint256 _to, uint256 rewardId ) external view returns ( uint256  );\n  function getRewardSpecsLength (  ) external view returns ( uint256  );\n  function getUserAmount ( uint256 pid_, address user_ ) external view returns ( uint256  );\n  function getUserClaimedRewards ( uint256 pid_, address user_, uint256 rewardId_ ) external view returns ( uint256  );\n  function getUserRewardDebt ( uint256 pid_, address user_, uint256 rewardId_ ) external view returns ( uint256  );\n  function initialize ( address admin_ ) external;\n  function massUpdatePools (  ) external;\n  function migrate ( uint256 _pid ) external;\n  function migrator (  ) external view returns ( address  );\n  function pendingRewards ( uint256 _pid, address _user ) external view returns ( RewardInfo[] memory  );\n  function poolInfo ( uint256  ) external view returns ( address lpToken, uint256 allocPoint, uint256 lastRewardBlock, address proxyFarmer, uint256 totalAmount );\n  function poolLength (  ) external view returns ( uint256  );\n  function poolsRewardsAccRewardsPerShare ( uint256 , uint256  ) external view returns ( uint256  );\n  function previewSetRewardSpec ( uint256 rewardId, uint256 rewardPerBlock, uint256 startedAtBlock, uint256 endedAtBlock ) external view returns ( uint256 depositAmount, uint256 refundAmount );\n  function rewardSpecs ( uint256  ) external view returns ( address token, uint256 rewardPerBlock, uint256 startedAtBlock, uint256 endedAtBlock, uint256 claimedAmount );\n  function set ( uint256 _pid, uint256 _allocPoint, bool _withUpdate ) external;\n  function setAdmin ( address admin_ ) external;\n  function setMigrator ( address _migrator ) external;\n  function setRewardSpec ( uint256 rewardId, uint256 rewardPerBlock, uint256 startedAtBlock, uint256 endedAtBlock ) external;\n  function totalAllocPoint (  ) external view returns ( uint256  );\n  function updatePool ( uint256 _pid ) external;\n  function userInfo ( uint256 , address  ) external view returns ( uint256 amount );\n  function withdraw ( uint256 _pid, uint256 _amount ) external;\n  function withdrawForUser ( uint256 _pid, uint256 _amount, address user_ ) external;\n}\n"
    },
    "@private/shared/interfaces/ebcake/IBondFarmingPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\ninterface IBondFarmingPool {\n  function admin (  ) external view returns ( address  );\n  function amountToShares ( uint256 amount_ ) external view returns ( uint256  );\n  function bond (  ) external view returns ( address  );\n  function bondToken (  ) external view returns ( address  );\n  function claimBonuses (  ) external;\n  function earnedToDate ( address user_ ) external view returns ( int256  );\n  function initialize ( address bondToken_, address bond_, address admin_ ) external;\n  function lastUpdatedPoolAt (  ) external view returns ( uint256  );\n  function masterChef (  ) external view returns ( address  );\n  function masterChefPid (  ) external view returns ( uint256  );\n  function paused (  ) external view returns ( bool  );\n  function pendingRewardsByShares ( uint256 shares_ ) external view returns ( uint256  );\n  function setAdmin ( address newAdmin ) external;\n  function setMasterChef ( address masterChef_, uint256 masterChefPid_ ) external;\n  function setSiblingPool ( address siblingPool_ ) external;\n  function sharesToBondAmount ( uint256 shares_ ) external view returns ( uint256  );\n  function siblingPool (  ) external view returns ( address  );\n  function stake ( uint256 amount_ ) external;\n  function stakeForUser ( address user_, uint256 amount_ ) external;\n  function totalPendingRewards (  ) external view returns ( uint256  );\n  function totalShares (  ) external view returns ( uint256  );\n  function underlyingAmount ( bool exclusiveFees ) external view returns ( uint256  );\n  function unstake ( uint256 shares_ ) external;\n  function unstakeAll (  ) external;\n  function unstakeByAmount ( uint256 amount_ ) external;\n  function updatePool (  ) external;\n  function usersInfo ( address  ) external view returns ( uint256 shares, int256 accNetStaked );\n}\n"
    },
    "@private/shared/interfaces/ebcake/IBondLPFarmingPool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.9;\n\ninterface IBondLPFarmingPool {\n  function ACC_REWARDS_PRECISION (  ) external view returns ( uint256  );\n  function accRewardPerShare (  ) external view returns ( uint256  );\n  function admin (  ) external view returns ( address  );\n  function bond (  ) external view returns ( address  );\n  function bondRewardsSuspended (  ) external view returns ( bool  );\n  function bondToken (  ) external view returns ( address  );\n  function claimBonuses (  ) external;\n  function getUserPendingRewards ( address user_ ) external view returns ( uint256  );\n  function initialize ( address bondToken_, address bond_, address admin_ ) external;\n  function lastUpdatedPoolAt (  ) external view returns ( uint256  );\n  function lpToken (  ) external view returns ( address  );\n  function masterChef (  ) external view returns ( address  );\n  function masterChefPid (  ) external view returns ( uint256  );\n  function paused (  ) external view returns ( bool  );\n  function setAdmin ( address newAdmin ) external;\n  function setBondRewardsSuspended ( bool suspended_ ) external;\n  function setLpToken ( address lpToken_ ) external;\n  function setMasterChef ( address masterChef_, uint256 masterChefPid_ ) external;\n  function setSiblingPool ( address siblingPool_ ) external;\n  function siblingPool (  ) external view returns ( address  );\n  function stake ( uint256 amount_ ) external;\n  function stakeForUser ( address user_, uint256 amount_ ) external;\n  function totalLpAmount (  ) external view returns ( uint256  );\n  function totalPendingRewards (  ) external view returns ( uint256  );\n  function unstake ( uint256 amount_ ) external;\n  function unstakeAll (  ) external;\n  function updatePool (  ) external;\n  function usersInfo ( address  ) external view returns ( uint256 lpAmount, uint256 rewardDebt, uint256 pendingRewards, uint256 claimedRewards );\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x00000000d41867734bbee4c6863d9255b2b06ac1"
      }
    }
  }
}